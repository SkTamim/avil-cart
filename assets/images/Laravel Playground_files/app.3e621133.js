(function(s){function e(e){for(var n,o,p=e[0],c=e[1],r=e[2],i=0,d=[];i<p.length;i++)o=p[i],Object.prototype.hasOwnProperty.call(t,o)&&t[o]&&d.push(t[o][0]),t[o]=0;for(n in c)Object.prototype.hasOwnProperty.call(c,n)&&(s[n]=c[n]);h&&h(e);while(d.length)d.shift()();return l.push.apply(l,r||[]),a()}function a(){for(var s,e=0;e<l.length;e++){for(var a=l[e],n=!0,o=1;o<a.length;o++){var c=a[o];0!==t[c]&&(n=!1)}n&&(l.splice(e--,1),s=p(p.s=a[0]))}return s}var n={},t={app:0},l=[];function o(s){return p.p+"js/"+({}[s]||s)+"."+{"chunk-12950967":"ac812ab2","chunk-2d0a36db":"4bd1bf8a","chunk-2d0d0645":"ffc57e91","chunk-2d0e57ec":"6260bec9","chunk-2d2308b7":"a4849c14","chunk-76fee5a0":"f80ecea0","chunk-e13e4362":"13b17779"}[s]+".js"}function p(e){if(n[e])return n[e].exports;var a=n[e]={i:e,l:!1,exports:{}};return s[e].call(a.exports,a,a.exports,p),a.l=!0,a.exports}p.e=function(s){var e=[],a=t[s];if(0!==a)if(a)e.push(a[2]);else{var n=new Promise((function(e,n){a=t[s]=[e,n]}));e.push(a[2]=n);var l,c=document.createElement("script");c.charset="utf-8",c.timeout=120,p.nc&&c.setAttribute("nonce",p.nc),c.src=o(s);var r=new Error;l=function(e){c.onerror=c.onload=null,clearTimeout(i);var a=t[s];if(0!==a){if(a){var n=e&&("load"===e.type?"missing":e.type),l=e&&e.target&&e.target.src;r.message="Loading chunk "+s+" failed.\n("+n+": "+l+")",r.name="ChunkLoadError",r.type=n,r.request=l,a[1](r)}t[s]=void 0}};var i=setTimeout((function(){l({type:"timeout",target:c})}),12e4);c.onerror=c.onload=l,document.head.appendChild(c)}return Promise.all(e)},p.m=s,p.c=n,p.d=function(s,e,a){p.o(s,e)||Object.defineProperty(s,e,{enumerable:!0,get:a})},p.r=function(s){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(s,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(s,"__esModule",{value:!0})},p.t=function(s,e){if(1&e&&(s=p(s)),8&e)return s;if(4&e&&"object"===typeof s&&s&&s.__esModule)return s;var a=Object.create(null);if(p.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:s}),2&e&&"string"!=typeof s)for(var n in s)p.d(a,n,function(e){return s[e]}.bind(null,n));return a},p.n=function(s){var e=s&&s.__esModule?function(){return s["default"]}:function(){return s};return p.d(e,"a",e),e},p.o=function(s,e){return Object.prototype.hasOwnProperty.call(s,e)},p.p="/",p.oe=function(s){throw console.error(s),s};var c=window["webpackJsonp"]=window["webpackJsonp"]||[],r=c.push.bind(c);c.push=e,c=c.slice();for(var i=0;i<c.length;i++)e(c[i]);var h=r;l.push([0,"chunk-vendors"]),a()})({0:function(s,e,a){s.exports=a("56d7")},"0155":function(s,e,a){"use strict";a.r(e),e["default"]='<ul>\n<li>\n          <p><a name="the-basics"></a></p>\n          <h2>\n            <a href="#the-basics">\n              The Basics\n            </a>\n          </h2><ul>\n<li><router-link to="/docs/responses">Responses</router-link></li>\n<li><router-link to="/docs/views">Views</router-link></li>\n<li><router-link to="/docs/urls">URL Generation</router-link></li>\n<li><router-link to="/docs/validation">Validation</router-link></li>\n<li><router-link to="/docs/errors">Error Handling</router-link></li>\n</ul>\n</li>\n<li>\n          <p><a name="frontend"></a></p>\n          <h2>\n            <a href="#frontend">\n              Frontend\n            </a>\n          </h2><ul>\n<li><router-link to="/docs/blade">Blade Templates</router-link></li>\n</ul>\n</li>\n<li>\n          <p><a name="security"></a></p>\n          <h2>\n            <a href="#security">\n              Security\n            </a>\n          </h2><ul>\n<li><router-link to="/docs/authentication">Authentication</router-link></li>\n</ul>\n</li>\n<li>\n          <p><a name="digging-deeper"></a></p>\n          <h2>\n            <a href="#digging-deeper">\n              Digging Deeper\n            </a>\n          </h2><ul>\n<li><router-link to="/docs/cache">Cache</router-link></li>\n<li><router-link to="/docs/collections">Collections</router-link></li>\n<li><router-link to="/docs/helpers">Helpers</router-link></li>\n</ul>\n</li>\n<li>\n          <p><a name="database"></a></p>\n          <h2>\n            <a href="#database">\n              Database\n            </a>\n          </h2><ul>\n<li><router-link to="/docs/database">Getting Started</router-link></li>\n<li><router-link to="/docs/queries">Query Builder</router-link></li>\n<li><router-link to="/docs/pagination">Pagination</router-link></li>\n</ul>\n</li>\n<li>\n          <p><a name="eloquent-orm"></a></p>\n          <h2>\n            <a href="#eloquent-orm">\n              Eloquent ORM\n            </a>\n          </h2><ul>\n<li><router-link to="/docs/eloquent">Getting Started</router-link></li>\n<li><router-link to="/docs/eloquent-relationships">Relationships</router-link></li>\n<li><router-link to="/docs/eloquent-collections">Collections</router-link></li>\n<li><router-link to="/docs/eloquent-mutators">Mutators</router-link></li>\n<li><router-link to="/docs/eloquent-serialization">Serialization</router-link></li>\n</ul>\n</li>\n</ul>\n'},"04f5":function(s,e,a){},"0b91":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="database-testing"></a></p>\n          <h1>\n            <a href="#database-testing">\n              Database Testing\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#generating-factories">Generating Factories</a></li>\n<li><a href="#resetting-the-database-after-each-test">Resetting The Database After Each Test</a></li>\n<li><a href="#writing-factories">Writing Factories</a><ul>\n<li><a href="#factory-states">Factory States</a></li>\n<li><a href="#factory-callbacks">Factory Callbacks</a></li>\n</ul>\n</li>\n<li><a href="#using-factories">Using Factories</a><ul>\n<li><a href="#creating-models">Creating Models</a></li>\n<li><a href="#persisting-models">Persisting Models</a></li>\n<li><a href="#relationships">Relationships</a></li>\n</ul>\n</li>\n<li><a href="#using-seeds">Using Seeds</a></li>\n<li><a href="#available-assertions">Available Assertions</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Laravel provides a variety of helpful tools to make it easier to test your database driven applications. First, you may use the <code>assertDatabaseHas</code> helper to assert that data exists in the database matching a given set of criteria. For example, if you would like to verify that there is a record in the <code>users</code> table with the <code>email</code> value of <code>sally@example.com</code>, you can do the following:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testDatabase</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-comment">// Make call to application...</span>\n\n    <span class="hljs-keyword">$this</span>-&gt;assertDatabaseHas(<span class="hljs-string">\'users\'</span>, [\n        <span class="hljs-string">\'email\'</span> =&gt; <span class="hljs-string">\'sally@example.com\'</span>,\n    ]);\n}</code></pre>\n  <p>You can also use the <code>assertDatabaseMissing</code> helper to assert that data does not exist in the database.</p>\n<p>The <code>assertDatabaseHas</code> method and other helpers like it are for convenience. You are free to use any of PHPUnit&#39;s built-in assertion methods to supplement your tests.</p>\n<p><a name="generating-factories"></a></p>\n\n          <p><a name="generating-factories"></a></p>\n          <h2>\n            <a href="#generating-factories">\n              Generating Factories\n            </a>\n          </h2><p>To create a factory, use the <code>make:factory</code> <router-link to="/docs/{{version}}/artisan">Artisan command</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">make</span><span class="hljs-selector-pseudo">:factory</span> <span class="hljs-selector-tag">PostFactory</span></code></pre>\n  <p>The new factory will be placed in your <code>database/factories</code> directory.</p>\n<p>The <code>--model</code> option may be used to indicate the name of the model created by the factory. This option will pre-fill the generated factory file with the given model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan make:factory PostFactory <span class="hljs-attribute">--model</span>=Post</code></pre>\n  <p><a name="resetting-the-database-after-each-test"></a></p>\n\n          <p><a name="resetting-the-database-after-each-test"></a></p>\n          <h2>\n            <a href="#resetting-the-database-after-each-test">\n              Resetting The Database After Each Test\n            </a>\n          </h2><p>It is often useful to reset your database after each test so that data from a previous test does not interfere with subsequent tests. The <code>RefreshDatabase</code> trait takes the most optimal approach to migrating your test database depending on if you are using an in-memory database or a traditional database. Use the trait on your test class and everything will be handled for you:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">Feature</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">RefreshDatabase</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">WithoutMiddleware</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">TestCase</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExampleTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">RefreshDatabase</span>;\n\n    <span class="hljs-comment">/**\n     * A basic functional test example.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testBasicExample</span><span class="hljs-params">()</span>\n    </span>{\n        $response = <span class="hljs-keyword">$this</span>-&gt;get(<span class="hljs-string">\'/\'</span>);\n\n        <span class="hljs-comment">// ...</span>\n    }\n}</span></code></pre>\n  <p><a name="writing-factories"></a></p>\n\n          <p><a name="writing-factories"></a></p>\n          <h2>\n            <a href="#writing-factories">\n              Writing Factories\n            </a>\n          </h2><p>When testing, you may need to insert a few records into your database before executing your test. Instead of manually specifying the value of each column when you create this test data, Laravel allows you to define a default set of attributes for each of your <router-link to="/docs/{{version}}/eloquent">Eloquent models</router-link> using model factories. To get started, take a look at the <code>database/factories/UserFactory.php</code> file in your application. Out of the box, this file contains one factory definition:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Faker</span>\\<span class="hljs-title">Generator</span> <span class="hljs-title">as</span> <span class="hljs-title">Faker</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Str</span>;\n\n$factory-&gt;define(App\\User::class, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Faker $faker)</span> </span>{\n    <span class="hljs-keyword">return</span> [\n        <span class="hljs-string">\'name\'</span> =&gt; $faker-&gt;name,\n        <span class="hljs-string">\'email\'</span> =&gt; $faker-&gt;unique()-&gt;safeEmail,\n        <span class="hljs-string">\'email_verified_at\'</span> =&gt; now(),\n        <span class="hljs-string">\'password\'</span> =&gt; <span class="hljs-string">\'$2y$10$TKh8H1.PfQx37YgCzwiKb.KjNyWgaHb9cbcoQgdIVFlYg7B77UdFm\'</span>, <span class="hljs-comment">// secret</span>\n        <span class="hljs-string">\'remember_token\'</span> =&gt; Str::random(<span class="hljs-number">10</span>),\n    ];\n});</code></pre>\n  <p>Within the Closure, which serves as the factory definition, you may return the default test values of all attributes on the model. The Closure will receive an instance of the <router-link to="https://github.com/fzaninotto/Faker">Faker</router-link> PHP library, which allows you to conveniently generate various kinds of random data for testing.</p>\n<p>You may also create additional factory files for each model for better organization. For example, you could create <code>UserFactory.php</code> and <code>CommentFactory.php</code> files within your <code>database/factories</code> directory. All of the files within the <code>factories</code> directory will automatically be loaded by Laravel.</p>\n<blockquote>\n<p>{tip} You can set the Faker locale by adding a <code>faker_locale</code> option to your <code>config/app.php</code> configuration file.</p>\n</blockquote>\n<p><a name="factory-states"></a></p>\n\n          <p><a name="factory-states"></a></p>\n          <h3>\n            <a href="#factory-states">\n              Factory States\n            </a>\n          </h3><p>States allow you to define discrete modifications that can be applied to your model factories in any combination. For example, your <code>User</code> model might have a <code>delinquent</code> state that modifies one of its default attribute values. You may define your state transformations using the <code>state</code> method. For simple states, you may pass an array of attribute modifications:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$factory-&gt;state(App\\User::class, <span class="hljs-string">\'delinquent\'</span>, [\n    <span class="hljs-string">\'account_status\'</span> =&gt; <span class="hljs-string">\'delinquent\'</span>,\n]);</code></pre>\n  <p>If your state requires calculation or a <code>$faker</code> instance, you may use a Closure to calculate the state&#39;s attribute modifications:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$factory-&gt;state(App\\User::class, <span class="hljs-string">\'address\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($faker)</span> </span>{\n    <span class="hljs-keyword">return</span> [\n        <span class="hljs-string">\'address\'</span> =&gt; $faker-&gt;address,\n    ];\n});</code></pre>\n  <p><a name="factory-callbacks"></a></p>\n\n          <p><a name="factory-callbacks"></a></p>\n          <h3>\n            <a href="#factory-callbacks">\n              Factory Callbacks\n            </a>\n          </h3><p>Factory callbacks are registered using the <code>afterMaking</code> and <code>afterCreating</code> methods, and allow you to perform additional tasks after making or creating a model. For example, you may use callbacks to relate additional models to the created model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$factory-&gt;afterMaking(App\\User::class, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($user, $faker)</span> </span>{\n    <span class="hljs-comment">// ...</span>\n});\n\n$factory-&gt;afterCreating(App\\User::class, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($user, $faker)</span> </span>{\n    $user-&gt;accounts()-&gt;save(factory(App\\Account::class)-&gt;make());\n});</code></pre>\n  <p>You may also define callbacks for <a href="#factory-states">factory states</a>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$factory-&gt;afterMakingState(App\\User::class, <span class="hljs-string">\'delinquent\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($user, $faker)</span> </span>{\n    <span class="hljs-comment">// ...</span>\n});\n\n$factory-&gt;afterCreatingState(App\\User::class, <span class="hljs-string">\'delinquent\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($user, $faker)</span> </span>{\n    <span class="hljs-comment">// ...</span>\n});</code></pre>\n  <p><a name="using-factories"></a></p>\n\n          <p><a name="using-factories"></a></p>\n          <h2>\n            <a href="#using-factories">\n              Using Factories\n            </a>\n          </h2><p><a name="creating-models"></a></p>\n\n          <p><a name="creating-models"></a></p>\n          <h3>\n            <a href="#creating-models">\n              Creating Models\n            </a>\n          </h3><p>Once you have defined your factories, you may use the global <code>factory</code> function in your tests or seed files to generate model instances. So, let&#39;s take a look at a few examples of creating models. First, we&#39;ll use the <code>make</code> method to create models but not save them to the database:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testDatabase</span><span class="hljs-params">()</span>\n</span>{\n    $user = factory(App\\User::class)-&gt;make();\n\n    <span class="hljs-comment">// Use model in tests...</span>\n}</code></pre>\n  <p>You may also create a Collection of many models or create models of a given type:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">// <span class="hljs-keyword">Create</span> three App\\<span class="hljs-keyword">User</span> instances...\n$<span class="hljs-keyword">users</span> = factory(App\\<span class="hljs-keyword">User</span>::<span class="hljs-keyword">class</span>, <span class="hljs-number">3</span>)-&gt;make();</code></pre>\n  \n          <p><a name="applying-states"></a></p>\n          <h4>\n            <a href="#applying-states">\n              Applying States\n            </a>\n          </h4><p>You may also apply any of your <a href="#factory-states">states</a> to the models. If you would like to apply multiple state transformations to the models, you should specify the name of each state you would like to apply:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = factory<span class="hljs-function"><span class="hljs-params">(App<span class="hljs-string">\\User::class,</span> <span class="hljs-number">5</span>)</span>-&gt;</span>states<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'delinquent\'</span>)</span>-&gt;</span>make();\n\n$users = factory<span class="hljs-function"><span class="hljs-params">(App<span class="hljs-string">\\User::class,</span> <span class="hljs-number">5</span>)</span>-&gt;</span>states<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'premium\'</span>, <span class="hljs-string">\'delinquent\'</span>)</span>-&gt;</span>make();</code></pre>\n  \n          <p><a name="overriding-attributes"></a></p>\n          <h4>\n            <a href="#overriding-attributes">\n              Overriding Attributes\n            </a>\n          </h4><p>If you would like to override some of the default values of your models, you may pass an array of values to the <code>make</code> method. Only the specified values will be replaced while the rest of the values remain set to their default values as specified by the factory:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user = factory(App\\User::<span class="hljs-class"><span class="hljs-keyword">class</span>)-&gt;<span class="hljs-title">make</span>([</span>\n    <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Abigail\'</span>,\n]);</code></pre>\n  <blockquote>\n<p>{tip} <router-link to="/docs/{{version}}/eloquent#mass-assignment">Mass assignment protection</router-link> is automatically disabled when creating models using factories.</p>\n</blockquote>\n<p><a name="persisting-models"></a></p>\n\n          <p><a name="persisting-models"></a></p>\n          <h3>\n            <a href="#persisting-models">\n              Persisting Models\n            </a>\n          </h3><p>The <code>create</code> method not only creates the model instances but also saves them to the database using Eloquent&#39;s <code>save</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testDatabase</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-comment">// Create a single App\\User instance...</span>\n    $user = factory(App\\User::class)-&gt;create();\n\n    <span class="hljs-comment">// Create three App\\User instances...</span>\n    $users = factory(App\\User::class, <span class="hljs-number">3</span>)-&gt;create();\n\n    <span class="hljs-comment">// Use model in tests...</span>\n}</code></pre>\n  <p>You may override attributes on the model by passing an array to the <code>create</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user = factory(App\\User::<span class="hljs-class"><span class="hljs-keyword">class</span>)-&gt;<span class="hljs-title">create</span>([</span>\n    <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Abigail\'</span>,\n]);</code></pre>\n  <p><a name="relationships"></a></p>\n\n          <p><a name="relationships"></a></p>\n          <h3>\n            <a href="#relationships">\n              Relationships\n            </a>\n          </h3><p>In this example, we&#39;ll attach a relation to some created models. When using the <code>create</code> method to create multiple models, an Eloquent <router-link to="/docs/{{version}}/eloquent-collections">collection instance</router-link> is returned, allowing you to use any of the convenient functions provided by the collection, such as <code>each</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = factory<span class="hljs-function"><span class="hljs-params">(App<span class="hljs-string">\\User::class,</span> <span class="hljs-number">3</span>)</span>\n           -&gt;</span>create<span class="hljs-function"><span class="hljs-params">()</span>\n           -&gt;</span>each(<span class="hljs-keyword">function</span> ($user) {\n                $user-&gt;posts<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>save<span class="hljs-function"><span class="hljs-params">(factory(App<span class="hljs-string">\\Post::class)-&gt;make());</span>\n            });</span></span></code></pre>\n  <p>You may use the <code>createMany</code> method to create multiple related models:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user-&gt;posts<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>createMany(\n    factory<span class="hljs-function"><span class="hljs-params">(App<span class="hljs-string">\\Post::class,</span> <span class="hljs-number">3</span>)</span>-&gt;</span>make<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>toArray()\n);</code></pre>\n  \n          <p><a name="relations-amp-attribute-closures"></a></p>\n          <h4>\n            <a href="#relations-amp-attribute-closures">\n              Relations &amp; Attribute Closures\n            </a>\n          </h4><p>You may also attach relationships to models in your factory definitions. For example, if you would like to create a new <code>User</code> instance when creating a <code>Post</code>, you may do the following:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$factory-&gt;define(App\\Post::class, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($faker)</span> </span>{\n    <span class="hljs-keyword">return</span> [\n        <span class="hljs-string">\'title\'</span> =&gt; $faker-&gt;title,\n        <span class="hljs-string">\'content\'</span> =&gt; $faker-&gt;paragraph,\n        <span class="hljs-string">\'user_id\'</span> =&gt; factory(App\\User::class),\n    ];\n});</code></pre>\n  <p>If the relationship depends on the factory that defines it you may provide a callback which accepts the evaluated attribute array:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$factory-&gt;define(App\\Post::class, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($faker)</span> </span>{\n    <span class="hljs-keyword">return</span> [\n        <span class="hljs-string">\'title\'</span> =&gt; $faker-&gt;title,\n        <span class="hljs-string">\'content\'</span> =&gt; $faker-&gt;paragraph,\n        <span class="hljs-string">\'user_id\'</span> =&gt; factory(App\\User::class),\n        <span class="hljs-string">\'user_type\'</span> =&gt; <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(array $post)</span> </span>{\n            <span class="hljs-keyword">return</span> App\\User::find($post[<span class="hljs-string">\'user_id\'</span>])-&gt;type;\n        },\n    ];\n});</code></pre>\n  <p><a name="using-seeds"></a></p>\n\n          <p><a name="using-seeds"></a></p>\n          <h2>\n            <a href="#using-seeds">\n              Using Seeds\n            </a>\n          </h2><p>If you would like to use <router-link to="/docs/{{version}}/seeding">database seeders</router-link> to populate your database during a test, you may use the <code>seed</code> method. By default, the <code>seed</code> method will return the <code>DatabaseSeeder</code>, which should execute all of your other seeders. Alternatively, you pass a specific seeder class name to the <code>seed</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">Feature</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">RefreshDatabase</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">WithoutMiddleware</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">OrderStatusesTableSeeder</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">TestCase</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExampleTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">RefreshDatabase</span>;\n\n    <span class="hljs-comment">/**\n     * Test creating a new order.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testCreatingANewOrder</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-comment">// Run the DatabaseSeeder...</span>\n        <span class="hljs-keyword">$this</span>-&gt;seed();\n\n        <span class="hljs-comment">// Run a single seeder...</span>\n        <span class="hljs-keyword">$this</span>-&gt;seed(OrderStatusesTableSeeder::class);\n\n        <span class="hljs-comment">// ...</span>\n    }\n}</span></code></pre>\n  <p><a name="available-assertions"></a></p>\n\n          <p><a name="available-assertions"></a></p>\n          <h2>\n            <a href="#available-assertions">\n              Available Assertions\n            </a>\n          </h2><p>Laravel provides several database assertions for your <router-link to="https://phpunit.de/">PHPUnit</router-link> tests:</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>$this-&gt;assertDatabaseHas($table, array $data);</code></td>\n<td>Assert that a table in the database contains the given data.</td>\n</tr>\n<tr>\n<td><code>$this-&gt;assertDatabaseMissing($table, array $data);</code></td>\n<td>Assert that a table in the database does not contain the given data.</td>\n</tr>\n<tr>\n<td><code>$this-&gt;assertDeleted($table, array $data);</code></td>\n<td>Assert that the given record has been deleted.</td>\n</tr>\n<tr>\n<td><code>$this-&gt;assertSoftDeleted($table, array $data);</code></td>\n<td>Assert that the given record has been soft deleted.</td>\n</tr>\n</tbody></table>\n<p>For convenience, you may pass a model to the <code>assertDeleted</code> and <code>assertSoftDeleted</code> helpers to assert the record was deleted or soft deleted, respectively, from the database based on the model&#39;s primary key.</p>\n<p>For example, if you are using a model factory in your test, you may pass this model to one of these helpers to test your application properly deleted the record from the database:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testDatabase</span><span class="hljs-params">()</span>\n</span>{\n    $user = factory(App\\User::class)-&gt;create();\n\n    <span class="hljs-comment">// Make call to application...</span>\n\n    <span class="hljs-keyword">$this</span>-&gt;assertDeleted($user);\n}</code></pre>\n  '},"0be5":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="eloquent-collections"></a></p>\n          <h1>\n            <a href="#eloquent-collections">\n              Eloquent: Collections\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#available-methods">Available Methods</a></li>\n<li><a href="#custom-collections">Custom Collections</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>All multi-result sets returned by Eloquent are instances of the <code>Illuminate\\Database\\Eloquent\\Collection</code> object, including results retrieved via the <code>get</code> method or accessed via a relationship. The Eloquent collection object extends the Laravel <router-link to="/docs/{{version}}/collections">base collection</router-link>, so it naturally inherits dozens of methods used to fluently work with the underlying array of Eloquent models.</p>\n<p>All collections also serve as iterators, allowing you to loop over them as if they were simple PHP arrays:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = App\\User::where(<span class="hljs-string">\'active\'</span>, <span class="hljs-number">1</span>)-&gt;get();\n\n<span class="hljs-keyword">foreach</span> ($users <span class="hljs-keyword">as</span> $user) {\n    <span class="hljs-keyword">echo</span> $user-&gt;name;\n}</code></pre>\n  <p>However, collections are much more powerful than arrays and expose a variety of map / reduce operations that may be chained using an intuitive interface. For example, let&#39;s remove all inactive models and gather the first name for each remaining user:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = App\\User::all();\n\n$names = $users-&gt;reject(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($user)</span> </span>{\n    <span class="hljs-keyword">return</span> $user-&gt;active === <span class="hljs-keyword">false</span>;\n})\n-&gt;map(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($user)</span> </span>{\n    <span class="hljs-keyword">return</span> $user-&gt;name;\n});</code></pre>\n  <blockquote>\n<p>{note} While most Eloquent collection methods return a new instance of an Eloquent collection, the <code>pluck</code>, <code>keys</code>, <code>zip</code>, <code>collapse</code>, <code>flatten</code> and <code>flip</code> methods return a <router-link to="/docs/{{version}}/collections">base collection</router-link> instance. Likewise, if a <code>map</code> operation returns a collection that does not contain any Eloquent models, it will be automatically cast to a base collection.</p>\n</blockquote>\n<p><a name="available-methods"></a></p>\n\n          <p><a name="available-methods"></a></p>\n          <h2>\n            <a href="#available-methods">\n              Available Methods\n            </a>\n          </h2><p>All Eloquent collections extend the base <router-link to="/docs/{{version}}/collections#available-methods">Laravel collection</router-link> object; therefore, they inherit all of the powerful methods provided by the base collection class.</p>\n<p>In addition, the <code>Illuminate\\Database\\Eloquent\\Collection</code> class provides a superset of methods to aid with managing your model collections. Most methods return <code>Illuminate\\Database\\Eloquent\\Collection</code> instances; however, some methods return a base <code>Illuminate\\Support\\Collection</code> instance.</p>\n<style>\n    #collection-method-list > p {\n        column-count: 1; -moz-column-count: 1; -webkit-column-count: 1;\n        column-gap: 2em; -moz-column-gap: 2em; -webkit-column-gap: 2em;\n    }\n\n    #collection-method-list a {\n        display: block;\n    }\n</style>\n\n<div id="collection-method-list" markdown="1">\n\n<p><a href="#method-contains">contains</a>\n<a href="#method-diff">diff</a>\n<a href="#method-except">except</a>\n<a href="#method-find">find</a>\n<a href="#method-fresh">fresh</a>\n<a href="#method-intersect">intersect</a>\n<a href="#method-load">load</a>\n<a href="#method-loadMissing">loadMissing</a>\n<a href="#method-modelKeys">modelKeys</a>\n<a href="#method-makeVisible">makeVisible</a>\n<a href="#method-makeHidden">makeHidden</a>\n<a href="#method-only">only</a>\n<a href="#method-unique">unique</a></p>\n</div>\n\n<p><a name="method-contains"></a></p>\n\n          <p><a name="-code-contains-key-operator-null-value-null-code-"></a></p>\n          <h4>\n            <a href="#-code-contains-key-operator-null-value-null-code-">\n              <code>contains($key, $operator = null, $value = null)</code>\n            </a>\n          </h4><p>The <code>contains</code> method may be used to determine if a given model instance is contained by the collection. This method accepts a primary key or a model instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-function"><span class="hljs-title">users</span>-&gt;</span><span class="hljs-built_in">contains</span>(<span class="hljs-number">1</span>);\n\n$<span class="hljs-function"><span class="hljs-title">users</span>-&gt;</span><span class="hljs-built_in">contains</span>(User::find(<span class="hljs-number">1</span>));</code></pre>\n  <p><a name="method-diff"></a></p>\n\n          <p><a name="-code-diff-items-code-"></a></p>\n          <h4>\n            <a href="#-code-diff-items-code-">\n              <code>diff($items)</code>\n            </a>\n          </h4><p>The <code>diff</code> method returns all of the models that are not present in the given collection:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n\n$users = $users-&gt;diff(User::whereIn(<span class="hljs-string">\'id\'</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])-&gt;get());</code></pre>\n  <p><a name="method-except"></a></p>\n\n          <p><a name="-code-except-keys-code-"></a></p>\n          <h4>\n            <a href="#-code-except-keys-code-">\n              <code>except($keys)</code>\n            </a>\n          </h4><p>The <code>except</code> method returns all of the models that do not have the given primary keys:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = $users-&gt;except([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);</code></pre>\n  <p><a name="method-find"></a></p>\n\n          <p><a name="-code-find-key-code-collection-method-first-collection-method-"></a></p>\n          <h4>\n            <a href="#-code-find-key-code-collection-method-first-collection-method-">\n              <code>find($key)</code> {#collection-method .first-collection-method}\n            </a>\n          </h4><p>The <code>find</code> method finds a model that has a given primary key. If <code>$key</code> is a model instance, <code>find</code> will attempt to return a model matching the primary key. If <code>$key</code> is an array of keys, <code>find</code> will return all models which match the <code>$keys</code> using <code>whereIn()</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$users</span> = User::all();\n\n<span class="hljs-variable">$user</span> = <span class="hljs-variable">$users</span>-&gt;find(<span class="hljs-number">1</span>);</code></pre>\n  <p><a name="method-fresh"></a></p>\n\n          <p><a name="-code-fresh-with-code-"></a></p>\n          <h4>\n            <a href="#-code-fresh-with-code-">\n              <code>fresh($with = [])</code>\n            </a>\n          </h4><p>The <code>fresh</code> method retrieves a fresh instance of each model in the collection from the database. In addition, any specified relationships will be eager loaded:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$users</span> = <span class="hljs-variable">$users</span>-&gt;fresh();\n\n<span class="hljs-variable">$users</span> = <span class="hljs-variable">$users</span>-&gt;fresh(<span class="hljs-string">\'comments\'</span>);</code></pre>\n  <p><a name="method-intersect"></a></p>\n\n          <p><a name="-code-intersect-items-code-"></a></p>\n          <h4>\n            <a href="#-code-intersect-items-code-">\n              <code>intersect($items)</code>\n            </a>\n          </h4><p>The <code>intersect</code> method returns all of the models that are also present in the given collection:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n\n$users = $users-&gt;intersect(User::whereIn(<span class="hljs-string">\'id\'</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])-&gt;get());</code></pre>\n  <p><a name="method-load"></a></p>\n\n          <p><a name="-code-load-relations-code-"></a></p>\n          <h4>\n            <a href="#-code-load-relations-code-">\n              <code>load($relations)</code>\n            </a>\n          </h4><p>The <code>load</code> method eager loads the given relationships for all models in the collection:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$users</span>-&gt;load(<span class="hljs-string">\'comments\'</span>, <span class="hljs-string">\'posts\'</span>);\n\n<span class="hljs-variable">$users</span>-&gt;load(<span class="hljs-string">\'comments.author\'</span>);</code></pre>\n  <p><a name="method-loadMissing"></a></p>\n\n          <p><a name="-code-loadmissing-relations-code-"></a></p>\n          <h4>\n            <a href="#-code-loadmissing-relations-code-">\n              <code>loadMissing($relations)</code>\n            </a>\n          </h4><p>The <code>loadMissing</code> method eager loads the given relationships for all models in the collection if the relationships are not already loaded:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$users</span>-&gt;loadMissing(<span class="hljs-string">\'comments\'</span>, <span class="hljs-string">\'posts\'</span>);\n\n<span class="hljs-variable">$users</span>-&gt;loadMissing(<span class="hljs-string">\'comments.author\'</span>);</code></pre>\n  <p><a name="method-modelKeys"></a></p>\n\n          <p><a name="-code-modelkeys-code-"></a></p>\n          <h4>\n            <a href="#-code-modelkeys-code-">\n              <code>modelKeys()</code>\n            </a>\n          </h4><p>The <code>modelKeys</code> method returns the primary keys for all models in the collection:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$users</span>-&gt;modelKeys();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]</code></pre>\n  <p><a name="method-makeVisible"></a></p>\n\n          <p><a name="-code-makevisible-attributes-code-"></a></p>\n          <h4>\n            <a href="#-code-makevisible-attributes-code-">\n              <code>makeVisible($attributes)</code>\n            </a>\n          </h4><p>The <code>makeVisible</code> method makes attributes visible that are typically &quot;hidden&quot; on each model in the collection:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$users</span> = <span class="hljs-variable">$users</span>-&gt;makeVisible([<span class="hljs-string">\'address\'</span>, <span class="hljs-string">\'phone_number\'</span>]);</code></pre>\n  <p><a name="method-makeHidden"></a></p>\n\n          <p><a name="-code-makehidden-attributes-code-"></a></p>\n          <h4>\n            <a href="#-code-makehidden-attributes-code-">\n              <code>makeHidden($attributes)</code>\n            </a>\n          </h4><p>The <code>makeHidden</code> method hides attributes that are typically &quot;visible&quot; on each model in the collection:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$users</span> = <span class="hljs-variable">$users</span>-&gt;makeHidden([<span class="hljs-string">\'address\'</span>, <span class="hljs-string">\'phone_number\'</span>]);</code></pre>\n  <p><a name="method-only"></a></p>\n\n          <p><a name="-code-only-keys-code-"></a></p>\n          <h4>\n            <a href="#-code-only-keys-code-">\n              <code>only($keys)</code>\n            </a>\n          </h4><p>The <code>only</code> method returns all of the models that have the given primary keys:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = $users-&gt;only([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);</code></pre>\n  <p><a name="method-unique"></a></p>\n\n          <p><a name="-code-unique-key-null-strict-false-code-"></a></p>\n          <h4>\n            <a href="#-code-unique-key-null-strict-false-code-">\n              <code>unique($key = null, $strict = false)</code>\n            </a>\n          </h4><p>The <code>unique</code> method returns all of the unique models in the collection. Any models of the same type with the same primary key as another model in the collection are removed.</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$users</span> = <span class="hljs-variable">$users</span>-&gt;unique();</code></pre>\n  <p><a name="custom-collections"></a></p>\n\n          <p><a name="custom-collections"></a></p>\n          <h2>\n            <a href="#custom-collections">\n              Custom Collections\n            </a>\n          </h2><p>If you need to use a custom <code>Collection</code> object with your own extension methods, you may override the <code>newCollection</code> method on your model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">CustomCollection</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Create a new Eloquent Collection instance.\n     *\n     * <span class="hljs-doctag">@param</span>  array  $models\n     * <span class="hljs-doctag">@return</span> \\Illuminate\\Database\\Eloquent\\Collection\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">newCollection</span><span class="hljs-params">(array $models = [])</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CustomCollection($models);\n    }\n}</span></code></pre>\n  <p>Once you have defined a <code>newCollection</code> method, you will receive an instance of your custom collection anytime Eloquent returns a <code>Collection</code> instance of that model. If you would like to use a custom collection for every model in your application, you should override the <code>newCollection</code> method on a base model class that is extended by all of your models.</p>\n'},"0d01":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="file-storage"></a></p>\n          <h1>\n            <a href="#file-storage">\n              File Storage\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#configuration">Configuration</a><ul>\n<li><a href="#the-public-disk">The Public Disk</a></li>\n<li><a href="#the-local-driver">The Local Driver</a></li>\n<li><a href="#driver-prerequisites">Driver Prerequisites</a></li>\n<li><a href="#caching">Caching</a></li>\n</ul>\n</li>\n<li><a href="#obtaining-disk-instances">Obtaining Disk Instances</a></li>\n<li><a href="#retrieving-files">Retrieving Files</a><ul>\n<li><a href="#downloading-files">Downloading Files</a></li>\n<li><a href="#file-urls">File URLs</a></li>\n<li><a href="#file-metadata">File Metadata</a></li>\n</ul>\n</li>\n<li><a href="#storing-files">Storing Files</a><ul>\n<li><a href="#file-uploads">File Uploads</a></li>\n<li><a href="#file-visibility">File Visibility</a></li>\n</ul>\n</li>\n<li><a href="#deleting-files">Deleting Files</a></li>\n<li><a href="#directories">Directories</a></li>\n<li><a href="#custom-filesystems">Custom Filesystems</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Laravel provides a powerful filesystem abstraction thanks to the wonderful <router-link to="https://github.com/thephpleague/flysystem">Flysystem</router-link> PHP package by Frank de Jonge. The Laravel Flysystem integration provides simple to use drivers for working with local filesystems and Amazon S3. Even better, it&#39;s amazingly simple to switch between these storage options as the API remains the same for each system.</p>\n<p><a name="configuration"></a></p>\n\n          <p><a name="configuration"></a></p>\n          <h2>\n            <a href="#configuration">\n              Configuration\n            </a>\n          </h2><p>The filesystem configuration file is located at <code>config/filesystems.php</code>. Within this file you may configure all of your &quot;disks&quot;. Each disk represents a particular storage driver and storage location. Example configurations for each supported driver are included in the configuration file. So, modify the configuration to reflect your storage preferences and credentials.</p>\n<p>You may configure as many disks as you like, and may even have multiple disks that use the same driver.</p>\n<p><a name="the-public-disk"></a></p>\n\n          <p><a name="the-public-disk"></a></p>\n          <h3>\n            <a href="#the-public-disk">\n              The Public Disk\n            </a>\n          </h3><p>The <code>public</code> disk is intended for files that are going to be publicly accessible. By default, the <code>public</code> disk uses the <code>local</code> driver and stores these files in <code>storage/app/public</code>. To make them accessible from the web, you should create a symbolic link from <code>public/storage</code> to <code>storage/app/public</code>. This convention will keep your publicly accessible files in one directory that can be easily shared across deployments when using zero down-time deployment systems like <router-link to="https://envoyer.io">Envoyer</router-link>.</p>\n<p>To create the symbolic link, you may use the <code>storage:link</code> Artisan command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">storage</span><span class="hljs-selector-pseudo">:link</span></code></pre>\n  <p>Once a file has been stored and the symbolic link has been created, you can create a URL to the files using the <code>asset</code> helper:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-function">echo <span class="hljs-title">asset</span><span class="hljs-params">(<span class="hljs-string">\'storage/file.txt\'</span>)</span></span>;</code></pre>\n  <p><a name="the-local-driver"></a></p>\n\n          <p><a name="the-local-driver"></a></p>\n          <h3>\n            <a href="#the-local-driver">\n              The Local Driver\n            </a>\n          </h3><p>When using the <code>local</code> driver, all file operations are relative to the <code>root</code> directory defined in your <code>filesystems</code> configuration file. By default, this value is set to the <code>storage/app</code> directory. Therefore, the following method would store a file in <code>storage/app/file.txt</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Storage::disk<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'local\'</span>)</span>-&gt;</span>put(<span class="hljs-string">\'file.txt\'</span>, <span class="hljs-string">\'Contents\'</span>);</code></pre>\n  \n          <p><a name="permissions"></a></p>\n          <h4>\n            <a href="#permissions">\n              Permissions\n            </a>\n          </h4><p>The <code>public</code> <a href="#file-visibility">visibility</a> translates to <code>0755</code> for directories and <code>0644</code> for files. You can modify the permissions mappings in your <code>filesystems</code> configuration file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'local\'</span> =&gt; [\n    <span class="hljs-string">\'driver\'</span> =&gt; <span class="hljs-string">\'local\'</span>,\n    <span class="hljs-string">\'root\'</span> =&gt; storage_path(<span class="hljs-string">\'app\'</span>),\n    <span class="hljs-string">\'permissions\'</span> =&gt; [\n        <span class="hljs-string">\'file\'</span> =&gt; [\n            <span class="hljs-string">\'public\'</span> =&gt; <span class="hljs-number">0664</span>,\n            <span class="hljs-string">\'private\'</span> =&gt; <span class="hljs-number">0600</span>,\n        ],\n        <span class="hljs-string">\'dir\'</span> =&gt; [\n            <span class="hljs-string">\'public\'</span> =&gt; <span class="hljs-number">0775</span>,\n            <span class="hljs-string">\'private\'</span> =&gt; <span class="hljs-number">0700</span>,\n        ],\n    ],\n],</code></pre>\n  <p><a name="driver-prerequisites"></a></p>\n\n          <p><a name="driver-prerequisites"></a></p>\n          <h3>\n            <a href="#driver-prerequisites">\n              Driver Prerequisites\n            </a>\n          </h3>\n          <p><a name="composer-packages"></a></p>\n          <h4>\n            <a href="#composer-packages">\n              Composer Packages\n            </a>\n          </h4><p>Before using the SFTP or S3 drivers, you will need to install the appropriate package via Composer:</p>\n<ul>\n<li>SFTP: <code>league/flysystem-sftp ~1.0</code></li>\n<li>Amazon S3: <code>league/flysystem-aws-s3-v3 ~1.0</code></li>\n</ul>\n<p>An absolute must for performance is to use a cached adapter. You will need an additional package for this:</p>\n<ul>\n<li>CachedAdapter: <code>league/flysystem-cached-adapter ~1.0</code></li>\n</ul>\n\n          <p><a name="s3-driver-configuration"></a></p>\n          <h4>\n            <a href="#s3-driver-configuration">\n              S3 Driver Configuration\n            </a>\n          </h4><p>The S3 driver configuration information is located in your <code>config/filesystems.php</code> configuration file. This file contains an example configuration array for an S3 driver. You are free to modify this array with your own S3 configuration and credentials. For convenience, these environment variables match the naming convention used by the AWS CLI.</p>\n\n          <p><a name="ftp-driver-configuration"></a></p>\n          <h4>\n            <a href="#ftp-driver-configuration">\n              FTP Driver Configuration\n            </a>\n          </h4><p>Laravel&#39;s Flysystem integrations works great with FTP; however, a sample configuration is not included with the framework&#39;s default <code>filesystems.php</code> configuration file. If you need to configure a FTP filesystem, you may use the example configuration below:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'ftp\'</span> =&gt; [\n    <span class="hljs-string">\'driver\'</span> =&gt; <span class="hljs-string">\'ftp\'</span>,\n    <span class="hljs-string">\'host\'</span> =&gt; <span class="hljs-string">\'ftp.example.com\'</span>,\n    <span class="hljs-string">\'username\'</span> =&gt; <span class="hljs-string">\'your-username\'</span>,\n    <span class="hljs-string">\'password\'</span> =&gt; <span class="hljs-string">\'your-password\'</span>,\n\n    <span class="hljs-regexp">//</span> Optional FTP Settings...\n    <span class="hljs-regexp">//</span> <span class="hljs-string">\'port\'</span> =&gt; <span class="hljs-number">21</span>,\n    <span class="hljs-regexp">//</span> <span class="hljs-string">\'root\'</span> =&gt; <span class="hljs-string">\'\'</span>,\n    <span class="hljs-regexp">//</span> <span class="hljs-string">\'passive\'</span> =&gt; true,\n    <span class="hljs-regexp">//</span> <span class="hljs-string">\'ssl\'</span> =&gt; true,\n    <span class="hljs-regexp">//</span> <span class="hljs-string">\'timeout\'</span> =&gt; <span class="hljs-number">30</span>,\n],</code></pre>\n  \n          <p><a name="sftp-driver-configuration"></a></p>\n          <h4>\n            <a href="#sftp-driver-configuration">\n              SFTP Driver Configuration\n            </a>\n          </h4><p>Laravel&#39;s Flysystem integrations works great with SFTP; however, a sample configuration is not included with the framework&#39;s default <code>filesystems.php</code> configuration file. If you need to configure a SFTP filesystem, you may use the example configuration below:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'sftp\'</span> =&gt; [\n    <span class="hljs-string">\'driver\'</span> =&gt; <span class="hljs-string">\'sftp\'</span>,\n    <span class="hljs-string">\'host\'</span> =&gt; <span class="hljs-string">\'example.com\'</span>,\n    <span class="hljs-string">\'username\'</span> =&gt; <span class="hljs-string">\'your-username\'</span>,\n    <span class="hljs-string">\'password\'</span> =&gt; <span class="hljs-string">\'your-password\'</span>,\n\n    <span class="hljs-regexp">//</span> Settings <span class="hljs-keyword">for</span> SSH key based authentication...\n    <span class="hljs-regexp">//</span> <span class="hljs-string">\'privateKey\'</span> =&gt; <span class="hljs-string">\'/path/to/privateKey\'</span>,\n    <span class="hljs-regexp">//</span> <span class="hljs-string">\'password\'</span> =&gt; <span class="hljs-string">\'encryption-password\'</span>,\n\n    <span class="hljs-regexp">//</span> Optional SFTP Settings...\n    <span class="hljs-regexp">//</span> <span class="hljs-string">\'port\'</span> =&gt; <span class="hljs-number">22</span>,\n    <span class="hljs-regexp">//</span> <span class="hljs-string">\'root\'</span> =&gt; <span class="hljs-string">\'\'</span>,\n    <span class="hljs-regexp">//</span> <span class="hljs-string">\'timeout\'</span> =&gt; <span class="hljs-number">30</span>,\n],</code></pre>\n  <p><a name="caching"></a></p>\n\n          <p><a name="caching"></a></p>\n          <h3>\n            <a href="#caching">\n              Caching\n            </a>\n          </h3><p>To enable caching for a given disk, you may add a <code>cache</code> directive to the disk&#39;s configuration options. The <code>cache</code> option should be an array of caching options containing the <code>disk</code> name, the <code>expire</code> time in seconds, and the cache <code>prefix</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'s3\'</span> =&gt; [\n    <span class="hljs-string">\'driver\'</span> =&gt; <span class="hljs-string">\'s3\'</span>,\n\n    <span class="hljs-comment">// Other Disk Options...</span>\n\n    <span class="hljs-string">\'cache\'</span> =&gt; [\n        <span class="hljs-string">\'store\'</span> =&gt; <span class="hljs-string">\'memcached\'</span>,\n        <span class="hljs-string">\'expire\'</span> =&gt; <span class="hljs-number">600</span>,\n        <span class="hljs-string">\'prefix\'</span> =&gt; <span class="hljs-string">\'cache-prefix\'</span>,\n    ],\n],</code></pre>\n  <p><a name="obtaining-disk-instances"></a></p>\n\n          <p><a name="obtaining-disk-instances"></a></p>\n          <h2>\n            <a href="#obtaining-disk-instances">\n              Obtaining Disk Instances\n            </a>\n          </h2><p>The <code>Storage</code> facade may be used to interact with any of your configured disks. For example, you may use the <code>put</code> method on the facade to store an avatar on the default disk. If you call methods on the <code>Storage</code> facade without first calling the <code>disk</code> method, the method call will automatically be passed to the default disk:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Storage</span>;\n\nStorage::put(<span class="hljs-string">\'avatars/1\'</span>, $fileContents);</code></pre>\n  <p>If your application interacts with multiple disks, you may use the <code>disk</code> method on the <code>Storage</code> facade to work with files on a particular disk:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Storage::disk(<span class="hljs-string">\'s3\'</span>)-&gt;put(<span class="hljs-string">\'avatars/1\'</span>, <span class="hljs-variable">$fileContents</span>);</code></pre>\n  <p><a name="retrieving-files"></a></p>\n\n          <p><a name="retrieving-files"></a></p>\n          <h2>\n            <a href="#retrieving-files">\n              Retrieving Files\n            </a>\n          </h2><p>The <code>get</code> method may be used to retrieve the contents of a file. The raw string contents of the file will be returned by the method. Remember, all file paths should be specified relative to the &quot;root&quot; location configured for the disk:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-built_in">contents</span> = Storage::<span class="hljs-keyword">get</span>(\'<span class="hljs-built_in">file</span>.jpg\');</code></pre>\n  <p>The <code>exists</code> method may be used to determine if a file exists on the disk:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$exists</span> = Storage::disk(<span class="hljs-string">\'s3\'</span>)-&gt;exists(<span class="hljs-string">\'file.jpg\'</span>);</code></pre>\n  <p>The <code>missing</code> method may be used to determine if a file is missing from the disk:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$missing</span> = Storage::disk(<span class="hljs-string">\'s3\'</span>)-&gt;missing(<span class="hljs-string">\'file.jpg\'</span>);</code></pre>\n  <p><a name="downloading-files"></a></p>\n\n          <p><a name="downloading-files"></a></p>\n          <h3>\n            <a href="#downloading-files">\n              Downloading Files\n            </a>\n          </h3><p>The <code>download</code> method may be used to generate a response that forces the user&#39;s browser to download the file at the given path. The <code>download</code> method accepts a file name as the second argument to the method, which will determine the file name that is seen by the user downloading the file. Finally, you may pass an array of HTTP headers as the third argument to the method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> Storage::download(<span class="hljs-string">\'file.jpg\'</span>);\n\n<span class="hljs-keyword">return</span> Storage::download(<span class="hljs-string">\'file.jpg\'</span>, <span class="hljs-variable">$name</span>, <span class="hljs-variable">$headers</span>);</code></pre>\n  <p><a name="file-urls"></a></p>\n\n          <p><a name="file-urls"></a></p>\n          <h3>\n            <a href="#file-urls">\n              File URLs\n            </a>\n          </h3><p>You may use the <code>url</code> method to get the URL for the given file. If you are using the <code>local</code> driver, this will typically just prepend <code>/storage</code> to the given path and return a relative URL to the file. If you are using the <code>s3</code> driver, the fully qualified remote URL will be returned:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Storage</span>;\n\n$url = Storage::url(<span class="hljs-string">\'file.jpg\'</span>);</code></pre>\n  <blockquote>\n<p>{note} Remember, if you are using the <code>local</code> driver, all files that should be publicly accessible should be placed in the <code>storage/app/public</code> directory. Furthermore, you should <a href="#the-public-disk">create a symbolic link</a> at <code>public/storage</code> which points to the <code>storage/app/public</code> directory.</p>\n</blockquote>\n\n          <p><a name="temporary-urls"></a></p>\n          <h4>\n            <a href="#temporary-urls">\n              Temporary URLs\n            </a>\n          </h4><p>For files stored using the <code>s3</code> you may create a temporary URL to a given file using the <code>temporaryUrl</code> method. This method accepts a path and a <code>DateTime</code> instance specifying when the URL should expire:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$url</span> = Storage::temporaryUrl(\n    <span class="hljs-string">\'file.jpg\'</span>, now()-&gt;addMinutes(<span class="hljs-number">5</span>)\n);</code></pre>\n  <p>If you need to specify additional <router-link to="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectGET.html#RESTObjectGET-requests">S3 request parameters</router-link>, you may pass the array of request parameters as the third argument to the <code>temporaryUrl</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$url = Storage::temporaryUrl(\n    <span class="hljs-string">\'file.jpg\'</span>,\n    now()-&gt;addMinutes(<span class="hljs-number">5</span>),\n    [<span class="hljs-string">\'ResponseContentType\'</span> =&gt; <span class="hljs-string">\'application/octet-stream\'</span>]\n);</code></pre>\n  \n          <p><a name="local-url-host-customization"></a></p>\n          <h4>\n            <a href="#local-url-host-customization">\n              Local URL Host Customization\n            </a>\n          </h4><p>If you would like to pre-define the host for files stored on a disk using the <code>local</code> driver, you may add a <code>url</code> option to the disk&#39;s configuration array:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'public\'</span> =&gt; [\n    <span class="hljs-string">\'driver\'</span> =&gt; <span class="hljs-string">\'local\'</span>,\n    <span class="hljs-string">\'root\'</span> =&gt; storage_path(<span class="hljs-string">\'app/public\'</span>),\n    <span class="hljs-string">\'url\'</span> =&gt; env(<span class="hljs-string">\'APP_URL\'</span>).<span class="hljs-string">\'/storage\'</span>,\n    <span class="hljs-string">\'visibility\'</span> =&gt; <span class="hljs-string">\'public\'</span>,\n],</code></pre>\n  <p><a name="file-metadata"></a></p>\n\n          <p><a name="file-metadata"></a></p>\n          <h3>\n            <a href="#file-metadata">\n              File Metadata\n            </a>\n          </h3><p>In addition to reading and writing files, Laravel can also provide information about the files themselves. For example, the <code>size</code> method may be used to get the size of the file in bytes:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Storage</span>;\n\n$size = Storage::size(<span class="hljs-string">\'file.jpg\'</span>);</code></pre>\n  <p>The <code>lastModified</code> method returns the UNIX timestamp of the last time the file was modified:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$time</span> = Storage::lastModified(<span class="hljs-string">\'file.jpg\'</span>);</code></pre>\n  <p><a name="storing-files"></a></p>\n\n          <p><a name="storing-files"></a></p>\n          <h2>\n            <a href="#storing-files">\n              Storing Files\n            </a>\n          </h2><p>The <code>put</code> method may be used to store raw file contents on a disk. You may also pass a PHP <code>resource</code> to the <code>put</code> method, which will use Flysystem&#39;s underlying stream support. Remember, all file paths should be specified relative to the &quot;root&quot; location configured for the disk:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Storage</span>;\n\nStorage::put(<span class="hljs-string">\'file.jpg\'</span>, $contents);\n\nStorage::put(<span class="hljs-string">\'file.jpg\'</span>, $resource);</code></pre>\n  \n          <p><a name="automatic-streaming"></a></p>\n          <h4>\n            <a href="#automatic-streaming">\n              Automatic Streaming\n            </a>\n          </h4><p>If you would like Laravel to automatically manage streaming a given file to your storage location, you may use the <code>putFile</code> or <code>putFileAs</code> method. This method accepts either a <code>Illuminate\\Http\\File</code> or <code>Illuminate\\Http\\UploadedFile</code> instance and will automatically stream the file to your desired location:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">File</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Storage</span>;\n\n<span class="hljs-comment">// Automatically generate a unique ID for file name...</span>\nStorage::putFile(<span class="hljs-string">\'photos\'</span>, <span class="hljs-keyword">new</span> File(<span class="hljs-string">\'/path/to/photo\'</span>));\n\n<span class="hljs-comment">// Manually specify a file name...</span>\nStorage::putFileAs(<span class="hljs-string">\'photos\'</span>, <span class="hljs-keyword">new</span> File(<span class="hljs-string">\'/path/to/photo\'</span>), <span class="hljs-string">\'photo.jpg\'</span>);</code></pre>\n  <p>There are a few important things to note about the <code>putFile</code> method. Note that we only specified a directory name, not a file name. By default, the <code>putFile</code> method will generate a unique ID to serve as the file name. The file&#39;s extension will be determined by examining the file&#39;s MIME type. The path to the file will be returned by the <code>putFile</code> method so you can store the path, including the generated file name, in your database.</p>\n<p>The <code>putFile</code> and <code>putFileAs</code> methods also accept an argument to specify the &quot;visibility&quot; of the stored file. This is particularly useful if you are storing the file on a cloud disk such as S3 and would like the file to be publicly accessible:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Storage::put<span class="hljs-constructor">File(\'<span class="hljs-params">photos</span>\', <span class="hljs-params">new</span> File(\'<span class="hljs-operator">/</span><span class="hljs-params">path</span><span class="hljs-operator">/</span><span class="hljs-params">to</span><span class="hljs-operator">/</span><span class="hljs-params">photo</span>\')</span>, \'public\');</code></pre>\n  \n          <p><a name="prepending-amp-appending-to-files"></a></p>\n          <h4>\n            <a href="#prepending-amp-appending-to-files">\n              Prepending &amp; Appending To Files\n            </a>\n          </h4><p>The <code>prepend</code> and <code>append</code> methods allow you to write to the beginning or end of a file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Storage::prepend(<span class="hljs-string">\'file.log\'</span>, <span class="hljs-string">\'Prepended Text\'</span>);\n\nStorage::append(<span class="hljs-string">\'file.log\'</span>, <span class="hljs-string">\'Appended Text\'</span>);</code></pre>\n  \n          <p><a name="copying-amp-moving-files"></a></p>\n          <h4>\n            <a href="#copying-amp-moving-files">\n              Copying &amp; Moving Files\n            </a>\n          </h4><p>The <code>copy</code> method may be used to copy an existing file to a new location on the disk, while the <code>move</code> method may be used to rename or move an existing file to a new location:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">Storage</span>::<span class="hljs-keyword">copy</span>(<span class="hljs-string">\'old/file.jpg\'</span>, <span class="hljs-string">\'new/file.jpg\'</span>);\n\n<span class="hljs-keyword">Storage</span>::<span class="hljs-keyword">move</span>(<span class="hljs-string">\'old/file.jpg\'</span>, <span class="hljs-string">\'new/file.jpg\'</span>);</code></pre>\n  <p><a name="file-uploads"></a></p>\n\n          <p><a name="file-uploads"></a></p>\n          <h3>\n            <a href="#file-uploads">\n              File Uploads\n            </a>\n          </h3><p>In web applications, one of the most common use-cases for storing files is storing user uploaded files such as profile pictures, photos, and documents. Laravel makes it very easy to store uploaded files using the <code>store</code> method on an uploaded file instance. Call the <code>store</code> method with the path at which you wish to store the uploaded file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">Controller</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Request</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserAvatarController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Update the avatar for the user.\n     *\n     * <span class="hljs-doctag">@param</span>  Request  $request\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">(Request $request)</span>\n    </span>{\n        $path = $request-&gt;file(<span class="hljs-string">\'avatar\'</span>)-&gt;store(<span class="hljs-string">\'avatars\'</span>);\n\n        <span class="hljs-keyword">return</span> $path;\n    }\n}</span></code></pre>\n  <p>There are a few important things to note about this example. Note that we only specified a directory name, not a file name. By default, the <code>store</code> method will generate a unique ID to serve as the file name. The file&#39;s extension will be determined by examining the file&#39;s MIME type. The path to the file will be returned by the <code>store</code> method so you can store the path, including the generated file name, in your database.</p>\n<p>You may also call the <code>putFile</code> method on the <code>Storage</code> facade to perform the same file manipulation as the example above:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$path</span> = Storage::putFile(<span class="hljs-string">\'avatars\'</span>, <span class="hljs-variable">$request</span>-&gt;file(<span class="hljs-string">\'avatar\'</span>));</code></pre>\n  \n          <p><a name="specifying-a-file-name"></a></p>\n          <h4>\n            <a href="#specifying-a-file-name">\n              Specifying A File Name\n            </a>\n          </h4><p>If you would not like a file name to be automatically assigned to your stored file, you may use the <code>storeAs</code> method, which receives the path, the file name, and the (optional) disk as its arguments:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$path</span> = <span class="hljs-variable">$request</span>-&gt;file(<span class="hljs-string">\'avatar\'</span>)-&gt;storeAs(\n    <span class="hljs-string">\'avatars\'</span>, <span class="hljs-variable">$request</span>-&gt;user()-&gt;id\n);</code></pre>\n  <p>You may also use the <code>putFileAs</code> method on the <code>Storage</code> facade, which will perform the same file manipulation as the example above:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$path</span> = Storage::putFileAs(\n    <span class="hljs-string">\'avatars\'</span>, <span class="hljs-variable">$request</span>-&gt;file(<span class="hljs-string">\'avatar\'</span>), <span class="hljs-variable">$request</span>-&gt;user()-&gt;id\n);</code></pre>\n  <blockquote>\n<p>{note} Unprintable and invalid unicode characters will automatically be removed from file paths. Therefore, you may wish to sanitize your file paths before passing them to Laravel&#39;s file storage methods. File paths are normalized using the <code>League\\Flysystem\\Util::normalizePath</code> method.</p>\n</blockquote>\n\n          <p><a name="specifying-a-disk"></a></p>\n          <h4>\n            <a href="#specifying-a-disk">\n              Specifying A Disk\n            </a>\n          </h4><p>By default, this method will use your default disk. If you would like to specify another disk, pass the disk name as the second argument to the <code>store</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$path</span> = <span class="hljs-variable">$request</span>-&gt;file(<span class="hljs-string">\'avatar\'</span>)-&gt;store(\n    <span class="hljs-string">\'avatars/\'</span>.<span class="hljs-variable">$request</span>-&gt;user()-&gt;id, <span class="hljs-string">\'s3\'</span>\n);</code></pre>\n  <p><a name="file-visibility"></a></p>\n\n          <p><a name="file-visibility"></a></p>\n          <h3>\n            <a href="#file-visibility">\n              File Visibility\n            </a>\n          </h3><p>In Laravel&#39;s Flysystem integration, &quot;visibility&quot; is an abstraction of file permissions across multiple platforms. Files may either be declared <code>public</code> or <code>private</code>. When a file is declared <code>public</code>, you are indicating that the file should generally be accessible to others. For example, when using the S3 driver, you may retrieve URLs for <code>public</code> files.</p>\n<p>You can set the visibility when setting the file via the <code>put</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Storage</span>;\n\nStorage::put(<span class="hljs-string">\'file.jpg\'</span>, $contents, <span class="hljs-string">\'public\'</span>);</code></pre>\n  <p>If the file has already been stored, its visibility can be retrieved and set via the <code>getVisibility</code> and <code>setVisibility</code> methods:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$visibility = Storage::get<span class="hljs-constructor">Visibility(\'<span class="hljs-params">file</span>.<span class="hljs-params">jpg</span>\')</span>;\n\nStorage::set<span class="hljs-constructor">Visibility(\'<span class="hljs-params">file</span>.<span class="hljs-params">jpg</span>\', \'<span class="hljs-params">public</span>\')</span>;</code></pre>\n  <p><a name="deleting-files"></a></p>\n\n          <p><a name="deleting-files"></a></p>\n          <h2>\n            <a href="#deleting-files">\n              Deleting Files\n            </a>\n          </h2><p>The <code>delete</code> method accepts a single filename or an array of files to remove from the disk:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> Illuminate\\Support\\Facades\\<span class="hljs-keyword">Storage</span>;\n\nStorage::<span class="hljs-keyword">delete</span>(<span class="hljs-string">\'file.jpg\'</span>);\n\nStorage::<span class="hljs-keyword">delete</span>([<span class="hljs-string">\'file.jpg\'</span>, <span class="hljs-string">\'file2.jpg\'</span>]);</code></pre>\n  <p>If necessary, you may specify the disk that the file should be deleted from:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">use Illuminate<span class="hljs-string">\\Support\\Facades\\Storage;</span>\n\nStorage::disk<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'s3\'</span>)</span>-&gt;</span><span class="hljs-keyword">delete</span>(<span class="hljs-string">\'folder_path/file_name.jpg\'</span>);</code></pre>\n  <p><a name="directories"></a></p>\n\n          <p><a name="directories"></a></p>\n          <h2>\n            <a href="#directories">\n              Directories\n            </a>\n          </h2>\n          <p><a name="get-all-files-within-a-directory"></a></p>\n          <h4>\n            <a href="#get-all-files-within-a-directory">\n              Get All Files Within A Directory\n            </a>\n          </h4><p>The <code>files</code> method returns an array of all of the files in a given directory. If you would like to retrieve a list of all files within a given directory including all sub-directories, you may use the <code>allFiles</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Storage</span>;\n\n$files = Storage::files($directory);\n\n$files = Storage::allFiles($directory);</code></pre>\n  \n          <p><a name="get-all-directories-within-a-directory"></a></p>\n          <h4>\n            <a href="#get-all-directories-within-a-directory">\n              Get All Directories Within A Directory\n            </a>\n          </h4><p>The <code>directories</code> method returns an array of all the directories within a given directory. Additionally, you may use the <code>allDirectories</code> method to get a list of all directories within a given directory and all of its sub-directories:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$directories</span> = Storage::directories(<span class="hljs-variable">$directory</span>);\n\n<span class="hljs-regexp">//</span> Recursive...\n<span class="hljs-variable">$directories</span> = Storage::allDirectories(<span class="hljs-variable">$directory</span>);</code></pre>\n  \n          <p><a name="create-a-directory"></a></p>\n          <h4>\n            <a href="#create-a-directory">\n              Create A Directory\n            </a>\n          </h4><p>The <code>makeDirectory</code> method will create the given directory, including any needed sub-directories:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Storage::makeDirectory(<span class="hljs-variable">$directory</span>);</code></pre>\n  \n          <p><a name="delete-a-directory"></a></p>\n          <h4>\n            <a href="#delete-a-directory">\n              Delete A Directory\n            </a>\n          </h4><p>Finally, the <code>deleteDirectory</code> method may be used to remove a directory and all of its files:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Storage::deleteDirectory(<span class="hljs-variable">$directory</span>);</code></pre>\n  <p><a name="custom-filesystems"></a></p>\n\n          <p><a name="custom-filesystems"></a></p>\n          <h2>\n            <a href="#custom-filesystems">\n              Custom Filesystems\n            </a>\n          </h2><p>Laravel&#39;s Flysystem integration provides drivers for several &quot;drivers&quot; out of the box; however, Flysystem is not limited to these and has adapters for many other storage systems. You can create a custom driver if you want to use one of these additional adapters in your Laravel application.</p>\n<p>In order to set up the custom filesystem you will need a Flysystem adapter. Let&#39;s add a community maintained Dropbox adapter to our project:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">composer</span> <span class="hljs-meta">require</span> spatie/flysystem-dropbox</code></pre>\n  <p>Next, you should create a <router-link to="/docs/{{version}}/providers">service provider</router-link> such as <code>DropboxServiceProvider</code>. In the provider&#39;s <code>boot</code> method, you may use the <code>Storage</code> facade&#39;s <code>extend</code> method to define the custom driver:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Providers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">ServiceProvider</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">League</span>\\<span class="hljs-title">Flysystem</span>\\<span class="hljs-title">Filesystem</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Spatie</span>\\<span class="hljs-title">Dropbox</span>\\<span class="hljs-title">Client</span> <span class="hljs-title">as</span> <span class="hljs-title">DropboxClient</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Spatie</span>\\<span class="hljs-title">FlysystemDropbox</span>\\<span class="hljs-title">DropboxAdapter</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Storage</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DropboxServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Register any application services.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-comment">//</span>\n    }\n\n    <span class="hljs-comment">/**\n     * Bootstrap any application services.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n    </span>{\n        Storage::extend(<span class="hljs-string">\'dropbox\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($app, $config)</span> </span>{\n            $client = <span class="hljs-keyword">new</span> DropboxClient(\n                $config[<span class="hljs-string">\'authorization_token\'</span>]\n            );\n\n            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Filesystem(<span class="hljs-keyword">new</span> DropboxAdapter($client));\n        });\n    }\n}</span></code></pre>\n  <p>The first argument of the <code>extend</code> method is the name of the driver and the second is a Closure that receives the <code>$app</code> and <code>$config</code> variables. The resolver Closure must return an instance of <code>League\\Flysystem\\Filesystem</code>. The <code>$config</code> variable contains the values defined in <code>config/filesystems.php</code> for the specified disk.</p>\n<p>Next, register the service provider in your <code>config/app.php</code> configuration file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'providers\'</span> =&gt; [\n    <span class="hljs-regexp">//</span> ...\n    App\\Providers\\DropboxServiceProvider::<span class="hljs-class"><span class="hljs-keyword">class</span>,</span>\n];</code></pre>\n  <p>Once you have created and registered the extension&#39;s service provider, you may use the <code>dropbox</code> driver in your <code>config/filesystems.php</code> configuration file.</p>\n'},"0e26":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="laravel-valet"></a></p>\n          <h1>\n            <a href="#laravel-valet">\n              Laravel Valet\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a><ul>\n<li><a href="#valet-or-homestead">Valet Or Homestead</a></li>\n</ul>\n</li>\n<li><a href="#installation">Installation</a><ul>\n<li><a href="#upgrading">Upgrading</a></li>\n</ul>\n</li>\n<li><a href="#serving-sites">Serving Sites</a><ul>\n<li><a href="#the-park-command">The &quot;Park&quot; Command</a></li>\n<li><a href="#the-link-command">The &quot;Link&quot; Command</a></li>\n<li><a href="#securing-sites">Securing Sites With TLS</a></li>\n</ul>\n</li>\n<li><a href="#sharing-sites">Sharing Sites</a></li>\n<li><a href="#site-specific-environment-variables">Site Specific Environment Variables</a></li>\n<li><a href="#custom-valet-drivers">Custom Valet Drivers</a><ul>\n<li><a href="#local-drivers">Local Drivers</a></li>\n</ul>\n</li>\n<li><a href="#other-valet-commands">Other Valet Commands</a></li>\n<li><a href="#valet-directories-and-files">Valet Directories &amp; Files</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Valet is a Laravel development environment for Mac minimalists. No Vagrant, no <code>/etc/hosts</code> file. You can even share your sites publicly using local tunnels. <em>Yeah, we like it too.</em></p>\n<p>Laravel Valet configures your Mac to always run <router-link to="https://www.nginx.com/">Nginx</router-link> in the background when your machine starts. Then, using <router-link to="https://en.wikipedia.org/wiki/Dnsmasq">DnsMasq</router-link>, Valet proxies all requests on the <code>*.test</code> domain to point to sites installed on your local machine.</p>\n<p>In other words, a blazing fast Laravel development environment that uses roughly 7 MB of RAM. Valet isn&#39;t a complete replacement for Vagrant or Homestead, but provides a great alternative if you want flexible basics, prefer extreme speed, or are working on a machine with a limited amount of RAM.</p>\n<p>Out of the box, Valet support includes, but is not limited to:</p>\n<style>\n    #valet-support > ul {\n        column-count: 3; -moz-column-count: 3; -webkit-column-count: 3;\n        line-height: 1.9;\n    }\n</style>\n\n<div id="valet-support" markdown="1">\n- [Laravel](https://laravel.com)\n- [Lumen](https://lumen.laravel.com)\n- [Bedrock](https://roots.io/bedrock/)\n- [CakePHP 3](https://cakephp.org)\n- [Concrete5](https://www.concrete5.org/)\n- [Contao](https://contao.org/en/)\n- [Craft](https://craftcms.com)\n- [Drupal](https://www.drupal.org/)\n- [Jigsaw](https://jigsaw.tighten.co)\n- [Joomla](https://www.joomla.org/)\n- [Katana](https://github.com/themsaid/katana)\n- [Kirby](https://getkirby.com/)\n- [Magento](https://magento.com/)\n- [OctoberCMS](https://octobercms.com/)\n- [Sculpin](https://sculpin.io/)\n- [Slim](https://www.slimframework.com)\n- [Statamic](https://statamic.com)\n- Static HTML\n- [Symfony](https://symfony.com)\n- [WordPress](https://wordpress.org)\n- [Zend](https://framework.zend.com)\n</div>\n\n<p>However, you may extend Valet with your own <a href="#custom-valet-drivers">custom drivers</a>.</p>\n<p><a name="valet-or-homestead"></a></p>\n\n          <p><a name="valet-or-homestead"></a></p>\n          <h3>\n            <a href="#valet-or-homestead">\n              Valet Or Homestead\n            </a>\n          </h3><p>As you may know, Laravel offers <router-link to="/docs/{{version}}/homestead">Homestead</router-link>, another local Laravel development environment. Homestead and Valet differ in regards to their intended audience and their approach to local development. Homestead offers an entire Ubuntu virtual machine with automated Nginx configuration. Homestead is a wonderful choice if you want a fully virtualized Linux development environment or are on Windows / Linux.</p>\n<p>Valet only supports Mac, and requires you to install PHP and a database server directly onto your local machine. This is easily achieved by using <router-link to="https://brew.sh/">Homebrew</router-link> with commands like <code>brew install php</code> and <code>brew install mysql</code>. Valet provides a blazing fast local development environment with minimal resource consumption, so it&#39;s great for developers who only require PHP / MySQL and do not need a fully virtualized development environment.</p>\n<p>Both Valet and Homestead are great choices for configuring your Laravel development environment. Which one you choose will depend on your personal taste and your team&#39;s needs.</p>\n<p><a name="installation"></a></p>\n\n          <p><a name="installation"></a></p>\n          <h2>\n            <a href="#installation">\n              Installation\n            </a>\n          </h2><p><strong>Valet requires macOS and <router-link to="https://brew.sh/">Homebrew</router-link>. Before installation, you should make sure that no other programs such as Apache or Nginx are binding to your local machine&#39;s port 80.</strong></p>\n<div class="content-list" markdown="1">\n- Install or update [Homebrew](https://brew.sh/) to the latest version using `brew update`.\n- Install PHP 7.4 using Homebrew via `brew install php`.\n- Install [Composer](https://getcomposer.org).\n- Install Valet with Composer via `composer global require laravel/valet`. Make sure the `~/.composer/vendor/bin` directory is in your system\'s "PATH".\n- Run the `valet install` command. This will configure and install Valet and DnsMasq, and register Valet\'s daemon to launch when your system starts.\n</div>\n\n<p>Once Valet is installed, try pinging any <code>*.test</code> domain on your terminal using a command such as <code>ping foobar.test</code>. If Valet is installed correctly you should see this domain responding on <code>127.0.0.1</code>.</p>\n<p>Valet will automatically start its daemon each time your machine boots. There is no need to run <code>valet start</code> or <code>valet install</code> ever again once the initial Valet installation is complete.</p>\n\n          <p><a name="using-another-domain"></a></p>\n          <h4>\n            <a href="#using-another-domain">\n              Using Another Domain\n            </a>\n          </h4><p>By default, Valet serves your projects using the <code>.test</code> TLD. If you&#39;d like to use another domain, you can do so using the <code>valet tld tld-name</code> command.</p>\n<p>For example, if you&#39;d like to use <code>.app</code> instead of <code>.test</code>, run <code>valet tld app</code> and Valet will start serving your projects at <code>*.app</code> automatically.</p>\n\n          <p><a name="database"></a></p>\n          <h4>\n            <a href="#database">\n              Database\n            </a>\n          </h4><p>If you need a database, try MySQL by running <code>brew install mysql@5.7</code> on your command line. Once MySQL has been installed, you may start it using the <code>brew services start mysql@5.7</code> command. You can then connect to the database at <code>127.0.0.1</code> using the <code>root</code> username and an empty string for the password.</p>\n\n          <p><a name="php-versions"></a></p>\n          <h4>\n            <a href="#php-versions">\n              PHP Versions\n            </a>\n          </h4><p>Valet allows you to switch PHP versions using the <code>valet use php@version</code> command. Valet will install the specified PHP version via Brew if it is not already installed:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">valet <span class="hljs-keyword">use</span> php<span class="hljs-variable">@7</span>.<span class="hljs-number">2</span>\n\nvalet <span class="hljs-keyword">use</span> php</code></pre>\n  <blockquote>\n<p>{note} Valet only serves one PHP version at a time, even if you have multiple PHP versions installed.</p>\n</blockquote>\n\n          <p><a name="resetting-your-installation"></a></p>\n          <h4>\n            <a href="#resetting-your-installation">\n              Resetting Your Installation\n            </a>\n          </h4><p>If you are having trouble getting your Valet installation to run properly, executing the <code>composer global update</code> command followed by <code>valet install</code> will reset your installation and can solve a variety of problems. In rare cases it may be necessary to &quot;hard reset&quot; Valet by executing <code>valet uninstall --force</code> followed by <code>valet install</code>.</p>\n<p><a name="upgrading"></a></p>\n\n          <p><a name="upgrading"></a></p>\n          <h3>\n            <a href="#upgrading">\n              Upgrading\n            </a>\n          </h3><p>You may update your Valet installation using the <code>composer global update</code> command in your terminal. After upgrading, it is good practice to run the <code>valet install</code> command so Valet can make additional upgrades to your configuration files if necessary.</p>\n<p><a name="serving-sites"></a></p>\n\n          <p><a name="serving-sites"></a></p>\n          <h2>\n            <a href="#serving-sites">\n              Serving Sites\n            </a>\n          </h2><p>Once Valet is installed, you&#39;re ready to start serving sites. Valet provides two commands to help you serve your Laravel sites: <code>park</code> and <code>link</code>.</p>\n<p><a name="the-park-command"></a></p>\n\n          <p><a name="the-code-park-code-command"></a></p>\n          <h4>\n            <a href="#the-code-park-code-command">\n              The <code>park</code> Command\n            </a>\n          </h4><div class="content-list" markdown="1">\n- Create a new directory on your Mac by running something like `mkdir ~/Sites`. Next, `cd ~/Sites` and run `valet park`. This command will register your current working directory as a path that Valet should search for sites.\n- Next, create a new Laravel site within this directory: `laravel new blog`.\n- Open `http://blog.test` in your browser.\n</div>\n\n<p><strong>That&#39;s all there is to it.</strong> Now, any Laravel project you create within your &quot;parked&quot; directory will automatically be served using the <code>http://folder-name.test</code> convention.</p>\n<p><a name="the-link-command"></a></p>\n\n          <p><a name="the-code-link-code-command"></a></p>\n          <h4>\n            <a href="#the-code-link-code-command">\n              The <code>link</code> Command\n            </a>\n          </h4><p>The <code>link</code> command may also be used to serve your Laravel sites. This command is useful if you want to serve a single site in a directory and not the entire directory.</p>\n<div class="content-list" markdown="1">\n- To use the command, navigate to one of your projects and run `valet link app-name` in your terminal. Valet will create a symbolic link in `~/.config/valet/Sites` which points to your current working directory.\n- After running the `link` command, you can access the site in your browser at `http://app-name.test`.\n</div>\n\n<p>To see a listing of all of your linked directories, run the <code>valet links</code> command. You may use <code>valet unlink app-name</code> to destroy the symbolic link.</p>\n<blockquote>\n<p>{tip} You can use <code>valet link</code> to serve the same project from multiple (sub)domains. To add a subdomain or another domain to your project run <code>valet link subdomain.app-name</code> from the project folder.</p>\n</blockquote>\n<p><a name="securing-sites"></a></p>\n\n          <p><a name="securing-sites-with-tls"></a></p>\n          <h4>\n            <a href="#securing-sites-with-tls">\n              Securing Sites With TLS\n            </a>\n          </h4><p>By default, Valet serves sites over plain HTTP. However, if you would like to serve a site over encrypted TLS using HTTP/2, use the <code>secure</code> command. For example, if your site is being served by Valet on the <code>laravel.test</code> domain, you should run the following command to secure it:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">valet secure laravel</span></code></pre>\n  <p>To &quot;unsecure&quot; a site and revert back to serving its traffic over plain HTTP, use the <code>unsecure</code> command. Like the <code>secure</code> command, this command accepts the host name that you wish to unsecure:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">valet unsecure laravel</span></code></pre>\n  <p><a name="sharing-sites"></a></p>\n\n          <p><a name="sharing-sites"></a></p>\n          <h2>\n            <a href="#sharing-sites">\n              Sharing Sites\n            </a>\n          </h2><p>Valet even includes a command to share your local sites with the world. No additional software installation is required once Valet is installed.</p>\n<p>To share a site, navigate to the site&#39;s directory in your terminal and run the <code>valet share</code> command. A publicly accessible URL will be inserted into your clipboard and is ready to paste directly into your browser. That&#39;s it.</p>\n<p>To stop sharing your site, hit <code>Control + C</code> to cancel the process.</p>\n<p><a name="site-specific-environment-variables"></a></p>\n\n          <p><a name="site-specific-environment-variables"></a></p>\n          <h2>\n            <a href="#site-specific-environment-variables">\n              Site Specific Environment Variables\n            </a>\n          </h2><p>Some applications using other frameworks may depend on server environment variables but do not provide a way for those variables to be configured within your project. Valet allows you to configure site specific environment variables by adding a <code>.valet-env.php</code> file within the root of your project. These variables will be added to the <code>$_SERVER</code> global array:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">return</span> [\n    <span class="hljs-string">\'WEBSITE_NAME\'</span> =&gt; <span class="hljs-string">\'My Blog\'</span>,\n];</span></code></pre>\n  <p><a name="custom-valet-drivers"></a></p>\n\n          <p><a name="custom-valet-drivers"></a></p>\n          <h2>\n            <a href="#custom-valet-drivers">\n              Custom Valet Drivers\n            </a>\n          </h2><p>You can write your own Valet &quot;driver&quot; to serve PHP applications running on another framework or CMS that is not natively supported by Valet. When you install Valet, a <code>~/.config/valet/Drivers</code> directory is created which contains a <code>SampleValetDriver.php</code> file. This file contains a sample driver implementation to demonstrate how to write a custom driver. Writing a driver only requires you to implement three methods: <code>serves</code>, <code>isStaticFile</code>, and <code>frontControllerPath</code>.</p>\n<p>All three methods receive the <code>$sitePath</code>, <code>$siteName</code>, and <code>$uri</code> values as their arguments. The <code>$sitePath</code> is the fully qualified path to the site being served on your machine, such as <code>/Users/Lisa/Sites/my-project</code>. The <code>$siteName</code> is the &quot;host&quot; / &quot;site name&quot; portion of the domain (<code>my-project</code>). The <code>$uri</code> is the incoming request URI (<code>/foo/bar</code>).</p>\n<p>Once you have completed your custom Valet driver, place it in the <code>~/.config/valet/Drivers</code> directory using the <code>FrameworkValetDriver.php</code> naming convention. For example, if you are writing a custom valet driver for WordPress, your file name should be <code>WordPressValetDriver.php</code>.</p>\n<p>Let&#39;s take a look at a sample implementation of each method your custom Valet driver should implement.</p>\n\n          <p><a name="the-code-serves-code-method"></a></p>\n          <h4>\n            <a href="#the-code-serves-code-method">\n              The <code>serves</code> Method\n            </a>\n          </h4><p>The <code>serves</code> method should return <code>true</code> if your driver should handle the incoming request. Otherwise, the method should return <code>false</code>. So, within this method you should attempt to determine if the given <code>$sitePath</code> contains a project of the type you are trying to serve.</p>\n<p>For example, let&#39;s pretend we are writing a <code>WordPressValetDriver</code>. Our <code>serves</code> method might look something like this:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Determine if the driver serves the request.\n *\n * <span class="hljs-doctag">@param</span>  string  $sitePath\n * <span class="hljs-doctag">@param</span>  string  $siteName\n * <span class="hljs-doctag">@param</span>  string  $uri\n * <span class="hljs-doctag">@return</span> bool\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">serves</span><span class="hljs-params">($sitePath, $siteName, $uri)</span>\n</span>{\n    <span class="hljs-keyword">return</span> is_dir($sitePath.<span class="hljs-string">\'/wp-admin\'</span>);\n}</code></pre>\n  \n          <p><a name="the-code-isstaticfile-code-method"></a></p>\n          <h4>\n            <a href="#the-code-isstaticfile-code-method">\n              The <code>isStaticFile</code> Method\n            </a>\n          </h4><p>The <code>isStaticFile</code> should determine if the incoming request is for a file that is &quot;static&quot;, such as an image or a stylesheet. If the file is static, the method should return the fully qualified path to the static file on disk. If the incoming request is not for a static file, the method should return <code>false</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">/**\n * Determine <span class="hljs-keyword">if</span> the incoming request <span class="hljs-literal">is</span> <span class="hljs-keyword">for</span> a static file.\n *\n * @param <span class="hljs-built_in"> string</span>  <span class="hljs-variable">$sitePath</span>\n * @param <span class="hljs-built_in"> string</span>  <span class="hljs-variable">$siteName</span>\n * @param <span class="hljs-built_in"> string</span>  <span class="hljs-variable">$uri</span>\n * @<span class="hljs-keyword">return</span><span class="hljs-built_in"> string</span><span class="hljs-built_in">|false</span>\n */\npublic <span class="hljs-keyword">function</span> isStaticFile(<span class="hljs-variable">$sitePath</span>, <span class="hljs-variable">$siteName</span>, <span class="hljs-variable">$uri</span>)\n{\n    <span class="hljs-keyword">if</span> (file_exists(<span class="hljs-variable">$staticFilePath</span> = <span class="hljs-variable">$sitePath</span>.<span class="hljs-string">\'/public/\'</span>.<span class="hljs-variable">$uri</span>)) {\n        <span class="hljs-keyword">return</span> <span class="hljs-variable">$staticFilePath</span>;\n    }\n\n    <span class="hljs-keyword">return</span><span class="hljs-built_in"> false</span>;\n}</code></pre>\n  <blockquote>\n<p>{note} The <code>isStaticFile</code> method will only be called if the <code>serves</code> method returns <code>true</code> for the incoming request and the request URI is not <code>/</code>.</p>\n</blockquote>\n\n          <p><a name="the-code-frontcontrollerpath-code-method"></a></p>\n          <h4>\n            <a href="#the-code-frontcontrollerpath-code-method">\n              The <code>frontControllerPath</code> Method\n            </a>\n          </h4><p>The <code>frontControllerPath</code> method should return the fully qualified path to your application&#39;s &quot;front controller&quot;, which is typically your &quot;index.php&quot; file or equivalent:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the fully resolved path to the application\'s front controller.\n *\n * <span class="hljs-doctag">@param</span>  string  $sitePath\n * <span class="hljs-doctag">@param</span>  string  $siteName\n * <span class="hljs-doctag">@param</span>  string  $uri\n * <span class="hljs-doctag">@return</span> string\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">frontControllerPath</span><span class="hljs-params">($sitePath, $siteName, $uri)</span>\n</span>{\n    <span class="hljs-keyword">return</span> $sitePath.<span class="hljs-string">\'/public/index.php\'</span>;\n}</code></pre>\n  <p><a name="local-drivers"></a></p>\n\n          <p><a name="local-drivers"></a></p>\n          <h3>\n            <a href="#local-drivers">\n              Local Drivers\n            </a>\n          </h3><p>If you would like to define a custom Valet driver for a single application, create a <code>LocalValetDriver.php</code> in the application&#39;s root directory. Your custom driver may extend the base <code>ValetDriver</code> class or extend an existing application specific driver such as the <code>LaravelValetDriver</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LocalValetDriver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">LaravelValetDriver</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Determine if the driver serves the request.\n     *\n     * <span class="hljs-doctag">@param</span>  string  $sitePath\n     * <span class="hljs-doctag">@param</span>  string  $siteName\n     * <span class="hljs-doctag">@param</span>  string  $uri\n     * <span class="hljs-doctag">@return</span> bool\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">serves</span><span class="hljs-params">($sitePath, $siteName, $uri)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;\n    }\n\n    <span class="hljs-comment">/**\n     * Get the fully resolved path to the application\'s front controller.\n     *\n     * <span class="hljs-doctag">@param</span>  string  $sitePath\n     * <span class="hljs-doctag">@param</span>  string  $siteName\n     * <span class="hljs-doctag">@param</span>  string  $uri\n     * <span class="hljs-doctag">@return</span> string\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">frontControllerPath</span><span class="hljs-params">($sitePath, $siteName, $uri)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> $sitePath.<span class="hljs-string">\'/public_html/index.php\'</span>;\n    }\n}</code></pre>\n  <p><a name="other-valet-commands"></a></p>\n\n          <p><a name="other-valet-commands"></a></p>\n          <h2>\n            <a href="#other-valet-commands">\n              Other Valet Commands\n            </a>\n          </h2><table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>valet forget</code></td>\n<td>Run this command from a &quot;parked&quot; directory to remove it from the parked directory list.</td>\n</tr>\n<tr>\n<td><code>valet log</code></td>\n<td>View a list of logs which are written by Valet&#39;s services.</td>\n</tr>\n<tr>\n<td><code>valet paths</code></td>\n<td>View all of your &quot;parked&quot; paths.</td>\n</tr>\n<tr>\n<td><code>valet restart</code></td>\n<td>Restart the Valet daemon.</td>\n</tr>\n<tr>\n<td><code>valet start</code></td>\n<td>Start the Valet daemon.</td>\n</tr>\n<tr>\n<td><code>valet stop</code></td>\n<td>Stop the Valet daemon.</td>\n</tr>\n<tr>\n<td><code>valet trust</code></td>\n<td>Add sudoers files for Brew and Valet to allow Valet commands to be run without prompting for passwords.</td>\n</tr>\n<tr>\n<td><code>valet uninstall</code></td>\n<td>Uninstall Valet: Shows instructions for manual uninstall; or pass the <code>--force</code> parameter to aggressively delete all of Valet.</td>\n</tr>\n</tbody></table>\n<p><a name="valet-directories-and-files"></a></p>\n\n          <p><a name="valet-directories-amp-files"></a></p>\n          <h2>\n            <a href="#valet-directories-amp-files">\n              Valet Directories &amp; Files\n            </a>\n          </h2><p>You may find the following directory and file information helpful while troubleshooting issues with your Valet environment:</p>\n<table>\n<thead>\n<tr>\n<th>File / Path</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>~/.config/valet/</code></td>\n<td>Contains all of Valet&#39;s configuration. You may wish to maintain a backup of this folder.</td>\n</tr>\n<tr>\n<td><code>~/.config/valet/dnsmasq.d/</code></td>\n<td>Contains DNSMasq&#39;s configuration.</td>\n</tr>\n<tr>\n<td><code>~/.config/valet/Drivers/</code></td>\n<td>Contains custom Valet drivers.</td>\n</tr>\n<tr>\n<td><code>~/.config/valet/Extensions/</code></td>\n<td>Contains custom Valet extensions / commands.</td>\n</tr>\n<tr>\n<td><code>~/.config/valet/Nginx/</code></td>\n<td>Contains all Valet generated Nginx site configurations. These files are rebuilt when running the <code>install</code>, <code>secure</code>, and <code>tld</code> commands.</td>\n</tr>\n<tr>\n<td><code>~/.config/valet/Sites/</code></td>\n<td>Contains all symbolic links for linked projects.</td>\n</tr>\n<tr>\n<td><code>~/.config/valet/config.json</code></td>\n<td>Valet&#39;s master configuration file</td>\n</tr>\n<tr>\n<td><code>~/.config/valet/valet.sock</code></td>\n<td>The PHP-FPM socket used by Valet&#39;s Nginx configuration. This will only exist if PHP is running properly.</td>\n</tr>\n<tr>\n<td><code>~/.config/valet/Log/fpm-php.www.log</code></td>\n<td>User log for PHP errors.</td>\n</tr>\n<tr>\n<td><code>~/.config/valet/Log/nginx-error.log</code></td>\n<td>User log for Nginx errors.</td>\n</tr>\n<tr>\n<td><code>/usr/local/var/log/php-fpm.log</code></td>\n<td>System log for PHP-FPM errors.</td>\n</tr>\n<tr>\n<td><code>/usr/local/var/log/nginx</code></td>\n<td>Contains Nginx access and error logs.</td>\n</tr>\n<tr>\n<td><code>/usr/local/etc/php/X.X/conf.d</code></td>\n<td>Contains <code>*.ini</code> files for various PHP configuration settings.</td>\n</tr>\n<tr>\n<td><code>/usr/local/etc/php/X.X/php-fpm.d/valet-fpm.conf</code></td>\n<td>PHP-FPM pool configuration file.</td>\n</tr>\n<tr>\n<td><code>~/.composer/vendor/laravel/valet/cli/stubs/secure.valet.conf</code></td>\n<td>The default Nginx configuration used for building site certificates.</td>\n</tr>\n</tbody></table>\n'},1:function(s,e){},"101d":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="mocking"></a></p>\n          <h1>\n            <a href="#mocking">\n              Mocking\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#mocking-objects">Mocking Objects</a></li>\n<li><a href="#bus-fake">Bus Fake</a></li>\n<li><a href="#event-fake">Event Fake</a><ul>\n<li><a href="#scoped-event-fakes">Scoped Event Fakes</a></li>\n</ul>\n</li>\n<li><a href="#mail-fake">Mail Fake</a></li>\n<li><a href="#notification-fake">Notification Fake</a></li>\n<li><a href="#queue-fake">Queue Fake</a></li>\n<li><a href="#storage-fake">Storage Fake</a></li>\n<li><a href="#mocking-facades">Facades</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>When testing Laravel applications, you may wish to &quot;mock&quot; certain aspects of your application so they are not actually executed during a given test. For example, when testing a controller that dispatches an event, you may wish to mock the event listeners so they are not actually executed during the test. This allows you to only test the controller&#39;s HTTP response without worrying about the execution of the event listeners, since the event listeners can be tested in their own test case.</p>\n<p>Laravel provides helpers for mocking events, jobs, and facades out of the box. These helpers primarily provide a convenience layer over Mockery so you do not have to manually make complicated Mockery method calls. You can also use <router-link to="http://docs.mockery.io/en/latest/">Mockery</router-link> or PHPUnit to create your own mocks or spies.</p>\n<p><a name="mocking-objects"></a></p>\n\n          <p><a name="mocking-objects"></a></p>\n          <h2>\n            <a href="#mocking-objects">\n              Mocking Objects\n            </a>\n          </h2><p>When mocking an object that is going to be injected into your application via Laravel&#39;s service container, you will need to bind your mocked instance into the container as an <code>instance</code> binding. This will instruct the container to use your mocked instance of the object instead of constructing the object itself:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Service</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Mockery</span>;\n\n<span class="hljs-keyword">$this</span>-&gt;instance(Service::class, Mockery::mock(Service::class, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($mock)</span> </span>{\n    $mock-&gt;shouldReceive(<span class="hljs-string">\'process\'</span>)-&gt;once();\n}));</code></pre>\n  <p>In order to make this more convenient, you may use the <code>mock</code> method, which is provided by Laravel&#39;s base test case class:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Service</span>;\n\n<span class="hljs-keyword">$this</span>-&gt;mock(Service::class, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($mock)</span> </span>{\n    $mock-&gt;shouldReceive(<span class="hljs-string">\'process\'</span>)-&gt;once();\n});</code></pre>\n  <p>You may use the <code>partialMock</code> method when you only need to mock a few methods of an object. The methods that are not mocked will be executed normally when called:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Service</span>;\n\n<span class="hljs-keyword">$this</span>-&gt;partialMock(Service::class, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($mock)</span> </span>{\n    $mock-&gt;shouldReceive(<span class="hljs-string">\'process\'</span>)-&gt;once();\n});</code></pre>\n  <p>Similarly, if you want to spy on an object, Laravel&#39;s base test case class offers a <code>spy</code> method as a convenient wrapper around the <code>Mockery::spy</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Service</span>;\n\n<span class="hljs-keyword">$this</span>-&gt;spy(Service::class, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($mock)</span> </span>{\n    $mock-&gt;shouldHaveReceived(<span class="hljs-string">\'process\'</span>);\n});</code></pre>\n  <p><a name="bus-fake"></a></p>\n\n          <p><a name="bus-fake"></a></p>\n          <h2>\n            <a href="#bus-fake">\n              Bus Fake\n            </a>\n          </h2><p>As an alternative to mocking, you may use the <code>Bus</code> facade&#39;s <code>fake</code> method to prevent jobs from being dispatched. When using fakes, assertions are made after the code under test is executed:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">Feature</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Jobs</span>\\<span class="hljs-title">ShipOrder</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">RefreshDatabase</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">WithoutMiddleware</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Bus</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">TestCase</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExampleTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span>\n</span>{\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testOrderShipping</span><span class="hljs-params">()</span>\n    </span>{\n        Bus::fake();\n\n        <span class="hljs-comment">// Perform order shipping...</span>\n\n        Bus::assertDispatched(ShipOrder::class, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($job)</span> <span class="hljs-title">use</span> <span class="hljs-params">($order)</span> </span>{\n            <span class="hljs-keyword">return</span> $job-&gt;order-&gt;id === $order-&gt;id;\n        });\n\n        <span class="hljs-comment">// Assert a job was not dispatched...</span>\n        Bus::assertNotDispatched(AnotherJob::class);\n    }\n}</span></code></pre>\n  <p><a name="event-fake"></a></p>\n\n          <p><a name="event-fake"></a></p>\n          <h2>\n            <a href="#event-fake">\n              Event Fake\n            </a>\n          </h2><p>As an alternative to mocking, you may use the <code>Event</code> facade&#39;s <code>fake</code> method to prevent all event listeners from executing. You may then assert that events were dispatched and even inspect the data they received. When using fakes, assertions are made after the code under test is executed:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">Feature</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Events</span>\\<span class="hljs-title">OrderFailedToShip</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Events</span>\\<span class="hljs-title">OrderShipped</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">RefreshDatabase</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">WithoutMiddleware</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Event</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">TestCase</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExampleTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Test order shipping.\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testOrderShipping</span><span class="hljs-params">()</span>\n    </span>{\n        Event::fake();\n\n        <span class="hljs-comment">// Perform order shipping...</span>\n\n        Event::assertDispatched(OrderShipped::class, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($e)</span> <span class="hljs-title">use</span> <span class="hljs-params">($order)</span> </span>{\n            <span class="hljs-keyword">return</span> $e-&gt;order-&gt;id === $order-&gt;id;\n        });\n\n        <span class="hljs-comment">// Assert an event was dispatched twice...</span>\n        Event::assertDispatched(OrderShipped::class, <span class="hljs-number">2</span>);\n\n        <span class="hljs-comment">// Assert an event was not dispatched...</span>\n        Event::assertNotDispatched(OrderFailedToShip::class);\n    }\n}</span></code></pre>\n  <blockquote>\n<p>{note} After calling <code>Event::fake()</code>, no event listeners will be executed. So, if your tests use model factories that rely on events, such as creating a UUID during a model&#39;s <code>creating</code> event, you should call <code>Event::fake()</code> <strong>after</strong> using your factories.</p>\n</blockquote>\n\n          <p><a name="faking-a-subset-of-events"></a></p>\n          <h4>\n            <a href="#faking-a-subset-of-events">\n              Faking A Subset Of Events\n            </a>\n          </h4><p>If you only want to fake event listeners for a specific set of events, you may pass them to the <code>fake</code> or <code>fakeFor</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Test order process.\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testOrderProcess</span><span class="hljs-params">()</span>\n</span>{\n    Event::fake([\n        OrderCreated::class,\n    ]);\n\n    $order = factory(Order::class)-&gt;create();\n\n    Event::assertDispatched(OrderCreated::class);\n\n    <span class="hljs-comment">// Other events are dispatched as normal...</span>\n    $order-&gt;update([...]);\n}</code></pre>\n  <p><a name="scoped-event-fakes"></a></p>\n\n          <p><a name="scoped-event-fakes"></a></p>\n          <h3>\n            <a href="#scoped-event-fakes">\n              Scoped Event Fakes\n            </a>\n          </h3><p>If you only want to fake event listeners for a portion of your test, you may use the <code>fakeFor</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">Feature</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Events</span>\\<span class="hljs-title">OrderCreated</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Order</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">RefreshDatabase</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Event</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">WithoutMiddleware</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">TestCase</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExampleTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Test order process.\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testOrderProcess</span><span class="hljs-params">()</span>\n    </span>{\n        $order = Event::fakeFor(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n            $order = factory(Order::class)-&gt;create();\n\n            Event::assertDispatched(OrderCreated::class);\n\n            <span class="hljs-keyword">return</span> $order;\n        });\n\n        <span class="hljs-comment">// Events are dispatched as normal and observers will run ...</span>\n        $order-&gt;update([...]);\n    }\n}</span></code></pre>\n  <p><a name="mail-fake"></a></p>\n\n          <p><a name="mail-fake"></a></p>\n          <h2>\n            <a href="#mail-fake">\n              Mail Fake\n            </a>\n          </h2><p>You may use the <code>Mail</code> facade&#39;s <code>fake</code> method to prevent mail from being sent. You may then assert that <router-link to="/docs/{{version}}/mail">mailables</router-link> were sent to users and even inspect the data they received. When using fakes, assertions are made after the code under test is executed:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">Feature</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Mail</span>\\<span class="hljs-title">OrderShipped</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">RefreshDatabase</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">WithoutMiddleware</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Mail</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">TestCase</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExampleTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span>\n</span>{\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testOrderShipping</span><span class="hljs-params">()</span>\n    </span>{\n        Mail::fake();\n\n        <span class="hljs-comment">// Assert that no mailables were sent...</span>\n        Mail::assertNothingSent();\n\n        <span class="hljs-comment">// Perform order shipping...</span>\n\n        Mail::assertSent(OrderShipped::class, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($mail)</span> <span class="hljs-title">use</span> <span class="hljs-params">($order)</span> </span>{\n            <span class="hljs-keyword">return</span> $mail-&gt;order-&gt;id === $order-&gt;id;\n        });\n\n        <span class="hljs-comment">// Assert a message was sent to the given users...</span>\n        Mail::assertSent(OrderShipped::class, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($mail)</span> <span class="hljs-title">use</span> <span class="hljs-params">($user)</span> </span>{\n            <span class="hljs-keyword">return</span> $mail-&gt;hasTo($user-&gt;email) &amp;&amp;\n                   $mail-&gt;hasCc(<span class="hljs-string">\'...\'</span>) &amp;&amp;\n                   $mail-&gt;hasBcc(<span class="hljs-string">\'...\'</span>);\n        });\n\n        <span class="hljs-comment">// Assert a mailable was sent twice...</span>\n        Mail::assertSent(OrderShipped::class, <span class="hljs-number">2</span>);\n\n        <span class="hljs-comment">// Assert a mailable was not sent...</span>\n        Mail::assertNotSent(AnotherMailable::class);\n    }\n}</span></code></pre>\n  <p>If you are queueing mailables for delivery in the background, you should use the <code>assertQueued</code> method instead of <code>assertSent</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Mail<span class="hljs-type">::assertQueued</span>(<span class="hljs-params">...</span>);\nMail<span class="hljs-type">::assertNotQueued</span>(<span class="hljs-params">...</span>);</code></pre>\n  <p><a name="notification-fake"></a></p>\n\n          <p><a name="notification-fake"></a></p>\n          <h2>\n            <a href="#notification-fake">\n              Notification Fake\n            </a>\n          </h2><p>You may use the <code>Notification</code> facade&#39;s <code>fake</code> method to prevent notifications from being sent. You may then assert that <router-link to="/docs/{{version}}/notifications">notifications</router-link> were sent to users and even inspect the data they received. When using fakes, assertions are made after the code under test is executed:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">Feature</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Notifications</span>\\<span class="hljs-title">OrderShipped</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">RefreshDatabase</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">WithoutMiddleware</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Notifications</span>\\<span class="hljs-title">AnonymousNotifiable</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Notification</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">TestCase</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExampleTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span>\n</span>{\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testOrderShipping</span><span class="hljs-params">()</span>\n    </span>{\n        Notification::fake();\n\n        <span class="hljs-comment">// Assert that no notifications were sent...</span>\n        Notification::assertNothingSent();\n\n        <span class="hljs-comment">// Perform order shipping...</span>\n\n        Notification::assertSentTo(\n            $user,\n            OrderShipped::class,\n            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($notification, $channels)</span> <span class="hljs-title">use</span> <span class="hljs-params">($order)</span> </span>{\n                <span class="hljs-keyword">return</span> $notification-&gt;order-&gt;id === $order-&gt;id;\n            }\n        );\n\n        <span class="hljs-comment">// Assert a notification was sent to the given users...</span>\n        Notification::assertSentTo(\n            [$user], OrderShipped::class\n        );\n\n        <span class="hljs-comment">// Assert a notification was not sent...</span>\n        Notification::assertNotSentTo(\n            [$user], AnotherNotification::class\n        );\n\n        <span class="hljs-comment">// Assert a notification was sent via Notification::route() method...</span>\n        Notification::assertSentTo(\n            <span class="hljs-keyword">new</span> AnonymousNotifiable, OrderShipped::class\n        );\n\n        <span class="hljs-comment">// Assert Notification::route() method sent notification to the correct user...</span>\n        Notification::assertSentTo(\n            <span class="hljs-keyword">new</span> AnonymousNotifiable,\n            OrderShipped::class,\n            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($notification, $channels, $notifiable)</span> <span class="hljs-title">use</span> <span class="hljs-params">($user)</span> </span>{\n                <span class="hljs-keyword">return</span> $notifiable-&gt;routes[<span class="hljs-string">\'mail\'</span>] === $user-&gt;email;\n            }\n        );\n    }\n}</span></code></pre>\n  <p><a name="queue-fake"></a></p>\n\n          <p><a name="queue-fake"></a></p>\n          <h2>\n            <a href="#queue-fake">\n              Queue Fake\n            </a>\n          </h2><p>As an alternative to mocking, you may use the <code>Queue</code> facade&#39;s <code>fake</code> method to prevent jobs from being queued. You may then assert that jobs were pushed to the queue and even inspect the data they received. When using fakes, assertions are made after the code under test is executed:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">Feature</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Jobs</span>\\<span class="hljs-title">ShipOrder</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">RefreshDatabase</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">WithoutMiddleware</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Queue</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">TestCase</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExampleTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span>\n</span>{\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testOrderShipping</span><span class="hljs-params">()</span>\n    </span>{\n        Queue::fake();\n\n        <span class="hljs-comment">// Assert that no jobs were pushed...</span>\n        Queue::assertNothingPushed();\n\n        <span class="hljs-comment">// Perform order shipping...</span>\n\n        Queue::assertPushed(ShipOrder::class, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($job)</span> <span class="hljs-title">use</span> <span class="hljs-params">($order)</span> </span>{\n            <span class="hljs-keyword">return</span> $job-&gt;order-&gt;id === $order-&gt;id;\n        });\n\n        <span class="hljs-comment">// Assert a job was pushed to a given queue...</span>\n        Queue::assertPushedOn(<span class="hljs-string">\'queue-name\'</span>, ShipOrder::class);\n\n        <span class="hljs-comment">// Assert a job was pushed twice...</span>\n        Queue::assertPushed(ShipOrder::class, <span class="hljs-number">2</span>);\n\n        <span class="hljs-comment">// Assert a job was not pushed...</span>\n        Queue::assertNotPushed(AnotherJob::class);\n\n        <span class="hljs-comment">// Assert a job was pushed with a specific chain...</span>\n        Queue::assertPushedWithChain(ShipOrder::class, [\n            AnotherJob::class,\n            FinalJob::class\n        ]);\n    }\n}</span></code></pre>\n  <p><a name="storage-fake"></a></p>\n\n          <p><a name="storage-fake"></a></p>\n          <h2>\n            <a href="#storage-fake">\n              Storage Fake\n            </a>\n          </h2><p>The <code>Storage</code> facade&#39;s <code>fake</code> method allows you to easily generate a fake disk that, combined with the file generation utilities of the <code>UploadedFile</code> class, greatly simplifies the testing of file uploads. For example:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">Feature</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">RefreshDatabase</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">WithoutMiddleware</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">UploadedFile</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Storage</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">TestCase</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExampleTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span>\n</span>{\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testAlbumUpload</span><span class="hljs-params">()</span>\n    </span>{\n        Storage::fake(<span class="hljs-string">\'photos\'</span>);\n\n        $response = <span class="hljs-keyword">$this</span>-&gt;json(<span class="hljs-string">\'POST\'</span>, <span class="hljs-string">\'/photos\'</span>, [\n            UploadedFile::fake()-&gt;image(<span class="hljs-string">\'photo1.jpg\'</span>),\n            UploadedFile::fake()-&gt;image(<span class="hljs-string">\'photo2.jpg\'</span>)\n        ]);\n\n        <span class="hljs-comment">// Assert one or more files were stored...</span>\n        Storage::disk(<span class="hljs-string">\'photos\'</span>)-&gt;assertExists(<span class="hljs-string">\'photo1.jpg\'</span>);\n        Storage::disk(<span class="hljs-string">\'photos\'</span>)-&gt;assertExists([<span class="hljs-string">\'photo1.jpg\'</span>, <span class="hljs-string">\'photo2.jpg\'</span>]);\n\n        <span class="hljs-comment">// Assert one or more files were not stored...</span>\n        Storage::disk(<span class="hljs-string">\'photos\'</span>)-&gt;assertMissing(<span class="hljs-string">\'missing.jpg\'</span>);\n        Storage::disk(<span class="hljs-string">\'photos\'</span>)-&gt;assertMissing([<span class="hljs-string">\'missing.jpg\'</span>, <span class="hljs-string">\'non-existing.jpg\'</span>]);\n    }\n}</span></code></pre>\n  <blockquote>\n<p>{tip} By default, the <code>fake</code> method will delete all files in its temporary directory. If you would like to keep these files, you may use the &quot;persistentFake&quot; method instead.</p>\n</blockquote>\n<p><a name="mocking-facades"></a></p>\n\n          <p><a name="facades"></a></p>\n          <h2>\n            <a href="#facades">\n              Facades\n            </a>\n          </h2><p>Unlike traditional static method calls, <router-link to="/docs/{{version}}/facades">facades</router-link> may be mocked. This provides a great advantage over traditional static methods and grants you the same testability you would have if you were using dependency injection. When testing, you may often want to mock a call to a Laravel facade in one of your controllers. For example, consider the following controller action:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Cache</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Show a list of all users of the application.\n     *\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">()</span>\n    </span>{\n        $value = Cache::get(<span class="hljs-string">\'key\'</span>);\n\n        <span class="hljs-comment">//</span>\n    }\n}</span></code></pre>\n  <p>We can mock the call to the <code>Cache</code> facade by using the <code>shouldReceive</code> method, which will return an instance of a <router-link to="https://github.com/padraic/mockery">Mockery</router-link> mock. Since facades are actually resolved and managed by the Laravel <router-link to="/docs/{{version}}/container">service container</router-link>, they have much more testability than a typical static class. For example, let&#39;s mock our call to the <code>Cache</code> facade&#39;s <code>get</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">Feature</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">RefreshDatabase</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">WithoutMiddleware</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Cache</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">TestCase</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserControllerTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span>\n</span>{\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testGetIndex</span><span class="hljs-params">()</span>\n    </span>{\n        Cache::shouldReceive(<span class="hljs-string">\'get\'</span>)\n                    -&gt;once()\n                    -&gt;with(<span class="hljs-string">\'key\'</span>)\n                    -&gt;andReturn(<span class="hljs-string">\'value\'</span>);\n\n        $response = <span class="hljs-keyword">$this</span>-&gt;get(<span class="hljs-string">\'/users\'</span>);\n\n        <span class="hljs-comment">// ...</span>\n    }\n}</span></code></pre>\n  <blockquote>\n<p>{note} You should not mock the <code>Request</code> facade. Instead, pass the input you desire into the HTTP helper methods such as <code>get</code> and <code>post</code> when running your test. Likewise, instead of mocking the <code>Config</code> facade, call the <code>Config::set</code> method in your tests.</p>\n</blockquote>\n'},"10ba":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="http-responses"></a></p>\n          <h1>\n            <a href="#http-responses">\n              HTTP Responses\n            </a>\n          </h1><ul>\n<li><a href="#creating-responses">Creating Responses</a><ul>\n<li><a href="#attaching-headers-to-responses">Attaching Headers To Responses</a></li>\n<li><a href="#attaching-cookies-to-responses">Attaching Cookies To Responses</a></li>\n<li><a href="#cookies-and-encryption">Cookies &amp; Encryption</a></li>\n</ul>\n</li>\n<li><a href="#redirects">Redirects</a><ul>\n<li><a href="#redirecting-named-routes">Redirecting To Named Routes</a></li>\n<li><a href="#redirecting-controller-actions">Redirecting To Controller Actions</a></li>\n<li><a href="#redirecting-external-domains">Redirecting To External Domains</a></li>\n<li><a href="#redirecting-with-flashed-session-data">Redirecting With Flashed Session Data</a></li>\n</ul>\n</li>\n<li><a href="#other-response-types">Other Response Types</a><ul>\n<li><a href="#view-responses">View Responses</a></li>\n<li><a href="#json-responses">JSON Responses</a></li>\n<li><a href="#file-downloads">File Downloads</a></li>\n<li><a href="#file-responses">File Responses</a></li>\n</ul>\n</li>\n<li><a href="#response-macros">Response Macros</a></li>\n</ul>\n<p><a name="creating-responses"></a></p>\n\n          <p><a name="creating-responses"></a></p>\n          <h2>\n            <a href="#creating-responses">\n              Creating Responses\n            </a>\n          </h2>\n          <p><a name="strings-amp-arrays"></a></p>\n          <h4>\n            <a href="#strings-amp-arrays">\n              Strings &amp; Arrays\n            </a>\n          </h4><p>All routes and controllers should return a response to be sent back to the user&#39;s browser. Laravel provides several different ways to return responses. The most basic response is returning a string from a route or controller. The framework will automatically convert the string into a full HTTP response:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsInZpZXdDb2RlIjoie3stLSBub3QgbmVlZGVkIC0tfX0iLCJjb250cm9sbGVyQ29kZSI6ImNsYXNzIFRpbmtlcndlbGxDb250cm9sbGVyIHtcblxuICBwdWJsaWMgZnVuY3Rpb24gaW5kZXgoKSB7XG4gICAgcmV0dXJuICdIZWxsbyBXb3JsZCc7XG4gIH1cblxufSIsImhhc2giOiJyZXNwb25zZXMtc3RyaW5ncy1hbmRhbXA7LWFycmF5cyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">Route::<span class="hljs-keyword">get</span>(<span class="hljs-string">\'/\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-string">\'Hello World\'</span>;\n});</code></pre>\n  <p>In addition to returning strings from your routes and controllers, you may also return arrays. The framework will automatically convert the array into a JSON response:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsInZpZXdDb2RlIjoie3stLSBub3QgbmVlZGVkIC0tfX0iLCJjb250cm9sbGVyQ29kZSI6ImNsYXNzIFRpbmtlcndlbGxDb250cm9sbGVyIHtcblxuICBwdWJsaWMgZnVuY3Rpb24gaW5kZXgoKSB7XG4gICAgcmV0dXJuIFsxLCAyLCAzXTtcbiAgfVxuXG59IiwiaGFzaCI6InJlc3BvbnNlcy1zdHJpbmdzLWFuZGFtcDstYXJyYXlzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">Route::<span class="hljs-keyword">get</span>(<span class="hljs-string">\'/\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];\n});</code></pre>\n  <blockquote>\n<p>{tip} Did you know you can also return <router-link to="/docs/eloquent-collections">Eloquent collections</router-link> from your routes or controllers? They will automatically be converted to JSON. Give it a shot!</p>\n</blockquote>\n\n          <p><a name="response-objects"></a></p>\n          <h4>\n            <a href="#response-objects">\n              Response Objects\n            </a>\n          </h4><p>Typically, you won&#39;t just be returning simple strings or arrays from your route actions. Instead, you will be returning full <code>Illuminate\\Http\\Response</code> instances or <router-link to="/docs/views">views</router-link>.</p>\n<p>Returning a full <code>Response</code> instance allows you to customize the response&#39;s HTTP status code and headers. A <code>Response</code> instance inherits from the <code>Symfony\\Component\\HttpFoundation\\Response</code> class, which provides a variety of methods for building HTTP responses:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsInZpZXdDb2RlIjoie3stLSBub3QgbmVlZGVkIC0tfX0iLCJjb250cm9sbGVyQ29kZSI6ImNsYXNzIFRpbmtlcndlbGxDb250cm9sbGVyIHtcblxuICBwdWJsaWMgZnVuY3Rpb24gaW5kZXgoKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlKCdIZWxsbyBXb3JsZCcsIDIwMClcbiAgICAgICAgICAgICAgICAgIC0+aGVhZGVyKCdDb250ZW50LVR5cGUnLCAndGV4dC9wbGFpbicpO1xuICB9XG5cbn0iLCJoYXNoIjoicmVzcG9uc2VzLXJlc3BvbnNlLW9iamVjdHMifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'home\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> response(<span class="hljs-string">\'Hello World\'</span>, <span class="hljs-number">200</span>)\n                  -&gt;header(<span class="hljs-string">\'Content-Type\'</span>, <span class="hljs-string">\'text/plain\'</span>);\n});</code></pre>\n  <p><a name="attaching-headers-to-responses"></a></p>\n\n          <p><a name="attaching-headers-to-responses"></a></p>\n          <h4>\n            <a href="#attaching-headers-to-responses">\n              Attaching Headers To Responses\n            </a>\n          </h4><p>Keep in mind that most response methods are chainable, allowing for the fluent construction of response instances. For example, you may use the <code>header</code> method to add a series of headers to the response before sending it back to the user:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsInZpZXdDb2RlIjoie3stLSBub3QgbmVlZGVkIC0tfX0iLCJjb250cm9sbGVyQ29kZSI6ImNsYXNzIFRpbmtlcndlbGxDb250cm9sbGVyIHtcblxuICBwdWJsaWMgZnVuY3Rpb24gaW5kZXgoKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlKCdIZWxsbyBXb3JsZCcsIDIwMClcbiAgICAgICAgICAgICAgICAtPmhlYWRlcignQ29udGVudC1UeXBlJywgJHR5cGUpXG4gICAgICAgICAgICAgICAgLT5oZWFkZXIoJ1gtSGVhZGVyLU9uZScsICdIZWFkZXIgVmFsdWUnKVxuICAgICAgICAgICAgICAgIC0+aGVhZGVyKCdYLUhlYWRlci1Ud28nLCAnSGVhZGVyIFZhbHVlJyk7XG4gIH1cblxufSIsImhhc2giOiJyZXNwb25zZXMtYXR0YWNoaW5nLWhlYWRlcnMtdG8tcmVzcG9uc2VzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> response<span class="hljs-function"><span class="hljs-params">($content)</span>\n            -&gt;</span>header<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'Content-Type\'</span>, $type)</span>\n            -&gt;</span>header<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'X-Header-One\'</span>, <span class="hljs-string">\'Header Value\'</span>)</span>\n            -&gt;</span>header(<span class="hljs-string">\'X-Header-Two\'</span>, <span class="hljs-string">\'Header Value\'</span>);</code></pre>\n  <p>Or, you may use the <code>withHeaders</code> method to specify an array of headers to be added to the response:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> response($content)\n            -&gt;withHeaders([\n                <span class="hljs-string">\'Content-Type\'</span> =&gt; $type,\n                <span class="hljs-string">\'X-Header-One\'</span> =&gt; <span class="hljs-string">\'Header Value\'</span>,\n                <span class="hljs-string">\'X-Header-Two\'</span> =&gt; <span class="hljs-string">\'Header Value\'</span>,\n            ]);</code></pre>\n  \n          <p><a name="cache-control-middleware"></a></p>\n          <h5>\n            <a href="#cache-control-middleware">\n              Cache Control Middleware\n            </a>\n          </h5><p>Laravel includes a <code>cache.headers</code> middleware, which may be used to quickly set the <code>Cache-Control</code> header for a group of routes. If <code>etag</code> is specified in the list of directives, an MD5 hash of the response content will automatically be set as the ETag identifier:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::middleware(<span class="hljs-string">\'cache.headers:public;max_age=2628000;etag\'</span>)-&gt;group(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    Route::get(<span class="hljs-string">\'privacy\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n        <span class="hljs-comment">// ...</span>\n    });\n\n    Route::get(<span class="hljs-string">\'terms\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n        <span class="hljs-comment">// ...</span>\n    });\n});</code></pre>\n  <p><a name="attaching-cookies-to-responses"></a></p>\n\n          <p><a name="attaching-cookies-to-responses"></a></p>\n          <h4>\n            <a href="#attaching-cookies-to-responses">\n              Attaching Cookies To Responses\n            </a>\n          </h4><p>The <code>cookie</code> method on response instances allows you to easily attach cookies to the response. For example, you may use the <code>cookie</code> method to generate a cookie and fluently attach it to the response instance like so:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsInZpZXdDb2RlIjoie3stLSBub3QgbmVlZGVkIC0tfX0iLCJjb250cm9sbGVyQ29kZSI6ImNsYXNzIFRpbmtlcndlbGxDb250cm9sbGVyIHtcblxuICBwdWJsaWMgZnVuY3Rpb24gaW5kZXgoKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlKCdIZWxsbyBXb3JsZCcsIDIwMClcbiAgICAgICAgICAgICAgICAtPmhlYWRlcignQ29udGVudC1UeXBlJywgJHR5cGUpXG4gICAgICAgICAgICAgICAgLT5jb29raWUoJ25hbWUnLCAndmFsdWUnLCAkbWludXRlcyk7XG4gIH1cblxufSIsImhhc2giOiJyZXNwb25zZXMtYXR0YWNoaW5nLWNvb2tpZXMtdG8tcmVzcG9uc2VzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> response<span class="hljs-function"><span class="hljs-params">($content)</span>\n                -&gt;</span>header<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'Content-Type\'</span>, $type)</span>\n                -&gt;</span>cookie(<span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'value\'</span>, $minutes);</code></pre>\n  <p>The <code>cookie</code> method also accepts a few more arguments which are used less frequently. Generally, these arguments have the same purpose and meaning as the arguments that would be given to PHP&#39;s native <router-link to="https://secure.php.net/manual/en/function.setcookie.php">setcookie</router-link> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">-&gt;cookie(<span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span>, <span class="hljs-variable">$minutes</span>, <span class="hljs-variable">$path</span>, <span class="hljs-variable">$domain</span>, <span class="hljs-variable">$secure</span>, <span class="hljs-variable">$httpOnly</span>)</code></pre>\n  <p>Alternatively, you can use the <code>Cookie</code> facade to &quot;queue&quot; cookies for attachment to the outgoing response from your application. The <code>queue</code> method accepts a <code>Cookie</code> instance or the arguments needed to create a <code>Cookie</code> instance. These cookies will be attached to the outgoing response before it is sent to the browser:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Cookie::queue(Cookie::make(<span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'value\'</span>, <span class="hljs-variable">$minutes</span>));\n\nCookie::queue(<span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'value\'</span>, <span class="hljs-variable">$minutes</span>);</code></pre>\n  <p><a name="cookies-and-encryption"></a></p>\n\n          <p><a name="cookies-amp-encryption"></a></p>\n          <h4>\n            <a href="#cookies-amp-encryption">\n              Cookies &amp; Encryption\n            </a>\n          </h4><p>By default, all cookies generated by Laravel are encrypted and signed so that they can&#39;t be modified or read by the client. If you would like to disable encryption for a subset of cookies generated by your application, you may use the <code>$except</code> property of the <code>App\\Http\\Middleware\\EncryptCookies</code> middleware, which is located in the <code>app/Http/Middleware</code> directory:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">/**\n * The names of the cookies that should<span class="hljs-built_in"> not </span>be encrypted.\n *\n * @var<span class="hljs-built_in"> array\n</span> */<span class="hljs-keyword">\nprotected</span> $except = [\n    \'cookie_name\',\n];</code></pre>\n  <p><a name="redirects"></a></p>\n\n          <p><a name="redirects"></a></p>\n          <h2>\n            <a href="#redirects">\n              Redirects\n            </a>\n          </h2><p>Redirect responses are instances of the <code>Illuminate\\Http\\RedirectResponse</code> class, and contain the proper headers needed to redirect the user to another URL. There are several ways to generate a <code>RedirectResponse</code> instance. The simplest method is to use the global <code>redirect</code> helper:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::<span class="hljs-keyword">get</span>(<span class="hljs-string">\'dashboard\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">\'home/dashboard\'</span>);\n});</code></pre>\n  <p>Sometimes you may wish to redirect the user to their previous location, such as when a submitted form is invalid. You may do so by using the global <code>back</code> helper function. Since this feature utilizes the <router-link to="/docs/session">session</router-link>, make sure the route calling the <code>back</code> function is using the <code>web</code> middleware group or has all of the session middleware applied:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::post(<span class="hljs-string">\'user/profile\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">// Validate the request...</span>\n\n    <span class="hljs-keyword">return</span> back()-&gt;withInput();\n});</code></pre>\n  <p><a name="redirecting-named-routes"></a></p>\n\n          <p><a name="redirecting-to-named-routes"></a></p>\n          <h3>\n            <a href="#redirecting-to-named-routes">\n              Redirecting To Named Routes\n            </a>\n          </h3><p>When you call the <code>redirect</code> helper with no parameters, an instance of <code>Illuminate\\Routing\\Redirector</code> is returned, allowing you to call any method on the <code>Redirector</code> instance. For example, to generate a <code>RedirectResponse</code> to a named route, you may use the <code>route</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> redirect<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>route(<span class="hljs-string">\'login\'</span>);</code></pre>\n  <p>If your route has parameters, you may pass them as the second argument to the <code>route</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// For a route with the following URI: profile/{id}</span>\n\n<span class="hljs-keyword">return</span> redirect()-&gt;route(<span class="hljs-string">\'profile\'</span>, [<span class="hljs-string">\'id\'</span> =&gt; <span class="hljs-number">1</span>]);</code></pre>\n  \n          <p><a name="populating-parameters-via-eloquent-models"></a></p>\n          <h4>\n            <a href="#populating-parameters-via-eloquent-models">\n              Populating Parameters Via Eloquent Models\n            </a>\n          </h4><p>If you are redirecting to a route with an &quot;ID&quot; parameter that is being populated from an Eloquent model, you may pass the model itself. The ID will be extracted automatically:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// For a route with the following URI: profile/{id}</span>\n\n<span class="hljs-keyword">return</span> redirect()-&gt;route(<span class="hljs-string">\'profile\'</span>, [$user]);</code></pre>\n  <p>If you would like to customize the value that is placed in the route parameter, you should override the <code>getRouteKey</code> method on your Eloquent model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the value of the model\'s route key.\n *\n * <span class="hljs-doctag">@return</span> mixed\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRouteKey</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;slug;\n}</code></pre>\n  <p><a name="redirecting-controller-actions"></a></p>\n\n          <p><a name="redirecting-to-controller-actions"></a></p>\n          <h3>\n            <a href="#redirecting-to-controller-actions">\n              Redirecting To Controller Actions\n            </a>\n          </h3><p>You may also generate redirects to <router-link to="/docs/controllers">controller actions</router-link>. To do so, pass the controller and action name to the <code>action</code> method. Remember, you do not need to specify the full namespace to the controller since Laravel&#39;s <code>RouteServiceProvider</code> will automatically set the base controller namespace:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> redirect<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>action(<span class="hljs-string">\'HomeController@index\'</span>);</code></pre>\n  <p>If your controller route requires parameters, you may pass them as the second argument to the <code>action</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> redirect<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>action(\n    <span class="hljs-string">\'UserController@profile\'</span>, [<span class="hljs-string">\'id\'</span> =&gt; <span class="hljs-number">1</span>]\n);</code></pre>\n  <p><a name="redirecting-external-domains"></a></p>\n\n          <p><a name="redirecting-to-external-domains"></a></p>\n          <h3>\n            <a href="#redirecting-to-external-domains">\n              Redirecting To External Domains\n            </a>\n          </h3><p>Sometimes you may need to redirect to a domain outside of your application. You may do so by calling the <code>away</code> method, which creates a <code>RedirectResponse</code> without any additional URL encoding, validation, or verification:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsInZpZXdDb2RlIjoie3stLSBub3QgbmVlZGVkIC0tfX0iLCJjb250cm9sbGVyQ29kZSI6ImNsYXNzIFRpbmtlcndlbGxDb250cm9sbGVyIHtcblxuICBwdWJsaWMgZnVuY3Rpb24gaW5kZXgoKSB7XG4gICAgcmV0dXJuIHJlZGlyZWN0KCktPmF3YXkoJ2h0dHBzOi8vd3d3Lmdvb2dsZS5jb20nKTtcbiAgfVxuXG59IiwiaGFzaCI6InJlc3BvbnNlcy1yZWRpcmVjdGluZy10by1leHRlcm5hbC1kb21haW5zIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> redirect<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>away(<span class="hljs-string">\'https://www.google.com\'</span>);</code></pre>\n  <p><a name="redirecting-with-flashed-session-data"></a></p>\n\n          <p><a name="redirecting-with-flashed-session-data"></a></p>\n          <h3>\n            <a href="#redirecting-with-flashed-session-data">\n              Redirecting With Flashed Session Data\n            </a>\n          </h3><p>Redirecting to a new URL and <router-link to="/docs/session#flash-data">flashing data to the session</router-link> are usually done at the same time. Typically, this is done after successfully performing an action when you flash a success message to the session. For convenience, you may create a <code>RedirectResponse</code> instance and flash data to the session in a single, fluent method chain:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::post(<span class="hljs-string">\'user/profile\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">// Update the user\'s profile...</span>\n\n    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">\'dashboard\'</span>)-&gt;with(<span class="hljs-string">\'status\'</span>, <span class="hljs-string">\'Profile updated!\'</span>);\n});</code></pre>\n  <p>After the user is redirected, you may display the flashed message from the <router-link to="/docs/session">session</router-link>. For example, using <router-link to="/docs/blade">Blade syntax</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">@<span class="hljs-keyword">if</span> (session(<span class="hljs-string">\'status\'</span>))\n    &lt;<span class="hljs-keyword">div</span> <span class="hljs-class"><span class="hljs-keyword">class</span>="<span class="hljs-title">alert</span> <span class="hljs-title">alert</span>-<span class="hljs-title">success</span>"&gt;\n        </span>{{ session(<span class="hljs-string">\'status\'</span>) }}\n    &lt;/<span class="hljs-keyword">div</span>&gt;\n@endif</code></pre>\n  <p><a name="other-response-types"></a></p>\n\n          <p><a name="other-response-types"></a></p>\n          <h2>\n            <a href="#other-response-types">\n              Other Response Types\n            </a>\n          </h2><p>The <code>response</code> helper may be used to generate other types of response instances. When the <code>response</code> helper is called without arguments, an implementation of the <code>Illuminate\\Contracts\\Routing\\ResponseFactory</code> <router-link to="/docs/contracts">contract</router-link> is returned. This contract provides several helpful methods for generating responses.</p>\n<p><a name="view-responses"></a></p>\n\n          <p><a name="view-responses"></a></p>\n          <h3>\n            <a href="#view-responses">\n              View Responses\n            </a>\n          </h3><p>If you need control over the response&#39;s status and headers but also need to return a <router-link to="/docs/views">view</router-link> as the response&#39;s content, you should use the <code>view</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> response<span class="hljs-function"><span class="hljs-params">()</span>\n            -&gt;</span>view<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'hello\'</span>, $data, <span class="hljs-number">200</span>)</span>\n            -&gt;</span>header(<span class="hljs-string">\'Content-Type\'</span>, $type);</code></pre>\n  <p>Of course, if you do not need to pass a custom HTTP status code or custom headers, you should use the global <code>view</code> helper function.</p>\n<p><a name="json-responses"></a></p>\n\n          <p><a name="json-responses"></a></p>\n          <h3>\n            <a href="#json-responses">\n              JSON Responses\n            </a>\n          </h3><p>The <code>json</code> method will automatically set the <code>Content-Type</code> header to <code>application/json</code>, as well as convert the given array to JSON using the <code>json_encode</code> PHP function:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> response<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>json([\n    <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Abigail\'</span>,\n    <span class="hljs-string">\'state\'</span> =&gt; <span class="hljs-string">\'CA\'</span>\n]);</code></pre>\n  <p>If you would like to create a JSONP response, you may use the <code>json</code> method in combination with the <code>withCallback</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> response<span class="hljs-function"><span class="hljs-params">()</span>\n            -&gt;</span>json<span class="hljs-function"><span class="hljs-params">([<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Abigail\'</span>, <span class="hljs-string">\'state\'</span> =&gt; <span class="hljs-string">\'CA\'</span>])</span>\n            -&gt;</span>withCallback($request-&gt;input(<span class="hljs-string">\'callback\'</span>));</code></pre>\n  <p><a name="file-downloads"></a></p>\n\n          <p><a name="file-downloads"></a></p>\n          <h3>\n            <a href="#file-downloads">\n              File Downloads\n            </a>\n          </h3><p>The <code>download</code> method may be used to generate a response that forces the user&#39;s browser to download the file at the given path. The <code>download</code> method accepts a file name as the second argument to the method, which will determine the file name that is seen by the user downloading the file. Finally, you may pass an array of HTTP headers as the third argument to the method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> response<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>download($pathToFile);\n\n<span class="hljs-keyword">return</span> response<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>download($pathToFile, $name, $headers);\n\n<span class="hljs-keyword">return</span> response<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>download<span class="hljs-function"><span class="hljs-params">($pathToFile)</span>-&gt;</span>deleteFileAfterSend();</code></pre>\n  <blockquote>\n<p>{note} Symfony HttpFoundation, which manages file downloads, requires the file being downloaded to have an ASCII file name.</p>\n</blockquote>\n\n          <p><a name="streamed-downloads"></a></p>\n          <h4>\n            <a href="#streamed-downloads">\n              Streamed Downloads\n            </a>\n          </h4><p>Sometimes you may wish to turn the string response of a given operation into a downloadable response without having to write the contents of the operation to disk. You may use the <code>streamDownload</code> method in this scenario. This method accepts a callback, file name, and an optional array of headers as its arguments:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> response<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>streamDownload(<span class="hljs-keyword">function</span> () {\n    echo GitHub::api<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'repo\'</span>)</span>\n                -&gt;</span>contents<span class="hljs-function"><span class="hljs-params">()</span>\n                -&gt;</span>readme(<span class="hljs-string">\'laravel\'</span>, <span class="hljs-string">\'laravel\'</span>)[<span class="hljs-string">\'contents\'</span>];\n}, <span class="hljs-string">\'laravel-readme.md\'</span>);</code></pre>\n  <p><a name="file-responses"></a></p>\n\n          <p><a name="file-responses"></a></p>\n          <h3>\n            <a href="#file-responses">\n              File Responses\n            </a>\n          </h3><p>The <code>file</code> method may be used to display a file, such as an image or PDF, directly in the user&#39;s browser instead of initiating a download. This method accepts the path to the file as its first argument and an array of headers as its second argument:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> response<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>file($pathToFile);\n\n<span class="hljs-keyword">return</span> response<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>file($pathToFile, $headers);</code></pre>\n  <p><a name="response-macros"></a></p>\n\n          <p><a name="response-macros"></a></p>\n          <h2>\n            <a href="#response-macros">\n              Response Macros\n            </a>\n          </h2><p>If you would like to define a custom response that you can re-use in a variety of your routes and controllers, you may use the <code>macro</code> method on the <code>Response</code> facade. For example, from a <router-link to="/docs/providers">service provider&#39;s</router-link> <code>boot</code> method:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsInZpZXdDb2RlIjoie3stLSBub3QgbmVlZGVkIC0tfX0iLCJjb250cm9sbGVyQ29kZSI6ImNsYXNzIFRpbmtlcndlbGxDb250cm9sbGVyIHtcblxuICBwdWJsaWMgZnVuY3Rpb24gaW5kZXgoKSB7XG4gICAgUmVzcG9uc2U6Om1hY3JvKCdjYXBzJywgZnVuY3Rpb24gKCR2YWx1ZSkge1xuICAgICAgICByZXR1cm4gUmVzcG9uc2U6Om1ha2Uoc3RydG91cHBlcigkdmFsdWUpKTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXNwb25zZSgpLT5jYXBzKCdmb28nKTtcbiAgfVxuXG59IiwiaGFzaCI6InJlc3BvbnNlcy1yZXNwb25zZS1tYWNyb3MifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Providers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Response</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">ServiceProvider</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResponseMacroServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Register the application\'s response macros.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n    </span>{\n        Response::macro(<span class="hljs-string">\'caps\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($value)</span> </span>{\n            <span class="hljs-keyword">return</span> Response::make(strtoupper($value));\n        });\n    }\n}</span></code></pre>\n  <p>The <code>macro</code> function accepts a name as its first argument, and a Closure as its second. The macro&#39;s Closure will be executed when calling the macro name from a <code>ResponseFactory</code> implementation or the <code>response</code> helper:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> response<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>caps(<span class="hljs-string">\'foo\'</span>);</code></pre>\n  '},1160:function(s,e,a){},"11ea":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="eloquent-api-resources"></a></p>\n          <h1>\n            <a href="#eloquent-api-resources">\n              Eloquent: API Resources\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#generating-resources">Generating Resources</a></li>\n<li><a href="#concept-overview">Concept Overview</a><ul>\n<li><a href="#resource-collections">Resource Collections</a></li>\n</ul>\n</li>\n<li><a href="#writing-resources">Writing Resources</a><ul>\n<li><a href="#data-wrapping">Data Wrapping</a></li>\n<li><a href="#pagination">Pagination</a></li>\n<li><a href="#conditional-attributes">Conditional Attributes</a></li>\n<li><a href="#conditional-relationships">Conditional Relationships</a></li>\n<li><a href="#adding-meta-data">Adding Meta Data</a></li>\n</ul>\n</li>\n<li><a href="#resource-responses">Resource Responses</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>When building an API, you may need a transformation layer that sits between your Eloquent models and the JSON responses that are actually returned to your application&#39;s users. Laravel&#39;s resource classes allow you to expressively and easily transform your models and model collections into JSON.</p>\n<p><a name="generating-resources"></a></p>\n\n          <p><a name="generating-resources"></a></p>\n          <h2>\n            <a href="#generating-resources">\n              Generating Resources\n            </a>\n          </h2><p>To generate a resource class, you may use the <code>make:resource</code> Artisan command. By default, resources will be placed in the <code>app/Http/Resources</code> directory of your application. Resources extend the <code>Illuminate\\Http\\Resources\\Json\\JsonResource</code> class:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">make</span><span class="hljs-selector-pseudo">:resource</span> <span class="hljs-selector-tag">User</span></code></pre>\n  \n          <p><a name="resource-collections"></a></p>\n          <h4>\n            <a href="#resource-collections">\n              Resource Collections\n            </a>\n          </h4><p>In addition to generating resources that transform individual models, you may generate resources that are responsible for transforming collections of models. This allows your response to include links and other meta information that is relevant to an entire collection of a given resource.</p>\n<p>To create a resource collection, you should use the <code>--collection</code> flag when creating the resource. Or, including the word <code>Collection</code> in the resource name will indicate to Laravel that it should create a collection resource. Collection resources extend the <code>Illuminate\\Http\\Resources\\Json\\ResourceCollection</code> class:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan make:resource<span class="hljs-built_in"> Users </span>--collection\n\nphp artisan make:resource UserCollection</code></pre>\n  <p><a name="concept-overview"></a></p>\n\n          <p><a name="concept-overview"></a></p>\n          <h2>\n            <a href="#concept-overview">\n              Concept Overview\n            </a>\n          </h2><blockquote>\n<p>{tip} This is a high-level overview of resources and resource collections. You are highly encouraged to read the other sections of this documentation to gain a deeper understanding of the customization and power offered to you by resources.</p>\n</blockquote>\n<p>Before diving into all of the options available to you when writing resources, let&#39;s first take a high-level look at how resources are used within Laravel. A resource class represents a single model that needs to be transformed into a JSON structure. For example, here is a simple <code>User</code> resource class:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Resources</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Resources</span>\\<span class="hljs-title">Json</span>\\<span class="hljs-title">JsonResource</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JsonResource</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Transform the resource into an array.\n     *\n     * <span class="hljs-doctag">@param</span>  \\Illuminate\\Http\\Request  $request\n     * <span class="hljs-doctag">@return</span> array\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toArray</span><span class="hljs-params">($request)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> [\n            <span class="hljs-string">\'id\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;id,\n            <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;name,\n            <span class="hljs-string">\'email\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;email,\n            <span class="hljs-string">\'created_at\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;created_at,\n            <span class="hljs-string">\'updated_at\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;updated_at,\n        ];\n    }\n}</span></code></pre>\n  <p>Every resource class defines a <code>toArray</code> method which returns the array of attributes that should be converted to JSON when sending the response. Notice that we can access model properties directly from the <code>$this</code> variable. This is because a resource class will automatically proxy property and method access down to the underlying model for convenient access. Once the resource is defined, it may be returned from a route or controller:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Resources</span>\\<span class="hljs-title">User</span> <span class="hljs-title">as</span> <span class="hljs-title">UserResource</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n\nRoute::get(<span class="hljs-string">\'/user\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UserResource(User::find(<span class="hljs-number">1</span>));\n});</code></pre>\n  <p><a name="resource-collections"></a></p>\n\n          <p><a name="resource-collections"></a></p>\n          <h3>\n            <a href="#resource-collections">\n              Resource Collections\n            </a>\n          </h3><p>If you are returning a collection of resources or a paginated response, you may use the <code>collection</code> method when creating the resource instance in your route or controller:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Resources</span>\\<span class="hljs-title">User</span> <span class="hljs-title">as</span> <span class="hljs-title">UserResource</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n\nRoute::get(<span class="hljs-string">\'/user\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> UserResource::collection(User::all());\n});</code></pre>\n  <p>Note that this does not allow any addition of meta data that may need to be returned with the collection. If you would like to customize the resource collection response, you may create a dedicated resource to represent the collection:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">make</span><span class="hljs-selector-pseudo">:resource</span> <span class="hljs-selector-tag">UserCollection</span></code></pre>\n  <p>Once the resource collection class has been generated, you may easily define any meta data that should be included with the response:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Resources</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Resources</span>\\<span class="hljs-title">Json</span>\\<span class="hljs-title">ResourceCollection</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserCollection</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ResourceCollection</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Transform the resource collection into an array.\n     *\n     * <span class="hljs-doctag">@param</span>  \\Illuminate\\Http\\Request  $request\n     * <span class="hljs-doctag">@return</span> array\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toArray</span><span class="hljs-params">($request)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> [\n            <span class="hljs-string">\'data\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;collection,\n            <span class="hljs-string">\'links\'</span> =&gt; [\n                <span class="hljs-string">\'self\'</span> =&gt; <span class="hljs-string">\'link-value\'</span>,\n            ],\n        ];\n    }\n}</span></code></pre>\n  <p>After defining your resource collection, it may be returned from a route or controller:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Resources</span>\\<span class="hljs-title">UserCollection</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n\nRoute::get(<span class="hljs-string">\'/users\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UserCollection(User::all());\n});</code></pre>\n  \n          <p><a name="preserving-collection-keys"></a></p>\n          <h4>\n            <a href="#preserving-collection-keys">\n              Preserving Collection Keys\n            </a>\n          </h4><p>When returning a resource collection from a route, Laravel resets the collection&#39;s keys so that they are in simple numerical order. However, you may add a <code>preserveKeys</code> property to your resource class indicating if collection keys should be preserved:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">&lt;?php\n\nnamespace <span class="hljs-type">App</span>\\<span class="hljs-type">Http</span>\\<span class="hljs-type">Resources</span>;\n\nuse <span class="hljs-type">Illuminate</span>\\<span class="hljs-type">Http</span>\\<span class="hljs-type">Resources</span>\\<span class="hljs-type">Json</span>\\<span class="hljs-type">JsonResource</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JsonResource</span></span>\n{\n    <span class="hljs-comment">/**\n     * Indicates if the resource\'s collection keys should be preserved.\n     *\n     * @var bool\n     */</span>\n    public $preserveKeys = <span class="hljs-literal">true</span>;\n}</code></pre>\n  <p>When the <code>preserveKeys</code> property is set to <code>true</code>, collection keys will be preserved:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Resources</span>\\<span class="hljs-title">User</span> <span class="hljs-title">as</span> <span class="hljs-title">UserResource</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n\nRoute::get(<span class="hljs-string">\'/user\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> UserResource::collection(User::all()-&gt;keyBy-&gt;id);\n});</code></pre>\n  \n          <p><a name="customizing-the-underlying-resource-class"></a></p>\n          <h4>\n            <a href="#customizing-the-underlying-resource-class">\n              Customizing The Underlying Resource Class\n            </a>\n          </h4><p>Typically, the <code>$this-&gt;collection</code> property of a resource collection is automatically populated with the result of mapping each item of the collection to its singular resource class. The singular resource class is assumed to be the collection&#39;s class name without the trailing <code>Collection</code> string.</p>\n<p>For example, <code>UserCollection</code> will attempt to map the given user instances into the <code>User</code> resource. To customize this behavior, you may override the <code>$collects</code> property of your resource collection:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Resources</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Resources</span>\\<span class="hljs-title">Json</span>\\<span class="hljs-title">ResourceCollection</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserCollection</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ResourceCollection</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The resource that this resource collects.\n     *\n     * <span class="hljs-doctag">@var</span> string\n     */</span>\n    <span class="hljs-keyword">public</span> $collects = <span class="hljs-string">\'App\\Http\\Resources\\Member\'</span>;\n}</span></code></pre>\n  <p><a name="writing-resources"></a></p>\n\n          <p><a name="writing-resources"></a></p>\n          <h2>\n            <a href="#writing-resources">\n              Writing Resources\n            </a>\n          </h2><blockquote>\n<p>{tip} If you have not read the <a href="#concept-overview">concept overview</a>, you are highly encouraged to do so before proceeding with this documentation.</p>\n</blockquote>\n<p>In essence, resources are simple. They only need to transform a given model into an array. So, each resource contains a <code>toArray</code> method which translates your model&#39;s attributes into an API friendly array that can be returned to your users:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Resources</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Resources</span>\\<span class="hljs-title">Json</span>\\<span class="hljs-title">JsonResource</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JsonResource</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Transform the resource into an array.\n     *\n     * <span class="hljs-doctag">@param</span>  \\Illuminate\\Http\\Request  $request\n     * <span class="hljs-doctag">@return</span> array\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toArray</span><span class="hljs-params">($request)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> [\n            <span class="hljs-string">\'id\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;id,\n            <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;name,\n            <span class="hljs-string">\'email\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;email,\n            <span class="hljs-string">\'created_at\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;created_at,\n            <span class="hljs-string">\'updated_at\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;updated_at,\n        ];\n    }\n}</span></code></pre>\n  <p>Once a resource has been defined, it may be returned directly from a route or controller:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Resources</span>\\<span class="hljs-title">User</span> <span class="hljs-title">as</span> <span class="hljs-title">UserResource</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n\nRoute::get(<span class="hljs-string">\'/user\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UserResource(User::find(<span class="hljs-number">1</span>));\n});</code></pre>\n  \n          <p><a name="relationships"></a></p>\n          <h4>\n            <a href="#relationships">\n              Relationships\n            </a>\n          </h4><p>If you would like to include related resources in your response, you may add them to the array returned by your <code>toArray</code> method. In this example, we will use the <code>Post</code> resource&#39;s <code>collection</code> method to add the user&#39;s blog posts to the resource response:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Transform the resource into an array.\n *\n * <span class="hljs-doctag">@param</span>  \\Illuminate\\Http\\Request  $request\n * <span class="hljs-doctag">@return</span> array\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toArray</span><span class="hljs-params">($request)</span>\n</span>{\n    <span class="hljs-keyword">return</span> [\n        <span class="hljs-string">\'id\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;id,\n        <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;name,\n        <span class="hljs-string">\'email\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;email,\n        <span class="hljs-string">\'posts\'</span> =&gt; PostResource::collection(<span class="hljs-keyword">$this</span>-&gt;posts),\n        <span class="hljs-string">\'created_at\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;created_at,\n        <span class="hljs-string">\'updated_at\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;updated_at,\n    ];\n}</code></pre>\n  <blockquote>\n<p>{tip} If you would like to include relationships only when they have already been loaded, check out the documentation on <a href="#conditional-relationships">conditional relationships</a>.</p>\n</blockquote>\n\n          <p><a name="resource-collections"></a></p>\n          <h4>\n            <a href="#resource-collections">\n              Resource Collections\n            </a>\n          </h4><p>While resources translate a single model into an array, resource collections translate a collection of models into an array. It is not absolutely necessary to define a resource collection class for each one of your model types since all resources provide a <code>collection</code> method to generate an &quot;ad-hoc&quot; resource collection on the fly:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Resources</span>\\<span class="hljs-title">User</span> <span class="hljs-title">as</span> <span class="hljs-title">UserResource</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n\nRoute::get(<span class="hljs-string">\'/user\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> UserResource::collection(User::all());\n});</code></pre>\n  <p>However, if you need to customize the meta data returned with the collection, it will be necessary to define a resource collection:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Resources</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Resources</span>\\<span class="hljs-title">Json</span>\\<span class="hljs-title">ResourceCollection</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserCollection</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ResourceCollection</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Transform the resource collection into an array.\n     *\n     * <span class="hljs-doctag">@param</span>  \\Illuminate\\Http\\Request  $request\n     * <span class="hljs-doctag">@return</span> array\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toArray</span><span class="hljs-params">($request)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> [\n            <span class="hljs-string">\'data\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;collection,\n            <span class="hljs-string">\'links\'</span> =&gt; [\n                <span class="hljs-string">\'self\'</span> =&gt; <span class="hljs-string">\'link-value\'</span>,\n            ],\n        ];\n    }\n}</span></code></pre>\n  <p>Like singular resources, resource collections may be returned directly from routes or controllers:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Resources</span>\\<span class="hljs-title">UserCollection</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n\nRoute::get(<span class="hljs-string">\'/users\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UserCollection(User::all());\n});</code></pre>\n  <p><a name="data-wrapping"></a></p>\n\n          <p><a name="data-wrapping"></a></p>\n          <h3>\n            <a href="#data-wrapping">\n              Data Wrapping\n            </a>\n          </h3><p>By default, your outer-most resource is wrapped in a <code>data</code> key when the resource response is converted to JSON. So, for example, a typical resource collection response looks like the following:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">{\n    <span class="hljs-attr">"data"</span>: [\n        {\n            <span class="hljs-attr">"id"</span>: <span class="hljs-number">1</span>,\n            <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Eladio Schroeder Sr."</span>,\n            <span class="hljs-attr">"email"</span>: <span class="hljs-string">"therese28@example.com"</span>,\n        },\n        {\n            <span class="hljs-attr">"id"</span>: <span class="hljs-number">2</span>,\n            <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Liliana Mayert"</span>,\n            <span class="hljs-attr">"email"</span>: <span class="hljs-string">"evandervort@example.com"</span>,\n        }\n    ]\n}</code></pre>\n  <p>If you would like to disable the wrapping of the outer-most resource, you may use the <code>withoutWrapping</code> method on the base resource class. Typically, you should call this method from your <code>AppServiceProvider</code> or another <router-link to="/docs/{{version}}/providers">service provider</router-link> that is loaded on every request to your application:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Providers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Resources</span>\\<span class="hljs-title">Json</span>\\<span class="hljs-title">Resource</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">ServiceProvider</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Register any application services.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-comment">//</span>\n    }\n\n    <span class="hljs-comment">/**\n     * Bootstrap any application services.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n    </span>{\n        Resource::withoutWrapping();\n    }\n}</span></code></pre>\n  <blockquote>\n<p>{note} The <code>withoutWrapping</code> method only affects the outer-most response and will not remove <code>data</code> keys that you manually add to your own resource collections.</p>\n</blockquote>\n\n          <p><a name="wrapping-nested-resources"></a></p>\n          <h3>\n            <a href="#wrapping-nested-resources">\n              Wrapping Nested Resources\n            </a>\n          </h3><p>You have total freedom to determine how your resource&#39;s relationships are wrapped. If you would like all resource collections to be wrapped in a <code>data</code> key, regardless of their nesting, you should define a resource collection class for each resource and return the collection within a <code>data</code> key.</p>\n<p>You may be wondering if this will cause your outer-most resource to be wrapped in two <code>data</code> keys. Don&#39;t worry, Laravel will never let your resources be accidentally double-wrapped, so you don&#39;t have to be concerned about the nesting level of the resource collection you are transforming:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Resources</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Resources</span>\\<span class="hljs-title">Json</span>\\<span class="hljs-title">ResourceCollection</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommentsCollection</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ResourceCollection</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Transform the resource collection into an array.\n     *\n     * <span class="hljs-doctag">@param</span>  \\Illuminate\\Http\\Request  $request\n     * <span class="hljs-doctag">@return</span> array\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toArray</span><span class="hljs-params">($request)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> [<span class="hljs-string">\'data\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;collection];\n    }\n}</span></code></pre>\n  \n          <p><a name="data-wrapping-and-pagination"></a></p>\n          <h3>\n            <a href="#data-wrapping-and-pagination">\n              Data Wrapping And Pagination\n            </a>\n          </h3><p>When returning paginated collections in a resource response, Laravel will wrap your resource data in a <code>data</code> key even if the <code>withoutWrapping</code> method has been called. This is because paginated responses always contain <code>meta</code> and <code>links</code> keys with information about the paginator&#39;s state:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">{\n    <span class="hljs-attr">"data"</span>: [\n        {\n            <span class="hljs-attr">"id"</span>: <span class="hljs-number">1</span>,\n            <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Eladio Schroeder Sr."</span>,\n            <span class="hljs-attr">"email"</span>: <span class="hljs-string">"therese28@example.com"</span>,\n        },\n        {\n            <span class="hljs-attr">"id"</span>: <span class="hljs-number">2</span>,\n            <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Liliana Mayert"</span>,\n            <span class="hljs-attr">"email"</span>: <span class="hljs-string">"evandervort@example.com"</span>,\n        }\n    ],\n    <span class="hljs-attr">"links"</span>:{\n        <span class="hljs-attr">"first"</span>: <span class="hljs-string">"http://example.com/pagination?page=1"</span>,\n        <span class="hljs-attr">"last"</span>: <span class="hljs-string">"http://example.com/pagination?page=1"</span>,\n        <span class="hljs-attr">"prev"</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">"next"</span>: <span class="hljs-literal">null</span>\n    },\n    <span class="hljs-attr">"meta"</span>:{\n        <span class="hljs-attr">"current_page"</span>: <span class="hljs-number">1</span>,\n        <span class="hljs-attr">"from"</span>: <span class="hljs-number">1</span>,\n        <span class="hljs-attr">"last_page"</span>: <span class="hljs-number">1</span>,\n        <span class="hljs-attr">"path"</span>: <span class="hljs-string">"http://example.com/pagination"</span>,\n        <span class="hljs-attr">"per_page"</span>: <span class="hljs-number">15</span>,\n        <span class="hljs-attr">"to"</span>: <span class="hljs-number">10</span>,\n        <span class="hljs-attr">"total"</span>: <span class="hljs-number">10</span>\n    }\n}</code></pre>\n  <p><a name="pagination"></a></p>\n\n          <p><a name="pagination"></a></p>\n          <h3>\n            <a href="#pagination">\n              Pagination\n            </a>\n          </h3><p>You may always pass a paginator instance to the <code>collection</code> method of a resource or to a custom resource collection:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Resources</span>\\<span class="hljs-title">UserCollection</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n\nRoute::get(<span class="hljs-string">\'/users\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UserCollection(User::paginate());\n});</code></pre>\n  <p>Paginated responses always contain <code>meta</code> and <code>links</code> keys with information about the paginator&#39;s state:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">{\n    <span class="hljs-attr">"data"</span>: [\n        {\n            <span class="hljs-attr">"id"</span>: <span class="hljs-number">1</span>,\n            <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Eladio Schroeder Sr."</span>,\n            <span class="hljs-attr">"email"</span>: <span class="hljs-string">"therese28@example.com"</span>,\n        },\n        {\n            <span class="hljs-attr">"id"</span>: <span class="hljs-number">2</span>,\n            <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Liliana Mayert"</span>,\n            <span class="hljs-attr">"email"</span>: <span class="hljs-string">"evandervort@example.com"</span>,\n        }\n    ],\n    <span class="hljs-attr">"links"</span>:{\n        <span class="hljs-attr">"first"</span>: <span class="hljs-string">"http://example.com/pagination?page=1"</span>,\n        <span class="hljs-attr">"last"</span>: <span class="hljs-string">"http://example.com/pagination?page=1"</span>,\n        <span class="hljs-attr">"prev"</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">"next"</span>: <span class="hljs-literal">null</span>\n    },\n    <span class="hljs-attr">"meta"</span>:{\n        <span class="hljs-attr">"current_page"</span>: <span class="hljs-number">1</span>,\n        <span class="hljs-attr">"from"</span>: <span class="hljs-number">1</span>,\n        <span class="hljs-attr">"last_page"</span>: <span class="hljs-number">1</span>,\n        <span class="hljs-attr">"path"</span>: <span class="hljs-string">"http://example.com/pagination"</span>,\n        <span class="hljs-attr">"per_page"</span>: <span class="hljs-number">15</span>,\n        <span class="hljs-attr">"to"</span>: <span class="hljs-number">10</span>,\n        <span class="hljs-attr">"total"</span>: <span class="hljs-number">10</span>\n    }\n}</code></pre>\n  <p><a name="conditional-attributes"></a></p>\n\n          <p><a name="conditional-attributes"></a></p>\n          <h3>\n            <a href="#conditional-attributes">\n              Conditional Attributes\n            </a>\n          </h3><p>Sometimes you may wish to only include an attribute in a resource response if a given condition is met. For example, you may wish to only include a value if the current user is an &quot;administrator&quot;. Laravel provides a variety of helper methods to assist you in this situation. The <code>when</code> method may be used to conditionally add an attribute to a resource response:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Transform the resource into an array.\n *\n * <span class="hljs-doctag">@param</span>  \\Illuminate\\Http\\Request  $request\n * <span class="hljs-doctag">@return</span> array\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toArray</span><span class="hljs-params">($request)</span>\n</span>{\n    <span class="hljs-keyword">return</span> [\n        <span class="hljs-string">\'id\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;id,\n        <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;name,\n        <span class="hljs-string">\'email\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;email,\n        <span class="hljs-string">\'secret\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;when(Auth::user()-&gt;isAdmin(), <span class="hljs-string">\'secret-value\'</span>),\n        <span class="hljs-string">\'created_at\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;created_at,\n        <span class="hljs-string">\'updated_at\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;updated_at,\n    ];\n}</code></pre>\n  <p>In this example, the <code>secret</code> key will only be returned in the final resource response if the authenticated user&#39;s <code>isAdmin</code> method returns <code>true</code>. If the method returns <code>false</code>, the <code>secret</code> key will be removed from the resource response entirely before it is sent back to the client. The <code>when</code> method allows you to expressively define your resources without resorting to conditional statements when building the array.</p>\n<p>The <code>when</code> method also accepts a Closure as its second argument, allowing you to calculate the resulting value only if the given condition is <code>true</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'secret\'</span> =&gt; $<span class="hljs-keyword">this</span>-&gt;<span class="hljs-keyword">when</span><span class="hljs-function"><span class="hljs-params">(Auth::user()-&gt;isAdmin(), <span class="hljs-keyword">function</span> () {\n    <span class="hljs-keyword">return</span> <span class="hljs-string">\'secret-value\'</span>;\n})</span>,</span></code></pre>\n  \n          <p><a name="merging-conditional-attributes"></a></p>\n          <h4>\n            <a href="#merging-conditional-attributes">\n              Merging Conditional Attributes\n            </a>\n          </h4><p>Sometimes you may have several attributes that should only be included in the resource response based on the same condition. In this case, you may use the <code>mergeWhen</code> method to include the attributes in the response only when the given condition is <code>true</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Transform the resource into an array.\n *\n * <span class="hljs-doctag">@param</span>  \\Illuminate\\Http\\Request  $request\n * <span class="hljs-doctag">@return</span> array\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toArray</span><span class="hljs-params">($request)</span>\n</span>{\n    <span class="hljs-keyword">return</span> [\n        <span class="hljs-string">\'id\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;id,\n        <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;name,\n        <span class="hljs-string">\'email\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;email,\n        <span class="hljs-keyword">$this</span>-&gt;mergeWhen(Auth::user()-&gt;isAdmin(), [\n            <span class="hljs-string">\'first-secret\'</span> =&gt; <span class="hljs-string">\'value\'</span>,\n            <span class="hljs-string">\'second-secret\'</span> =&gt; <span class="hljs-string">\'value\'</span>,\n        ]),\n        <span class="hljs-string">\'created_at\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;created_at,\n        <span class="hljs-string">\'updated_at\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;updated_at,\n    ];\n}</code></pre>\n  <p>Again, if the given condition is <code>false</code>, these attributes will be removed from the resource response entirely before it is sent to the client.</p>\n<blockquote>\n<p>{note} The <code>mergeWhen</code> method should not be used within arrays that mix string and numeric keys. Furthermore, it should not be used within arrays with numeric keys that are not ordered sequentially.</p>\n</blockquote>\n<p><a name="conditional-relationships"></a></p>\n\n          <p><a name="conditional-relationships"></a></p>\n          <h3>\n            <a href="#conditional-relationships">\n              Conditional Relationships\n            </a>\n          </h3><p>In addition to conditionally loading attributes, you may conditionally include relationships on your resource responses based on if the relationship has already been loaded on the model. This allows your controller to decide which relationships should be loaded on the model and your resource can easily include them only when they have actually been loaded.</p>\n<p>Ultimately, this makes it easier to avoid &quot;N+1&quot; query problems within your resources. The <code>whenLoaded</code> method may be used to conditionally load a relationship. In order to avoid unnecessarily loading relationships, this method accepts the name of the relationship instead of the relationship itself:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Transform the resource into an array.\n *\n * <span class="hljs-doctag">@param</span>  \\Illuminate\\Http\\Request  $request\n * <span class="hljs-doctag">@return</span> array\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toArray</span><span class="hljs-params">($request)</span>\n</span>{\n    <span class="hljs-keyword">return</span> [\n        <span class="hljs-string">\'id\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;id,\n        <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;name,\n        <span class="hljs-string">\'email\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;email,\n        <span class="hljs-string">\'posts\'</span> =&gt; PostResource::collection(<span class="hljs-keyword">$this</span>-&gt;whenLoaded(<span class="hljs-string">\'posts\'</span>)),\n        <span class="hljs-string">\'created_at\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;created_at,\n        <span class="hljs-string">\'updated_at\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;updated_at,\n    ];\n}</code></pre>\n  <p>In this example, if the relationship has not been loaded, the <code>posts</code> key will be removed from the resource response entirely before it is sent to the client.</p>\n\n          <p><a name="conditional-pivot-information"></a></p>\n          <h4>\n            <a href="#conditional-pivot-information">\n              Conditional Pivot Information\n            </a>\n          </h4><p>In addition to conditionally including relationship information in your resource responses, you may conditionally include data from the intermediate tables of many-to-many relationships using the <code>whenPivotLoaded</code> method. The <code>whenPivotLoaded</code> method accepts the name of the pivot table as its first argument. The second argument should be a Closure that defines the value to be returned if the pivot information is available on the model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Transform the resource into an array.\n *\n * <span class="hljs-doctag">@param</span>  \\Illuminate\\Http\\Request  $request\n * <span class="hljs-doctag">@return</span> array\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toArray</span><span class="hljs-params">($request)</span>\n</span>{\n    <span class="hljs-keyword">return</span> [\n        <span class="hljs-string">\'id\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;id,\n        <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;name,\n        <span class="hljs-string">\'expires_at\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;whenPivotLoaded(<span class="hljs-string">\'role_user\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n            <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;pivot-&gt;expires_at;\n        }),\n    ];\n}</code></pre>\n  <p>If your intermediate table is using an accessor other than <code>pivot</code>, you may use the <code>whenPivotLoadedAs</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Transform the resource into an array.\n *\n * <span class="hljs-doctag">@param</span>  \\Illuminate\\Http\\Request  $request\n * <span class="hljs-doctag">@return</span> array\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toArray</span><span class="hljs-params">($request)</span>\n</span>{\n    <span class="hljs-keyword">return</span> [\n        <span class="hljs-string">\'id\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;id,\n        <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;name,\n        <span class="hljs-string">\'expires_at\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;whenPivotLoadedAs(<span class="hljs-string">\'subscription\'</span>, <span class="hljs-string">\'role_user\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n            <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;subscription-&gt;expires_at;\n        }),\n    ];\n}</code></pre>\n  <p><a name="adding-meta-data"></a></p>\n\n          <p><a name="adding-meta-data"></a></p>\n          <h3>\n            <a href="#adding-meta-data">\n              Adding Meta Data\n            </a>\n          </h3><p>Some JSON API standards require the addition of meta data to your resource and resource collections responses. This often includes things like <code>links</code> to the resource or related resources, or meta data about the resource itself. If you need to return additional meta data about a resource, include it in your <code>toArray</code> method. For example, you might include <code>link</code> information when transforming a resource collection:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Transform the resource into an array.\n *\n * <span class="hljs-doctag">@param</span>  \\Illuminate\\Http\\Request  $request\n * <span class="hljs-doctag">@return</span> array\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toArray</span><span class="hljs-params">($request)</span>\n</span>{\n    <span class="hljs-keyword">return</span> [\n        <span class="hljs-string">\'data\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;collection,\n        <span class="hljs-string">\'links\'</span> =&gt; [\n            <span class="hljs-string">\'self\'</span> =&gt; <span class="hljs-string">\'link-value\'</span>,\n        ],\n    ];\n}</code></pre>\n  <p>When returning additional meta data from your resources, you never have to worry about accidentally overriding the <code>links</code> or <code>meta</code> keys that are automatically added by Laravel when returning paginated responses. Any additional <code>links</code> you define will be merged with the links provided by the paginator.</p>\n\n          <p><a name="top-level-meta-data"></a></p>\n          <h4>\n            <a href="#top-level-meta-data">\n              Top Level Meta Data\n            </a>\n          </h4><p>Sometimes you may wish to only include certain meta data with a resource response if the resource is the outer-most resource being returned. Typically, this includes meta information about the response as a whole. To define this meta data, add a <code>with</code> method to your resource class. This method should return an array of meta data to be included with the resource response only when the resource is the outer-most resource being rendered:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Resources</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Resources</span>\\<span class="hljs-title">Json</span>\\<span class="hljs-title">ResourceCollection</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserCollection</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ResourceCollection</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Transform the resource collection into an array.\n     *\n     * <span class="hljs-doctag">@param</span>  \\Illuminate\\Http\\Request  $request\n     * <span class="hljs-doctag">@return</span> array\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toArray</span><span class="hljs-params">($request)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">parent</span>::toArray($request);\n    }\n\n    <span class="hljs-comment">/**\n     * Get additional data that should be returned with the resource array.\n     *\n     * <span class="hljs-doctag">@param</span>  \\Illuminate\\Http\\Request  $request\n     * <span class="hljs-doctag">@return</span> array\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">with</span><span class="hljs-params">($request)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> [\n            <span class="hljs-string">\'meta\'</span> =&gt; [\n                <span class="hljs-string">\'key\'</span> =&gt; <span class="hljs-string">\'value\'</span>,\n            ],\n        ];\n    }\n}</span></code></pre>\n  \n          <p><a name="adding-meta-data-when-constructing-resources"></a></p>\n          <h4>\n            <a href="#adding-meta-data-when-constructing-resources">\n              Adding Meta Data When Constructing Resources\n            </a>\n          </h4><p>You may also add top-level data when constructing resource instances in your route or controller. The <code>additional</code> method, which is available on all resources, accepts an array of data that should be added to the resource response:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">return (<span class="hljs-name">new</span> UserCollection(<span class="hljs-name">User</span>:<span class="hljs-symbol">:all</span>()-&gt;load(\'roles\')))\n                -&gt;additional([\'meta\' =&gt; [\n                    \'key\' =&gt; \'value\',\n                ]])<span class="hljs-comment">;</span></code></pre>\n  <p><a name="resource-responses"></a></p>\n\n          <p><a name="resource-responses"></a></p>\n          <h2>\n            <a href="#resource-responses">\n              Resource Responses\n            </a>\n          </h2><p>As you have already read, resources may be returned directly from routes and controllers:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Resources</span>\\<span class="hljs-title">User</span> <span class="hljs-title">as</span> <span class="hljs-title">UserResource</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n\nRoute::get(<span class="hljs-string">\'/user\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UserResource(User::find(<span class="hljs-number">1</span>));\n});</code></pre>\n  <p>However, sometimes you may need to customize the outgoing HTTP response before it is sent to the client. There are two ways to accomplish this. First, you may chain the <code>response</code> method onto the resource. This method will return an <code>Illuminate\\Http\\JsonResponse</code> instance, allowing you full control of the response&#39;s headers:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">use App<span class="hljs-string">\\Http\\Resources\\User</span> as UserResource;\nuse App<span class="hljs-string">\\User;</span>\n\nRoute::get(<span class="hljs-string">\'/user\'</span>, <span class="hljs-keyword">function</span> () {\n    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">(<span class="hljs-keyword">new</span> UserResource(User::find(<span class="hljs-number">1</span>)))</span>\n                -&gt;</span>response<span class="hljs-function"><span class="hljs-params">()</span>\n                -&gt;</span>header(<span class="hljs-string">\'X-Value\'</span>, <span class="hljs-string">\'True\'</span>);\n});</code></pre>\n  <p>Alternatively, you may define a <code>withResponse</code> method within the resource itself. This method will be called when the resource is returned as the outer-most resource in a response:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Resources</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Resources</span>\\<span class="hljs-title">Json</span>\\<span class="hljs-title">JsonResource</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JsonResource</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Transform the resource into an array.\n     *\n     * <span class="hljs-doctag">@param</span>  \\Illuminate\\Http\\Request  $request\n     * <span class="hljs-doctag">@return</span> array\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toArray</span><span class="hljs-params">($request)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> [\n            <span class="hljs-string">\'id\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;id,\n        ];\n    }\n\n    <span class="hljs-comment">/**\n     * Customize the outgoing response for the resource.\n     *\n     * <span class="hljs-doctag">@param</span>  \\Illuminate\\Http\\Request  $request\n     * <span class="hljs-doctag">@param</span>  \\Illuminate\\Http\\Response  $response\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">withResponse</span><span class="hljs-params">($request, $response)</span>\n    </span>{\n        $response-&gt;header(<span class="hljs-string">\'X-Value\'</span>, <span class="hljs-string">\'True\'</span>);\n    }\n}</span></code></pre>\n  '},1270:function(s,e,a){"use strict";var n=a("7741"),t=a.n(n);t.a},"14f2":function(s,e,a){"use strict";a.r(e),e["default"]='<p>[\n    {</p>\n\n    <pre class="language-php" v-pre><code class="language-php">    <span class="hljs-attribute">title</span>: <span class="hljs-string">\'Validation\'</span>,\n    <span class="hljs-attribute">mode</span>: <span class="hljs-string">\'http\'</span>,\n    <span class="hljs-attribute">controllerCode</span>: `use Illuminate\\Http\\Request;</code></pre>\n  <p>class TinkerwellController {</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">(Request $request)</span> </span>{\n\n  <span class="hljs-comment">// If you do not want to use the validate method on the request, </span>\n  <span class="hljs-comment">// you may create a validator instance manually using the </span>\n  <span class="hljs-comment">// Validator facade. The make method on the facade </span>\n  <span class="hljs-comment">// generates a new validator instance:</span>\n\n  $validator = Validator::make($request-&gt;all(), [\n      <span class="hljs-string">\'title\'</span> =&gt; <span class="hljs-string">\'required|unique:posts|max:255\'</span>,\n      <span class="hljs-string">\'body\'</span> =&gt; <span class="hljs-string">\'required\'</span>,\n  ]);\n\n  <span class="hljs-comment">// The first argument passed to the make method is </span>\n  <span class="hljs-comment">// the data under validation. The second argument</span>\n  <span class="hljs-comment">// is the validation rules that should be applied to the data.</span>\n\n  <span class="hljs-comment">// After checking if the request validation failed, you may </span>\n  <span class="hljs-comment">// use the withErrors method to flash the error messages to the session. </span>\n  <span class="hljs-comment">// When using this method, the $errors variable will automatically </span>\n  <span class="hljs-comment">// be shared with your views after redirection, allowing you </span>\n  <span class="hljs-comment">// to easily display them back to the user.</span>\n  <span class="hljs-comment">// The withErrors method accepts a validator, a MessageBag, or a PHP array.</span>\n\n  <span class="hljs-keyword">return</span> view(<span class="hljs-string">\'__tinker__::tinkerwell\'</span>)\n    -&gt;withErrors($validator);\n}</code></pre>\n  <p>}<code>,\n        viewCode:</code><!DOCTYPE html></p>\n<html class="h-full" lang="{{ str_replace(\'_\', \'-\', app()->getLocale()) }}">\n    <head>\n        <meta charset="utf-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1">\n\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Tinkerwell<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>\n\n    <span class="hljs-comment">&lt;!-- Styles --&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css"</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span>&gt;</span>\n\n<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"h-full"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"flex justify-center items-center h-full"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-center"</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-6xl text-gray-700 font-bold"</span>&gt;</span>\n                Validation\n            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n            </span><span class="hljs-template-variable">{{--\n              Notice that we did not have to explicitly bind the error\n              messages to the <span class="hljs-builtin-name">view</span> <span class="hljs-builtin-name">in</span> our GET route. This is because Laravel \n              will check for errors <span class="hljs-builtin-name">in</span> the session data, and automatically \n              bind them to the <span class="hljs-builtin-name">view</span> <span class="hljs-builtin-name">if</span> they are available. \n              The $errors variable will be an instance of Illuminate\\Support\\MessageBag\n           --}}</span><span class="xml">\n\n            @if ($errors-&gt;any())\n                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bg-red-300 border border-red-800 rounded"</span>&gt;</span>\n                    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>\n                        @foreach ($errors-&gt;all() as $error)\n                            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-variable">{{ $error }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n                        @endforeach\n                    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n            @endif\n        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span></code></pre>\n  </html>`\n\n\n    <pre class="language-php" v-pre><code class="language-php">}</code></pre>\n  <p>]</p>\n'},"18af":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="laravel-passport"></a></p>\n          <h1>\n            <a href="#laravel-passport">\n              Laravel Passport\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#upgrading">Upgrading Passport</a></li>\n<li><a href="#installation">Installation</a><ul>\n<li><a href="#frontend-quickstart">Frontend Quickstart</a></li>\n<li><a href="#deploying-passport">Deploying Passport</a></li>\n</ul>\n</li>\n<li><a href="#configuration">Configuration</a><ul>\n<li><a href="#token-lifetimes">Token Lifetimes</a></li>\n<li><a href="#overriding-default-models">Overriding Default Models</a></li>\n</ul>\n</li>\n<li><a href="#issuing-access-tokens">Issuing Access Tokens</a><ul>\n<li><a href="#managing-clients">Managing Clients</a></li>\n<li><a href="#requesting-tokens">Requesting Tokens</a></li>\n<li><a href="#refreshing-tokens">Refreshing Tokens</a></li>\n</ul>\n</li>\n<li><a href="#password-grant-tokens">Password Grant Tokens</a><ul>\n<li><a href="#creating-a-password-grant-client">Creating A Password Grant Client</a></li>\n<li><a href="#requesting-password-grant-tokens">Requesting Tokens</a></li>\n<li><a href="#requesting-all-scopes">Requesting All Scopes</a></li>\n<li><a href="#customizing-the-username-field">Customizing The Username Field</a></li>\n<li><a href="#customizing-the-password-validation">Customizing The Password Validation</a></li>\n</ul>\n</li>\n<li><a href="#implicit-grant-tokens">Implicit Grant Tokens</a></li>\n<li><a href="#client-credentials-grant-tokens">Client Credentials Grant Tokens</a></li>\n<li><a href="#personal-access-tokens">Personal Access Tokens</a><ul>\n<li><a href="#creating-a-personal-access-client">Creating A Personal Access Client</a></li>\n<li><a href="#managing-personal-access-tokens">Managing Personal Access Tokens</a></li>\n</ul>\n</li>\n<li><a href="#protecting-routes">Protecting Routes</a><ul>\n<li><a href="#via-middleware">Via Middleware</a></li>\n<li><a href="#passing-the-access-token">Passing The Access Token</a></li>\n</ul>\n</li>\n<li><a href="#token-scopes">Token Scopes</a><ul>\n<li><a href="#defining-scopes">Defining Scopes</a></li>\n<li><a href="#default-scope">Default Scope</a></li>\n<li><a href="#assigning-scopes-to-tokens">Assigning Scopes To Tokens</a></li>\n<li><a href="#checking-scopes">Checking Scopes</a></li>\n</ul>\n</li>\n<li><a href="#consuming-your-api-with-javascript">Consuming Your API With JavaScript</a></li>\n<li><a href="#events">Events</a></li>\n<li><a href="#testing">Testing</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Laravel already makes it easy to perform authentication via traditional login forms, but what about APIs? APIs typically use tokens to authenticate users and do not maintain session state between requests. Laravel makes API authentication a breeze using Laravel Passport, which provides a full OAuth2 server implementation for your Laravel application in a matter of minutes. Passport is built on top of the <router-link to="https://github.com/thephpleague/oauth2-server">League OAuth2 server</router-link> that is maintained by Andy Millington and Simon Hamp.</p>\n<blockquote>\n<p>{note} This documentation assumes you are already familiar with OAuth2. If you do not know anything about OAuth2, consider familiarizing yourself with the general <router-link to="https://oauth2.thephpleague.com/terminology/">terminology</router-link> and features of OAuth2 before continuing.</p>\n</blockquote>\n<p><a name="upgrading"></a></p>\n\n          <p><a name="upgrading-passport"></a></p>\n          <h2>\n            <a href="#upgrading-passport">\n              Upgrading Passport\n            </a>\n          </h2><p>When upgrading to a new major version of Passport, it&#39;s important that you carefully review <router-link to="https://github.com/laravel/passport/blob/master/UPGRADE.md">the upgrade guide</router-link>.</p>\n<p><a name="installation"></a></p>\n\n          <p><a name="installation"></a></p>\n          <h2>\n            <a href="#installation">\n              Installation\n            </a>\n          </h2><p>To get started, install Passport via the Composer package manager:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">composer</span> <span class="hljs-meta">require</span> laravel/passport</code></pre>\n  <p>The Passport service provider registers its own database migration directory with the framework, so you should migrate your database after installing the package. The Passport migrations will create the tables your application needs to store clients and access tokens:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">php artisan migrate</span></code></pre>\n  <p>Next, you should run the <code>passport:install</code> command. This command will create the encryption keys needed to generate secure access tokens. In addition, the command will create &quot;personal access&quot; and &quot;password grant&quot; clients which will be used to generate access tokens:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan passport:<span class="hljs-keyword">install</span></code></pre>\n  <p>After running this command, add the <code>Laravel\\Passport\\HasApiTokens</code> trait to your <code>App\\User</code> model. This trait will provide a few helper methods to your model which allow you to inspect the authenticated user&#39;s token and scopes:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Auth</span>\\<span class="hljs-title">User</span> <span class="hljs-title">as</span> <span class="hljs-title">Authenticatable</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Notifications</span>\\<span class="hljs-title">Notifiable</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Passport</span>\\<span class="hljs-title">HasApiTokens</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Authenticatable</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">HasApiTokens</span>, <span class="hljs-title">Notifiable</span>;\n}</span></code></pre>\n  <p>Next, you should call the <code>Passport::routes</code> method within the <code>boot</code> method of your <code>AuthServiceProvider</code>. This method will register the routes necessary to issue access tokens and revoke access tokens, clients, and personal access tokens:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Providers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Providers</span>\\<span class="hljs-title">AuthServiceProvider</span> <span class="hljs-title">as</span> <span class="hljs-title">ServiceProvider</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Gate</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Passport</span>\\<span class="hljs-title">Passport</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The policy mappings for the application.\n     *\n     * <span class="hljs-doctag">@var</span> array\n     */</span>\n    <span class="hljs-keyword">protected</span> $policies = [\n        <span class="hljs-string">\'App\\Model\'</span> =&gt; <span class="hljs-string">\'App\\Policies\\ModelPolicy\'</span>,\n    ];\n\n    <span class="hljs-comment">/**\n     * Register any authentication / authorization services.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">$this</span>-&gt;registerPolicies();\n\n        Passport::routes();\n    }\n}</span></code></pre>\n  <p>Finally, in your <code>config/auth.php</code> configuration file, you should set the <code>driver</code> option of the <code>api</code> authentication guard to <code>passport</code>. This will instruct your application to use Passport&#39;s <code>TokenGuard</code> when authenticating incoming API requests:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'guards\'</span> =&gt; [\n    <span class="hljs-string">\'web\'</span> =&gt; [\n        <span class="hljs-string">\'driver\'</span> =&gt; <span class="hljs-string">\'session\'</span>,\n        <span class="hljs-string">\'provider\'</span> =&gt; <span class="hljs-string">\'users\'</span>,\n    ],\n\n    <span class="hljs-string">\'api\'</span> =&gt; [\n        <span class="hljs-string">\'driver\'</span> =&gt; <span class="hljs-string">\'passport\'</span>,\n        <span class="hljs-string">\'provider\'</span> =&gt; <span class="hljs-string">\'users\'</span>,\n    ],\n],</code></pre>\n  \n          <p><a name="migration-customization"></a></p>\n          <h3>\n            <a href="#migration-customization">\n              Migration Customization\n            </a>\n          </h3><p>If you are not going to use Passport&#39;s default migrations, you should call the <code>Passport::ignoreMigrations</code> method in the <code>register</code> method of your <code>AppServiceProvider</code>. You may export the default migrations using <code>php artisan vendor:publish --tag=passport-migrations</code>.</p>\n<p>By default, Passport uses an integer column to store the <code>user_id</code>. If your application uses a different column type to identify users (for example: UUIDs), you should modify the default Passport migrations after publishing them.</p>\n<p><a name="frontend-quickstart"></a></p>\n\n          <p><a name="frontend-quickstart"></a></p>\n          <h3>\n            <a href="#frontend-quickstart">\n              Frontend Quickstart\n            </a>\n          </h3><blockquote>\n<p>{note} In order to use the Passport Vue components, you must be using the <router-link to="https://vuejs.org">Vue</router-link> JavaScript framework. These components also use the Bootstrap CSS framework. However, even if you are not using these tools, the components serve as a valuable reference for your own frontend implementation.</p>\n</blockquote>\n<p>Passport ships with a JSON API that you may use to allow your users to create clients and personal access tokens. However, it can be time consuming to code a frontend to interact with these APIs. So, Passport also includes pre-built <router-link to="https://vuejs.org">Vue</router-link> components you may use as an example implementation or starting point for your own implementation.</p>\n<p>To publish the Passport Vue components, use the <code>vendor:publish</code> Artisan command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan vendor:publish <span class="hljs-attribute">--tag</span>=passport-components</code></pre>\n  <p>The published components will be placed in your <code>resources/js/components</code> directory. Once the components have been published, you should register them in your <code>resources/js/app.js</code> file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Vue.component(\n    <span class="hljs-string">\'passport-clients\'</span>,\n    <span class="hljs-built_in">require</span>(<span class="hljs-string">\'./components/passport/Clients.vue\'</span>).<span class="hljs-keyword">default</span>\n);\n\nVue.component(\n    <span class="hljs-string">\'passport-authorized-clients\'</span>,\n    <span class="hljs-built_in">require</span>(<span class="hljs-string">\'./components/passport/AuthorizedClients.vue\'</span>).<span class="hljs-keyword">default</span>\n);\n\nVue.component(\n    <span class="hljs-string">\'passport-personal-access-tokens\'</span>,\n    <span class="hljs-built_in">require</span>(<span class="hljs-string">\'./components/passport/PersonalAccessTokens.vue\'</span>).<span class="hljs-keyword">default</span>\n);</code></pre>\n  <blockquote>\n<p>{note} Prior to Laravel v5.7.19, appending <code>.default</code> when registering components results in a console error. An explanation for this change can be found in the <router-link to="https://github.com/JeffreyWay/laravel-mix/releases/tag/v4.0.0">Laravel Mix v4.0.0 release notes</router-link>.</p>\n</blockquote>\n<p>After registering the components, make sure to run <code>npm run dev</code> to recompile your assets. Once you have recompiled your assets, you may drop the components into one of your application&#39;s templates to get started creating clients and personal access tokens:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-section">&lt;passport-clients&gt;</span><span class="hljs-section">&lt;/passport-clients&gt;</span>\n<span class="hljs-section">&lt;passport-authorized-clients&gt;</span><span class="hljs-section">&lt;/passport-authorized-clients&gt;</span>\n<span class="hljs-section">&lt;passport-personal-access-tokens&gt;</span><span class="hljs-section">&lt;/passport-personal-access-tokens&gt;</span></code></pre>\n  <p><a name="deploying-passport"></a></p>\n\n          <p><a name="deploying-passport"></a></p>\n          <h3>\n            <a href="#deploying-passport">\n              Deploying Passport\n            </a>\n          </h3><p>When deploying Passport to your production servers for the first time, you will likely need to run the <code>passport:keys</code> command. This command generates the encryption keys Passport needs in order to generate access token. The generated keys are not typically kept in source control:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">passport</span><span class="hljs-selector-pseudo">:keys</span></code></pre>\n  <p>If necessary, you may define the path where Passport&#39;s keys should be loaded from. You may use the <code>Passport::loadKeysFrom</code> method to accomplish this:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Register any authentication / authorization services.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;registerPolicies();\n\n    Passport::routes();\n\n    Passport::loadKeysFrom(<span class="hljs-string">\'/secret-keys/oauth\'</span>);\n}</code></pre>\n  <p>Additionally, you may publish Passport&#39;s configuration file using <code>php artisan vendor:publish --tag=passport-config</code>, which will then provide the option to load the encryption keys from your environment variables:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">PASSPORT_PRIVATE_KEY="</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">BEGIN</span> <span class="hljs-comment">RSA</span> <span class="hljs-comment">PRIVATE</span> <span class="hljs-comment">KEY</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>\n&lt;<span class="hljs-comment">private</span> <span class="hljs-comment">key</span> <span class="hljs-comment">here</span>&gt;\n<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">END</span> <span class="hljs-comment">RSA</span> <span class="hljs-comment">PRIVATE</span> <span class="hljs-comment">KEY</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">"</span>\n\n<span class="hljs-comment">PASSPORT_PUBLIC_KEY="</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">BEGIN</span> <span class="hljs-comment">PUBLIC</span> <span class="hljs-comment">KEY</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>\n&lt;<span class="hljs-comment">public</span> <span class="hljs-comment">key</span> <span class="hljs-comment">here</span>&gt;\n<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">END</span> <span class="hljs-comment">PUBLIC</span> <span class="hljs-comment">KEY</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">"</span></code></pre>\n  <p><a name="configuration"></a></p>\n\n          <p><a name="configuration"></a></p>\n          <h2>\n            <a href="#configuration">\n              Configuration\n            </a>\n          </h2><p><a name="token-lifetimes"></a></p>\n\n          <p><a name="token-lifetimes"></a></p>\n          <h3>\n            <a href="#token-lifetimes">\n              Token Lifetimes\n            </a>\n          </h3><p>By default, Passport issues long-lived access tokens that expire after one year. If you would like to configure a longer / shorter token lifetime, you may use the <code>tokensExpireIn</code>, <code>refreshTokensExpireIn</code>, and <code>personalAccessTokensExpireIn</code> methods. These methods should be called from the <code>boot</code> method of your <code>AuthServiceProvider</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Register any authentication / authorization services.\n *\n * @return void\n */</span>\npublic <span class="hljs-keyword">function</span> boot()\n{\n    $<span class="hljs-keyword">this</span>-&gt;registerPolicies();\n\n    Passport::routes();\n\n    Passport::tokensExpireIn<span class="hljs-function"><span class="hljs-params">(now()-&gt;addDays(<span class="hljs-number">15</span>))</span>;\n\n    <span class="hljs-title">Passport</span>::<span class="hljs-title">refreshTokensExpireIn</span><span class="hljs-params">(now()-&gt;addDays(<span class="hljs-number">30</span>))</span>;\n\n    <span class="hljs-title">Passport</span>::<span class="hljs-title">personalAccessTokensExpireIn</span><span class="hljs-params">(now()-&gt;addMonths(<span class="hljs-number">6</span>))</span>;\n}</span></code></pre>\n  <p><a name="overriding-default-models"></a></p>\n\n          <p><a name="overriding-default-models"></a></p>\n          <h3>\n            <a href="#overriding-default-models">\n              Overriding Default Models\n            </a>\n          </h3><p>You are free to extend the models used internally by Passport:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">use <span class="hljs-type">App</span>\\<span class="hljs-type">Models</span>\\<span class="hljs-type">Passport</span>\\<span class="hljs-type">Client</span> as <span class="hljs-type">PassportClient</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">PassportClient</span></span>\n{\n    <span class="hljs-comment">// ...</span>\n}</code></pre>\n  <p>Then, you may instruct Passport to use your custom models via the <code>Passport</code> class:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Models</span>\\<span class="hljs-title">Passport</span>\\<span class="hljs-title">AuthCode</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Models</span>\\<span class="hljs-title">Passport</span>\\<span class="hljs-title">Client</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Models</span>\\<span class="hljs-title">Passport</span>\\<span class="hljs-title">PersonalAccessClient</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Models</span>\\<span class="hljs-title">Passport</span>\\<span class="hljs-title">Token</span>;\n\n<span class="hljs-comment">/**\n * Register any authentication / authorization services.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;registerPolicies();\n\n    Passport::routes();\n\n    Passport::useTokenModel(Token::class);\n    Passport::useClientModel(Client::class);\n    Passport::useAuthCodeModel(AuthCode::class);\n    Passport::usePersonalAccessClientModel(PersonalAccessClient::class);\n}</code></pre>\n  <p><a name="issuing-access-tokens"></a></p>\n\n          <p><a name="issuing-access-tokens"></a></p>\n          <h2>\n            <a href="#issuing-access-tokens">\n              Issuing Access Tokens\n            </a>\n          </h2><p>Using OAuth2 with authorization codes is how most developers are familiar with OAuth2. When using authorization codes, a client application will redirect a user to your server where they will either approve or deny the request to issue an access token to the client.</p>\n<p><a name="managing-clients"></a></p>\n\n          <p><a name="managing-clients"></a></p>\n          <h3>\n            <a href="#managing-clients">\n              Managing Clients\n            </a>\n          </h3><p>First, developers building applications that need to interact with your application&#39;s API will need to register their application with yours by creating a &quot;client&quot;. Typically, this consists of providing the name of their application and a URL that your application can redirect to after users approve their request for authorization.</p>\n\n          <p><a name="the-code-passport-client-code-command"></a></p>\n          <h4>\n            <a href="#the-code-passport-client-code-command">\n              The <code>passport:client</code> Command\n            </a>\n          </h4><p>The simplest way to create a client is using the <code>passport:client</code> Artisan command. This command may be used to create your own clients for testing your OAuth2 functionality. When you run the <code>client</code> command, Passport will prompt you for more information about your client and will provide you with a client ID and secret:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan passport:<span class="hljs-keyword">client</span></code></pre>\n  <p><strong>Redirect URLs</strong></p>\n<p>If you would like to whitelist multiple redirect URLs for your client, you may specify them using a comma-delimited list when prompted for the URL by the <code>passport:client</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">http:<span class="hljs-regexp">//</span>example.com<span class="hljs-regexp">/callback,http:/</span><span class="hljs-regexp">/examplefoo.com/</span>callback</code></pre>\n  <blockquote>\n<p>{note} Any URLs which contains commas must be encoded.</p>\n</blockquote>\n\n          <p><a name="json-api"></a></p>\n          <h4>\n            <a href="#json-api">\n              JSON API\n            </a>\n          </h4><p>Since your users will not be able to utilize the <code>client</code> command, Passport provides a JSON API that you may use to create clients. This saves you the trouble of having to manually code controllers for creating, updating, and deleting clients.</p>\n<p>However, you will need to pair Passport&#39;s JSON API with your own frontend to provide a dashboard for your users to manage their clients. Below, we&#39;ll review all of the API endpoints for managing clients. For convenience, we&#39;ll use <router-link to="https://github.com/axios/axios">Axios</router-link> to demonstrate making HTTP requests to the endpoints.</p>\n<p>The JSON API is guarded by the <code>web</code> and <code>auth</code> middleware; therefore, it may only be called from your own application. It is not able to be called from an external source.</p>\n<blockquote>\n<p>{tip} If you don&#39;t want to implement the entire client management frontend yourself, you can use the <a href="#frontend-quickstart">frontend quickstart</a> to have a fully functional frontend in a matter of minutes.</p>\n</blockquote>\n\n          <p><a name="-code-get-oauth-clients-code-"></a></p>\n          <h4>\n            <a href="#-code-get-oauth-clients-code-">\n              <code>GET /oauth/clients</code>\n            </a>\n          </h4><p>This route returns all of the clients for the authenticated user. This is primarily useful for listing all of the user&#39;s clients so that they may edit or delete them:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">axios.<span class="hljs-keyword">get</span>(<span class="hljs-comment">\'/oauth/clients\')</span>\n    .<span class="hljs-keyword">then</span>(<span class="hljs-built_in">response</span> =&gt; {\n        console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">response</span>.data);\n    });</code></pre>\n  \n          <p><a name="-code-post-oauth-clients-code-"></a></p>\n          <h4>\n            <a href="#-code-post-oauth-clients-code-">\n              <code>POST /oauth/clients</code>\n            </a>\n          </h4><p>This route is used to create new clients. It requires two pieces of data: the client&#39;s <code>name</code> and a <code>redirect</code> URL. The <code>redirect</code> URL is where the user will be redirected after approving or denying a request for authorization.</p>\n<p>When a client is created, it will be issued a client ID and client secret. These values will be used when requesting access tokens from your application. The client creation route will return the new client instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-title">const</span> <span class="hljs-class"><span class="hljs-keyword">data</span> = {\n    <span class="hljs-title">name</span>: \'<span class="hljs-type">Client</span> <span class="hljs-type">Name</span>\',\n    <span class="hljs-title">redirect</span>: \'<span class="hljs-title">http</span>://<span class="hljs-title">example</span>.<span class="hljs-title">com</span>/<span class="hljs-title">callback\'</span>\n};</span>\n\n<span class="hljs-title">axios</span>.post(\'/oauth/clients\', <span class="hljs-class"><span class="hljs-keyword">data</span>)</span>\n    .<span class="hljs-keyword">then</span>(response =&gt; {\n        console.log(response.<span class="hljs-class"><span class="hljs-keyword">data</span>);</span>\n    })\n    .catch (response =&gt; {\n        // <span class="hljs-type">List</span> errors on response...\n    });</code></pre>\n  \n          <p><a name="-code-put-oauth-clients-client-id-code-"></a></p>\n          <h4>\n            <a href="#-code-put-oauth-clients-client-id-code-">\n              <code>PUT /oauth/clients/{client-id}</code>\n            </a>\n          </h4><p>This route is used to update clients. It requires two pieces of data: the client&#39;s <code>name</code> and a <code>redirect</code> URL. The <code>redirect</code> URL is where the user will be redirected after approving or denying a request for authorization. The route will return the updated client instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-title">const</span> <span class="hljs-class"><span class="hljs-keyword">data</span> = {\n    <span class="hljs-title">name</span>: \'<span class="hljs-type">New</span> <span class="hljs-type">Client</span> <span class="hljs-type">Name</span>\',\n    <span class="hljs-title">redirect</span>: \'<span class="hljs-title">http</span>://<span class="hljs-title">example</span>.<span class="hljs-title">com</span>/<span class="hljs-title">callback\'</span>\n};</span>\n\n<span class="hljs-title">axios</span>.put(\'/oauth/clients/\' + clientId, <span class="hljs-class"><span class="hljs-keyword">data</span>)</span>\n    .<span class="hljs-keyword">then</span>(response =&gt; {\n        console.log(response.<span class="hljs-class"><span class="hljs-keyword">data</span>);</span>\n    })\n    .catch (response =&gt; {\n        // <span class="hljs-type">List</span> errors on response...\n    });</code></pre>\n  \n          <p><a name="-code-delete-oauth-clients-client-id-code-"></a></p>\n          <h4>\n            <a href="#-code-delete-oauth-clients-client-id-code-">\n              <code>DELETE /oauth/clients/{client-id}</code>\n            </a>\n          </h4><p>This route is used to delete clients:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">axios</span><span class="hljs-selector-class">.delete</span>(<span class="hljs-string">\'/oauth/clients/\'</span> + clientId)\n    <span class="hljs-selector-class">.then</span>(response =&gt; {\n        <span class="hljs-comment">//</span>\n    });</code></pre>\n  <p><a name="requesting-tokens"></a></p>\n\n          <p><a name="requesting-tokens"></a></p>\n          <h3>\n            <a href="#requesting-tokens">\n              Requesting Tokens\n            </a>\n          </h3>\n          <p><a name="redirecting-for-authorization"></a></p>\n          <h4>\n            <a href="#redirecting-for-authorization">\n              Redirecting For Authorization\n            </a>\n          </h4><p>Once a client has been created, developers may use their client ID and secret to request an authorization code and access token from your application. First, the consuming application should make a redirect request to your application&#39;s <code>/oauth/authorize</code> route like so:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'/redirect\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Request $request)</span> </span>{\n    $request-&gt;session()-&gt;put(<span class="hljs-string">\'state\'</span>, $state = Str::random(<span class="hljs-number">40</span>));\n\n    $query = http_build_query([\n        <span class="hljs-string">\'client_id\'</span> =&gt; <span class="hljs-string">\'client-id\'</span>,\n        <span class="hljs-string">\'redirect_uri\'</span> =&gt; <span class="hljs-string">\'http://example.com/callback\'</span>,\n        <span class="hljs-string">\'response_type\'</span> =&gt; <span class="hljs-string">\'code\'</span>,\n        <span class="hljs-string">\'scope\'</span> =&gt; <span class="hljs-string">\'\'</span>,\n        <span class="hljs-string">\'state\'</span> =&gt; $state,\n    ]);\n\n    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">\'http://your-app.com/oauth/authorize?\'</span>.$query);\n});</code></pre>\n  <blockquote>\n<p>{tip} Remember, the <code>/oauth/authorize</code> route is already defined by the <code>Passport::routes</code> method. You do not need to manually define this route.</p>\n</blockquote>\n\n          <p><a name="approving-the-request"></a></p>\n          <h4>\n            <a href="#approving-the-request">\n              Approving The Request\n            </a>\n          </h4><p>When receiving authorization requests, Passport will automatically display a template to the user allowing them to approve or deny the authorization request. If they approve the request, they will be redirected back to the <code>redirect_uri</code> that was specified by the consuming application. The <code>redirect_uri</code> must match the <code>redirect</code> URL that was specified when the client was created.</p>\n<p>If you would like to customize the authorization approval screen, you may publish Passport&#39;s views using the <code>vendor:publish</code> Artisan command. The published views will be placed in <code>resources/views/vendor/passport</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan vendor:publish <span class="hljs-attribute">--tag</span>=passport-views</code></pre>\n  <p>Sometimes you may wish to skip the authorization prompt, such as when authorizing a first-party client. You may accomplish this by defining a <code>skipsAuthorization</code> method on the client model. If <code>skipsAuthorization</code> returns <code>true</code> the client will be approved and the user will be redirected back to the <code>redirect_uri</code> immediately:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Models</span>\\<span class="hljs-title">Passport</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Passport</span>\\<span class="hljs-title">Client</span> <span class="hljs-title">as</span> <span class="hljs-title">BaseClient</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseClient</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Determine if the client should skip the authorization prompt.\n     *\n     * <span class="hljs-doctag">@return</span> bool\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">skipsAuthorization</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;firstParty();\n    }\n}</span></code></pre>\n  \n          <p><a name="converting-authorization-codes-to-access-tokens"></a></p>\n          <h4>\n            <a href="#converting-authorization-codes-to-access-tokens">\n              Converting Authorization Codes To Access Tokens\n            </a>\n          </h4><p>If the user approves the authorization request, they will be redirected back to the consuming application. The consumer should first verify the <code>state</code> parameter against the value that was stored prior to the redirect. If the state parameter matches the consumer should issue a <code>POST</code> request to your application to request an access token. The request should include the authorization code that was issued by your application when the user approved the authorization request. In this example, we&#39;ll use the Guzzle HTTP library to make the <code>POST</code> request:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'/callback\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Request $request)</span> </span>{\n    $state = $request-&gt;session()-&gt;pull(<span class="hljs-string">\'state\'</span>);\n\n    throw_unless(\n        strlen($state) &gt; <span class="hljs-number">0</span> &amp;&amp; $state === $request-&gt;state,\n        InvalidArgumentException::class\n    );\n\n    $http = <span class="hljs-keyword">new</span> GuzzleHttp\\Client;\n\n    $response = $http-&gt;post(<span class="hljs-string">\'http://your-app.com/oauth/token\'</span>, [\n        <span class="hljs-string">\'form_params\'</span> =&gt; [\n            <span class="hljs-string">\'grant_type\'</span> =&gt; <span class="hljs-string">\'authorization_code\'</span>,\n            <span class="hljs-string">\'client_id\'</span> =&gt; <span class="hljs-string">\'client-id\'</span>,\n            <span class="hljs-string">\'client_secret\'</span> =&gt; <span class="hljs-string">\'client-secret\'</span>,\n            <span class="hljs-string">\'redirect_uri\'</span> =&gt; <span class="hljs-string">\'http://example.com/callback\'</span>,\n            <span class="hljs-string">\'code\'</span> =&gt; $request-&gt;code,\n        ],\n    ]);\n\n    <span class="hljs-keyword">return</span> json_decode((string) $response-&gt;getBody(), <span class="hljs-keyword">true</span>);\n});</code></pre>\n  <p>This <code>/oauth/token</code> route will return a JSON response containing <code>access_token</code>, <code>refresh_token</code>, and <code>expires_in</code> attributes. The <code>expires_in</code> attribute contains the number of seconds until the access token expires.</p>\n<blockquote>\n<p>{tip} Like the <code>/oauth/authorize</code> route, the <code>/oauth/token</code> route is defined for you by the <code>Passport::routes</code> method. There is no need to manually define this route. By default, this route is throttled using the settings of the <code>ThrottleRequests</code> middleware.</p>\n</blockquote>\n<p><a name="refreshing-tokens"></a></p>\n\n          <p><a name="refreshing-tokens"></a></p>\n          <h3>\n            <a href="#refreshing-tokens">\n              Refreshing Tokens\n            </a>\n          </h3><p>If your application issues short-lived access tokens, users will need to refresh their access tokens via the refresh token that was provided to them when the access token was issued. In this example, we&#39;ll use the Guzzle HTTP library to refresh the token:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$http = <span class="hljs-keyword">new</span> GuzzleHttp\\Client;\n\n$response = $http-&gt;post(<span class="hljs-string">\'http://your-app.com/oauth/token\'</span>, [\n    <span class="hljs-string">\'form_params\'</span> =&gt; [\n        <span class="hljs-string">\'grant_type\'</span> =&gt; <span class="hljs-string">\'refresh_token\'</span>,\n        <span class="hljs-string">\'refresh_token\'</span> =&gt; <span class="hljs-string">\'the-refresh-token\'</span>,\n        <span class="hljs-string">\'client_id\'</span> =&gt; <span class="hljs-string">\'client-id\'</span>,\n        <span class="hljs-string">\'client_secret\'</span> =&gt; <span class="hljs-string">\'client-secret\'</span>,\n        <span class="hljs-string">\'scope\'</span> =&gt; <span class="hljs-string">\'\'</span>,\n    ],\n]);\n\n<span class="hljs-keyword">return</span> json_decode((string) $response-&gt;getBody(), <span class="hljs-keyword">true</span>);</code></pre>\n  <p>This <code>/oauth/token</code> route will return a JSON response containing <code>access_token</code>, <code>refresh_token</code>, and <code>expires_in</code> attributes. The <code>expires_in</code> attribute contains the number of seconds until the access token expires.</p>\n<p><a name="password-grant-tokens"></a></p>\n\n          <p><a name="password-grant-tokens"></a></p>\n          <h2>\n            <a href="#password-grant-tokens">\n              Password Grant Tokens\n            </a>\n          </h2><p>The OAuth2 password grant allows your other first-party clients, such as a mobile application, to obtain an access token using an e-mail address / username and password. This allows you to issue access tokens securely to your first-party clients without requiring your users to go through the entire OAuth2 authorization code redirect flow.</p>\n<p><a name="creating-a-password-grant-client"></a></p>\n\n          <p><a name="creating-a-password-grant-client"></a></p>\n          <h3>\n            <a href="#creating-a-password-grant-client">\n              Creating A Password Grant Client\n            </a>\n          </h3><p>Before your application can issue tokens via the password grant, you will need to create a password grant client. You may do this using the <code>passport:client</code> command with the <code>--password</code> option. If you have already run the <code>passport:install</code> command, you do not need to run this command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-title">php</span> artisan pass<span class="hljs-keyword">port</span>:client <span class="hljs-comment">--password</span></code></pre>\n  <p><a name="requesting-password-grant-tokens"></a></p>\n\n          <p><a name="requesting-tokens"></a></p>\n          <h3>\n            <a href="#requesting-tokens">\n              Requesting Tokens\n            </a>\n          </h3><p>Once you have created a password grant client, you may request an access token by issuing a <code>POST</code> request to the <code>/oauth/token</code> route with the user&#39;s email address and password. Remember, this route is already registered by the <code>Passport::routes</code> method so there is no need to define it manually. If the request is successful, you will receive an <code>access_token</code> and <code>refresh_token</code> in the JSON response from the server:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$http = <span class="hljs-keyword">new</span> GuzzleHttp\\Client;\n\n$response = $http-&gt;post(<span class="hljs-string">\'http://your-app.com/oauth/token\'</span>, [\n    <span class="hljs-string">\'form_params\'</span> =&gt; [\n        <span class="hljs-string">\'grant_type\'</span> =&gt; <span class="hljs-string">\'password\'</span>,\n        <span class="hljs-string">\'client_id\'</span> =&gt; <span class="hljs-string">\'client-id\'</span>,\n        <span class="hljs-string">\'client_secret\'</span> =&gt; <span class="hljs-string">\'client-secret\'</span>,\n        <span class="hljs-string">\'username\'</span> =&gt; <span class="hljs-string">\'taylor@laravel.com\'</span>,\n        <span class="hljs-string">\'password\'</span> =&gt; <span class="hljs-string">\'my-password\'</span>,\n        <span class="hljs-string">\'scope\'</span> =&gt; <span class="hljs-string">\'\'</span>,\n    ],\n]);\n\n<span class="hljs-keyword">return</span> json_decode((string) $response-&gt;getBody(), <span class="hljs-keyword">true</span>);</code></pre>\n  <blockquote>\n<p>{tip} Remember, access tokens are long-lived by default. However, you are free to <a href="#configuration">configure your maximum access token lifetime</a> if needed.</p>\n</blockquote>\n<p><a name="requesting-all-scopes"></a></p>\n\n          <p><a name="requesting-all-scopes"></a></p>\n          <h3>\n            <a href="#requesting-all-scopes">\n              Requesting All Scopes\n            </a>\n          </h3><p>When using the password grant or client credentials grant, you may wish to authorize the token for all of the scopes supported by your application. You can do this by requesting the <code>*</code> scope. If you request the <code>*</code> scope, the <code>can</code> method on the token instance will always return <code>true</code>. This scope may only be assigned to a token that is issued using the <code>password</code> or <code>client_credentials</code> grant:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response = $http-&gt;post(<span class="hljs-string">\'http://your-app.com/oauth/token\'</span>, [\n    <span class="hljs-string">\'form_params\'</span> =&gt; [\n        <span class="hljs-string">\'grant_type\'</span> =&gt; <span class="hljs-string">\'password\'</span>,\n        <span class="hljs-string">\'client_id\'</span> =&gt; <span class="hljs-string">\'client-id\'</span>,\n        <span class="hljs-string">\'client_secret\'</span> =&gt; <span class="hljs-string">\'client-secret\'</span>,\n        <span class="hljs-string">\'username\'</span> =&gt; <span class="hljs-string">\'taylor@laravel.com\'</span>,\n        <span class="hljs-string">\'password\'</span> =&gt; <span class="hljs-string">\'my-password\'</span>,\n        <span class="hljs-string">\'scope\'</span> =&gt; <span class="hljs-string">\'*\'</span>,\n    ],\n]);</code></pre>\n  <p><a name="customizing-the-username-field"></a></p>\n\n          <p><a name="customizing-the-username-field"></a></p>\n          <h3>\n            <a href="#customizing-the-username-field">\n              Customizing The Username Field\n            </a>\n          </h3><p>When authenticating using the password grant, Passport will use the <code>email</code> attribute of your model as the &quot;username&quot;. However, you may customize this behavior by defining a <code>findForPassport</code> method on your model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Auth</span>\\<span class="hljs-title">User</span> <span class="hljs-title">as</span> <span class="hljs-title">Authenticatable</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Notifications</span>\\<span class="hljs-title">Notifiable</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Passport</span>\\<span class="hljs-title">HasApiTokens</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Authenticatable</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">HasApiTokens</span>, <span class="hljs-title">Notifiable</span>;\n\n    <span class="hljs-comment">/**\n     * Find the user instance for the given username.\n     *\n     * <span class="hljs-doctag">@param</span>  string  $username\n     * <span class="hljs-doctag">@return</span> \\App\\User\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findForPassport</span><span class="hljs-params">($username)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;where(<span class="hljs-string">\'username\'</span>, $username)-&gt;first();\n    }\n}</span></code></pre>\n  <p><a name="customizing-the-password-validation"></a></p>\n\n          <p><a name="customizing-the-password-validation"></a></p>\n          <h3>\n            <a href="#customizing-the-password-validation">\n              Customizing The Password Validation\n            </a>\n          </h3><p>When authenticating using the password grant, Passport will use the <code>password</code> attribute of your model to validate the given password. If your model does not have a <code>password</code> attribute or you wish to customize the password validation logic, you can define a <code>validateForPassportPasswordGrant</code> method on your model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Auth</span>\\<span class="hljs-title">User</span> <span class="hljs-title">as</span> <span class="hljs-title">Authenticatable</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Notifications</span>\\<span class="hljs-title">Notifiable</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Hash</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Passport</span>\\<span class="hljs-title">HasApiTokens</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Authenticatable</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">HasApiTokens</span>, <span class="hljs-title">Notifiable</span>;\n\n    <span class="hljs-comment">/**\n     * Validate the password of the user for the Passport password grant.\n     *\n     * <span class="hljs-doctag">@param</span>  string  $password\n     * <span class="hljs-doctag">@return</span> bool\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">validateForPassportPasswordGrant</span><span class="hljs-params">($password)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> Hash::check($password, <span class="hljs-keyword">$this</span>-&gt;password);\n    }\n}</span></code></pre>\n  <p><a name="implicit-grant-tokens"></a></p>\n\n          <p><a name="implicit-grant-tokens"></a></p>\n          <h2>\n            <a href="#implicit-grant-tokens">\n              Implicit Grant Tokens\n            </a>\n          </h2><p>The implicit grant is similar to the authorization code grant; however, the token is returned to the client without exchanging an authorization code. This grant is most commonly used for JavaScript or mobile applications where the client credentials can&#39;t be securely stored. To enable the grant, call the <code>enableImplicitGrant</code> method in your <code>AuthServiceProvider</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Register any authentication / authorization services.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;registerPolicies();\n\n    Passport::routes();\n\n    Passport::enableImplicitGrant();\n}</code></pre>\n  <p>Once a grant has been enabled, developers may use their client ID to request an access token from your application. The consuming application should make a redirect request to your application&#39;s <code>/oauth/authorize</code> route like so:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'/redirect\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Request $request)</span> </span>{\n    $request-&gt;session()-&gt;put(<span class="hljs-string">\'state\'</span>, $state = Str::random(<span class="hljs-number">40</span>));\n\n    $query = http_build_query([\n        <span class="hljs-string">\'client_id\'</span> =&gt; <span class="hljs-string">\'client-id\'</span>,\n        <span class="hljs-string">\'redirect_uri\'</span> =&gt; <span class="hljs-string">\'http://example.com/callback\'</span>,\n        <span class="hljs-string">\'response_type\'</span> =&gt; <span class="hljs-string">\'token\'</span>,\n        <span class="hljs-string">\'scope\'</span> =&gt; <span class="hljs-string">\'\'</span>,\n        <span class="hljs-string">\'state\'</span> =&gt; $state,\n    ]);\n\n    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">\'http://your-app.com/oauth/authorize?\'</span>.$query);\n});</code></pre>\n  <blockquote>\n<p>{tip} Remember, the <code>/oauth/authorize</code> route is already defined by the <code>Passport::routes</code> method. You do not need to manually define this route.</p>\n</blockquote>\n<p><a name="client-credentials-grant-tokens"></a></p>\n\n          <p><a name="client-credentials-grant-tokens"></a></p>\n          <h2>\n            <a href="#client-credentials-grant-tokens">\n              Client Credentials Grant Tokens\n            </a>\n          </h2><p>The client credentials grant is suitable for machine-to-machine authentication. For example, you might use this grant in a scheduled job which is performing maintenance tasks over an API.</p>\n<p>Before your application can issue tokens via the client credentials grant, you will need to create a client credentials grant client. You may do this using the <code>--client</code> option of the <code>passport:client</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan passport:<span class="hljs-keyword">client</span> --<span class="hljs-keyword">client</span></code></pre>\n  <p>Next, to use this grant type, you need to add the <code>CheckClientCredentials</code> middleware to the <code>$routeMiddleware</code> property of your <code>app/Http/Kernel.php</code> file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Passport</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Middleware</span>\\<span class="hljs-title">CheckClientCredentials</span>;\n\n<span class="hljs-keyword">protected</span> $routeMiddleware = [\n    <span class="hljs-string">\'client\'</span> =&gt; CheckClientCredentials::class,\n];</code></pre>\n  <p>Then, attach the middleware to a route:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'/orders\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Request $request)</span> </span>{\n    ...\n})-&gt;middleware(<span class="hljs-string">\'client\'</span>);</code></pre>\n  <p>To restrict access to the route to specific scopes you may provide a comma-delimited list of the required scopes when attaching the <code>client</code> middleware to the route:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'/orders\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Request $request)</span> </span>{\n    ...\n})-&gt;middleware(<span class="hljs-string">\'client:check-status,your-scope\'</span>);</code></pre>\n  \n          <p><a name="retrieving-tokens"></a></p>\n          <h3>\n            <a href="#retrieving-tokens">\n              Retrieving Tokens\n            </a>\n          </h3><p>To retrieve a token using this grant type, make a request to the <code>oauth/token</code> endpoint:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$guzzle = <span class="hljs-keyword">new</span> GuzzleHttp\\Client;\n\n$response = $guzzle-&gt;post(<span class="hljs-string">\'http://your-app.com/oauth/token\'</span>, [\n    <span class="hljs-string">\'form_params\'</span> =&gt; [\n        <span class="hljs-string">\'grant_type\'</span> =&gt; <span class="hljs-string">\'client_credentials\'</span>,\n        <span class="hljs-string">\'client_id\'</span> =&gt; <span class="hljs-string">\'client-id\'</span>,\n        <span class="hljs-string">\'client_secret\'</span> =&gt; <span class="hljs-string">\'client-secret\'</span>,\n        <span class="hljs-string">\'scope\'</span> =&gt; <span class="hljs-string">\'your-scope\'</span>,\n    ],\n]);\n\n<span class="hljs-keyword">return</span> json_decode((string) $response-&gt;getBody(), <span class="hljs-keyword">true</span>)[<span class="hljs-string">\'access_token\'</span>];</code></pre>\n  <p><a name="personal-access-tokens"></a></p>\n\n          <p><a name="personal-access-tokens"></a></p>\n          <h2>\n            <a href="#personal-access-tokens">\n              Personal Access Tokens\n            </a>\n          </h2><p>Sometimes, your users may want to issue access tokens to themselves without going through the typical authorization code redirect flow. Allowing users to issue tokens to themselves via your application&#39;s UI can be useful for allowing users to experiment with your API or may serve as a simpler approach to issuing access tokens in general.</p>\n<p><a name="creating-a-personal-access-client"></a></p>\n\n          <p><a name="creating-a-personal-access-client"></a></p>\n          <h3>\n            <a href="#creating-a-personal-access-client">\n              Creating A Personal Access Client\n            </a>\n          </h3><p>Before your application can issue personal access tokens, you will need to create a personal access client. You may do this using the <code>passport:client</code> command with the <code>--personal</code> option. If you have already run the <code>passport:install</code> command, you do not need to run this command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-title">php</span> artisan pass<span class="hljs-keyword">port</span>:client <span class="hljs-comment">--personal</span></code></pre>\n  <p>If you have already defined a personal access client, you may instruct Passport to use it using the <code>personalAccessClientId</code> method. Typically, this method should be called from the <code>boot</code> method of your <code>AuthServiceProvider</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Register any authentication / authorization services.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;registerPolicies();\n\n    Passport::routes();\n\n    Passport::personalAccessClientId(<span class="hljs-string">\'client-id\'</span>);\n}</code></pre>\n  <p><a name="managing-personal-access-tokens"></a></p>\n\n          <p><a name="managing-personal-access-tokens"></a></p>\n          <h3>\n            <a href="#managing-personal-access-tokens">\n              Managing Personal Access Tokens\n            </a>\n          </h3><p>Once you have created a personal access client, you may issue tokens for a given user using the <code>createToken</code> method on the <code>User</code> model instance. The <code>createToken</code> method accepts the name of the token as its first argument and an optional array of <a href="#token-scopes">scopes</a> as its second argument:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user = App\\User::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-comment">// Creating a token without scopes...</span>\n$token = $user-&gt;createToken(<span class="hljs-string">\'Token Name\'</span>)-&gt;accessToken;\n\n<span class="hljs-comment">// Creating a token with scopes...</span>\n$token = $user-&gt;createToken(<span class="hljs-string">\'My Token\'</span>, [<span class="hljs-string">\'place-orders\'</span>])-&gt;accessToken;</code></pre>\n  \n          <p><a name="json-api"></a></p>\n          <h4>\n            <a href="#json-api">\n              JSON API\n            </a>\n          </h4><p>Passport also includes a JSON API for managing personal access tokens. You may pair this with your own frontend to offer your users a dashboard for managing personal access tokens. Below, we&#39;ll review all of the API endpoints for managing personal access tokens. For convenience, we&#39;ll use <router-link to="https://github.com/mzabriskie/axios">Axios</router-link> to demonstrate making HTTP requests to the endpoints.</p>\n<p>The JSON API is guarded by the <code>web</code> and <code>auth</code> middleware; therefore, it may only be called from your own application. It is not able to be called from an external source.</p>\n<blockquote>\n<p>{tip} If you don&#39;t want to implement the personal access token frontend yourself, you can use the <a href="#frontend-quickstart">frontend quickstart</a> to have a fully functional frontend in a matter of minutes.</p>\n</blockquote>\n\n          <p><a name="-code-get-oauth-scopes-code-"></a></p>\n          <h4>\n            <a href="#-code-get-oauth-scopes-code-">\n              <code>GET /oauth/scopes</code>\n            </a>\n          </h4><p>This route returns all of the <a href="#token-scopes">scopes</a> defined for your application. You may use this route to list the scopes a user may assign to a personal access token:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">axios.<span class="hljs-keyword">get</span>(<span class="hljs-comment">\'/oauth/scopes\')</span>\n    .<span class="hljs-keyword">then</span>(<span class="hljs-built_in">response</span> =&gt; {\n        console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">response</span>.data);\n    });</code></pre>\n  \n          <p><a name="-code-get-oauth-personal-access-tokens-code-"></a></p>\n          <h4>\n            <a href="#-code-get-oauth-personal-access-tokens-code-">\n              <code>GET /oauth/personal-access-tokens</code>\n            </a>\n          </h4><p>This route returns all of the personal access tokens that the authenticated user has created. This is primarily useful for listing all of the user&#39;s tokens so that they may edit or delete them:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">axios.<span class="hljs-keyword">get</span>(<span class="hljs-comment">\'/oauth/personal-access-tokens\')</span>\n    .<span class="hljs-keyword">then</span>(<span class="hljs-built_in">response</span> =&gt; {\n        console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">response</span>.data);\n    });</code></pre>\n  \n          <p><a name="-code-post-oauth-personal-access-tokens-code-"></a></p>\n          <h4>\n            <a href="#-code-post-oauth-personal-access-tokens-code-">\n              <code>POST /oauth/personal-access-tokens</code>\n            </a>\n          </h4><p>This route creates new personal access tokens. It requires two pieces of data: the token&#39;s <code>name</code> and the <code>scopes</code> that should be assigned to the token:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-title">const</span> <span class="hljs-class"><span class="hljs-keyword">data</span> = {\n    <span class="hljs-title">name</span>: \'<span class="hljs-type">Token</span> <span class="hljs-type">Name</span>\',\n    <span class="hljs-title">scopes</span>: []\n};</span>\n\n<span class="hljs-title">axios</span>.post(\'/oauth/personal-access-tokens\', <span class="hljs-class"><span class="hljs-keyword">data</span>)</span>\n    .<span class="hljs-keyword">then</span>(response =&gt; {\n        console.log(response.<span class="hljs-class"><span class="hljs-keyword">data</span>.accessToken);</span>\n    })\n    .catch (response =&gt; {\n        // <span class="hljs-type">List</span> errors on response...\n    });</code></pre>\n  \n          <p><a name="-code-delete-oauth-personal-access-tokens-token-id-code-"></a></p>\n          <h4>\n            <a href="#-code-delete-oauth-personal-access-tokens-token-id-code-">\n              <code>DELETE /oauth/personal-access-tokens/{token-id}</code>\n            </a>\n          </h4><p>This route may be used to delete personal access tokens:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">axios.<span class="hljs-keyword">delete</span>(<span class="hljs-string">\'/oauth/personal-access-tokens/\'</span> + tokenId);</code></pre>\n  <p><a name="protecting-routes"></a></p>\n\n          <p><a name="protecting-routes"></a></p>\n          <h2>\n            <a href="#protecting-routes">\n              Protecting Routes\n            </a>\n          </h2><p><a name="via-middleware"></a></p>\n\n          <p><a name="via-middleware"></a></p>\n          <h3>\n            <a href="#via-middleware">\n              Via Middleware\n            </a>\n          </h3><p>Passport includes an <router-link to="/docs/{{version}}/authentication#adding-custom-guards">authentication guard</router-link> that will validate access tokens on incoming requests. Once you have configured the <code>api</code> guard to use the <code>passport</code> driver, you only need to specify the <code>auth:api</code> middleware on any routes that require a valid access token:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'/user\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">//</span>\n})-&gt;middleware(<span class="hljs-string">\'auth:api\'</span>);</code></pre>\n  <p><a name="passing-the-access-token"></a></p>\n\n          <p><a name="passing-the-access-token"></a></p>\n          <h3>\n            <a href="#passing-the-access-token">\n              Passing The Access Token\n            </a>\n          </h3><p>When calling routes that are protected by Passport, your application&#39;s API consumers should specify their access token as a <code>Bearer</code> token in the <code>Authorization</code> header of their request. For example, when using the Guzzle HTTP library:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response = $client-&gt;request(<span class="hljs-string">\'GET\'</span>, <span class="hljs-string">\'/api/user\'</span>, [\n    <span class="hljs-string">\'headers\'</span> =&gt; [\n        <span class="hljs-string">\'Accept\'</span> =&gt; <span class="hljs-string">\'application/json\'</span>,\n        <span class="hljs-string">\'Authorization\'</span> =&gt; <span class="hljs-string">\'Bearer \'</span>.$accessToken,\n    ],\n]);</code></pre>\n  <p><a name="token-scopes"></a></p>\n\n          <p><a name="token-scopes"></a></p>\n          <h2>\n            <a href="#token-scopes">\n              Token Scopes\n            </a>\n          </h2><p>Scopes allow your API clients to request a specific set of permissions when requesting authorization to access an account. For example, if you are building an e-commerce application, not all API consumers will need the ability to place orders. Instead, you may allow the consumers to only request authorization to access order shipment statuses. In other words, scopes allow your application&#39;s users to limit the actions a third-party application can perform on their behalf.</p>\n<p><a name="defining-scopes"></a></p>\n\n          <p><a name="defining-scopes"></a></p>\n          <h3>\n            <a href="#defining-scopes">\n              Defining Scopes\n            </a>\n          </h3><p>You may define your API&#39;s scopes using the <code>Passport::tokensCan</code> method in the <code>boot</code> method of your <code>AuthServiceProvider</code>. The <code>tokensCan</code> method accepts an array of scope names and scope descriptions. The scope description may be anything you wish and will be displayed to users on the authorization approval screen:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">use <span class="hljs-type">Laravel</span>\\<span class="hljs-type">Passport</span>\\<span class="hljs-type">Passport</span>;\n\n<span class="hljs-type">Passport</span>::tokensCan([\n    <span class="hljs-symbol">\'place</span>-orders\' =&gt; <span class="hljs-symbol">\'Place</span> orders\',\n    <span class="hljs-symbol">\'check</span>-status\' =&gt; <span class="hljs-symbol">\'Check</span> <span class="hljs-built_in">order</span> status\',\n]);</code></pre>\n  <p><a name="default-scope"></a></p>\n\n          <p><a name="default-scope"></a></p>\n          <h3>\n            <a href="#default-scope">\n              Default Scope\n            </a>\n          </h3><p>If a client does not request any specific scopes, you may configure your Passport server to attach a default scope to the token using the <code>setDefaultScope</code> method. Typically, you should call this method from the <code>boot</code> method of your <code>AuthServiceProvider</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Passport</span>\\<span class="hljs-title">Passport</span>;\n\nPassport::setDefaultScope([\n    <span class="hljs-string">\'check-status\'</span>,\n    <span class="hljs-string">\'place-orders\'</span>,\n]);</code></pre>\n  <p><a name="assigning-scopes-to-tokens"></a></p>\n\n          <p><a name="assigning-scopes-to-tokens"></a></p>\n          <h3>\n            <a href="#assigning-scopes-to-tokens">\n              Assigning Scopes To Tokens\n            </a>\n          </h3>\n          <p><a name="when-requesting-authorization-codes"></a></p>\n          <h4>\n            <a href="#when-requesting-authorization-codes">\n              When Requesting Authorization Codes\n            </a>\n          </h4><p>When requesting an access token using the authorization code grant, consumers should specify their desired scopes as the <code>scope</code> query string parameter. The <code>scope</code> parameter should be a space-delimited list of scopes:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'/redirect\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    $query = http_build_query([\n        <span class="hljs-string">\'client_id\'</span> =&gt; <span class="hljs-string">\'client-id\'</span>,\n        <span class="hljs-string">\'redirect_uri\'</span> =&gt; <span class="hljs-string">\'http://example.com/callback\'</span>,\n        <span class="hljs-string">\'response_type\'</span> =&gt; <span class="hljs-string">\'code\'</span>,\n        <span class="hljs-string">\'scope\'</span> =&gt; <span class="hljs-string">\'place-orders check-status\'</span>,\n    ]);\n\n    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">\'http://your-app.com/oauth/authorize?\'</span>.$query);\n});</code></pre>\n  \n          <p><a name="when-issuing-personal-access-tokens"></a></p>\n          <h4>\n            <a href="#when-issuing-personal-access-tokens">\n              When Issuing Personal Access Tokens\n            </a>\n          </h4><p>If you are issuing personal access tokens using the <code>User</code> model&#39;s <code>createToken</code> method, you may pass the array of desired scopes as the second argument to the method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$token</span> = <span class="hljs-variable">$user</span>-&gt;createToken(<span class="hljs-string">\'My Token\'</span>, [<span class="hljs-string">\'place-orders\'</span>])-&gt;accessToken;</code></pre>\n  <p><a name="checking-scopes"></a></p>\n\n          <p><a name="checking-scopes"></a></p>\n          <h3>\n            <a href="#checking-scopes">\n              Checking Scopes\n            </a>\n          </h3><p>Passport includes two middleware that may be used to verify that an incoming request is authenticated with a token that has been granted a given scope. To get started, add the following middleware to the <code>$routeMiddleware</code> property of your <code>app/Http/Kernel.php</code> file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'scopes\'</span> =&gt; \\Laravel\\Passport\\Http\\Middleware\\CheckScopes::<span class="hljs-keyword">class</span>,\n\'<span class="hljs-symbol">scope</span>\' =&gt; \\<span class="hljs-symbol">Laravel</span>\\<span class="hljs-symbol">Passport</span>\\<span class="hljs-symbol">Http</span>\\<span class="hljs-symbol">Middleware</span>\\<span class="hljs-symbol">CheckForAnyScope::<span class="hljs-symbol">class</span>,</span></code></pre>\n  \n          <p><a name="check-for-all-scopes"></a></p>\n          <h4>\n            <a href="#check-for-all-scopes">\n              Check For All Scopes\n            </a>\n          </h4><p>The <code>scopes</code> middleware may be assigned to a route to verify that the incoming request&#39;s access token has <em>all</em> of the listed scopes:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'/orders\'</span>, function () {\n    <span class="hljs-regexp">//</span> Access token has both <span class="hljs-string">"check-status"</span> <span class="hljs-keyword">and</span> <span class="hljs-string">"place-orders"</span> scopes...\n})-&gt;middleware(<span class="hljs-string">\'scopes:check-status,place-orders\'</span>);</code></pre>\n  \n          <p><a name="check-for-any-scopes"></a></p>\n          <h4>\n            <a href="#check-for-any-scopes">\n              Check For Any Scopes\n            </a>\n          </h4><p>The <code>scope</code> middleware may be assigned to a route to verify that the incoming request&#39;s access token has <em>at least one</em> of the listed scopes:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'/orders\'</span>, function () {\n    <span class="hljs-regexp">//</span> Access token has either <span class="hljs-string">"check-status"</span> <span class="hljs-keyword">or</span> <span class="hljs-string">"place-orders"</span> scope...\n})-&gt;middleware(<span class="hljs-string">\'scope:check-status,place-orders\'</span>);</code></pre>\n  \n          <p><a name="checking-scopes-on-a-token-instance"></a></p>\n          <h4>\n            <a href="#checking-scopes-on-a-token-instance">\n              Checking Scopes On A Token Instance\n            </a>\n          </h4><p>Once an access token authenticated request has entered your application, you may still check if the token has a given scope using the <code>tokenCan</code> method on the authenticated <code>User</code> instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Request</span>;\n\nRoute::get(<span class="hljs-string">\'/orders\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Request $request)</span> </span>{\n    <span class="hljs-keyword">if</span> ($request-&gt;user()-&gt;tokenCan(<span class="hljs-string">\'place-orders\'</span>)) {\n        <span class="hljs-comment">//</span>\n    }\n});</code></pre>\n  \n          <p><a name="additional-scope-methods"></a></p>\n          <h4>\n            <a href="#additional-scope-methods">\n              Additional Scope Methods\n            </a>\n          </h4><p>The <code>scopeIds</code> method will return an array of all defined IDs / names:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Laravel<span class="hljs-symbol">\\P</span>assport<span class="hljs-symbol">\\P</span>assport::scopeIds();</code></pre>\n  <p>The <code>scopes</code> method will return an array of all defined scopes as instances of <code>Laravel\\Passport\\Scope</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Laravel<span class="hljs-symbol">\\P</span>assport<span class="hljs-symbol">\\P</span>assport::scopes();</code></pre>\n  <p>The <code>scopesFor</code> method will return an array of <code>Laravel\\Passport\\Scope</code> instances matching the given IDs / names:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Laravel\\Passport\\Passport::scopes<span class="hljs-constructor">For([\'<span class="hljs-params">place</span>-<span class="hljs-params">orders</span>\', \'<span class="hljs-params">check</span>-<span class="hljs-params">status</span>\'])</span>;</code></pre>\n  <p>You may determine if a given scope has been defined using the <code>hasScope</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Laravel\\Passport\\Passport::has<span class="hljs-constructor">Scope(\'<span class="hljs-params">place</span>-<span class="hljs-params">orders</span>\')</span>;</code></pre>\n  <p><a name="consuming-your-api-with-javascript"></a></p>\n\n          <p><a name="consuming-your-api-with-javascript"></a></p>\n          <h2>\n            <a href="#consuming-your-api-with-javascript">\n              Consuming Your API With JavaScript\n            </a>\n          </h2><p>When building an API, it can be extremely useful to be able to consume your own API from your JavaScript application. This approach to API development allows your own application to consume the same API that you are sharing with the world. The same API may be consumed by your web application, mobile applications, third-party applications, and any SDKs that you may publish on various package managers.</p>\n<p>Typically, if you want to consume your API from your JavaScript application, you would need to manually send an access token to the application and pass it with each request to your application. However, Passport includes a middleware that can handle this for you. All you need to do is add the <code>CreateFreshApiToken</code> middleware to your <code>web</code> middleware group in your <code>app/Http/Kernel.php</code> file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'web\'</span> =&gt; [\n    <span class="hljs-comment">// Other middleware...</span>\n    \\Laravel\\Passport\\Http\\Middleware\\CreateFreshApiToken::<span class="hljs-class"><span class="hljs-keyword">class</span>,\n<span class="hljs-type">]</span>,<span class="hljs-type"></span></span></code></pre>\n  <blockquote>\n<p>{note} You should ensure that the <code>CreateFreshApiToken</code> middleware is the last middleware listed in your middleware stack.</p>\n</blockquote>\n<p>This Passport middleware will attach a <code>laravel_token</code> cookie to your outgoing responses. This cookie contains an encrypted JWT that Passport will use to authenticate API requests from your JavaScript application. Now, you may make requests to your application&#39;s API without explicitly passing an access token:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">axios.<span class="hljs-keyword">get</span>(<span class="hljs-comment">\'/api/user\')</span>\n    .<span class="hljs-keyword">then</span>(<span class="hljs-built_in">response</span> =&gt; {\n        console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">response</span>.data);\n    });</code></pre>\n  \n          <p><a name="customizing-the-cookie-name"></a></p>\n          <h4>\n            <a href="#customizing-the-cookie-name">\n              Customizing The Cookie Name\n            </a>\n          </h4><p>If needed, you can customize the <code>laravel_token</code> cookie&#39;s name using the <code>Passport::cookie</code> method. Typically, this method should be called from the <code>boot</code> method of your <code>AuthServiceProvider</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Register any authentication / authorization services.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;registerPolicies();\n\n    Passport::routes();\n\n    Passport::cookie(<span class="hljs-string">\'custom_name\'</span>);\n}</code></pre>\n  \n          <p><a name="csrf-protection"></a></p>\n          <h4>\n            <a href="#csrf-protection">\n              CSRF Protection\n            </a>\n          </h4><p>When using this method of authentication, you will need to ensure a valid CSRF token header is included in your requests. The default Laravel JavaScript scaffolding includes an Axios instance, which will automatically use the encrypted <code>XSRF-TOKEN</code> cookie value to send a <code>X-XSRF-TOKEN</code> header on same-origin requests.</p>\n<blockquote>\n<p>{tip} If you choose to send the <code>X-CSRF-TOKEN</code> header instead of <code>X-XSRF-TOKEN</code>, you will need to use the unencrypted token provided by <code>csrf_token()</code>.</p>\n</blockquote>\n<p><a name="events"></a></p>\n\n          <p><a name="events"></a></p>\n          <h2>\n            <a href="#events">\n              Events\n            </a>\n          </h2><p>Passport raises events when issuing access tokens and refresh tokens. You may use these events to prune or revoke other access tokens in your database. You may attach listeners to these events in your application&#39;s <code>EventServiceProvider</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * The event listener mappings for the application.\n *\n * <span class="hljs-doctag">@var</span> array\n */</span>\n<span class="hljs-keyword">protected</span> $listen = [\n    <span class="hljs-string">\'Laravel\\Passport\\Events\\AccessTokenCreated\'</span> =&gt; [\n        <span class="hljs-string">\'App\\Listeners\\RevokeOldTokens\'</span>,\n    ],\n\n    <span class="hljs-string">\'Laravel\\Passport\\Events\\RefreshTokenCreated\'</span> =&gt; [\n        <span class="hljs-string">\'App\\Listeners\\PruneOldTokens\'</span>,\n    ],\n];</code></pre>\n  <p><a name="testing"></a></p>\n\n          <p><a name="testing"></a></p>\n          <h2>\n            <a href="#testing">\n              Testing\n            </a>\n          </h2><p>Passport&#39;s <code>actingAs</code> method may be used to specify the currently authenticated user as well as its scopes. The first argument given to the <code>actingAs</code> method is the user instance and the second is an array of scopes that should be granted to the user&#39;s token:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Passport</span>\\<span class="hljs-title">Passport</span>;\n\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testServerCreation</span><span class="hljs-params">()</span>\n</span>{\n    Passport::actingAs(\n        factory(User::class)-&gt;create(),\n        [<span class="hljs-string">\'create-servers\'</span>]\n    );\n\n    $response = <span class="hljs-keyword">$this</span>-&gt;post(<span class="hljs-string">\'/api/create-server\'</span>);\n\n    $response-&gt;assertStatus(<span class="hljs-number">201</span>);\n}</code></pre>\n  <p>Passport&#39;s <code>actingAsClient</code> method may be used to specify the currently authenticated client as well as its scopes. The first argument given to the <code>actingAsClient</code> method is the client instance and the second is an array of scopes that should be granted to the client&#39;s token:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Passport</span>\\<span class="hljs-title">Client</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Passport</span>\\<span class="hljs-title">Passport</span>;\n\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testGetOrders</span><span class="hljs-params">()</span>\n</span>{\n    Passport::actingAsClient(\n        factory(Client::class)-&gt;create(),\n        [<span class="hljs-string">\'check-status\'</span>]\n    );\n\n    $response = <span class="hljs-keyword">$this</span>-&gt;get(<span class="hljs-string">\'/api/orders\'</span>);\n\n    $response-&gt;assertStatus(<span class="hljs-number">200</span>);\n}</code></pre>\n  '},"1bee":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="laravel-homestead"></a></p>\n          <h1>\n            <a href="#laravel-homestead">\n              Laravel Homestead\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#installation-and-setup">Installation &amp; Setup</a><ul>\n<li><a href="#first-steps">First Steps</a></li>\n<li><a href="#configuring-homestead">Configuring Homestead</a></li>\n<li><a href="#launching-the-vagrant-box">Launching The Vagrant Box</a></li>\n<li><a href="#per-project-installation">Per Project Installation</a></li>\n<li><a href="#installing-optional-features">Installing Optional Features</a></li>\n<li><a href="#aliases">Aliases</a></li>\n</ul>\n</li>\n<li><a href="#daily-usage">Daily Usage</a><ul>\n<li><a href="#accessing-homestead-globally">Accessing Homestead Globally</a></li>\n<li><a href="#connecting-via-ssh">Connecting Via SSH</a></li>\n<li><a href="#connecting-to-databases">Connecting To Databases</a></li>\n<li><a href="#database-backups">Database Backups</a></li>\n<li><a href="#database-snapshots">Database Snapshots</a></li>\n<li><a href="#adding-additional-sites">Adding Additional Sites</a></li>\n<li><a href="#environment-variables">Environment Variables</a></li>\n<li><a href="#configuring-cron-schedules">Configuring Cron Schedules</a></li>\n<li><a href="#configuring-mailhog">Configuring Mailhog</a></li>\n<li><a href="#configuring-minio">Configuring Minio</a></li>\n<li><a href="#ports">Ports</a></li>\n<li><a href="#sharing-your-environment">Sharing Your Environment</a></li>\n<li><a href="#multiple-php-versions">Multiple PHP Versions</a></li>\n<li><a href="#web-servers">Web Servers</a></li>\n<li><a href="#mail">Mail</a></li>\n</ul>\n</li>\n<li><a href="#debugging-and-profiling">Debugging &amp; Profiling</a><ul>\n<li><a href="#debugging-web-requests">Debugging Web Requests With Xdebug</a></li>\n<li><a href="#debugging-cli-applications">Debugging CLI Applications</a></li>\n<li><a href="#profiling-applications-with-blackfire">Profiling Applications with Blackfire</a></li>\n</ul>\n</li>\n<li><a href="#network-interfaces">Network Interfaces</a></li>\n<li><a href="#extending-homestead">Extending Homestead</a></li>\n<li><a href="#updating-homestead">Updating Homestead</a></li>\n<li><a href="#provider-specific-settings">Provider Specific Settings</a><ul>\n<li><a href="#provider-specific-virtualbox">VirtualBox</a></li>\n</ul>\n</li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Laravel strives to make the entire PHP development experience delightful, including your local development environment. <router-link to="https://www.vagrantup.com">Vagrant</router-link> provides a simple, elegant way to manage and provision Virtual Machines.</p>\n<p>Laravel Homestead is an official, pre-packaged Vagrant box that provides you a wonderful development environment without requiring you to install PHP, a web server, and any other server software on your local machine. No more worrying about messing up your operating system! Vagrant boxes are completely disposable. If something goes wrong, you can destroy and re-create the box in minutes!</p>\n<p>Homestead runs on any Windows, Mac, or Linux system, and includes Nginx, PHP, MySQL, PostgreSQL, Redis, Memcached, Node, and all of the other goodies you need to develop amazing Laravel applications.</p>\n<blockquote>\n<p>{note} If you are using Windows, you may need to enable hardware virtualization (VT-x). It can usually be enabled via your BIOS. If you are using Hyper-V on a UEFI system you may additionally need to disable Hyper-V in order to access VT-x.</p>\n</blockquote>\n<p><a name="included-software"></a></p>\n\n          <p><a name="included-software"></a></p>\n          <h3>\n            <a href="#included-software">\n              Included Software\n            </a>\n          </h3><style>\n    #software-list > ul {\n        column-count: 3; -moz-column-count: 3; -webkit-column-count: 3;\n        column-gap: 5em; -moz-column-gap: 5em; -webkit-column-gap: 5em;\n        line-height: 1.9;\n    }\n</style>\n\n<div id="software-list" markdown="1">\n- Ubuntu 18.04\n- Git\n- PHP 7.3\n- PHP 7.2\n- PHP 7.1\n- PHP 7.0\n- PHP 5.6\n- Nginx\n- MySQL\n- lmm for MySQL or MariaDB database snapshots\n- Sqlite3\n- PostgreSQL\n- Composer\n- Node (With Yarn, Bower, Grunt, and Gulp)\n- Redis\n- Memcached\n- Beanstalkd\n- Mailhog\n- avahi\n- ngrok\n- Xdebug\n- XHProf / Tideways / XHGui\n- wp-cli\n</div>\n\n<p><a name="optional-software"></a></p>\n\n          <p><a name="optional-software"></a></p>\n          <h3>\n            <a href="#optional-software">\n              Optional Software\n            </a>\n          </h3><style>\n    #software-list > ul {\n        column-count: 3; -moz-column-count: 3; -webkit-column-count: 3;\n        column-gap: 5em; -moz-column-gap: 5em; -webkit-column-gap: 5em;\n        line-height: 1.9;\n    }\n</style>\n\n<div id="software-list" markdown="1">\n- Apache\n- Blackfire\n- Cassandra\n- Chronograf\n- CouchDB\n- Crystal & Lucky Framework\n- Docker\n- Elasticsearch\n- Gearman\n- Go\n- Grafana\n- InfluxDB\n- MariaDB\n- MinIO\n- MongoDB\n- MySQL 8\n- Neo4j\n- Oh My Zsh\n- Open Resty\n- PM2\n- Python\n- RabbitMQ\n- Solr\n- Webdriver & Laravel Dusk Utilities\n</div>\n\n<p><a name="installation-and-setup"></a></p>\n\n          <p><a name="installation-amp-setup"></a></p>\n          <h2>\n            <a href="#installation-amp-setup">\n              Installation &amp; Setup\n            </a>\n          </h2><p><a name="first-steps"></a></p>\n\n          <p><a name="first-steps"></a></p>\n          <h3>\n            <a href="#first-steps">\n              First Steps\n            </a>\n          </h3><p>Before launching your Homestead environment, you must install <router-link to="https://www.virtualbox.org/wiki/Downloads">VirtualBox 6.x</router-link>, <router-link to="https://www.vmware.com">VMWare</router-link>, <router-link to="https://www.parallels.com/products/desktop/">Parallels</router-link> or <router-link to="https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v">Hyper-V</router-link> as well as <router-link to="https://www.vagrantup.com/downloads.html">Vagrant</router-link>. All of these software packages provide easy-to-use visual installers for all popular operating systems.</p>\n<p>To use the VMware provider, you will need to purchase both VMware Fusion / Workstation and the <router-link to="https://www.vagrantup.com/vmware">VMware Vagrant plug-in</router-link>. Though it is not free, VMware can provide faster shared folder performance out of the box.</p>\n<p>To use the Parallels provider, you will need to install <router-link to="https://github.com/Parallels/vagrant-parallels">Parallels Vagrant plug-in</router-link>. It is free of charge.</p>\n<p>Because of <router-link to="https://www.vagrantup.com/docs/hyperv/limitations.html">Vagrant limitations</router-link>, The Hyper-V provider ignores all networking settings.</p>\n\n          <p><a name="installing-the-homestead-vagrant-box"></a></p>\n          <h4>\n            <a href="#installing-the-homestead-vagrant-box">\n              Installing The Homestead Vagrant Box\n            </a>\n          </h4><p>Once VirtualBox / VMware and Vagrant have been installed, you should add the <code>laravel/homestead</code> box to your Vagrant installation using the following command in your terminal. It will take a few minutes to download the box, depending on your Internet connection speed:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">vagrant</span> <span class="hljs-keyword">box </span><span class="hljs-keyword">add </span>laravel/homestead</code></pre>\n  <p>If this command fails, make sure your Vagrant installation is up to date.</p>\n<blockquote>\n<p>{note} Homestead periodically issues &quot;alpha&quot; / &quot;beta&quot; boxes for testing, which may interfere with the <code>vagrant box add</code> command. If you are having issues running <code>vagrant box add</code>, you may run the <code>vagrant up</code> command and the correct box will be downloaded when Vagrant attempts to start the virtual machine.</p>\n</blockquote>\n\n          <p><a name="installing-homestead"></a></p>\n          <h4>\n            <a href="#installing-homestead">\n              Installing Homestead\n            </a>\n          </h4><p>You may install Homestead by cloning the repository onto your host machine. Consider cloning the repository into a <code>Homestead</code> folder within your &quot;home&quot; directory, as the Homestead box will serve as the host to all of your Laravel projects:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://github.com/laravel/homestead.git ~/Homestead</code></pre>\n  <p>You should check out a tagged version of Homestead since the <code>master</code> branch may not always be stable. You can find the latest stable version on the <router-link to="https://github.com/laravel/homestead/releases">GitHub Release Page</router-link>. Alternatively, you may checkout the <code>release</code> branch which always contains the latest stable release:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">cd</span> ~<span class="hljs-string">/Homestead</span>\n\ngit checkout release</code></pre>\n  <p>Once you have cloned the Homestead repository, run the <code>bash init.sh</code> command from the Homestead directory to create the <code>Homestead.yaml</code> configuration file. The <code>Homestead.yaml</code> file will be placed in the Homestead directory:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">//</span> Mac / Linux.<span class="hljs-string">..</span>\nbash init.sh\n\n<span class="hljs-string">//</span> Windows.<span class="hljs-string">..</span>\ninit.bat</code></pre>\n  <p><a name="configuring-homestead"></a></p>\n\n          <p><a name="configuring-homestead"></a></p>\n          <h3>\n            <a href="#configuring-homestead">\n              Configuring Homestead\n            </a>\n          </h3>\n          <p><a name="setting-your-provider"></a></p>\n          <h4>\n            <a href="#setting-your-provider">\n              Setting Your Provider\n            </a>\n          </h4><p>The <code>provider</code> key in your <code>Homestead.yaml</code> file indicates which Vagrant provider should be used: <code>virtualbox</code>, <code>vmware_fusion</code>, <code>vmware_workstation</code>, <code>parallels</code> or <code>hyperv</code>. You may set this to the provider you prefer:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">provider:</span> virtualbox</code></pre>\n  \n          <p><a name="configuring-shared-folders"></a></p>\n          <h4>\n            <a href="#configuring-shared-folders">\n              Configuring Shared Folders\n            </a>\n          </h4><p>The <code>folders</code> property of the <code>Homestead.yaml</code> file lists all of the folders you wish to share with your Homestead environment. As files within these folders are changed, they will be kept in sync between your local machine and the Homestead environment. You may configure as many shared folders as necessary:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">folders:</span>\n    - map: ~<span class="hljs-meta-keyword">/code/</span>project1\n<span class="hljs-symbol">      to:</span> <span class="hljs-meta-keyword">/home/</span>vagrant/project1</code></pre>\n  <blockquote>\n<p>{note} Windows users should not use the <code>~/</code> path syntax and instead should use the full path to their project, such as <code>C:\\Users\\user\\Code\\project1</code>.</p>\n</blockquote>\n<p>You should always map individual projects to their own folder mapping instead of mapping your entire <code>~/code</code> folder. When you map a folder the virtual machine must keep track of all disk IO for <em>every</em> file in the folder. This leads to performance issues if you have a large number of files in a folder.</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">folders:</span>\n    - map: ~<span class="hljs-meta-keyword">/code/</span>project1\n<span class="hljs-symbol">      to:</span> <span class="hljs-meta-keyword">/home/</span>vagrant/project1\n\n    - map: ~<span class="hljs-meta-keyword">/code/</span>project2\n<span class="hljs-symbol">      to:</span> <span class="hljs-meta-keyword">/home/</span>vagrant/project2</code></pre>\n  <blockquote>\n<p>{note} You should never mount <code>.</code> (the current directory) when using Homestead. This causes Vagrant to not map the current folder to <code>/vagrant</code> and will break optional features and cause unexpected results while provisioning.</p>\n</blockquote>\n<p>To enable <router-link to="https://www.vagrantup.com/docs/synced-folders/nfs.html">NFS</router-link>, you only need to add a simple flag to your synced folder configuration:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">folders:</span>\n    - map: ~<span class="hljs-meta-keyword">/code/</span>project1\n<span class="hljs-symbol">      to:</span> <span class="hljs-meta-keyword">/home/</span>vagrant/project1\n<span class="hljs-symbol">      type:</span> <span class="hljs-string">"nfs"</span></code></pre>\n  <blockquote>\n<p>{note} When using NFS on Windows, you should consider installing the <router-link to="https://github.com/winnfsd/vagrant-winnfsd">vagrant-winnfsd</router-link> plug-in. This plug-in will maintain the correct user / group permissions for files and directories within the Homestead box.</p>\n</blockquote>\n<p>You may also pass any options supported by Vagrant&#39;s <router-link to="https://www.vagrantup.com/docs/synced-folders/basic_usage.html">Synced Folders</router-link> by listing them under the <code>options</code> key:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">folders:</span>\n    - map: ~<span class="hljs-meta-keyword">/code/</span>project1\n<span class="hljs-symbol">      to:</span> <span class="hljs-meta-keyword">/home/</span>vagrant/project1\n<span class="hljs-symbol">      type:</span> <span class="hljs-string">"rsync"</span>\n<span class="hljs-symbol">      options:</span>\n<span class="hljs-symbol">          rsync__args:</span> [<span class="hljs-string">"--verbose"</span>, <span class="hljs-string">"--archive"</span>, <span class="hljs-string">"--delete"</span>, <span class="hljs-string">"-zz"</span>]\n<span class="hljs-symbol">          rsync__exclude:</span> [<span class="hljs-string">"node_modules"</span>]</code></pre>\n  \n          <p><a name="configuring-nginx-sites"></a></p>\n          <h4>\n            <a href="#configuring-nginx-sites">\n              Configuring Nginx Sites\n            </a>\n          </h4><p>Not familiar with Nginx? No problem. The <code>sites</code> property allows you to easily map a &quot;domain&quot; to a folder on your Homestead environment. A sample site configuration is included in the <code>Homestead.yaml</code> file. Again, you may add as many sites to your Homestead environment as necessary. Homestead can serve as a convenient, virtualized environment for every Laravel project you are working on:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">sites:</span>\n    - <span class="hljs-string">map:</span> homestead.test\n<span class="hljs-symbol">      to:</span> <span class="hljs-regexp">/home/</span>vagrant<span class="hljs-regexp">/project1/</span><span class="hljs-keyword">public</span></code></pre>\n  <p>If you change the <code>sites</code> property after provisioning the Homestead box, you should re-run <code>vagrant reload --provision</code>  to update the Nginx configuration on the virtual machine.</p>\n<blockquote>\n<p>{note} Homestead scripts are built to be as idempotent as possible. However, if you are experiencing issues while provisioning you should destroy and rebuild the machine via <code>vagrant destroy &amp;&amp; vagrant up</code>.</p>\n</blockquote>\n<p><a name="hostname-resolution"></a></p>\n\n          <p><a name="hostname-resolution"></a></p>\n          <h4>\n            <a href="#hostname-resolution">\n              Hostname Resolution\n            </a>\n          </h4><p>Homestead publishes hostnames over <code>mDNS</code> for automatic host resolution. If you set <code>hostname: homestead</code> in your <code>Homestead.yaml</code> file, the host will be available at <code>homestead.local</code>. MacOS, iOS, and Linux desktop distributions include <code>mDNS</code> support by default. Windows requires installing <router-link to="https://support.apple.com/kb/DL999?viewlocale=en_US&locale=en_US">Bonjour Print Services for Windows</router-link>.</p>\n<p>Using automatic hostnames works best for &quot;per project&quot; installations of Homestead. If you host multiple sites on a single Homestead instance, you may add the &quot;domains&quot; for your web sites to the <code>hosts</code> file on your machine. The <code>hosts</code> file will redirect requests for your Homestead sites into your Homestead machine. On Mac and Linux, this file is located at <code>/etc/hosts</code>. On Windows, it is located at <code>C:\\Windows\\System32\\drivers\\etc\\hosts</code>. The lines you add to this file will look like the following:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">192<span class="hljs-selector-class">.168</span><span class="hljs-selector-class">.10</span><span class="hljs-selector-class">.10</span>  <span class="hljs-selector-tag">homestead</span><span class="hljs-selector-class">.test</span></code></pre>\n  <p>Make sure the IP address listed is the one set in your <code>Homestead.yaml</code> file. Once you have added the domain to your <code>hosts</code> file and launched the Vagrant box you will be able to access the site via your web browser:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">http:</span><span class="hljs-comment">//homestead.test</span></code></pre>\n  <p><a name="launching-the-vagrant-box"></a></p>\n\n          <p><a name="launching-the-vagrant-box"></a></p>\n          <h3>\n            <a href="#launching-the-vagrant-box">\n              Launching The Vagrant Box\n            </a>\n          </h3><p>Once you have edited the <code>Homestead.yaml</code> to your liking, run the <code>vagrant up</code> command from your Homestead directory. Vagrant will boot the virtual machine and automatically configure your shared folders and Nginx sites.</p>\n<p>To destroy the machine, you may use the <code>vagrant destroy --force</code> command.</p>\n<p><a name="per-project-installation"></a></p>\n\n          <p><a name="per-project-installation"></a></p>\n          <h3>\n            <a href="#per-project-installation">\n              Per Project Installation\n            </a>\n          </h3><p>Instead of installing Homestead globally and sharing the same Homestead box across all of your projects, you may instead configure a Homestead instance for each project you manage. Installing Homestead per project may be beneficial if you wish to ship a <code>Vagrantfile</code> with your project, allowing others working on the project to <code>vagrant up</code>.</p>\n<p>To install Homestead directly into your project, require it using Composer:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">composer <span class="hljs-built_in">require</span> laravel/homestead <span class="hljs-comment">--dev</span></code></pre>\n  <p>Once Homestead has been installed, use the <code>make</code> command to generate the <code>Vagrantfile</code> and <code>Homestead.yaml</code> file in your project root. The <code>make</code> command will automatically configure the <code>sites</code> and <code>folders</code> directives in the <code>Homestead.yaml</code> file.</p>\n<p>Mac / Linux:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">php</span> vendor/<span class="hljs-keyword">bin/homestead </span>make</code></pre>\n  <p>Windows:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">vendor<span class="hljs-symbol">\\\\</span>bin<span class="hljs-symbol">\\\\</span>homestead make</code></pre>\n  <p>Next, run the <code>vagrant up</code> command in your terminal and access your project at <code>http://homestead.test</code> in your browser. Remember, you will still need to add an <code>/etc/hosts</code> file entry for <code>homestead.test</code> or the domain of your choice if you are not using automatic <a href="#hostname-resolution">hostname resolution</a>.</p>\n<p><a name="installing-optional-features"></a></p>\n\n          <p><a name="installing-optional-features"></a></p>\n          <h3>\n            <a href="#installing-optional-features">\n              Installing Optional Features\n            </a>\n          </h3><p>Optional software is installed using the &quot;features&quot; setting in your Homestead configuration file. Most features can be enabled or disabled with a boolean value, while some features allow multiple configuration options:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attr">features:</span>\n<span class="hljs-attr">    - blackfire:</span>\n<span class="hljs-attr">        server_id:</span> <span class="hljs-string">"server_id"</span>\n<span class="hljs-attr">        server_token:</span> <span class="hljs-string">"server_value"</span>\n<span class="hljs-attr">        client_id:</span> <span class="hljs-string">"client_id"</span>\n<span class="hljs-attr">        client_token:</span> <span class="hljs-string">"client_value"</span>\n<span class="hljs-attr">    - cassandra:</span> <span class="hljs-literal">true</span>\n<span class="hljs-attr">    - chronograf:</span> <span class="hljs-literal">true</span>\n<span class="hljs-attr">    - couchdb:</span> <span class="hljs-literal">true</span>\n<span class="hljs-attr">    - crystal:</span> <span class="hljs-literal">true</span>\n<span class="hljs-attr">    - docker:</span> <span class="hljs-literal">true</span>\n<span class="hljs-attr">    - elasticsearch:</span>\n<span class="hljs-attr">        version:</span> <span class="hljs-number">7</span>\n<span class="hljs-attr">    - gearman:</span> <span class="hljs-literal">true</span>\n<span class="hljs-attr">    - golang:</span> <span class="hljs-literal">true</span>\n<span class="hljs-attr">    - grafana:</span> <span class="hljs-literal">true</span>\n<span class="hljs-attr">    - influxdb:</span> <span class="hljs-literal">true</span>\n<span class="hljs-attr">    - mariadb:</span> <span class="hljs-literal">true</span>\n<span class="hljs-attr">    - minio:</span> <span class="hljs-literal">true</span>\n<span class="hljs-attr">    - mongodb:</span> <span class="hljs-literal">true</span>\n<span class="hljs-attr">    - mysql8:</span> <span class="hljs-literal">true</span>\n<span class="hljs-attr">    - neo4j:</span> <span class="hljs-literal">true</span>\n<span class="hljs-attr">    - ohmyzsh:</span> <span class="hljs-literal">true</span>\n<span class="hljs-attr">    - openresty:</span> <span class="hljs-literal">true</span>\n<span class="hljs-attr">    - pm2:</span> <span class="hljs-literal">true</span>\n<span class="hljs-attr">    - python:</span> <span class="hljs-literal">true</span>\n<span class="hljs-attr">    - rabbitmq:</span> <span class="hljs-literal">true</span>\n<span class="hljs-attr">    - solr:</span> <span class="hljs-literal">true</span>\n<span class="hljs-attr">    - webdriver:</span> <span class="hljs-literal">true</span></code></pre>\n  \n          <p><a name="mariadb"></a></p>\n          <h4>\n            <a href="#mariadb">\n              MariaDB\n            </a>\n          </h4><p>Enabling MariaDB will remove MySQL and install MariaDB. MariaDB serves as a drop-in replacement for MySQL, so you should still use the <code>mysql</code> database driver in your application&#39;s database configuration.</p>\n\n          <p><a name="mongodb"></a></p>\n          <h4>\n            <a href="#mongodb">\n              MongoDB\n            </a>\n          </h4><p>The default MongoDB installation will set the database username to <code>homestead</code> and the corresponding password to <code>secret</code>.</p>\n\n          <p><a name="elasticsearch"></a></p>\n          <h4>\n            <a href="#elasticsearch">\n              Elasticsearch\n            </a>\n          </h4><p>You may specify a supported version of Elasticsearch, which may be a major version or an exact version number (major.minor.patch). The default installation will create a cluster named &#39;homestead&#39;. You should never give Elasticsearch more than half of the operating system&#39;s memory, so make sure your Homestead machine has at least twice the Elasticsearch allocation.</p>\n<blockquote>\n<p>{tip} Check out the <router-link to="https://www.elastic.co/guide/en/elasticsearch/reference/current">Elasticsearch documentation</router-link> to learn how to customize your configuration.</p>\n</blockquote>\n\n          <p><a name="neo4j"></a></p>\n          <h4>\n            <a href="#neo4j">\n              Neo4j\n            </a>\n          </h4><p>The default Neo4j installation will set the database username to <code>homestead</code> and corresponding password to <code>secret</code>. To access the Neo4j browser, visit <code>http://homestead.test:7474</code> via your web browser. The ports <code>7687</code> (Bolt), <code>7474</code> (HTTP), and <code>7473</code> (HTTPS) are ready to serve requests from the Neo4j client.</p>\n<p><a name="aliases"></a></p>\n\n          <p><a name="aliases"></a></p>\n          <h3>\n            <a href="#aliases">\n              Aliases\n            </a>\n          </h3><p>You may add Bash aliases to your Homestead machine by modifying the <code>aliases</code> file within your Homestead directory:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">alias</span> c=\'<span class="hljs-keyword">clear</span>\'\n<span class="hljs-keyword">alias</span> <span class="hljs-string">..=</span>\'<span class="hljs-keyword">cd</span> <span class="hljs-string">..</span>\'</code></pre>\n  <p>After you have updated the <code>aliases</code> file, you should re-provision the Homestead machine using the <code>vagrant reload --provision</code> command. This will ensure that your new aliases are available on the machine.</p>\n<p><a name="daily-usage"></a></p>\n\n          <p><a name="daily-usage"></a></p>\n          <h2>\n            <a href="#daily-usage">\n              Daily Usage\n            </a>\n          </h2><p><a name="accessing-homestead-globally"></a></p>\n\n          <p><a name="accessing-homestead-globally"></a></p>\n          <h3>\n            <a href="#accessing-homestead-globally">\n              Accessing Homestead Globally\n            </a>\n          </h3><p>Sometimes you may want to <code>vagrant up</code> your Homestead machine from anywhere on your filesystem. You can do this on Mac / Linux systems by adding a Bash function to your Bash profile. On Windows, you may accomplish this by adding a &quot;batch&quot; file to your <code>PATH</code>. These scripts will allow you to run any Vagrant command from anywhere on your system and will automatically point that command to your Homestead installation:</p>\n\n          <p><a name="mac-linux"></a></p>\n          <h4>\n            <a href="#mac-linux">\n              Mac / Linux\n            </a>\n          </h4>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">homestead</span><span class="hljs-params">()</span> {</span>\n    ( <span class="hljs-built_in">cd</span> ~/Homestead &amp;&amp; vagrant $* )\n}</code></pre>\n  <p>Make sure to tweak the <code>~/Homestead</code> path in the function to the location of your actual Homestead installation. Once the function is installed, you may run commands like <code>homestead up</code> or <code>homestead ssh</code> from anywhere on your system.</p>\n\n          <p><a name="windows"></a></p>\n          <h4>\n            <a href="#windows">\n              Windows\n            </a>\n          </h4><p>Create a <code>homestead.bat</code> batch file anywhere on your machine with the following contents:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">@<span class="hljs-built_in">echo</span> off\n\n<span class="hljs-built_in">set</span> cwd=<span class="hljs-variable">%cd%</span>\n<span class="hljs-built_in">set</span> homesteadVagrant=C:\\Homestead\n\n<span class="hljs-built_in">cd</span> /d <span class="hljs-variable">%homesteadVagrant%</span> &amp;&amp; vagrant %*\n<span class="hljs-built_in">cd</span> /d <span class="hljs-variable">%cwd%</span>\n\n<span class="hljs-built_in">set</span> cwd=\n<span class="hljs-built_in">set</span> homesteadVagrant=</code></pre>\n  <p>Make sure to tweak the example <code>C:\\Homestead</code> path in the script to the actual location of your Homestead installation. After creating the file, add the file location to your <code>PATH</code>. You may then run commands like <code>homestead up</code> or <code>homestead ssh</code> from anywhere on your system.</p>\n<p><a name="connecting-via-ssh"></a></p>\n\n          <p><a name="connecting-via-ssh"></a></p>\n          <h3>\n            <a href="#connecting-via-ssh">\n              Connecting Via SSH\n            </a>\n          </h3><p>You can SSH into your virtual machine by issuing the <code>vagrant ssh</code> terminal command from your Homestead directory.</p>\n<p>But, since you will probably need to SSH into your Homestead machine frequently, consider adding the &quot;function&quot; described above to your host machine to quickly SSH into the Homestead box.</p>\n<p><a name="connecting-to-databases"></a></p>\n\n          <p><a name="connecting-to-databases"></a></p>\n          <h3>\n            <a href="#connecting-to-databases">\n              Connecting To Databases\n            </a>\n          </h3><p>A <code>homestead</code> database is configured for both MySQL and PostgreSQL out of the box. To connect to your MySQL or PostgreSQL database from your host machine&#39;s database client, you should connect to <code>127.0.0.1</code> and port <code>33060</code> (MySQL) or <code>54320</code> (PostgreSQL). The username and password for both databases is <code>homestead</code> / <code>secret</code>.</p>\n<blockquote>\n<p>{note} You should only use these non-standard ports when connecting to the databases from your host machine. You will use the default 3306 and 5432 ports in your Laravel database configuration file since Laravel is running <em>within</em> the virtual machine.</p>\n</blockquote>\n<p><a name="database-backups"></a></p>\n\n          <p><a name="database-backups"></a></p>\n          <h3>\n            <a href="#database-backups">\n              Database Backups\n            </a>\n          </h3><p>Homestead can automatically backup your database when your Vagrant box is destroyed. To utilize this feature, you must be using Vagrant 2.1.0 or greater. Or, if you are using an older version of Vagrant, you must install the <code>vagrant-triggers</code> plug-in. To enable automatic database backups, add the following line to your <code>Homestead.yaml</code> file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attr">backup:</span> <span class="hljs-literal">true</span></code></pre>\n  <p>Once configured, Homestead will export your databases to <code>mysql_backup</code> and <code>postgres_backup</code> directories when the <code>vagrant destroy</code> command is executed. These directories can be found in the folder where you cloned Homestead or in the root of your project if you are using the <a href="#per-project-installation">per project installation</a> method.</p>\n<p><a name="database-snapshots"></a></p>\n\n          <p><a name="database-snapshots"></a></p>\n          <h3>\n            <a href="#database-snapshots">\n              Database Snapshots\n            </a>\n          </h3><p>Homestead supports freezing the state of MySQL and MariaDB databases and branching between them using <router-link to="https://github.com/Lullabot/lmm">Logical MySQL Manager</router-link>. For example, imagine working on a site with a multi-gigabyte database. You can import the database and take a snapshot. After doing some work and creating some test content locally, you may quickly restore back to the original state.</p>\n<p>Under the hood, LMM uses LVM&#39;s thin snapshot functionality with copy-on-write support. In practice, this means that changing a single row in a table will only cause the changes you made to be written to disk, saving significant time and disk space during restores.</p>\n<p>Since <code>lmm</code> interacts with LVM, it must be run as <code>root</code>. To see all available commands, run <code>sudo lmm</code> inside your Vagrant box. A common workflow looks like the following:</p>\n<ol>\n<li>Import a database into the default <code>master</code> lmm branch.</li>\n<li>Save a snapshot of the unchanged database using <code>sudo lmm branch prod-YYYY-MM-DD</code>.</li>\n<li>Modify the database.</li>\n<li>Run <code>sudo lmm merge prod-YYYY-MM-DD</code> to undo all changes.</li>\n<li>Run <code>sudo lmm delete &lt;branch&gt;</code> to delete unneeded branches.</li>\n</ol>\n<p><a name="adding-additional-sites"></a></p>\n\n          <p><a name="adding-additional-sites"></a></p>\n          <h3>\n            <a href="#adding-additional-sites">\n              Adding Additional Sites\n            </a>\n          </h3><p>Once your Homestead environment is provisioned and running, you may want to add additional Nginx sites for your Laravel applications. You can run as many Laravel installations as you wish on a single Homestead environment. To add an additional site, add the site to your <code>Homestead.yaml</code> file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">sites:</span>\n    - <span class="hljs-string">map:</span> homestead.test\n<span class="hljs-symbol">      to:</span> <span class="hljs-regexp">/home/</span>vagrant<span class="hljs-regexp">/project1/</span><span class="hljs-keyword">public</span>\n    - <span class="hljs-string">map:</span> another.test\n<span class="hljs-symbol">      to:</span> <span class="hljs-regexp">/home/</span>vagrant<span class="hljs-regexp">/project2/</span><span class="hljs-keyword">public</span></code></pre>\n  <p>If Vagrant is not automatically managing your &quot;hosts&quot; file, you may need to add the new site to that file as well:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">192<span class="hljs-selector-class">.168</span><span class="hljs-selector-class">.10</span><span class="hljs-selector-class">.10</span>  <span class="hljs-selector-tag">homestead</span><span class="hljs-selector-class">.test</span>\n192<span class="hljs-selector-class">.168</span><span class="hljs-selector-class">.10</span><span class="hljs-selector-class">.10</span>  <span class="hljs-selector-tag">another</span><span class="hljs-selector-class">.test</span></code></pre>\n  <p>Once the site has been added, run the <code>vagrant reload --provision</code> command from your Homestead directory.</p>\n<p><a name="site-types"></a></p>\n\n          <p><a name="site-types"></a></p>\n          <h4>\n            <a href="#site-types">\n              Site Types\n            </a>\n          </h4><p>Homestead supports several types of sites which allow you to easily run projects that are not based on Laravel. For example, we may easily add a Symfony application to Homestead using the <code>symfony2</code> site type:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">sites:</span>\n    - map: symfony2.test\n<span class="hljs-symbol">      to:</span> <span class="hljs-meta-keyword">/home/</span>vagrant<span class="hljs-meta-keyword">/my-symfony-project/</span>web\n<span class="hljs-symbol">      type:</span> <span class="hljs-string">"symfony2"</span></code></pre>\n  <p>The available site types are: <code>apache</code>, <code>apigility</code>, <code>expressive</code>, <code>laravel</code> (the default), <code>proxy</code>, <code>silverstripe</code>, <code>statamic</code>, <code>symfony2</code>, <code>symfony4</code>, and <code>zf</code>.</p>\n<p><a name="site-parameters"></a></p>\n\n          <p><a name="site-parameters"></a></p>\n          <h4>\n            <a href="#site-parameters">\n              Site Parameters\n            </a>\n          </h4><p>You may add additional Nginx <code>fastcgi_param</code> values to your site via the <code>params</code> site directive. For example, we&#39;ll add a <code>FOO</code> parameter with a value of <code>BAR</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">sites:</span>\n    - map: homestead.test\n<span class="hljs-symbol">      to:</span> <span class="hljs-meta-keyword">/home/</span>vagrant<span class="hljs-meta-keyword">/project1/</span>public\n<span class="hljs-symbol">      params:</span>\n          - key: FOO\n<span class="hljs-symbol">            value:</span> BAR</code></pre>\n  <p><a name="environment-variables"></a></p>\n\n          <p><a name="environment-variables"></a></p>\n          <h3>\n            <a href="#environment-variables">\n              Environment Variables\n            </a>\n          </h3><p>You can set global environment variables by adding them to your <code>Homestead.yaml</code> file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">variables</span>:\n    - <span class="hljs-attribute">key</span>: APP_ENV\n      <span class="hljs-attribute">value</span>: local\n    - <span class="hljs-attribute">key</span>: FOO\n      <span class="hljs-attribute">value</span>: bar</code></pre>\n  <p>After updating the <code>Homestead.yaml</code>, be sure to re-provision the machine by running <code>vagrant reload --provision</code>. This will update the PHP-FPM configuration for all of the installed PHP versions and also update the environment for the <code>vagrant</code> user.</p>\n<p><a name="configuring-cron-schedules"></a></p>\n\n          <p><a name="configuring-cron-schedules"></a></p>\n          <h3>\n            <a href="#configuring-cron-schedules">\n              Configuring Cron Schedules\n            </a>\n          </h3><p>Laravel provides a convenient way to <router-link to="/docs/{{version}}/scheduling">schedule Cron jobs</router-link> by scheduling a single <code>schedule:run</code> Artisan command to be run every minute. The <code>schedule:run</code> command will examine the job schedule defined in your <code>App\\Console\\Kernel</code> class to determine which jobs should be run.</p>\n<p>If you would like the <code>schedule:run</code> command to be run for a Homestead site, you may set the <code>schedule</code> option to <code>true</code> when defining the site:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">sites:</span>\n    - <span class="hljs-string">map:</span> homestead.test\n<span class="hljs-symbol">      to:</span> <span class="hljs-regexp">/home/</span>vagrant<span class="hljs-regexp">/project1/</span><span class="hljs-keyword">public</span>\n<span class="hljs-symbol">      schedule:</span> <span class="hljs-literal">true</span></code></pre>\n  <p>The Cron job for the site will be defined in the <code>/etc/cron.d</code> folder of the virtual machine.</p>\n<p><a name="configuring-mailhog"></a></p>\n\n          <p><a name="configuring-mailhog"></a></p>\n          <h3>\n            <a href="#configuring-mailhog">\n              Configuring Mailhog\n            </a>\n          </h3><p>Mailhog allows you to easily catch your outgoing email and examine it without actually sending the mail to its recipients. To get started, update your <code>.env</code> file to use the following mail settings:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attr">MAIL_DRIVER</span>=smtp\n<span class="hljs-attr">MAIL_HOST</span>=localhost\n<span class="hljs-attr">MAIL_PORT</span>=<span class="hljs-number">1025</span>\n<span class="hljs-attr">MAIL_USERNAME</span>=null\n<span class="hljs-attr">MAIL_PASSWORD</span>=null\n<span class="hljs-attr">MAIL_ENCRYPTION</span>=null</code></pre>\n  <p>Once Mailhog has been configured, you may access the Mailhog dashboard at <code>http://localhost:8025</code>.</p>\n<p><a name="configuring-minio"></a></p>\n\n          <p><a name="configuring-minio"></a></p>\n          <h3>\n            <a href="#configuring-minio">\n              Configuring Minio\n            </a>\n          </h3><p>Minio is an open source object storage server with an Amazon S3 compatible API. To install Minio, update your <code>Homestead.yaml</code> file with the following configuration option in the <a href="#installing-optional-features">features</a> section:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attr">minio:</span> <span class="hljs-literal">true</span></code></pre>\n  <p>By default, Minio is available on port 9600. You may access the Minio control panel by visiting <code>http://localhost:9600/</code>. The default access key is <code>homestead</code>, while the default secret key is <code>secretkey</code>. When accessing Minio, you should always use region <code>us-east-1</code>.</p>\n<p>In order to use Minio you will need to adjust the S3 disk configuration in your <code>config/filesystems.php</code> configuration file. You will need to add the <code>use_path_style_endpoint</code> option to the disk configuration, as well as change the <code>url</code> key to <code>endpoint</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'s3\'</span> =&gt; [\n    <span class="hljs-string">\'driver\'</span> =&gt; <span class="hljs-string">\'s3\'</span>,\n    <span class="hljs-string">\'key\'</span> =&gt; env(<span class="hljs-string">\'AWS_ACCESS_KEY_ID\'</span>),\n    <span class="hljs-string">\'secret\'</span> =&gt; env(<span class="hljs-string">\'AWS_SECRET_ACCESS_KEY\'</span>),\n    <span class="hljs-string">\'region\'</span> =&gt; env(<span class="hljs-string">\'AWS_DEFAULT_REGION\'</span>),\n    <span class="hljs-string">\'bucket\'</span> =&gt; env(<span class="hljs-string">\'AWS_BUCKET\'</span>),\n    <span class="hljs-string">\'endpoint\'</span> =&gt; env(<span class="hljs-string">\'AWS_URL\'</span>),\n    <span class="hljs-string">\'use_path_style_endpoint\'</span> =&gt; <span class="hljs-keyword">true</span>\n]</code></pre>\n  <p>Finally, ensure your <code>.env</code> file has the following options:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attr">AWS_ACCESS_KEY_ID</span>=homestead\n<span class="hljs-attr">AWS_SECRET_ACCESS_KEY</span>=secretkey\n<span class="hljs-attr">AWS_DEFAULT_REGION</span>=us-east-<span class="hljs-number">1</span>\n<span class="hljs-attr">AWS_URL</span>=http://localhost:<span class="hljs-number">9600</span></code></pre>\n  <p>To provision buckets, add a <code>buckets</code> directive to your Homestead configuration file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">buckets:\n    - <span class="hljs-keyword">name</span>: your-bucket\n      policy: <span class="hljs-keyword">public</span>\n    - <span class="hljs-keyword">name</span>: your-<span class="hljs-keyword">private</span>-bucket\n      policy: <span class="hljs-keyword">none</span></code></pre>\n  <p>Supported <code>policy</code> values include: <code>none</code>, <code>download</code>, <code>upload</code>, and <code>public</code>.</p>\n<p><a name="ports"></a></p>\n\n          <p><a name="ports"></a></p>\n          <h3>\n            <a href="#ports">\n              Ports\n            </a>\n          </h3><p>By default, the following ports are forwarded to your Homestead environment:</p>\n<div class="content-list" markdown="1">\n- **SSH:** 2222 &rarr; Forwards To 22\n- **ngrok UI:** 4040 &rarr; Forwards To 4040\n- **HTTP:** 8000 &rarr; Forwards To 80\n- **HTTPS:** 44300 &rarr; Forwards To 443\n- **MySQL:** 33060 &rarr; Forwards To 3306\n- **PostgreSQL:** 54320 &rarr; Forwards To 5432\n- **MongoDB:** 27017 &rarr; Forwards To 27017\n- **Mailhog:** 8025 &rarr; Forwards To 8025\n- **Minio:** 9600 &rarr; Forwards To 9600\n</div>\n\n\n          <p><a name="forwarding-additional-ports"></a></p>\n          <h4>\n            <a href="#forwarding-additional-ports">\n              Forwarding Additional Ports\n            </a>\n          </h4><p>If you wish, you may forward additional ports to the Vagrant box, as well as specify their protocol:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">ports</span>:\n    - <span class="hljs-attribute">send</span>: <span class="hljs-number">50000</span>\n      <span class="hljs-attribute">to</span>: <span class="hljs-number">5000</span>\n    - <span class="hljs-attribute">send</span>: <span class="hljs-number">7777</span>\n      <span class="hljs-attribute">to</span>: <span class="hljs-number">777</span>\n      <span class="hljs-attribute">protocol</span>: udp</code></pre>\n  <p><a name="sharing-your-environment"></a></p>\n\n          <p><a name="sharing-your-environment"></a></p>\n          <h3>\n            <a href="#sharing-your-environment">\n              Sharing Your Environment\n            </a>\n          </h3><p>Sometimes you may wish to share what you&#39;re currently working on with coworkers or a client. Vagrant has a built-in way to support this via <code>vagrant share</code>; however, this will not work if you have multiple sites configured in your <code>Homestead.yaml</code> file.</p>\n<p>To solve this problem, Homestead includes its own <code>share</code> command. To get started, SSH into your Homestead machine via <code>vagrant ssh</code> and run <code>share homestead.test</code>. This will share the <code>homestead.test</code> site from your <code>Homestead.yaml</code> configuration file. You may substitute any of your other configured sites for <code>homestead.test</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">share homestead.<span class="hljs-keyword">test</span></code></pre>\n  <p>After running the command, you will see an Ngrok screen appear which contains the activity log and the publicly accessible URLs for the shared site. If you would like to specify a custom region, subdomain, or other Ngrok runtime option, you may add them to your <code>share</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">share homestead.test <span class="hljs-attribute">-region</span>=eu <span class="hljs-attribute">-subdomain</span>=laravel</code></pre>\n  <blockquote>\n<p>{note} Remember, Vagrant is inherently insecure and you are exposing your virtual machine to the Internet when running the <code>share</code> command.</p>\n</blockquote>\n<p><a name="multiple-php-versions"></a></p>\n\n          <p><a name="multiple-php-versions"></a></p>\n          <h3>\n            <a href="#multiple-php-versions">\n              Multiple PHP Versions\n            </a>\n          </h3><p>Homestead 6 introduced support for multiple versions of PHP on the same virtual machine. You may specify which version of PHP to use for a given site within your <code>Homestead.yaml</code> file. The available PHP versions are: &quot;5.6&quot;, &quot;7.0&quot;, &quot;7.1&quot;, &quot;7.2&quot;, &quot;7.3&quot;, and &quot;7.4&quot; (the default):</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">sites:</span>\n    - map: homestead.test\n<span class="hljs-symbol">      to:</span> <span class="hljs-meta-keyword">/home/</span>vagrant<span class="hljs-meta-keyword">/project1/</span>public\n<span class="hljs-symbol">      php:</span> <span class="hljs-string">"7.1"</span></code></pre>\n  <p>In addition, you may use any of the supported PHP versions via the CLI:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php5<span class="hljs-number">.6</span> artisan <span class="hljs-type">list</span>\nphp7<span class="hljs-number">.0</span> artisan <span class="hljs-type">list</span>\nphp7<span class="hljs-number">.1</span> artisan <span class="hljs-type">list</span>\nphp7<span class="hljs-number">.2</span> artisan <span class="hljs-type">list</span>\nphp7<span class="hljs-number">.3</span> artisan <span class="hljs-type">list</span>\nphp7<span class="hljs-number">.4</span> artisan <span class="hljs-type">list</span></code></pre>\n  <p>You may also update the default CLI version by issuing the following commands from within your Homestead virtual machine:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php56\nphp70\nphp71\nphp72\nphp73\nphp74</code></pre>\n  <p><a name="web-servers"></a></p>\n\n          <p><a name="web-servers"></a></p>\n          <h3>\n            <a href="#web-servers">\n              Web Servers\n            </a>\n          </h3><p>Homestead uses the Nginx web server by default. However, it can install Apache if <code>apache</code> is specified as a site type. While both web servers can be installed at the same time, they cannot both be <em>running</em> at the same time. The <code>flip</code> shell command is available to ease the process of switching between web servers. The <code>flip</code> command automatically determines which web server is running, shuts it off, and then starts the other server. To use this command, SSH into your Homestead machine and run the command in your terminal:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">flip</span></code></pre>\n  <p><a name="mail"></a></p>\n\n          <p><a name="mail"></a></p>\n          <h3>\n            <a href="#mail">\n              Mail\n            </a>\n          </h3><p>Homestead includes the Postfix mail transfer agent, which is listening on port <code>1025</code> by default. So, you may instruct your application to use the <code>smtp</code> mail driver on <code>localhost</code> port <code>1025</code>. Then, all sent mail will be handled by Postfix and caught by Mailhog. To view your sent emails, open <router-link to="http://localhost:8025">http://localhost:8025</router-link> in your web browser.</p>\n<p><a name="debugging-and-profiling"></a></p>\n\n          <p><a name="debugging-amp-profiling"></a></p>\n          <h2>\n            <a href="#debugging-amp-profiling">\n              Debugging &amp; Profiling\n            </a>\n          </h2><p><a name="debugging-web-requests"></a></p>\n\n          <p><a name="debugging-web-requests-with-xdebug"></a></p>\n          <h3>\n            <a href="#debugging-web-requests-with-xdebug">\n              Debugging Web Requests With Xdebug\n            </a>\n          </h3><p>Homestead includes support for step debugging using <router-link to="https://xdebug.org">Xdebug</router-link>. For example, you can load a web page from a browser, and PHP will connect to your IDE to allow inspection and modification of the running code.</p>\n<p>By default Xdebug is already running and ready to accept connections. If you need to enable Xdebug on the CLI run the <code>sudo phpenmod xdebug</code> command within your Vagrant box. Next, follow your IDE&#39;s instructions to enable debugging. Finally, configure your browser to trigger Xdebug with an extension or <router-link to="https://www.jetbrains.com/phpstorm/marklets/">bookmarklet</router-link>.</p>\n<blockquote>\n<p>{note} Xdebug causes PHP to run significantly slower. To disable Xdebug, run <code>sudo phpdismod xdebug</code> within your Vagrant box and restart the FPM service.</p>\n</blockquote>\n<p><a name="debugging-cli-applications"></a></p>\n\n          <p><a name="debugging-cli-applications"></a></p>\n          <h3>\n            <a href="#debugging-cli-applications">\n              Debugging CLI Applications\n            </a>\n          </h3><p>To debug a PHP CLI application, use the <code>xphp</code> shell alias inside your Vagrant box:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">xphp path/<span class="hljs-keyword">to</span>/<span class="hljs-keyword">script</span></code></pre>\n  \n          <p><a name="autostarting-xdebug"></a></p>\n          <h4>\n            <a href="#autostarting-xdebug">\n              Autostarting Xdebug\n            </a>\n          </h4><p>When debugging functional tests that make requests to the web server, it is easier to autostart debugging rather than modifying tests to pass through a custom header or cookie to trigger debugging. To force Xdebug to start automatically, modify <code>/etc/php/7.x/fpm/conf.d/20-xdebug.ini</code> inside your Vagrant box and add the following configuration:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">; <span class="hljs-keyword">If</span> Homestead.yml contains a different subnet <span class="hljs-keyword">for</span> the<span class="hljs-built_in"> IP </span>address, this<span class="hljs-built_in"> address </span>may be different<span class="hljs-built_in">..</span>.\nxdebug.remote_host = 192.168.10.1\nxdebug.remote_autostart = 1</code></pre>\n  <p><a name="profiling-applications-with-blackfire"></a></p>\n\n          <p><a name="profiling-applications-with-blackfire"></a></p>\n          <h3>\n            <a href="#profiling-applications-with-blackfire">\n              Profiling Applications with Blackfire\n            </a>\n          </h3><p><router-link to="https://blackfire.io/docs/introduction">Blackfire</router-link> is a SaaS service for profiling web requests and CLI applications and writing performance assertions. It offers an interactive user interface which displays profile data in call-graphs and timelines. It is built for use in development, staging, and production, with no overhead for end users. It provides performance, quality, and security checks on code and <code>php.ini</code> configuration settings.</p>\n<p>The <router-link to="https://blackfire.io/docs/player/index">Blackfire Player</router-link> is an open-source Web Crawling, Web Testing and Web Scraping application which can work jointly with Blackfire in order to script profiling scenarios.</p>\n<p>To enable Blackfire, use the &quot;features&quot; setting in your Homestead configuration file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">features</span>:\n    - <span class="hljs-attribute">blackfire</span>:\n        <span class="hljs-attribute">server_id</span>: <span class="hljs-string">"server_id"</span>\n        <span class="hljs-attribute">server_token</span>: <span class="hljs-string">"server_value"</span>\n        <span class="hljs-attribute">client_id</span>: <span class="hljs-string">"client_id"</span>\n        <span class="hljs-attribute">client_token</span>: <span class="hljs-string">"client_value"</span></code></pre>\n  <p>Blackfire server credentials and client credentials <router-link to="https://blackfire.io/signup">require a user account</router-link>. Blackfire offers various options to profile an application, including a CLI tool and browser extension. Please <router-link to="https://blackfire.io/docs/cookbooks/index">review the Blackfire documentation for more details</router-link>.</p>\n\n          <p><a name="profiling-php-performance-using-xhgui"></a></p>\n          <h3>\n            <a href="#profiling-php-performance-using-xhgui">\n              Profiling PHP Performance Using XHGui\n            </a>\n          </h3><p><router-link to="https://www.github.com/perftools/xhgui">XHGui</router-link> is a user interface for exploring the performance of your PHP applications. To enable XHGui, add <code>xhgui: &#39;true&#39;</code> to your site configuration:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">sites</span>:\n    -\n        <span class="hljs-attribute">map</span>: your-site.test\n        <span class="hljs-attribute">to</span>: /home/vagrant/your-site/public\n        <span class="hljs-attribute">type</span>: <span class="hljs-string">"apache"</span>\n        <span class="hljs-attribute">xhgui</span>: <span class="hljs-string">\'true\'</span></code></pre>\n  <p>If the site already exists, make sure to run <code>vagrant provision</code> after updating your configuration.</p>\n<p>To profile a web request, add <code>xhgui=on</code> as a query parameter to a request. XHGui will automatically attach a cookie to the response so that subsequent requests do not need the query string value. You may view your application profile results by browsing to <code>http://your-site.test/xhgui</code>.</p>\n<p>To profile a CLI request using XHGui, prefix the command with <code>XHGUI=on</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">XHGUI=<span class="hljs-keyword">on</span> path/<span class="hljs-keyword">to</span>/<span class="hljs-keyword">script</span></code></pre>\n  <p>CLI profile results may be viewed in the same way as web profile results.</p>\n<p>Note that the act of profiling slows down script execution, and absolute times may be as much as twice as real-world requests. Therefore, always compare percentage improvements and not absolute numbers. Also, be aware the execution time includes any time spent paused in a debugger.</p>\n<p>Since performance profiles take up significant disk space, they are deleted automatically after a few days.</p>\n<p><a name="network-interfaces"></a></p>\n\n          <p><a name="network-interfaces"></a></p>\n          <h2>\n            <a href="#network-interfaces">\n              Network Interfaces\n            </a>\n          </h2><p>The <code>networks</code> property of the <code>Homestead.yaml</code> configures network interfaces for your Homestead environment. You may configure as many interfaces as necessary:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">networks</span>:\n    - <span class="hljs-attribute">type</span>: <span class="hljs-string">"private_network"</span>\n      <span class="hljs-attribute">ip</span>: <span class="hljs-string">"192.168.10.20"</span></code></pre>\n  <p>To enable a <router-link to="https://www.vagrantup.com/docs/networking/public_network.html">bridged</router-link> interface, configure a <code>bridge</code> setting and change the network type to <code>public_network</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">networks</span>:\n    - <span class="hljs-attribute">type</span>: <span class="hljs-string">"public_network"</span>\n      <span class="hljs-attribute">ip</span>: <span class="hljs-string">"192.168.10.20"</span>\n      <span class="hljs-attribute">bridge</span>: <span class="hljs-string">"en1: Wi-Fi (AirPort)"</span></code></pre>\n  <p>To enable <router-link to="https://www.vagrantup.com/docs/networking/public_network.html">DHCP</router-link>, just remove the <code>ip</code> option from your configuration:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">networks</span>:\n    - <span class="hljs-attribute">type</span>: <span class="hljs-string">"public_network"</span>\n      <span class="hljs-attribute">bridge</span>: <span class="hljs-string">"en1: Wi-Fi (AirPort)"</span></code></pre>\n  <p><a name="extending-homestead"></a></p>\n\n          <p><a name="extending-homestead"></a></p>\n          <h2>\n            <a href="#extending-homestead">\n              Extending Homestead\n            </a>\n          </h2><p>You may extend Homestead using the <code>after.sh</code> script in the root of your Homestead directory. Within this file, you may add any shell commands that are necessary to properly configure and customize your virtual machine.</p>\n<p>When customizing Homestead, Ubuntu may ask you if you would like to keep a package&#39;s original configuration or overwrite it with a new configuration file. To avoid this, you should use the following command when installing packages to avoid overwriting any configuration previously written by Homestead:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">sudo apt-get -y \\\n    -<span class="ruby">o Dpkg::Options::=<span class="hljs-string">"--force-confdef"</span> \\\n</span>    -<span class="ruby">o Dpkg::Options::=<span class="hljs-string">"--force-confold"</span> \\\n</span>    install your-package</code></pre>\n  \n          <p><a name="user-customizations"></a></p>\n          <h3>\n            <a href="#user-customizations">\n              User Customizations\n            </a>\n          </h3><p>When using Homestead in a team setting, you may want to tweak Homestead to better fit your personal development style. You may create a <code>user-customizations.sh</code> file in the root of your Homestead directory (The same directory containing your <code>Homestead.yaml</code>). Within this file, you may make any customization you would like; however, the <code>user-customizations.sh</code> should not be version controlled.</p>\n<p><a name="updating-homestead"></a></p>\n\n          <p><a name="updating-homestead"></a></p>\n          <h2>\n            <a href="#updating-homestead">\n              Updating Homestead\n            </a>\n          </h2><p>Before you begin updating Homestead ensure you have removed your current virtual machine by running the following command in your Homestead directory:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">vagrant destroy</span></code></pre>\n  <p>Next, you need to update the Homestead source code. If you cloned the repository you can run the following commands at the location you originally cloned the repository:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">git <span class="hljs-keyword">fetch</span>\n\ngit pull origin <span class="hljs-keyword">release</span></code></pre>\n  <p>These commands pull the latest Homestead code from the GitHub repository, fetches the latest tags, and then checks out the latest tagged release. You can find the latest stable release version on the <router-link to="https://github.com/laravel/homestead/releases">GitHub releases page</router-link>.</p>\n<p>If you have installed Homestead via your project&#39;s <code>composer.json</code> file, you should ensure your <code>composer.json</code> file contains <code>&quot;laravel/homestead&quot;: &quot;^9&quot;</code> and update your dependencies:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">composer update</span></code></pre>\n  <p>Then, you should update the Vagrant box using the <code>vagrant box update</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">vagrant <span class="hljs-type">box</span> <span class="hljs-keyword">update</span></code></pre>\n  <p>Finally, you will need to regenerate your Homestead box to utilize the latest Vagrant installation:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">vagrant up</span></code></pre>\n  <p><a name="provider-specific-settings"></a></p>\n\n          <p><a name="provider-specific-settings"></a></p>\n          <h2>\n            <a href="#provider-specific-settings">\n              Provider Specific Settings\n            </a>\n          </h2><p><a name="provider-specific-virtualbox"></a></p>\n\n          <p><a name="virtualbox"></a></p>\n          <h3>\n            <a href="#virtualbox">\n              VirtualBox\n            </a>\n          </h3>\n          <p><a name="-code-natdnshostresolver-code-"></a></p>\n          <h4>\n            <a href="#-code-natdnshostresolver-code-">\n              <code>natdnshostresolver</code>\n            </a>\n          </h4><p>By default, Homestead configures the <code>natdnshostresolver</code> setting to <code>on</code>. This allows Homestead to use your host operating system&#39;s DNS settings. If you would like to override this behavior, add the following lines to your <code>Homestead.yaml</code> file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">provider:</span> virtualbox\n<span class="hljs-string">natdnshostresolver:</span> <span class="hljs-string">\'off\'</span></code></pre>\n  \n          <p><a name="symbolic-links-on-windows"></a></p>\n          <h4>\n            <a href="#symbolic-links-on-windows">\n              Symbolic Links On Windows\n            </a>\n          </h4><p>If symbolic links are not working properly on your Windows machine, you may need to add the following block to your <code>Vagrantfile</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">config.vm.provider <span class="hljs-string">"virtualbox"</span> <span class="hljs-built_in">do</span> |<span class="hljs-type">v</span>|\n    <span class="hljs-type">v</span>.customize [<span class="hljs-string">"setextradata"</span>, :id, <span class="hljs-string">"VBoxInternal2/SharedFoldersEnableSymlinksCreate/v-root"</span>, <span class="hljs-string">"1"</span>]\n<span class="hljs-keyword">end</span></code></pre>\n  '},"1d4d":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="views"></a></p>\n          <h1>\n            <a href="#views">\n              Views\n            </a>\n          </h1><ul>\n<li><a href="#creating-views">Creating Views</a></li>\n<li><a href="#passing-data-to-views">Passing Data To Views</a><ul>\n<li><a href="#sharing-data-with-all-views">Sharing Data With All Views</a></li>\n</ul>\n</li>\n<li><a href="#view-composers">View Composers</a></li>\n</ul>\n<p><a name="creating-views"></a></p>\n\n          <p><a name="creating-views"></a></p>\n          <h2>\n            <a href="#creating-views">\n              Creating Views\n            </a>\n          </h2><p>Views contain the HTML served by your application and separate your controller / application logic from your presentation logic. Views are stored in the <code>resources/views</code> directory. A simple view might look something like this:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoiY2xhc3MgVGlua2Vyd2VsbENvbnRyb2xsZXIge1xuXG4gIHB1YmxpYyBmdW5jdGlvbiBpbmRleCgpIHtcbiAgICByZXR1cm4gdmlldygnX190aW5rZXJfXzo6dGlua2Vyd2VsbCcsIFsnbmFtZScgPT4gJ0phbWVzJ10pO1xuICB9XG5cbn0iLCJ2aWV3Q29kZSI6IjxodG1sPlxuICAgIDxib2R5PlxuICAgICAgICA8aDE+SGVsbG8sIHt7ICRuYW1lIH19PC9oMT5cbiAgICA8L2JvZHk+XG48L2h0bWw+IiwiaGFzaCI6InZpZXdzLWNyZWF0aW5nLXZpZXdzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, </span><span class="hljs-template-variable">{{ $name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></code></pre>\n  <p>Since this view is stored at <code>resources/views/greeting.blade.php</code>, we may return it using the global <code>view</code> helper like so:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'/\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> view(<span class="hljs-string">\'greeting\'</span>, [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'James\'</span>]);\n});</code></pre>\n  <p>As you can see, the first argument passed to the <code>view</code> helper corresponds to the name of the view file in the <code>resources/views</code> directory. The second argument is an array of data that should be made available to the view. In this case, we are passing the <code>name</code> variable, which is displayed in the view using <router-link to="/docs/blade">Blade syntax</router-link>.</p>\n<p>Views may also be nested within sub-directories of the <code>resources/views</code> directory. &quot;Dot&quot; notation may be used to reference nested views. For example, if your view is stored at <code>resources/views/admin/profile.blade.php</code>, you may reference it like so:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> view(<span class="hljs-string">\'admin.profile\'</span>, $<span class="hljs-keyword">data</span>);</code></pre>\n  \n          <p><a name="determining-if-a-view-exists"></a></p>\n          <h4>\n            <a href="#determining-if-a-view-exists">\n              Determining If A View Exists\n            </a>\n          </h4><p>If you need to determine if a view exists, you may use the <code>View</code> facade. The <code>exists</code> method will return <code>true</code> if the view exists:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlxuJGV4aXN0aW5nVmlldyA9IFZpZXc6OmV4aXN0cygnX190aW5rZXJfXzo6dGlua2Vyd2VsbCcpO1xudmFyX2R1bXAoJGV4aXN0aW5nVmlldyk7XG5cbiRpbnZhbGlkVmlldyA9IFZpZXc6OmV4aXN0cygnbm90LWZvdW5kJyk7XG52YXJfZHVtcCgkaW52YWxpZFZpZXcpO1xuIiwiaGFzaCI6InZpZXdzLWRldGVybWluaW5nLWlmLWEtdmlldy1leGlzdHMifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> Illuminate\\Support\\Facades\\<span class="hljs-built_in">View</span>;\n\n<span class="hljs-keyword">if</span> (<span class="hljs-built_in">View</span>::<span class="hljs-built_in">exists</span>(\'emails.customer\')) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  \n          <p><a name="creating-the-first-available-view"></a></p>\n          <h4>\n            <a href="#creating-the-first-available-view">\n              Creating The First Available View\n            </a>\n          </h4><p>Using the <code>first</code> method, you may create the first view that exists in a given array of views. This is useful if your application or package allows views to be customized or overwritten:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> view<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>first([<span class="hljs-string">\'custom.admin\'</span>, <span class="hljs-string">\'admin\'</span>], $data);</code></pre>\n  <p>You may also call this method via the <code>View</code> <router-link to="/docs/facades">facade</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">View</span>;\n\n<span class="hljs-keyword">return</span> View::first([<span class="hljs-string">\'custom.admin\'</span>, <span class="hljs-string">\'admin\'</span>], $data);</code></pre>\n  <p><a name="passing-data-to-views"></a></p>\n\n          <p><a name="passing-data-to-views"></a></p>\n          <h2>\n            <a href="#passing-data-to-views">\n              Passing Data To Views\n            </a>\n          </h2><p>As you saw in the previous examples, you may pass an array of data to views:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoiY2xhc3MgVGlua2Vyd2VsbENvbnRyb2xsZXIge1xuXG4gIHB1YmxpYyBmdW5jdGlvbiBpbmRleCgpIHtcbiAgICByZXR1cm4gdmlldygnX190aW5rZXJfXzo6dGlua2Vyd2VsbCcsIFsnbmFtZScgPT4gJ1ZpY3RvcmlhJ10pO1xuICB9XG5cbn0iLCJ2aWV3Q29kZSI6IjxodG1sPlxuICAgIDxib2R5PlxuICAgICAgICA8aDE+SGVsbG8sIHt7ICRuYW1lIH19PC9oMT5cbiAgICA8L2JvZHk+XG48L2h0bWw+IiwiaGFzaCI6InZpZXdzLXBhc3NpbmctZGF0YS10by12aWV3cyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">view</span><span class="hljs-params">(<span class="hljs-string">\'greetings\'</span>, [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Victoria\'</span>])</span></span>;</code></pre>\n  <p>When passing information in this manner, the data should be an array with key / value pairs. Inside your view, you can then access each value using its corresponding key, such as <code>&lt;?php echo $key; ?&gt;</code>. As an alternative to passing a complete array of data to the <code>view</code> helper function, you may use the <code>with</code> method to add individual pieces of data to the view:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> view<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'greeting\'</span>)</span>-&gt;</span><span class="hljs-keyword">with</span>(<span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'Victoria\'</span>);</code></pre>\n  <p><a name="sharing-data-with-all-views"></a></p>\n\n          <p><a name="sharing-data-with-all-views"></a></p>\n          <h4>\n            <a href="#sharing-data-with-all-views">\n              Sharing Data With All Views\n            </a>\n          </h4><p>Occasionally, you may need to share a piece of data with all views that are rendered by your application. You may do so using the view facade&#39;s <code>share</code> method. Typically, you should place calls to <code>share</code> within a service provider&#39;s <code>boot</code> method. You are free to add them to the <code>AppServiceProvider</code> or generate a separate service provider to house them:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIElsbHVtaW5hdGVcXFN1cHBvcnRcXFNlcnZpY2VQcm92aWRlcjtcblxuY2xhc3MgU2hhcmVWaWV3RGF0YVNlcnZpY2VQcm92aWRlciBleHRlbmRzIFNlcnZpY2VQcm92aWRlclxue1xuICBwdWJsaWMgZnVuY3Rpb24gYm9vdCgpXG4gIHtcbiAgICAgIFZpZXc6OnNoYXJlKCdrZXknLCAndmFsdWUnKTtcbiAgfVxufVxuXG5BcHA6OnJlZ2lzdGVyKFNoYXJlVmlld0RhdGFTZXJ2aWNlUHJvdmlkZXI6OmNsYXNzKTtcblxuY2xhc3MgVGlua2Vyd2VsbENvbnRyb2xsZXIge1xuXG4gIHB1YmxpYyBmdW5jdGlvbiBpbmRleCgpIHtcbiAgICByZXR1cm4gdmlldygnX190aW5rZXJfXzo6dGlua2Vyd2VsbCcpO1xuICB9XG5cbn0iLCJ2aWV3Q29kZSI6IjxodG1sPlxuICAgIDxib2R5PlxuICAgICAgICA8aDE+VGhpcyBpcyBzaGFyZWQgZnJvbSB0aGUgcHJvdmlkZXI6IHt7ICRrZXkgfX08L2gxPlxuICAgIDwvYm9keT5cbjwvaHRtbD4iLCJoYXNoIjoidmlld3Mtc2hhcmluZy1kYXRhLXdpdGgtYWxsLXZpZXdzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Providers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">View</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Register any application services.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-comment">//</span>\n    }\n\n    <span class="hljs-comment">/**\n     * Bootstrap any application services.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n    </span>{\n        View::share(<span class="hljs-string">\'key\'</span>, <span class="hljs-string">\'value\'</span>);\n    }\n}</span></code></pre>\n  <p><a name="view-composers"></a></p>\n\n          <p><a name="view-composers"></a></p>\n          <h2>\n            <a href="#view-composers">\n              View Composers\n            </a>\n          </h2><p>View composers are callbacks or class methods that are called when a view is rendered. If you have data that you want to be bound to a view each time that view is rendered, a view composer can help you organize that logic into a single location.</p>\n<p>For this example, let&#39;s register the view composers within a <router-link to="/docs/providers">service provider</router-link>. We&#39;ll use the <code>View</code> facade to access the underlying <code>Illuminate\\Contracts\\View\\Factory</code> contract implementation. Remember, Laravel does not include a default directory for view composers. You are free to organize them however you wish. For example, you could create an <code>app/Http/View/Composers</code> directory:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIElsbHVtaW5hdGVcXFN1cHBvcnRcXEZhY2FkZXNcXFZpZXc7XG51c2UgSWxsdW1pbmF0ZVxcU3VwcG9ydFxcU2VydmljZVByb3ZpZGVyO1xuXG5jbGFzcyBWaWV3U2VydmljZVByb3ZpZGVyIGV4dGVuZHMgU2VydmljZVByb3ZpZGVyXG57XG4gIHB1YmxpYyBmdW5jdGlvbiBib290KClcbiAge1xuICAgICAgVmlldzo6Y29tcG9zZXIoJyp0aW5rZXJ3ZWxsJywgZnVuY3Rpb24gKCR2aWV3KSB7XG4gICAgICAgICR2aWV3LT53aXRoKCdrZXknLCAndmlldyBjb21wb3NlcnMgYXJlIGdyZWF0IScpO1xuICAgICAgfSk7XG4gIH1cbn1cblxuQXBwOjpyZWdpc3RlcihWaWV3U2VydmljZVByb3ZpZGVyOjpjbGFzcyk7XG5cbmNsYXNzIFRpbmtlcndlbGxDb250cm9sbGVyIHtcblxuICBwdWJsaWMgZnVuY3Rpb24gaW5kZXgoKSB7XG4gICAgcmV0dXJuIHZpZXcoJ19fdGlua2VyX186OnRpbmtlcndlbGwnKTtcbiAgfVxuXG59Iiwidmlld0NvZGUiOiI8aHRtbD5cbiAgICA8Ym9keT5cbiAgICAgICAgPGgxPlRoaXMgaXMgc2hhcmVkIGZyb20gdGhlIGNvbXBvc2VyOiB7eyAka2V5IH19PC9oMT5cbiAgICA8L2JvZHk+XG48L2h0bWw+IiwiaGFzaCI6InZpZXdzLXZpZXctY29tcG9zZXJzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Providers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">View</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">ServiceProvider</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ViewServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Register any application services.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-comment">//</span>\n    }\n\n    <span class="hljs-comment">/**\n     * Bootstrap any application services.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-comment">// Using class based composers...</span>\n        View::composer(\n            <span class="hljs-string">\'profile\'</span>, <span class="hljs-string">\'App\\Http\\View\\Composers\\ProfileComposer\'</span>\n        );\n\n        <span class="hljs-comment">// Using Closure based composers...</span>\n        View::composer(<span class="hljs-string">\'dashboard\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($view)</span> </span>{\n            <span class="hljs-comment">//</span>\n        });\n    }\n}</span></code></pre>\n  <blockquote>\n<p>{note} Remember, if you create a new service provider to contain your view composer registrations, you will need to add the service provider to the <code>providers</code> array in the <code>config/app.php</code> configuration file.</p>\n</blockquote>\n<p>Now that we have registered the composer, the <code>ProfileComposer@compose</code> method will be executed each time the <code>profile</code> view is being rendered. So, let&#39;s define the composer class:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">View</span>\\<span class="hljs-title">Composers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Repositories</span>\\<span class="hljs-title">UserRepository</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">View</span>\\<span class="hljs-title">View</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProfileComposer</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The user repository implementation.\n     *\n     * <span class="hljs-doctag">@var</span> UserRepository\n     */</span>\n    <span class="hljs-keyword">protected</span> $users;\n\n    <span class="hljs-comment">/**\n     * Create a new profile composer.\n     *\n     * <span class="hljs-doctag">@param</span>  UserRepository  $users\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(UserRepository $users)</span>\n    </span>{\n        <span class="hljs-comment">// Dependencies automatically resolved by service container...</span>\n        <span class="hljs-keyword">$this</span>-&gt;users = $users;\n    }\n\n    <span class="hljs-comment">/**\n     * Bind data to the view.\n     *\n     * <span class="hljs-doctag">@param</span>  View  $view\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compose</span><span class="hljs-params">(View $view)</span>\n    </span>{\n        $view-&gt;with(<span class="hljs-string">\'count\'</span>, <span class="hljs-keyword">$this</span>-&gt;users-&gt;count());\n    }\n}</span></code></pre>\n  <p>Just before the view is rendered, the composer&#39;s <code>compose</code> method is called with the <code>Illuminate\\View\\View</code> instance. You may use the <code>with</code> method to bind data to the view.</p>\n\n          <p><a name="attaching-a-composer-to-multiple-views"></a></p>\n          <h4>\n            <a href="#attaching-a-composer-to-multiple-views">\n              Attaching A Composer To Multiple Views\n            </a>\n          </h4><p>You may attach a view composer to multiple views at once by passing an array of views as the first argument to the <code>composer</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">View</span>::composer(\n    [<span class="hljs-symbol">\'profile</span>\', <span class="hljs-symbol">\'dashboard</span>\'],\n    <span class="hljs-symbol">\'App\\H</span>ttp\\<span class="hljs-keyword">View</span>\\Composers\\MyViewComposer\'\n);</code></pre>\n  <p>The <code>composer</code> method also accepts the <code>*</code> character as a wildcard, allowing you to attach a composer to all views:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">View::composer(<span class="hljs-string">\'*\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($view)</span> </span>{\n    <span class="hljs-comment">//</span>\n});</code></pre>\n  \n          <p><a name="view-creators"></a></p>\n          <h4>\n            <a href="#view-creators">\n              View Creators\n            </a>\n          </h4><p>View <strong>creators</strong> are very similar to view composers; however, they are executed immediately after the view is instantiated instead of waiting until the view is about to render. To register a view creator, use the <code>creator</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">View::creator(\'profile\', \'App<span class="hljs-symbol">\\H</span>ttp<span class="hljs-symbol">\\V</span>iew<span class="hljs-symbol">\\C</span>reators<span class="hljs-symbol">\\P</span>rofileCreator\');</code></pre>\n  '},"1de4":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="http-requests"></a></p>\n          <h1>\n            <a href="#http-requests">\n              HTTP Requests\n            </a>\n          </h1><ul>\n<li><a href="#accessing-the-request">Accessing The Request</a><ul>\n<li><a href="#request-path-and-method">Request Path &amp; Method</a></li>\n<li><a href="#psr7-requests">PSR-7 Requests</a></li>\n</ul>\n</li>\n<li><a href="#input-trimming-and-normalization">Input Trimming &amp; Normalization</a></li>\n<li><a href="#retrieving-input">Retrieving Input</a><ul>\n<li><a href="#old-input">Old Input</a></li>\n<li><a href="#cookies">Cookies</a></li>\n</ul>\n</li>\n<li><a href="#files">Files</a><ul>\n<li><a href="#retrieving-uploaded-files">Retrieving Uploaded Files</a></li>\n<li><a href="#storing-uploaded-files">Storing Uploaded Files</a></li>\n</ul>\n</li>\n<li><a href="#configuring-trusted-proxies">Configuring Trusted Proxies</a></li>\n</ul>\n<p><a name="accessing-the-request"></a></p>\n\n          <p><a name="accessing-the-request"></a></p>\n          <h2>\n            <a href="#accessing-the-request">\n              Accessing The Request\n            </a>\n          </h2><p>To obtain an instance of the current HTTP request via dependency injection, you should type-hint the <code>Illuminate\\Http\\Request</code> class on your controller method. The incoming request instance will automatically be injected by the <router-link to="/docs/{{version}}/container">service container</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Request</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Store a new user.\n     *\n     * <span class="hljs-doctag">@param</span>  Request  $request\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span><span class="hljs-params">(Request $request)</span>\n    </span>{\n        $name = $request-&gt;input(<span class="hljs-string">\'name\'</span>);\n\n        <span class="hljs-comment">//</span>\n    }\n}</span></code></pre>\n  \n          <p><a name="dependency-injection-amp-route-parameters"></a></p>\n          <h4>\n            <a href="#dependency-injection-amp-route-parameters">\n              Dependency Injection &amp; Route Parameters\n            </a>\n          </h4><p>If your controller method is also expecting input from a route parameter you should list your route parameters after your other dependencies. For example, if your route is defined like so:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::<span class="hljs-built_in">put</span>(<span class="hljs-string">\'user/{id}\'</span>, <span class="hljs-string">\'UserController@update\'</span>);</code></pre>\n  <p>You may still type-hint the <code>Illuminate\\Http\\Request</code> and access your route parameter <code>id</code> by defining your controller method as follows:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Request</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Update the specified user.\n     *\n     * <span class="hljs-doctag">@param</span>  Request  $request\n     * <span class="hljs-doctag">@param</span>  string  $id\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">(Request $request, $id)</span>\n    </span>{\n        <span class="hljs-comment">//</span>\n    }\n}</span></code></pre>\n  \n          <p><a name="accessing-the-request-via-route-closures"></a></p>\n          <h4>\n            <a href="#accessing-the-request-via-route-closures">\n              Accessing The Request Via Route Closures\n            </a>\n          </h4><p>You may also type-hint the <code>Illuminate\\Http\\Request</code> class on a route Closure. The service container will automatically inject the incoming request into the Closure when it is executed:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Request</span>;\n\nRoute::get(<span class="hljs-string">\'/\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Request $request)</span> </span>{\n    <span class="hljs-comment">//</span>\n});</code></pre>\n  <p><a name="request-path-and-method"></a></p>\n\n          <p><a name="request-path-amp-method"></a></p>\n          <h3>\n            <a href="#request-path-amp-method">\n              Request Path &amp; Method\n            </a>\n          </h3><p>The <code>Illuminate\\Http\\Request</code> instance provides a variety of methods for examining the HTTP request for your application and extends the <code>Symfony\\Component\\HttpFoundation\\Request</code> class. We will discuss a few of the most important methods below.</p>\n\n          <p><a name="retrieving-the-request-path"></a></p>\n          <h4>\n            <a href="#retrieving-the-request-path">\n              Retrieving The Request Path\n            </a>\n          </h4><p>The <code>path</code> method returns the request&#39;s path information. So, if the incoming request is targeted at <code>http://domain.com/foo/bar</code>, the <code>path</code> method will return <code>foo/bar</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$uri</span> = <span class="hljs-variable">$request</span>-&gt;path();</code></pre>\n  <p>The <code>is</code> method allows you to verify that the incoming request path matches a given pattern. You may use the <code>*</code> character as a wildcard when utilizing this method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> ($request-&gt;is(<span class="hljs-string">\'admin/*\'</span>)) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  \n          <p><a name="retrieving-the-request-url"></a></p>\n          <h4>\n            <a href="#retrieving-the-request-url">\n              Retrieving The Request URL\n            </a>\n          </h4><p>To retrieve the full URL for the incoming request you may use the <code>url</code> or <code>fullUrl</code> methods. The <code>url</code> method will return the URL without the query string, while the <code>fullUrl</code> method includes the query string:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Without Query String...</span>\n$url = $request-&gt;url();\n\n<span class="hljs-comment">// With Query String...</span>\n$url = $request-&gt;fullUrl();</code></pre>\n  \n          <p><a name="retrieving-the-request-method"></a></p>\n          <h4>\n            <a href="#retrieving-the-request-method">\n              Retrieving The Request Method\n            </a>\n          </h4><p>The <code>method</code> method will return the HTTP verb for the request. You may use the <code>isMethod</code> method to verify that the HTTP verb matches a given string:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$method = $request-&gt;method();\n\n<span class="hljs-keyword">if</span> ($request-&gt;isMethod(<span class="hljs-string">\'post\'</span>)) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p><a name="psr7-requests"></a></p>\n\n          <p><a name="psr-7-requests"></a></p>\n          <h3>\n            <a href="#psr-7-requests">\n              PSR-7 Requests\n            </a>\n          </h3><p>The <router-link to="https://www.php-fig.org/psr/psr-7/">PSR-7 standard</router-link> specifies interfaces for HTTP messages, including requests and responses. If you would like to obtain an instance of a PSR-7 request instead of a Laravel request, you will first need to install a few libraries. Laravel uses the <em>Symfony HTTP Message Bridge</em> component to convert typical Laravel requests and responses into PSR-7 compatible implementations:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">composer</span> <span class="hljs-meta">require</span> symfony/psr-http-message-<span class="hljs-keyword">bridge\n</span><span class="hljs-symbol">composer</span> <span class="hljs-meta">require</span> zendframework/zend-diactoros</code></pre>\n  <p>Once you have installed these libraries, you may obtain a PSR-7 request by type-hinting the request interface on your route Closure or controller method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Psr</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Message</span>\\<span class="hljs-title">ServerRequestInterface</span>;\n\nRoute::get(<span class="hljs-string">\'/\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(ServerRequestInterface $request)</span> </span>{\n    <span class="hljs-comment">//</span>\n});</code></pre>\n  <blockquote>\n<p>{tip} If you return a PSR-7 response instance from a route or controller, it will automatically be converted back to a Laravel response instance and be displayed by the framework.</p>\n</blockquote>\n<p><a name="input-trimming-and-normalization"></a></p>\n\n          <p><a name="input-trimming-amp-normalization"></a></p>\n          <h2>\n            <a href="#input-trimming-amp-normalization">\n              Input Trimming &amp; Normalization\n            </a>\n          </h2><p>By default, Laravel includes the <code>TrimStrings</code> and <code>ConvertEmptyStringsToNull</code> middleware in your application&#39;s global middleware stack. These middleware are listed in the stack by the <code>App\\Http\\Kernel</code> class. These middleware will automatically trim all incoming string fields on the request, as well as convert any empty string fields to <code>null</code>. This allows you to not have to worry about these normalization concerns in your routes and controllers.</p>\n<p>If you would like to disable this behavior, you may remove the two middleware from your application&#39;s middleware stack by removing them from the <code>$middleware</code> property of your <code>App\\Http\\Kernel</code> class.</p>\n<p><a name="retrieving-input"></a></p>\n\n          <p><a name="retrieving-input"></a></p>\n          <h2>\n            <a href="#retrieving-input">\n              Retrieving Input\n            </a>\n          </h2>\n          <p><a name="retrieving-all-input-data"></a></p>\n          <h4>\n            <a href="#retrieving-all-input-data">\n              Retrieving All Input Data\n            </a>\n          </h4><p>You may also retrieve all of the input data as an <code>array</code> using the <code>all</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$input</span> = <span class="hljs-variable">$request</span>-&gt;all();</code></pre>\n  \n          <p><a name="retrieving-an-input-value"></a></p>\n          <h4>\n            <a href="#retrieving-an-input-value">\n              Retrieving An Input Value\n            </a>\n          </h4><p>Using a few simple methods, you may access all of the user input from your <code>Illuminate\\Http\\Request</code> instance without worrying about which HTTP verb was used for the request. Regardless of the HTTP verb, the <code>input</code> method may be used to retrieve user input:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$name</span> = <span class="hljs-variable">$request</span>-&gt;input(<span class="hljs-string">\'name\'</span>);</code></pre>\n  <p>You may pass a default value as the second argument to the <code>input</code> method. This value will be returned if the requested input value is not present on the request:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$name</span> = <span class="hljs-variable">$request</span>-&gt;input(<span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'Sally\'</span>);</code></pre>\n  <p>When working with forms that contain array inputs, use &quot;dot&quot; notation to access the arrays:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$name</span> = <span class="hljs-variable">$request</span>-&gt;input(<span class="hljs-string">\'products.0.name\'</span>);\n\n<span class="hljs-variable">$names</span> = <span class="hljs-variable">$request</span>-&gt;input(<span class="hljs-string">\'products.*.name\'</span>);</code></pre>\n  <p>You may call the <code>input</code> method without any arguments in order to retrieve all of the input values as an associative array:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$input</span> = <span class="hljs-variable">$request</span>-&gt;input();</code></pre>\n  \n          <p><a name="retrieving-input-from-the-query-string"></a></p>\n          <h4>\n            <a href="#retrieving-input-from-the-query-string">\n              Retrieving Input From The Query String\n            </a>\n          </h4><p>While the <code>input</code> method retrieves values from entire request payload (including the query string), the <code>query</code> method will only retrieve values from the query string:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$name</span> = <span class="hljs-variable">$request</span>-&gt;query(<span class="hljs-string">\'name\'</span>);</code></pre>\n  <p>If the requested query string value data is not present, the second argument to this method will be returned:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$name</span> = <span class="hljs-variable">$request</span>-&gt;query(<span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'Helen\'</span>);</code></pre>\n  <p>You may call the <code>query</code> method without any arguments in order to retrieve all of the query string values as an associative array:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$query</span> = <span class="hljs-variable">$request</span>-&gt;query();</code></pre>\n  \n          <p><a name="retrieving-input-via-dynamic-properties"></a></p>\n          <h4>\n            <a href="#retrieving-input-via-dynamic-properties">\n              Retrieving Input Via Dynamic Properties\n            </a>\n          </h4><p>You may also access user input using dynamic properties on the <code>Illuminate\\Http\\Request</code> instance. For example, if one of your application&#39;s forms contains a <code>name</code> field, you may access the value of the field like so:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$name</span> = <span class="hljs-variable">$request</span>-&gt;name;</code></pre>\n  <p>When using dynamic properties, Laravel will first look for the parameter&#39;s value in the request payload. If it is not present, Laravel will search for the field in the route parameters.</p>\n\n          <p><a name="retrieving-json-input-values"></a></p>\n          <h4>\n            <a href="#retrieving-json-input-values">\n              Retrieving JSON Input Values\n            </a>\n          </h4><p>When sending JSON requests to your application, you may access the JSON data via the <code>input</code> method as long as the <code>Content-Type</code> header of the request is properly set to <code>application/json</code>. You may even use &quot;dot&quot; syntax to dig into JSON arrays:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$name</span> = <span class="hljs-variable">$request</span>-&gt;input(<span class="hljs-string">\'user.name\'</span>);</code></pre>\n  \n          <p><a name="retrieving-a-portion-of-the-input-data"></a></p>\n          <h4>\n            <a href="#retrieving-a-portion-of-the-input-data">\n              Retrieving A Portion Of The Input Data\n            </a>\n          </h4><p>If you need to retrieve a subset of the input data, you may use the <code>only</code> and <code>except</code> methods. Both of these methods accept a single <code>array</code> or a dynamic list of arguments:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$input</span> = <span class="hljs-variable">$request</span>-&gt;only([<span class="hljs-string">\'username\'</span>, <span class="hljs-string">\'password\'</span>]);\n\n<span class="hljs-variable">$input</span> = <span class="hljs-variable">$request</span>-&gt;only(<span class="hljs-string">\'username\'</span>, <span class="hljs-string">\'password\'</span>);\n\n<span class="hljs-variable">$input</span> = <span class="hljs-variable">$request</span>-&gt;except([<span class="hljs-string">\'credit_card\'</span>]);\n\n<span class="hljs-variable">$input</span> = <span class="hljs-variable">$request</span>-&gt;except(<span class="hljs-string">\'credit_card\'</span>);</code></pre>\n  <blockquote>\n<p>{tip} The <code>only</code> method returns all of the key / value pairs that you request; however, it will not return key / value pairs that are not present on the request.</p>\n</blockquote>\n\n          <p><a name="determining-if-an-input-value-is-present"></a></p>\n          <h4>\n            <a href="#determining-if-an-input-value-is-present">\n              Determining If An Input Value Is Present\n            </a>\n          </h4><p>You should use the <code>has</code> method to determine if a value is present on the request. The <code>has</code> method returns <code>true</code> if the value is present on the request:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> ($request-&gt;has(<span class="hljs-string">\'name\'</span>)) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p>When given an array, the <code>has</code> method will determine if all of the specified values are present:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> ($request-&gt;has([<span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'email\'</span>])) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p>The <code>hasAny</code> method returns <code>true</code> if any of the specified values are present:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> ($request-&gt;hasAny([<span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'email\'</span>])) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p>If you would like to determine if a value is present on the request and is not empty, you may use the <code>filled</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> ($request-&gt;filled(<span class="hljs-string">\'name\'</span>)) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p>To determine if a given key is absent from the request, you may use the <code>missing</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> ($request-&gt;missing(<span class="hljs-string">\'name\'</span>)) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p><a name="old-input"></a></p>\n\n          <p><a name="old-input"></a></p>\n          <h3>\n            <a href="#old-input">\n              Old Input\n            </a>\n          </h3><p>Laravel allows you to keep input from one request during the next request. This feature is particularly useful for re-populating forms after detecting validation errors. However, if you are using Laravel&#39;s included <router-link to="/docs/{{version}}/validation">validation features</router-link>, it is unlikely you will need to manually use these methods, as some of Laravel&#39;s built-in validation facilities will call them automatically.</p>\n\n          <p><a name="flashing-input-to-the-session"></a></p>\n          <h4>\n            <a href="#flashing-input-to-the-session">\n              Flashing Input To The Session\n            </a>\n          </h4><p>The <code>flash</code> method on the <code>Illuminate\\Http\\Request</code> class will flash the current input to the <router-link to="/docs/{{version}}/session">session</router-link> so that it is available during the user&#39;s next request to the application:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$request</span>-&gt;flash();</code></pre>\n  <p>You may also use the <code>flashOnly</code> and <code>flashExcept</code> methods to flash a subset of the request data to the session. These methods are useful for keeping sensitive information such as passwords out of the session:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$request</span>-&gt;flashOnly([<span class="hljs-string">\'username\'</span>, <span class="hljs-string">\'email\'</span>]);\n\n<span class="hljs-variable">$request</span>-&gt;flashExcept(<span class="hljs-string">\'password\'</span>);</code></pre>\n  \n          <p><a name="flashing-input-then-redirecting"></a></p>\n          <h4>\n            <a href="#flashing-input-then-redirecting">\n              Flashing Input Then Redirecting\n            </a>\n          </h4><p>Since you often will want to flash input to the session and then redirect to the previous page, you may easily chain input flashing onto a redirect using the <code>withInput</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> redirect<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'form\'</span>)</span>-&gt;</span>withInput();\n\n<span class="hljs-keyword">return</span> redirect<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'form\'</span>)</span>-&gt;</span>withInput(\n    $request-&gt;except(<span class="hljs-string">\'password\'</span>)\n);</code></pre>\n  \n          <p><a name="retrieving-old-input"></a></p>\n          <h4>\n            <a href="#retrieving-old-input">\n              Retrieving Old Input\n            </a>\n          </h4><p>To retrieve flashed input from the previous request, use the <code>old</code> method on the <code>Request</code> instance. The <code>old</code> method will pull the previously flashed input data from the <router-link to="/docs/{{version}}/session">session</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$username</span> = <span class="hljs-variable">$request</span>-&gt;old(<span class="hljs-string">\'username\'</span>);</code></pre>\n  <p>Laravel also provides a global <code>old</code> helper. If you are displaying old input within a <router-link to="/docs/{{version}}/blade">Blade template</router-link>, it is more convenient to use the <code>old</code> helper. If no old input exists for the given field, <code>null</code> will be returned:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>="text" <span class="hljs-type">name</span>="username" <span class="hljs-keyword">value</span>="{{ old(\'username\') }}"&gt;</code></pre>\n  <p><a name="cookies"></a></p>\n\n          <p><a name="cookies"></a></p>\n          <h3>\n            <a href="#cookies">\n              Cookies\n            </a>\n          </h3>\n          <p><a name="retrieving-cookies-from-requests"></a></p>\n          <h4>\n            <a href="#retrieving-cookies-from-requests">\n              Retrieving Cookies From Requests\n            </a>\n          </h4><p>All cookies created by the Laravel framework are encrypted and signed with an authentication code, meaning they will be considered invalid if they have been changed by the client. To retrieve a cookie value from the request, use the <code>cookie</code> method on a <code>Illuminate\\Http\\Request</code> instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$value</span> = <span class="hljs-variable">$request</span>-&gt;cookie(<span class="hljs-string">\'name\'</span>);</code></pre>\n  <p>Alternatively, you may use the <code>Cookie</code> facade to access cookie values:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Cookie</span>;\n\n$value = Cookie::get(<span class="hljs-string">\'name\'</span>);</code></pre>\n  \n          <p><a name="attaching-cookies-to-responses"></a></p>\n          <h4>\n            <a href="#attaching-cookies-to-responses">\n              Attaching Cookies To Responses\n            </a>\n          </h4><p>You may attach a cookie to an outgoing <code>Illuminate\\Http\\Response</code> instance using the <code>cookie</code> method. You should pass the name, value, and number of minutes the cookie should be considered valid to this method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> response<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'Hello World\'</span>)</span>-&gt;</span>cookie(\n    <span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'value\'</span>, $minutes\n);</code></pre>\n  <p>The <code>cookie</code> method also accepts a few more arguments which are used less frequently. Generally, these arguments have the same purpose and meaning as the arguments that would be given to PHP&#39;s native <router-link to="https://secure.php.net/manual/en/function.setcookie.php">setcookie</router-link> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> response(<span class="hljs-string">\'Hello World\'</span>)-&gt;cookie(\n    <span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'value\'</span>, <span class="hljs-variable">$minutes</span>, <span class="hljs-variable">$path</span>, <span class="hljs-variable">$domain</span>, <span class="hljs-variable">$secure</span>, <span class="hljs-variable">$httpOnly</span>\n);</code></pre>\n  <p>Alternatively, you can use the <code>Cookie</code> facade to &quot;queue&quot; cookies for attachment to the outgoing response from your application. The <code>queue</code> method accepts a <code>Cookie</code> instance or the arguments needed to create a <code>Cookie</code> instance. These cookies will be attached to the outgoing response before it is sent to the browser:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Cookie::queue(Cookie::make(<span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'value\'</span>, <span class="hljs-variable">$minutes</span>));\n\nCookie::queue(<span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'value\'</span>, <span class="hljs-variable">$minutes</span>);</code></pre>\n  \n          <p><a name="generating-cookie-instances"></a></p>\n          <h4>\n            <a href="#generating-cookie-instances">\n              Generating Cookie Instances\n            </a>\n          </h4><p>If you would like to generate a <code>Symfony\\Component\\HttpFoundation\\Cookie</code> instance that can be given to a response instance at a later time, you may use the global <code>cookie</code> helper. This cookie will not be sent back to the client unless it is attached to a response instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$cookie</span> = cookie(<span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'value\'</span>, <span class="hljs-variable">$minutes</span>);\n\n<span class="hljs-keyword">return</span> response(<span class="hljs-string">\'Hello World\'</span>)-&gt;cookie(<span class="hljs-variable">$cookie</span>);</code></pre>\n  <p><a name="files"></a></p>\n\n          <p><a name="files"></a></p>\n          <h2>\n            <a href="#files">\n              Files\n            </a>\n          </h2><p><a name="retrieving-uploaded-files"></a></p>\n\n          <p><a name="retrieving-uploaded-files"></a></p>\n          <h3>\n            <a href="#retrieving-uploaded-files">\n              Retrieving Uploaded Files\n            </a>\n          </h3><p>You may access uploaded files from a <code>Illuminate\\Http\\Request</code> instance using the <code>file</code> method or using dynamic properties. The <code>file</code> method returns an instance of the <code>Illuminate\\Http\\UploadedFile</code> class, which extends the PHP <code>SplFileInfo</code> class and provides a variety of methods for interacting with the file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$file</span> = <span class="hljs-variable">$request</span>-&gt;file(<span class="hljs-string">\'photo\'</span>);\n\n<span class="hljs-variable">$file</span> = <span class="hljs-variable">$request</span>-&gt;photo;</code></pre>\n  <p>You may determine if a file is present on the request using the <code>hasFile</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> ($request-&gt;hasFile(<span class="hljs-string">\'photo\'</span>)) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  \n          <p><a name="validating-successful-uploads"></a></p>\n          <h4>\n            <a href="#validating-successful-uploads">\n              Validating Successful Uploads\n            </a>\n          </h4><p>In addition to checking if the file is present, you may verify that there were no problems uploading the file via the <code>isValid</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> <span class="hljs-function"><span class="hljs-params">($request-&gt;file(<span class="hljs-string">\'photo\'</span>)-&gt;isValid())</span> {\n    //\n}</span></code></pre>\n  \n          <p><a name="file-paths-amp-extensions"></a></p>\n          <h4>\n            <a href="#file-paths-amp-extensions">\n              File Paths &amp; Extensions\n            </a>\n          </h4><p>The <code>UploadedFile</code> class also contains methods for accessing the file&#39;s fully-qualified path and its extension. The <code>extension</code> method will attempt to guess the file&#39;s extension based on its contents. This extension may be different from the extension that was supplied by the client:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-function"><span class="hljs-title">path</span> = $request-&gt;</span><span class="hljs-function"><span class="hljs-title">photo</span>-&gt;</span><span class="hljs-built_in">path</span>();\n\n$<span class="hljs-function"><span class="hljs-title">extension</span> = $request-&gt;</span><span class="hljs-function"><span class="hljs-title">photo</span>-&gt;</span>extension();</code></pre>\n  \n          <p><a name="other-file-methods"></a></p>\n          <h4>\n            <a href="#other-file-methods">\n              Other File Methods\n            </a>\n          </h4><p>There are a variety of other methods available on <code>UploadedFile</code> instances. Check out the <router-link to="https://api.symfony.com/3.0/Symfony/Component/HttpFoundation/File/UploadedFile.html">API documentation for the class</router-link> for more information regarding these methods.</p>\n<p><a name="storing-uploaded-files"></a></p>\n\n          <p><a name="storing-uploaded-files"></a></p>\n          <h3>\n            <a href="#storing-uploaded-files">\n              Storing Uploaded Files\n            </a>\n          </h3><p>To store an uploaded file, you will typically use one of your configured <router-link to="/docs/{{version}}/filesystem">filesystems</router-link>. The <code>UploadedFile</code> class has a <code>store</code> method which will move an uploaded file to one of your disks, which may be a location on your local filesystem or even a cloud storage location like Amazon S3.</p>\n<p>The <code>store</code> method accepts the path where the file should be stored relative to the filesystem&#39;s configured root directory. This path should not contain a file name, since a unique ID will automatically be generated to serve as the file name.</p>\n<p>The <code>store</code> method also accepts an optional second argument for the name of the disk that should be used to store the file. The method will return the path of the file relative to the disk&#39;s root:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$path</span> = <span class="hljs-variable">$request</span>-&gt;photo-&gt;store(<span class="hljs-string">\'images\'</span>);\n\n<span class="hljs-variable">$path</span> = <span class="hljs-variable">$request</span>-&gt;photo-&gt;store(<span class="hljs-string">\'images\'</span>, <span class="hljs-string">\'s3\'</span>);</code></pre>\n  <p>If you do not want a file name to be automatically generated, you may use the <code>storeAs</code> method, which accepts the path, file name, and disk name as its arguments:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$path</span> = <span class="hljs-variable">$request</span>-&gt;photo-&gt;storeAs(<span class="hljs-string">\'images\'</span>, <span class="hljs-string">\'filename.jpg\'</span>);\n\n<span class="hljs-variable">$path</span> = <span class="hljs-variable">$request</span>-&gt;photo-&gt;storeAs(<span class="hljs-string">\'images\'</span>, <span class="hljs-string">\'filename.jpg\'</span>, <span class="hljs-string">\'s3\'</span>);</code></pre>\n  <p><a name="configuring-trusted-proxies"></a></p>\n\n          <p><a name="configuring-trusted-proxies"></a></p>\n          <h2>\n            <a href="#configuring-trusted-proxies">\n              Configuring Trusted Proxies\n            </a>\n          </h2><p>When running your applications behind a load balancer that terminates TLS / SSL certificates, you may notice your application sometimes does not generate HTTPS links. Typically this is because your application is being forwarded traffic from your load balancer on port 80 and does not know it should generate secure links.</p>\n<p>To solve this, you may use the <code>App\\Http\\Middleware\\TrustProxies</code> middleware that is included in your Laravel application, which allows you to quickly customize the load balancers or proxies that should be trusted by your application. Your trusted proxies should be listed as an array on the <code>$proxies</code> property of this middleware. In addition to configuring the trusted proxies, you may configure the proxy <code>$headers</code> that should be trusted:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Middleware</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Fideloper</span>\\<span class="hljs-title">Proxy</span>\\<span class="hljs-title">TrustProxies</span> <span class="hljs-title">as</span> <span class="hljs-title">Middleware</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Request</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TrustProxies</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Middleware</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The trusted proxies for this application.\n     *\n     * <span class="hljs-doctag">@var</span> array\n     */</span>\n    <span class="hljs-keyword">protected</span> $proxies = [\n        <span class="hljs-string">\'192.168.1.1\'</span>,\n        <span class="hljs-string">\'192.168.1.2\'</span>,\n    ];\n\n    <span class="hljs-comment">/**\n     * The headers that should be used to detect proxies.\n     *\n     * <span class="hljs-doctag">@var</span> string\n     */</span>\n    <span class="hljs-keyword">protected</span> $headers = Request::HEADER_X_FORWARDED_ALL;\n}</span></code></pre>\n  <blockquote>\n<p>{tip} If you are using AWS Elastic Load Balancing, your <code>$headers</code> value should be <code>Request::HEADER_X_FORWARDED_AWS_ELB</code>. For more information on the constants that may be used in the <code>$headers</code> property, check out Symfony&#39;s documentation on <router-link to="https://symfony.com/doc/current/deployment/proxies.html">trusting proxies</router-link>.</p>\n</blockquote>\n\n          <p><a name="trusting-all-proxies"></a></p>\n          <h4>\n            <a href="#trusting-all-proxies">\n              Trusting All Proxies\n            </a>\n          </h4><p>If you are using Amazon AWS or another &quot;cloud&quot; load balancer provider, you may not know the IP addresses of your actual balancers. In this case, you may use <code>*</code> to trust all proxies:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">/**\n * The trusted proxies for this application.\n *\n * @var<span class="hljs-built_in"> array\n</span> */<span class="hljs-keyword">\nprotected</span> $proxies = \'*\';</code></pre>\n  '},2:function(s,e){},"24b2":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="logging"></a></p>\n          <h1>\n            <a href="#logging">\n              Logging\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#configuration">Configuration</a><ul>\n<li><a href="#building-log-stacks">Building Log Stacks</a></li>\n</ul>\n</li>\n<li><a href="#writing-log-messages">Writing Log Messages</a><ul>\n<li><a href="#writing-to-specific-channels">Writing To Specific Channels</a></li>\n</ul>\n</li>\n<li><a href="#advanced-monolog-channel-customization">Advanced Monolog Channel Customization</a><ul>\n<li><a href="#customizing-monolog-for-channels">Customizing Monolog For Channels</a></li>\n<li><a href="#creating-monolog-handler-channels">Creating Monolog Handler Channels</a></li>\n<li><a href="#creating-channels-via-factories">Creating Channels Via Factories</a></li>\n</ul>\n</li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>To help you learn more about what&#39;s happening within your application, Laravel provides robust logging services that allow you to log messages to files, the system error log, and even to Slack to notify your entire team.</p>\n<p>Under the hood, Laravel utilizes the <router-link to="https://github.com/Seldaek/monolog">Monolog</router-link> library, which provides support for a variety of powerful log handlers. Laravel makes it a cinch to configure these handlers, allowing you to mix and match them to customize your application&#39;s log handling.</p>\n<p><a name="configuration"></a></p>\n\n          <p><a name="configuration"></a></p>\n          <h2>\n            <a href="#configuration">\n              Configuration\n            </a>\n          </h2><p>All of the configuration for your application&#39;s logging system is housed in the <code>config/logging.php</code> configuration file. This file allows you to configure your application&#39;s log channels, so be sure to review each of the available channels and their options. We&#39;ll review a few common options below.</p>\n<p>By default, Laravel will use the <code>stack</code> channel when logging messages. The <code>stack</code> channel is used to aggregate multiple log channels into a single channel. For more information on building stacks, check out the <a href="#building-log-stacks">documentation below</a>.</p>\n\n          <p><a name="configuring-the-channel-name"></a></p>\n          <h4>\n            <a href="#configuring-the-channel-name">\n              Configuring The Channel Name\n            </a>\n          </h4><p>By default, Monolog is instantiated with a &quot;channel name&quot; that matches the current environment, such as <code>production</code> or <code>local</code>. To change this value, add a <code>name</code> option to your channel&#39;s configuration:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'stack\'</span> =&gt; [\n    <span class="hljs-symbol">\'driver\'</span> =&gt; <span class="hljs-symbol">\'stack\'</span>,\n    <span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'channel</span>-name\',\n    <span class="hljs-symbol">\'channels\'</span> =&gt; [<span class="hljs-symbol">\'single\'</span>, <span class="hljs-symbol">\'slack\'</span>],\n],</code></pre>\n  \n          <p><a name="available-channel-drivers"></a></p>\n          <h4>\n            <a href="#available-channel-drivers">\n              Available Channel Drivers\n            </a>\n          </h4><table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>stack</code></td>\n<td>A wrapper to facilitate creating &quot;multi-channel&quot; channels</td>\n</tr>\n<tr>\n<td><code>single</code></td>\n<td>A single file or path based logger channel (<code>StreamHandler</code>)</td>\n</tr>\n<tr>\n<td><code>daily</code></td>\n<td>A <code>RotatingFileHandler</code> based Monolog driver which rotates daily</td>\n</tr>\n<tr>\n<td><code>slack</code></td>\n<td>A <code>SlackWebhookHandler</code> based Monolog driver</td>\n</tr>\n<tr>\n<td><code>papertrail</code></td>\n<td>A <code>SyslogUdpHandler</code> based Monolog driver</td>\n</tr>\n<tr>\n<td><code>syslog</code></td>\n<td>A <code>SyslogHandler</code> based Monolog driver</td>\n</tr>\n<tr>\n<td><code>errorlog</code></td>\n<td>A <code>ErrorLogHandler</code> based Monolog driver</td>\n</tr>\n<tr>\n<td><code>monolog</code></td>\n<td>A Monolog factory driver that may use any supported Monolog handler</td>\n</tr>\n<tr>\n<td><code>custom</code></td>\n<td>A driver that calls a specified factory to create a channel</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>{tip} Check out the documentation on <a href="#advanced-monolog-channel-customization">advanced channel customization</a> to learn more about the <code>monolog</code> and <code>custom</code> drivers.</p>\n</blockquote>\n\n          <p><a name="configuring-the-single-and-daily-channels"></a></p>\n          <h4>\n            <a href="#configuring-the-single-and-daily-channels">\n              Configuring The Single and Daily Channels\n            </a>\n          </h4><p>The <code>single</code> and <code>daily</code> channels have three optional configuration options: <code>bubble</code>, <code>permission</code>, and <code>locking</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>bubble</code></td>\n<td>Indicates if messages should bubble up to other channels after being handled</td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>permission</code></td>\n<td>The log file&#39;s permissions</td>\n<td><code>0644</code></td>\n</tr>\n<tr>\n<td><code>locking</code></td>\n<td>Attempt to lock the log file before writing to it</td>\n<td><code>false</code></td>\n</tr>\n</tbody></table>\n\n          <p><a name="configuring-the-papertrail-channel"></a></p>\n          <h4>\n            <a href="#configuring-the-papertrail-channel">\n              Configuring The Papertrail Channel\n            </a>\n          </h4><p>The <code>papertrail</code> channel requires the <code>url</code> and <code>port</code> configuration options. You can obtain these values from <router-link to="https://help.papertrailapp.com/kb/configuration/configuring-centralized-logging-from-php-apps/#send-events-from-php-app">Papertrail</router-link>.</p>\n\n          <p><a name="configuring-the-slack-channel"></a></p>\n          <h4>\n            <a href="#configuring-the-slack-channel">\n              Configuring The Slack Channel\n            </a>\n          </h4><p>The <code>slack</code> channel requires a <code>url</code> configuration option. This URL should match a URL for an <router-link to="https://slack.com/apps/A0F7XDUAZ-incoming-webhooks">incoming webhook</router-link> that you have configured for your Slack team.</p>\n<p><a name="building-log-stacks"></a></p>\n\n          <p><a name="building-log-stacks"></a></p>\n          <h3>\n            <a href="#building-log-stacks">\n              Building Log Stacks\n            </a>\n          </h3><p>As previously mentioned, the <code>stack</code> driver allows you to combine multiple channels into a single log channel. To illustrate how to use log stacks, let&#39;s take a look at an example configuration that you might see in a production application:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'channels\'</span> =&gt; [\n    <span class="hljs-string">\'stack\'</span> =&gt; [\n        <span class="hljs-string">\'driver\'</span> =&gt; <span class="hljs-string">\'stack\'</span>,\n        <span class="hljs-string">\'channels\'</span> =&gt; [<span class="hljs-string">\'syslog\'</span>, <span class="hljs-string">\'slack\'</span>],\n    ],\n\n    <span class="hljs-string">\'syslog\'</span> =&gt; [\n        <span class="hljs-string">\'driver\'</span> =&gt; <span class="hljs-string">\'syslog\'</span>,\n        <span class="hljs-string">\'level\'</span> =&gt; <span class="hljs-string">\'debug\'</span>,\n    ],\n\n    <span class="hljs-string">\'slack\'</span> =&gt; [\n        <span class="hljs-string">\'driver\'</span> =&gt; <span class="hljs-string">\'slack\'</span>,\n        <span class="hljs-string">\'url\'</span> =&gt; env(<span class="hljs-string">\'LOG_SLACK_WEBHOOK_URL\'</span>),\n        <span class="hljs-string">\'username\'</span> =&gt; <span class="hljs-string">\'Laravel Log\'</span>,\n        <span class="hljs-string">\'emoji\'</span> =&gt; <span class="hljs-string">\':boom:\'</span>,\n        <span class="hljs-string">\'level\'</span> =&gt; <span class="hljs-string">\'critical\'</span>,\n    ],\n],</code></pre>\n  <p>Let&#39;s dissect this configuration. First, notice our <code>stack</code> channel aggregates two other channels via its <code>channels</code> option: <code>syslog</code> and <code>slack</code>. So, when logging messages, both of these channels will have the opportunity to log the message.</p>\n\n          <p><a name="log-levels"></a></p>\n          <h4>\n            <a href="#log-levels">\n              Log Levels\n            </a>\n          </h4><p>Take note of the <code>level</code> configuration option present on the <code>syslog</code> and <code>slack</code> channel configurations in the example above. This option determines the minimum &quot;level&quot; a message must be in order to be logged by the channel. Monolog, which powers Laravel&#39;s logging services, offers all of the log levels defined in the <router-link to="https://tools.ietf.org/html/rfc5424">RFC 5424 specification</router-link>: <strong>emergency</strong>, <strong>alert</strong>, <strong>critical</strong>, <strong>error</strong>, <strong>warning</strong>, <strong>notice</strong>, <strong>info</strong>, and <strong>debug</strong>.</p>\n<p>So, imagine we log a message using the <code>debug</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-built_in">Log</span>::<span class="hljs-keyword">debug</span>(\'An informational message.\');</code></pre>\n  <p>Given our configuration, the <code>syslog</code> channel will write the message to the system log; however, since the error message is not <code>critical</code> or above, it will not be sent to Slack. However, if we log an <code>emergency</code> message, it will be sent to both the system log and Slack since the <code>emergency</code> level is above our minimum level threshold for both channels:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">Log</span><span class="hljs-type">::emergency</span>(<span class="hljs-string">\'The system is down!\'</span>);</code></pre>\n  <p><a name="writing-log-messages"></a></p>\n\n          <p><a name="writing-log-messages"></a></p>\n          <h2>\n            <a href="#writing-log-messages">\n              Writing Log Messages\n            </a>\n          </h2><p>You may write information to the logs using the <code>Log</code> <router-link to="/docs/{{version}}/facades">facade</router-link>. As previously mentioned, the logger provides the eight logging levels defined in the <router-link to="https://tools.ietf.org/html/rfc5424">RFC 5424 specification</router-link>: <strong>emergency</strong>, <strong>alert</strong>, <strong>critical</strong>, <strong>error</strong>, <strong>warning</strong>, <strong>notice</strong>, <strong>info</strong> and <strong>debug</strong>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">Log</span><span class="hljs-type">::emergency</span>($message);\n<span class="hljs-keyword">Log</span><span class="hljs-type">::alert</span>($message);\n<span class="hljs-keyword">Log</span><span class="hljs-type">::critical</span>($message);\n<span class="hljs-keyword">Log</span><span class="hljs-type">::error</span>($message);\n<span class="hljs-keyword">Log</span><span class="hljs-type">::warning</span>($message);\n<span class="hljs-keyword">Log</span><span class="hljs-type">::notice</span>($message);\n<span class="hljs-keyword">Log</span><span class="hljs-type">::info</span>($message);\n<span class="hljs-keyword">Log</span><span class="hljs-type">::debug</span>($message);</code></pre>\n  <p>So, you may call any of these methods to log a message for the corresponding level. By default, the message will be written to the default log channel as configured by your <code>config/logging.php</code> configuration file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">Controller</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Log</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Show the profile for the given user.\n     *\n     * <span class="hljs-doctag">@param</span>  int  $id\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showProfile</span><span class="hljs-params">($id)</span>\n    </span>{\n        Log::info(<span class="hljs-string">\'Showing user profile for user: \'</span>.$id);\n\n        <span class="hljs-keyword">return</span> view(<span class="hljs-string">\'user.profile\'</span>, [<span class="hljs-string">\'user\'</span> =&gt; User::findOrFail($id)]);\n    }\n}</span></code></pre>\n  \n          <p><a name="contextual-information"></a></p>\n          <h4>\n            <a href="#contextual-information">\n              Contextual Information\n            </a>\n          </h4><p>An array of contextual data may also be passed to the log methods. This contextual data will be formatted and displayed with the log message:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Log::info(<span class="hljs-string">\'User failed to login.\'</span>, [<span class="hljs-string">\'id\'</span> =&gt; $user-&gt;id]);</code></pre>\n  <p><a name="writing-to-specific-channels"></a></p>\n\n          <p><a name="writing-to-specific-channels"></a></p>\n          <h3>\n            <a href="#writing-to-specific-channels">\n              Writing To Specific Channels\n            </a>\n          </h3><p>Sometimes you may wish to log a message to a channel other than your application&#39;s default channel. You may use the <code>channel</code> method on the <code>Log</code> facade to retrieve and log to any channel defined in your configuration file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Log::channel<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'slack\'</span>)</span>-&gt;</span>info(<span class="hljs-string">\'Something happened!\'</span>);</code></pre>\n  <p>If you would like to create an on-demand logging stack consisting of multiple channels, you may use the <code>stack</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Log::stack<span class="hljs-function"><span class="hljs-params">([<span class="hljs-string">\'single\'</span>, <span class="hljs-string">\'slack\'</span>])</span>-&gt;</span>info(<span class="hljs-string">\'Something happened!\'</span>);</code></pre>\n  <p><a name="advanced-monolog-channel-customization"></a></p>\n\n          <p><a name="advanced-monolog-channel-customization"></a></p>\n          <h2>\n            <a href="#advanced-monolog-channel-customization">\n              Advanced Monolog Channel Customization\n            </a>\n          </h2><p><a name="customizing-monolog-for-channels"></a></p>\n\n          <p><a name="customizing-monolog-for-channels"></a></p>\n          <h3>\n            <a href="#customizing-monolog-for-channels">\n              Customizing Monolog For Channels\n            </a>\n          </h3><p>Sometimes you may need complete control over how Monolog is configured for an existing channel. For example, you may want to configure a custom Monolog <code>FormatterInterface</code> implementation for a given channel&#39;s handlers.</p>\n<p>To get started, define a <code>tap</code> array on the channel&#39;s configuration. The <code>tap</code> array should contain a list of classes that should have an opportunity to customize (or &quot;tap&quot; into) the Monolog instance after it is created:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'single\'</span> =&gt; [\n    <span class="hljs-symbol">\'driver\'</span> =&gt; <span class="hljs-symbol">\'single\'</span>,\n    <span class="hljs-symbol">\'tap\'</span> =&gt; [<span class="hljs-type">App</span>\\<span class="hljs-type">Logging</span>\\<span class="hljs-type">CustomizeFormatter</span>::<span class="hljs-keyword">class</span>],\n    <span class="hljs-symbol">\'path\'</span> =&gt; storage_path(<span class="hljs-symbol">\'logs</span>/laravel.log\'),\n    <span class="hljs-symbol">\'level\'</span> =&gt; <span class="hljs-symbol">\'debug\'</span>,\n],</code></pre>\n  <p>Once you have configured the <code>tap</code> option on your channel, you&#39;re ready to define the class that will customize your Monolog instance. This class only needs a single method: <code>__invoke</code>, which receives an <code>Illuminate\\Log\\Logger</code> instance. The <code>Illuminate\\Log\\Logger</code> instance proxies all method calls to the underlying Monolog instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Logging</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomizeFormatter</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Customize the given logger instance.\n     *\n     * <span class="hljs-doctag">@param</span>  \\Illuminate\\Log\\Logger  $logger\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span><span class="hljs-params">($logger)</span>\n    </span>{\n        <span class="hljs-keyword">foreach</span> ($logger-&gt;getHandlers() <span class="hljs-keyword">as</span> $handler) {\n            $handler-&gt;setFormatter(...);\n        }\n    }\n}</span></code></pre>\n  <blockquote>\n<p>{tip} All of your &quot;tap&quot; classes are resolved by the <router-link to="/docs/{{version}}/container">service container</router-link>, so any constructor dependencies they require will automatically be injected.</p>\n</blockquote>\n<p><a name="creating-monolog-handler-channels"></a></p>\n\n          <p><a name="creating-monolog-handler-channels"></a></p>\n          <h3>\n            <a href="#creating-monolog-handler-channels">\n              Creating Monolog Handler Channels\n            </a>\n          </h3><p>Monolog has a variety of <router-link to="https://github.com/Seldaek/monolog/tree/master/src/Monolog/Handler">available handlers</router-link>. In some cases, the type of logger you wish to create is merely a Monolog driver with an instance of a specific handler.  These channels can be created using the <code>monolog</code> driver.</p>\n<p>When using the <code>monolog</code> driver, the <code>handler</code> configuration option is used to specify which handler will be instantiated. Optionally, any constructor parameters the handler needs may be specified using the <code>with</code> configuration option:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'logentries\'</span> =&gt; [\n    <span class="hljs-string">\'driver\'</span>  =&gt; <span class="hljs-string">\'monolog\'</span>,\n    <span class="hljs-string">\'handler\'</span> =&gt; Monolog\\Handler\\SyslogUdpHandler::class,\n    <span class="hljs-string">\'with\'</span> =&gt; [\n        <span class="hljs-string">\'host\'</span> =&gt; <span class="hljs-string">\'my.logentries.internal.datahubhost.company.com\'</span>,\n        <span class="hljs-string">\'port\'</span> =&gt; <span class="hljs-string">\'10000\'</span>,\n    ],\n],</code></pre>\n  \n          <p><a name="monolog-formatters"></a></p>\n          <h4>\n            <a href="#monolog-formatters">\n              Monolog Formatters\n            </a>\n          </h4><p>When using the <code>monolog</code> driver, the Monolog <code>LineFormatter</code> will be used as the default formatter. However, you may customize the type of formatter passed to the handler using the <code>formatter</code> and <code>formatter_with</code> configuration options:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'browser\'</span> =&gt; [\n    <span class="hljs-symbol">\'driver\'</span> =&gt; <span class="hljs-symbol">\'monolog\'</span>,\n    <span class="hljs-symbol">\'handler\'</span> =&gt; <span class="hljs-type">Monolog</span>\\<span class="hljs-type">Handler</span>\\<span class="hljs-type">BrowserConsoleHandler</span>::<span class="hljs-keyword">class</span>,\n    <span class="hljs-symbol">\'formatter\'</span> =&gt; <span class="hljs-type">Monolog</span>\\<span class="hljs-type">Formatter</span>\\<span class="hljs-type">HtmlFormatter</span>::<span class="hljs-keyword">class</span>,\n    <span class="hljs-symbol">\'formatter_with\'</span> =&gt; [\n        <span class="hljs-symbol">\'dateFormat\'</span> =&gt; <span class="hljs-symbol">\'Y</span>-m-d\',\n    ],\n],</code></pre>\n  <p>If you are using a Monolog handler that is capable of providing its own formatter, you may set the value of the <code>formatter</code> configuration option to <code>default</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'newrelic\'</span> =&gt; [\n    <span class="hljs-symbol">\'driver\'</span> =&gt; <span class="hljs-symbol">\'monolog\'</span>,\n    <span class="hljs-symbol">\'handler\'</span> =&gt; <span class="hljs-type">Monolog</span>\\<span class="hljs-type">Handler</span>\\<span class="hljs-type">NewRelicHandler</span>::<span class="hljs-keyword">class</span>,\n    <span class="hljs-symbol">\'formatter\'</span> =&gt; <span class="hljs-symbol">\'default\'</span>,\n],</code></pre>\n  <p><a name="creating-channels-via-factories"></a></p>\n\n          <p><a name="creating-channels-via-factories"></a></p>\n          <h3>\n            <a href="#creating-channels-via-factories">\n              Creating Channels Via Factories\n            </a>\n          </h3><p>If you would like to define an entirely custom channel in which you have full control over Monolog&#39;s instantiation and configuration, you may specify a <code>custom</code> driver type in your <code>config/logging.php</code> configuration file. Your configuration should include a <code>via</code> option to point to the factory class which will be invoked to create the Monolog instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'channels\'</span> =&gt; [\n    <span class="hljs-string">\'custom\'</span> =&gt; [\n        <span class="hljs-string">\'driver\'</span> =&gt; <span class="hljs-string">\'custom\'</span>,\n        <span class="hljs-string">\'via\'</span> =&gt; App\\Logging\\CreateCustomLogger::<span class="hljs-class"><span class="hljs-keyword">class</span>,\n    ],\n],</span></code></pre>\n  <p>Once you have configured the <code>custom</code> channel, you&#39;re ready to define the class that will create your Monolog instance. This class only needs a single method: <code>__invoke</code>, which should return the Monolog instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Logging</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Monolog</span>\\<span class="hljs-title">Logger</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreateCustomLogger</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Create a custom Monolog instance.\n     *\n     * <span class="hljs-doctag">@param</span>  array  $config\n     * <span class="hljs-doctag">@return</span> \\Monolog\\Logger\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span><span class="hljs-params">(array $config)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Logger(...);\n    }\n}</span></code></pre>\n  '},"24dd":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="authorization"></a></p>\n          <h1>\n            <a href="#authorization">\n              Authorization\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#gates">Gates</a><ul>\n<li><a href="#writing-gates">Writing Gates</a></li>\n<li><a href="#authorizing-actions-via-gates">Authorizing Actions</a></li>\n<li><a href="#gate-responses">Gate Responses</a></li>\n<li><a href="#intercepting-gate-checks">Intercepting Gate Checks</a></li>\n</ul>\n</li>\n<li><a href="#creating-policies">Creating Policies</a><ul>\n<li><a href="#generating-policies">Generating Policies</a></li>\n<li><a href="#registering-policies">Registering Policies</a></li>\n</ul>\n</li>\n<li><a href="#writing-policies">Writing Policies</a><ul>\n<li><a href="#policy-methods">Policy Methods</a></li>\n<li><a href="#policy-responses">Policy Responses</a></li>\n<li><a href="#methods-without-models">Methods Without Models</a></li>\n<li><a href="#guest-users">Guest Users</a></li>\n<li><a href="#policy-filters">Policy Filters</a></li>\n</ul>\n</li>\n<li><a href="#authorizing-actions-using-policies">Authorizing Actions Using Policies</a><ul>\n<li><a href="#via-the-user-model">Via The User Model</a></li>\n<li><a href="#via-middleware">Via Middleware</a></li>\n<li><a href="#via-controller-helpers">Via Controller Helpers</a></li>\n<li><a href="#via-blade-templates">Via Blade Templates</a></li>\n<li><a href="#supplying-additional-context">Supplying Additional Context</a></li>\n</ul>\n</li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>In addition to providing <router-link to="/docs/{{version}}/authentication">authentication</router-link> services out of the box, Laravel also provides a simple way to authorize user actions against a given resource. Like authentication, Laravel&#39;s approach to authorization is simple, and there are two primary ways of authorizing actions: gates and policies.</p>\n<p>Think of gates and policies like routes and controllers. Gates provide a simple, Closure based approach to authorization while policies, like controllers, group their logic around a particular model or resource. We&#39;ll explore gates first and then examine policies.</p>\n<p>You do not need to choose between exclusively using gates or exclusively using policies when building an application. Most applications will most likely contain a mixture of gates and policies, and that is perfectly fine! Gates are most applicable to actions which are not related to any model or resource, such as viewing an administrator dashboard. In contrast, policies should be used when you wish to authorize an action for a particular model or resource.</p>\n<p><a name="gates"></a></p>\n\n          <p><a name="gates"></a></p>\n          <h2>\n            <a href="#gates">\n              Gates\n            </a>\n          </h2><p><a name="writing-gates"></a></p>\n\n          <p><a name="writing-gates"></a></p>\n          <h3>\n            <a href="#writing-gates">\n              Writing Gates\n            </a>\n          </h3><p>Gates are Closures that determine if a user is authorized to perform a given action and are typically defined in the <code>App\\Providers\\AuthServiceProvider</code> class using the <code>Gate</code> facade. Gates always receive a user instance as their first argument, and may optionally receive additional arguments such as a relevant Eloquent model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Register any authentication / authorization services.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;registerPolicies();\n\n    Gate::define(<span class="hljs-string">\'edit-settings\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($user)</span> </span>{\n        <span class="hljs-keyword">return</span> $user-&gt;isAdmin;\n    });\n\n    Gate::define(<span class="hljs-string">\'update-post\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($user, $post)</span> </span>{\n        <span class="hljs-keyword">return</span> $user-&gt;id === $post-&gt;user_id;\n    });\n}</code></pre>\n  <p>Gates may also be defined using a <code>Class@method</code> style callback string, like controllers:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Register any authentication / authorization services.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;registerPolicies();\n\n    Gate::define(<span class="hljs-string">\'update-post\'</span>, <span class="hljs-string">\'App\\Policies\\PostPolicy@update\'</span>);\n}</code></pre>\n  <p><a name="authorizing-actions-via-gates"></a></p>\n\n          <p><a name="authorizing-actions"></a></p>\n          <h3>\n            <a href="#authorizing-actions">\n              Authorizing Actions\n            </a>\n          </h3><p>To authorize an action using gates, you should use the <code>allows</code> or <code>denies</code> methods. Note that you are not required to pass the currently authenticated user to these methods. Laravel will automatically take care of passing the user into the gate Closure:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> (Gate::allows(<span class="hljs-string">\'edit-settings\'</span>)) {\n    <span class="hljs-comment">// The current user can edit settings</span>\n}\n\n<span class="hljs-keyword">if</span> (Gate::allows(<span class="hljs-string">\'update-post\'</span>, $post)) {\n    <span class="hljs-comment">// The current user can update the post...</span>\n}\n\n<span class="hljs-keyword">if</span> (Gate::denies(<span class="hljs-string">\'update-post\'</span>, $post)) {\n    <span class="hljs-comment">// The current user can\'t update the post...</span>\n}</code></pre>\n  <p>If you would like to determine if a particular user is authorized to perform an action, you may use the <code>forUser</code> method on the <code>Gate</code> facade:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> (Gate::forUser($user)-&gt;allows(<span class="hljs-string">\'update-post\'</span>, $post)) {\n    <span class="hljs-comment">// The user can update the post...</span>\n}\n\n<span class="hljs-keyword">if</span> (Gate::forUser($user)-&gt;denies(<span class="hljs-string">\'update-post\'</span>, $post)) {\n    <span class="hljs-comment">// The user can\'t update the post...</span>\n}</code></pre>\n  <p>You may authorize multiple actions at a time with the <code>any</code> or <code>none</code> methods:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> (Gate::any([<span class="hljs-string">\'update-post\'</span>, <span class="hljs-string">\'delete-post\'</span>], $post)) {\n    <span class="hljs-comment">// The user can update or delete the post</span>\n}\n\n<span class="hljs-keyword">if</span> (Gate::none([<span class="hljs-string">\'update-post\'</span>, <span class="hljs-string">\'delete-post\'</span>], $post)) {\n    <span class="hljs-comment">// The user cannot update or delete the post</span>\n}</code></pre>\n  \n          <p><a name="authorizing-or-throwing-exceptions"></a></p>\n          <h4>\n            <a href="#authorizing-or-throwing-exceptions">\n              Authorizing Or Throwing Exceptions\n            </a>\n          </h4><p>If you would like to attempt to authorize an action and automatically throw an <code>Illuminate\\Auth\\Access\\AuthorizationException</code> if the user is not allowed to perform the given action, you may use the <code>Gate::authorize</code> method. Instances of <code>AuthorizationException</code> are automatically converted to <code>403</code> HTTP response:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Gate::authorize(<span class="hljs-string">\'update-post\'</span>, $post);\n\n<span class="hljs-comment">// The action is authorized...</span></code></pre>\n  \n          <p><a name="supplying-additional-context"></a></p>\n          <h4>\n            <a href="#supplying-additional-context">\n              Supplying Additional Context\n            </a>\n          </h4><p>The gate methods for authorizing abilities (<code>allows</code>, <code>denies</code>, <code>check</code>, <code>any</code>, <code>none</code>, <code>authorize</code>, <code>can</code>, <code>cannot</code>) and the authorization <a href="#via-blade-templates">Blade directives</a> (<code>@can</code>, <code>@cannot</code>, <code>@canany</code>) can receive an array as the second argument. These array elements are passed as parameters to gate, and can be used for additional context when making authorization decisions:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Gate::define(<span class="hljs-string">\'create-post\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($user, $category, $extraFlag)</span> </span>{\n    <span class="hljs-keyword">return</span> $category-&gt;group &gt; <span class="hljs-number">3</span> &amp;&amp; $extraFlag === <span class="hljs-keyword">true</span>;\n});\n\n<span class="hljs-keyword">if</span> (Gate::check(<span class="hljs-string">\'create-post\'</span>, [$category, $extraFlag])) {\n    <span class="hljs-comment">// The user can create the post...</span>\n}</code></pre>\n  <p><a name="gate-responses"></a></p>\n\n          <p><a name="gate-responses"></a></p>\n          <h3>\n            <a href="#gate-responses">\n              Gate Responses\n            </a>\n          </h3><p>So far, we have only examined gates that return simple boolean values. However, sometimes you may wish to return a more detailed response, including an error message. To do so, you may return a <code>Illuminate\\Auth\\Access\\Response</code> from your gate:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Auth</span>\\<span class="hljs-title">Access</span>\\<span class="hljs-title">Response</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Gate</span>;\n\nGate::define(<span class="hljs-string">\'edit-settings\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($user)</span> </span>{\n    <span class="hljs-keyword">return</span> $user-&gt;isAdmin\n                ? Response::allow()\n                : Response::deny(<span class="hljs-string">\'You must be a super administrator.\'</span>);\n});</code></pre>\n  <p>When returning an authorization response from your gate, the <code>Gate::allows</code> method will still return a simple boolean value; however, you may use the <code>Gate::inspect</code> method to get the full authorization response returned by the gate:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response = Gate::inspect(<span class="hljs-string">\'edit-settings\'</span>, $post);\n\n<span class="hljs-keyword">if</span> ($response-&gt;allowed()) {\n    <span class="hljs-comment">// The action is authorized...</span>\n} <span class="hljs-keyword">else</span> {\n    <span class="hljs-keyword">echo</span> $response-&gt;message();\n}</code></pre>\n  <p>Of course, when using the <code>Gate::authorize</code> method to throw an <code>AuthorizationException</code> if the action is not authorized, the error message provided by the authorization response will be propagated to the HTTP response:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Gate::authorize(<span class="hljs-string">\'edit-settings\'</span>, $post);\n\n<span class="hljs-comment">// The action is authorized...</span></code></pre>\n  <p><a name="intercepting-gate-checks"></a></p>\n\n          <p><a name="intercepting-gate-checks"></a></p>\n          <h3>\n            <a href="#intercepting-gate-checks">\n              Intercepting Gate Checks\n            </a>\n          </h3><p>Sometimes, you may wish to grant all abilities to a specific user. You may use the <code>before</code> method to define a callback that is run before all other authorization checks:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Gate::before(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($user, $ability)</span> </span>{\n    <span class="hljs-keyword">if</span> ($user-&gt;isSuperAdmin()) {\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;\n    }\n});</code></pre>\n  <p>If the <code>before</code> callback returns a non-null result that result will be considered the result of the check.</p>\n<p>You may use the <code>after</code> method to define a callback to be executed after all other authorization checks:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Gate::after(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($user, $ability, $result, $arguments)</span> </span>{\n    <span class="hljs-keyword">if</span> ($user-&gt;isSuperAdmin()) {\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;\n    }\n});</code></pre>\n  <p>Similar to the <code>before</code> check, if the <code>after</code> callback returns a non-null result that result will be considered the result of the check.</p>\n<p><a name="creating-policies"></a></p>\n\n          <p><a name="creating-policies"></a></p>\n          <h2>\n            <a href="#creating-policies">\n              Creating Policies\n            </a>\n          </h2><p><a name="generating-policies"></a></p>\n\n          <p><a name="generating-policies"></a></p>\n          <h3>\n            <a href="#generating-policies">\n              Generating Policies\n            </a>\n          </h3><p>Policies are classes that organize authorization logic around a particular model or resource. For example, if your application is a blog, you may have a <code>Post</code> model and a corresponding <code>PostPolicy</code> to authorize user actions such as creating or updating posts.</p>\n<p>You may generate a policy using the <code>make:policy</code> <router-link to="/docs/{{version}}/artisan">artisan command</router-link>. The generated policy will be placed in the <code>app/Policies</code> directory. If this directory does not exist in your application, Laravel will create it for you:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan make:<span class="hljs-keyword">policy</span> PostPolicy</code></pre>\n  <p>The <code>make:policy</code> command will generate an empty policy class. If you would like to generate a class with the basic &quot;CRUD&quot; policy methods already included in the class, you may specify a <code>--model</code> when executing the command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan make:<span class="hljs-keyword">policy</span> PostPolicy <span class="hljs-comment">--model=Post</span></code></pre>\n  <blockquote>\n<p>{tip} All policies are resolved via the Laravel <router-link to="/docs/{{version}}/container">service container</router-link>, allowing you to type-hint any needed dependencies in the policy&#39;s constructor to have them automatically injected.</p>\n</blockquote>\n<p><a name="registering-policies"></a></p>\n\n          <p><a name="registering-policies"></a></p>\n          <h3>\n            <a href="#registering-policies">\n              Registering Policies\n            </a>\n          </h3><p>Once the policy exists, it needs to be registered. The <code>AuthServiceProvider</code> included with fresh Laravel applications contains a <code>policies</code> property which maps your Eloquent models to their corresponding policies. Registering a policy will instruct Laravel which policy to utilize when authorizing actions against a given model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Providers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Policies</span>\\<span class="hljs-title">PostPolicy</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Post</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Providers</span>\\<span class="hljs-title">AuthServiceProvider</span> <span class="hljs-title">as</span> <span class="hljs-title">ServiceProvider</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Gate</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The policy mappings for the application.\n     *\n     * <span class="hljs-doctag">@var</span> array\n     */</span>\n    <span class="hljs-keyword">protected</span> $policies = [\n        Post::class =&gt; PostPolicy::class,\n    ];\n\n    <span class="hljs-comment">/**\n     * Register any application authentication / authorization services.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">$this</span>-&gt;registerPolicies();\n\n        <span class="hljs-comment">//</span>\n    }\n}</span></code></pre>\n  \n          <p><a name="policy-auto-discovery"></a></p>\n          <h4>\n            <a href="#policy-auto-discovery">\n              Policy Auto-Discovery\n            </a>\n          </h4><p>Instead of manually registering model policies, Laravel can auto-discover policies as long as the model and policy follow standard Laravel naming conventions. Specifically, the policies must be in a <code>Policies</code> directory below the directory that contains the models. So, for example, the models may be placed in the <code>app</code> directory while the policies may be placed in the <code>app/Policies</code> directory. In addition, the policy name must match the model name and have a <code>Policy</code> suffix. So, a <code>User</code> model would correspond to a <code>UserPolicy</code> class.</p>\n<p>If you would like to provide your own policy discovery logic, you may register a custom callback using the <code>Gate::guessPolicyNamesUsing</code> method. Typically, this method should be called from the <code>boot</code> method of your application&#39;s <code>AuthServiceProvider</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Gate</span>;\n\nGate::guessPolicyNamesUsing(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($modelClass)</span> </span>{\n    <span class="hljs-comment">// return policy class name...</span>\n});</code></pre>\n  <blockquote>\n<p>{note} Any policies that are explicitly mapped in your <code>AuthServiceProvider</code> will take precedence over any potential auto-discovered policies.</p>\n</blockquote>\n<p><a name="writing-policies"></a></p>\n\n          <p><a name="writing-policies"></a></p>\n          <h2>\n            <a href="#writing-policies">\n              Writing Policies\n            </a>\n          </h2><p><a name="policy-methods"></a></p>\n\n          <p><a name="policy-methods"></a></p>\n          <h3>\n            <a href="#policy-methods">\n              Policy Methods\n            </a>\n          </h3><p>Once the policy has been registered, you may add methods for each action it authorizes. For example, let&#39;s define an <code>update</code> method on our <code>PostPolicy</code> which determines if a given <code>User</code> can update a given <code>Post</code> instance.</p>\n<p>The <code>update</code> method will receive a <code>User</code> and a <code>Post</code> instance as its arguments, and should return <code>true</code> or <code>false</code> indicating whether the user is authorized to update the given <code>Post</code>. So, for this example, let&#39;s verify that the user&#39;s <code>id</code> matches the <code>user_id</code> on the post:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Policies</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Post</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostPolicy</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Determine if the given post can be updated by the user.\n     *\n     * <span class="hljs-doctag">@param</span>  \\App\\User  $user\n     * <span class="hljs-doctag">@param</span>  \\App\\Post  $post\n     * <span class="hljs-doctag">@return</span> bool\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">(User $user, Post $post)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> $user-&gt;id === $post-&gt;user_id;\n    }\n}</span></code></pre>\n  <p>You may continue to define additional methods on the policy as needed for the various actions it authorizes. For example, you might define <code>view</code> or <code>delete</code> methods to authorize various <code>Post</code> actions, but remember you are free to give your policy methods any name you like.</p>\n<blockquote>\n<p>{tip} If you used the <code>--model</code> option when generating your policy via the Artisan console, it will already contain methods for the <code>view</code>, <code>create</code>, <code>update</code>, <code>delete</code>, <code>restore</code>, and <code>forceDelete</code> actions.</p>\n</blockquote>\n<p><a name="policy-responses"></a></p>\n\n          <p><a name="policy-responses"></a></p>\n          <h3>\n            <a href="#policy-responses">\n              Policy Responses\n            </a>\n          </h3><p>So far, we have only examined policy methods that return simple boolean values. However, sometimes you may wish to return a more detailed response, including an error message. To do so, you may return an <code>Illuminate\\Auth\\Access\\Response</code> from your policy method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Auth</span>\\<span class="hljs-title">Access</span>\\<span class="hljs-title">Response</span>;\n\n<span class="hljs-comment">/**\n * Determine if the given post can be updated by the user.\n *\n * <span class="hljs-doctag">@param</span>  \\App\\User  $user\n * <span class="hljs-doctag">@param</span>  \\App\\Post  $post\n * <span class="hljs-doctag">@return</span> \\Illuminate\\Auth\\Access\\Response\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">(User $user, Post $post)</span>\n</span>{\n    <span class="hljs-keyword">return</span> $user-&gt;id === $post-&gt;user_id\n                ? Response::allow()\n                : Response::deny(<span class="hljs-string">\'You do not own this post.\'</span>);\n}</code></pre>\n  <p>When returning an authorization response from your policy, the <code>Gate::allows</code> method will still return a simple boolean value; however, you may use the <code>Gate::inspect</code> method to get the full authorization response returned by the gate:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response = Gate::inspect(<span class="hljs-string">\'update\'</span>, $post);\n\n<span class="hljs-keyword">if</span> ($response-&gt;allowed()) {\n    <span class="hljs-comment">// The action is authorized...</span>\n} <span class="hljs-keyword">else</span> {\n    <span class="hljs-keyword">echo</span> $response-&gt;message();\n}</code></pre>\n  <p>Of course, when using the <code>Gate::authorize</code> method to throw an <code>AuthorizationException</code> if the action is not authorized, the error message provided by the authorization response will be propagated to the HTTP response:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Gate::authorize(<span class="hljs-string">\'update\'</span>, $post);\n\n<span class="hljs-comment">// The action is authorized...</span></code></pre>\n  <p><a name="methods-without-models"></a></p>\n\n          <p><a name="methods-without-models"></a></p>\n          <h3>\n            <a href="#methods-without-models">\n              Methods Without Models\n            </a>\n          </h3><p>Some policy methods only receive the currently authenticated user and not an instance of the model they authorize. This situation is most common when authorizing <code>create</code> actions. For example, if you are creating a blog, you may wish to check if a user is authorized to create any posts at all.</p>\n<p>When defining policy methods that will not receive a model instance, such as a <code>create</code> method, it will not receive a model instance. Instead, you should define the method as only expecting the authenticated user:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Determine if the given user can create posts.\n *\n * <span class="hljs-doctag">@param</span>  \\App\\User  $user\n * <span class="hljs-doctag">@return</span> bool\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">(User $user)</span>\n</span>{\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p><a name="guest-users"></a></p>\n\n          <p><a name="guest-users"></a></p>\n          <h3>\n            <a href="#guest-users">\n              Guest Users\n            </a>\n          </h3><p>By default, all gates and policies automatically return <code>false</code> if the incoming HTTP request was not initiated by an authenticated user. However, you may allow these authorization checks to pass through to your gates and policies by declaring an &quot;optional&quot; type-hint or supplying a <code>null</code> default value for the user argument definition:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Policies</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Post</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostPolicy</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Determine if the given post can be updated by the user.\n     *\n     * <span class="hljs-doctag">@param</span>  \\App\\User  $user\n     * <span class="hljs-doctag">@param</span>  \\App\\Post  $post\n     * <span class="hljs-doctag">@return</span> bool\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">(?User $user, Post $post)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> optional($user)-&gt;id === $post-&gt;user_id;\n    }\n}</span></code></pre>\n  <p><a name="policy-filters"></a></p>\n\n          <p><a name="policy-filters"></a></p>\n          <h3>\n            <a href="#policy-filters">\n              Policy Filters\n            </a>\n          </h3><p>For certain users, you may wish to authorize all actions within a given policy. To accomplish this, define a <code>before</code> method on the policy. The <code>before</code> method will be executed before any other methods on the policy, giving you an opportunity to authorize the action before the intended policy method is actually called. This feature is most commonly used for authorizing application administrators to perform any action:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">before</span><span class="hljs-params">($user, $ability)</span>\n</span>{\n    <span class="hljs-keyword">if</span> ($user-&gt;isSuperAdmin()) {\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;\n    }\n}</code></pre>\n  <p>If you would like to deny all authorizations for a user you should return <code>false</code> from the <code>before</code> method. If <code>null</code> is returned, the authorization will fall through to the policy method.</p>\n<blockquote>\n<p>{note} The <code>before</code> method of a policy class will not be called if the class doesn&#39;t contain a method with a name matching the name of the ability being checked.</p>\n</blockquote>\n<p><a name="authorizing-actions-using-policies"></a></p>\n\n          <p><a name="authorizing-actions-using-policies"></a></p>\n          <h2>\n            <a href="#authorizing-actions-using-policies">\n              Authorizing Actions Using Policies\n            </a>\n          </h2><p><a name="via-the-user-model"></a></p>\n\n          <p><a name="via-the-user-model"></a></p>\n          <h3>\n            <a href="#via-the-user-model">\n              Via The User Model\n            </a>\n          </h3><p>The <code>User</code> model that is included with your Laravel application includes two helpful methods for authorizing actions: <code>can</code> and <code>cant</code>. The <code>can</code> method receives the action you wish to authorize and the relevant model. For example, let&#39;s determine if a user is authorized to update a given <code>Post</code> model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> ($user-&gt;can(<span class="hljs-string">\'update\'</span>, $post)) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p>If a <a href="#registering-policies">policy is registered</a> for the given model, the <code>can</code> method will automatically call the appropriate policy and return the boolean result. If no policy is registered for the model, the <code>can</code> method will attempt to call the Closure based Gate matching the given action name.</p>\n\n          <p><a name="actions-that-don-39-t-require-models"></a></p>\n          <h4>\n            <a href="#actions-that-don-39-t-require-models">\n              Actions That Don&#39;t Require Models\n            </a>\n          </h4><p>Remember, some actions like <code>create</code> may not require a model instance. In these situations, you may pass a class name to the <code>can</code> method. The class name will be used to determine which policy to use when authorizing the action:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Post</span>;\n\n<span class="hljs-keyword">if</span> ($user-&gt;can(<span class="hljs-string">\'create\'</span>, Post::class)) {\n    <span class="hljs-comment">// Executes the "create" method on the relevant policy...</span>\n}</code></pre>\n  <p><a name="via-middleware"></a></p>\n\n          <p><a name="via-middleware"></a></p>\n          <h3>\n            <a href="#via-middleware">\n              Via Middleware\n            </a>\n          </h3><p>Laravel includes a middleware that can authorize actions before the incoming request even reaches your routes or controllers. By default, the <code>Illuminate\\Auth\\Middleware\\Authorize</code> middleware is assigned the <code>can</code> key in your <code>App\\Http\\Kernel</code> class. Let&#39;s explore an example of using the <code>can</code> middleware to authorize that a user can update a blog post:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Post</span>;\n\nRoute::put(<span class="hljs-string">\'/post/{post}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Post $post)</span> </span>{\n    <span class="hljs-comment">// The current user may update the post...</span>\n})-&gt;middleware(<span class="hljs-string">\'can:update,post\'</span>);</code></pre>\n  <p>In this example, we&#39;re passing the <code>can</code> middleware two arguments. The first is the name of the action we wish to authorize and the second is the route parameter we wish to pass to the policy method. In this case, since we are using <router-link to="/docs/{{version}}/routing#implicit-binding">implicit model binding</router-link>, a <code>Post</code> model will be passed to the policy method. If the user is not authorized to perform the given action, a HTTP response with a <code>403</code> status code will be generated by the middleware.</p>\n\n          <p><a name="actions-that-don-39-t-require-models"></a></p>\n          <h4>\n            <a href="#actions-that-don-39-t-require-models">\n              Actions That Don&#39;t Require Models\n            </a>\n          </h4><p>Again, some actions like <code>create</code> may not require a model instance. In these situations, you may pass a class name to the middleware. The class name will be used to determine which policy to use when authorizing the action:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::post(<span class="hljs-string">\'/post\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">// The current user may create posts...</span>\n})-&gt;middleware(<span class="hljs-string">\'can:create,App\\Post\'</span>);</code></pre>\n  <p><a name="via-controller-helpers"></a></p>\n\n          <p><a name="via-controller-helpers"></a></p>\n          <h3>\n            <a href="#via-controller-helpers">\n              Via Controller Helpers\n            </a>\n          </h3><p>In addition to helpful methods provided to the <code>User</code> model, Laravel provides a helpful <code>authorize</code> method to any of your controllers which extend the <code>App\\Http\\Controllers\\Controller</code> base class. Like the <code>can</code> method, this method accepts the name of the action you wish to authorize and the relevant model. If the action is not authorized, the <code>authorize</code> method will throw an <code>Illuminate\\Auth\\Access\\AuthorizationException</code>, which the default Laravel exception handler will convert to an HTTP response with a <code>403</code> status code:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">Controller</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Post</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Request</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Update the given blog post.\n     *\n     * <span class="hljs-doctag">@param</span>  Request  $request\n     * <span class="hljs-doctag">@param</span>  Post  $post\n     * <span class="hljs-doctag">@return</span> Response\n     * <span class="hljs-doctag">@throws</span> \\Illuminate\\Auth\\Access\\AuthorizationException\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">(Request $request, Post $post)</span>\n    </span>{\n        <span class="hljs-keyword">$this</span>-&gt;authorize(<span class="hljs-string">\'update\'</span>, $post);\n\n        <span class="hljs-comment">// The current user can update the blog post...</span>\n    }\n}</span></code></pre>\n  \n          <p><a name="actions-that-don-39-t-require-models"></a></p>\n          <h4>\n            <a href="#actions-that-don-39-t-require-models">\n              Actions That Don&#39;t Require Models\n            </a>\n          </h4><p>As previously discussed, some actions like <code>create</code> may not require a model instance. In these situations, you should pass a class name to the <code>authorize</code> method. The class name will be used to determine which policy to use when authorizing the action:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Create a new blog post.\n *\n * <span class="hljs-doctag">@param</span>  Request  $request\n * <span class="hljs-doctag">@return</span> Response\n * <span class="hljs-doctag">@throws</span> \\Illuminate\\Auth\\Access\\AuthorizationException\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">(Request $request)</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;authorize(<span class="hljs-string">\'create\'</span>, Post::class);\n\n    <span class="hljs-comment">// The current user can create blog posts...</span>\n}</code></pre>\n  \n          <p><a name="authorizing-resource-controllers"></a></p>\n          <h4>\n            <a href="#authorizing-resource-controllers">\n              Authorizing Resource Controllers\n            </a>\n          </h4><p>If you are utilizing <router-link to="/docs/{{version}}/controllers#resource-controllers">resource controllers</router-link>, you may make use of the <code>authorizeResource</code> method in the controller&#39;s constructor. This method will attach the appropriate <code>can</code> middleware definitions to the resource controller&#39;s methods.</p>\n<p>The <code>authorizeResource</code> method accepts the model&#39;s class name as its first argument, and the name of the route / request parameter that will contain the model&#39;s ID as its second argument:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">Controller</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Post</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Request</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">$this</span>-&gt;authorizeResource(Post::class, <span class="hljs-string">\'post\'</span>);\n    }\n}</span></code></pre>\n  <p>The following controller methods will be mapped to their corresponding policy method:</p>\n<table>\n<thead>\n<tr>\n<th>Controller Method</th>\n<th>Policy Method</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>index</td>\n<td>viewAny</td>\n</tr>\n<tr>\n<td>show</td>\n<td>view</td>\n</tr>\n<tr>\n<td>create</td>\n<td>create</td>\n</tr>\n<tr>\n<td>store</td>\n<td>create</td>\n</tr>\n<tr>\n<td>edit</td>\n<td>update</td>\n</tr>\n<tr>\n<td>update</td>\n<td>update</td>\n</tr>\n<tr>\n<td>destroy</td>\n<td>delete</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>{tip} You may use the <code>make:policy</code> command with the <code>--model</code> option to quickly generate a policy class for a given model: <code>php artisan make:policy PostPolicy --model=Post</code>.</p>\n</blockquote>\n<p><a name="via-blade-templates"></a></p>\n\n          <p><a name="via-blade-templates"></a></p>\n          <h3>\n            <a href="#via-blade-templates">\n              Via Blade Templates\n            </a>\n          </h3><p>When writing Blade templates, you may wish to display a portion of the page only if the user is authorized to perform a given action. For example, you may wish to show an update form for a blog post only if the user can actually update the post. In this situation, you may use the <code>@can</code> and <code>@cannot</code> family of directives:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@can</span>(<span class="hljs-string">\'update\'</span>, $post)\n    &lt;!-- The Current User Can Update The Post --&gt;\n<span class="hljs-variable">@elsecan</span>(<span class="hljs-string">\'create\'</span>, App\\<span class="hljs-attribute">Post</span>::class)\n    &lt;!-- The Current User Can Create New Post --&gt;\n<span class="hljs-variable">@endcan</span>\n\n<span class="hljs-variable">@cannot</span>(<span class="hljs-string">\'update\'</span>, $post)\n    &lt;!-- The Current User Can\'t Update The Post --&gt;\n<span class="hljs-variable">@elsecannot</span>(<span class="hljs-string">\'create\'</span>, App\\<span class="hljs-attribute">Post</span>::class)\n    &lt;!-- The Current User Can\'t Create New Post --&gt;\n<span class="hljs-variable">@endcannot</span></code></pre>\n  <p>These directives are convenient shortcuts for writing <code>@if</code> and <code>@unless</code> statements. The <code>@can</code> and <code>@cannot</code> statements above respectively translate to the following statements:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@if</span> (<span class="hljs-attribute">Auth</span>::user()-&gt;can(<span class="hljs-string">\'update\'</span>, $post))\n    &lt;!-- The Current User Can Update The Post --&gt;\n<span class="hljs-variable">@endif</span>\n\n<span class="hljs-variable">@unless</span> (<span class="hljs-attribute">Auth</span>::user()-&gt;can(<span class="hljs-string">\'update\'</span>, $post))\n    &lt;!-- The Current User Can\'t Update The Post --&gt;\n<span class="hljs-variable">@endunless</span></code></pre>\n  <p>You may also determine if a user has any authorization ability from a given list of abilities. To accomplish this, use the <code>@canany</code> directive:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@canany</span>([<span class="hljs-string">\'update\'</span>, <span class="hljs-string">\'view\'</span>, <span class="hljs-string">\'delete\'</span>], $post)\n    <span class="hljs-comment">// The current user can update, view, or delete the post</span>\n<span class="hljs-variable">@elsecanany</span>([<span class="hljs-string">\'create\'</span>], \\App\\<span class="hljs-attribute">Post</span>::class)\n    <span class="hljs-comment">// The current user can create a post</span>\n<span class="hljs-variable">@endcanany</span></code></pre>\n  \n          <p><a name="actions-that-don-39-t-require-models"></a></p>\n          <h4>\n            <a href="#actions-that-don-39-t-require-models">\n              Actions That Don&#39;t Require Models\n            </a>\n          </h4><p>Like most of the other authorization methods, you may pass a class name to the <code>@can</code> and <code>@cannot</code> directives if the action does not require a model instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@can</span>(<span class="hljs-string">\'create\'</span>, App\\<span class="hljs-attribute">Post</span>::class)\n    &lt;!-- The Current User Can Create Posts --&gt;\n<span class="hljs-variable">@endcan</span>\n\n<span class="hljs-variable">@cannot</span>(<span class="hljs-string">\'create\'</span>, App\\<span class="hljs-attribute">Post</span>::class)\n    &lt;!-- The Current User Can\'t Create Posts --&gt;\n<span class="hljs-variable">@endcannot</span></code></pre>\n  <p><a name="supplying-additional-context"></a></p>\n\n          <p><a name="supplying-additional-context"></a></p>\n          <h3>\n            <a href="#supplying-additional-context">\n              Supplying Additional Context\n            </a>\n          </h3><p>When authorizing actions using policies, you may pass an array as the second argument to the various authorization functions and helpers. The first element in the array will be used to determine which policy should be invoked, while the rest of the array elements are passed as parameters to the policy method and can be used for additional context when making authorization decisions. For example, consider the following <code>PostPolicy</code> method definition which contains an additional <code>$category</code> parameter:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Determine if the given post can be updated by the user.\n *\n * <span class="hljs-doctag">@param</span>  \\App\\User  $user\n * <span class="hljs-doctag">@param</span>  \\App\\Post  $post\n * <span class="hljs-doctag">@param</span>  int  $category\n * <span class="hljs-doctag">@return</span> bool\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">(User $user, Post $post, int $category)</span>\n</span>{\n    <span class="hljs-keyword">return</span> $user-&gt;id === $post-&gt;user_id &amp;&amp;\n           $category &gt; <span class="hljs-number">3</span>;\n}</code></pre>\n  <p>When attempting to determine if the authenticated user can update a given post, we can invoke this policy method like so:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Update the given blog post.\n *\n * <span class="hljs-doctag">@param</span>  Request  $request\n * <span class="hljs-doctag">@param</span>  Post  $post\n * <span class="hljs-doctag">@return</span> Response\n * <span class="hljs-doctag">@throws</span> \\Illuminate\\Auth\\Access\\AuthorizationException\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">(Request $request, Post $post)</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;authorize(<span class="hljs-string">\'update\'</span>, [$post, $request-&gt;input(<span class="hljs-string">\'category\'</span>)]);\n\n    <span class="hljs-comment">// The current user can update the blog post...</span>\n}</code></pre>\n  '},"25c4":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="redis"></a></p>\n          <h1>\n            <a href="#redis">\n              Redis\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a><ul>\n<li><a href="#configuration">Configuration</a></li>\n<li><a href="#predis">Predis</a></li>\n<li><a href="#phpredis">PhpRedis</a></li>\n</ul>\n</li>\n<li><a href="#interacting-with-redis">Interacting With Redis</a><ul>\n<li><a href="#pipelining-commands">Pipelining Commands</a></li>\n</ul>\n</li>\n<li><a href="#pubsub">Pub / Sub</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p><router-link to="https://redis.io">Redis</router-link> is an open source, advanced key-value store. It is often referred to as a data structure server since keys can contain <router-link to="https://redis.io/topics/data-types#strings">strings</router-link>, <router-link to="https://redis.io/topics/data-types#hashes">hashes</router-link>, <router-link to="https://redis.io/topics/data-types#lists">lists</router-link>, <router-link to="https://redis.io/topics/data-types#sets">sets</router-link>, and <router-link to="https://redis.io/topics/data-types#sorted-sets">sorted sets</router-link>.</p>\n<p>Before using Redis with Laravel, we encourage you to install and use the <router-link to="https://github.com/phpredis/phpredis">PhpRedis</router-link> PHP extension via PECL. The extension is more complex to install but may yield better performance for applications that make heavy use of Redis.</p>\n<p>Alternatively, you can install the <code>predis/predis</code> package via Composer:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">composer</span> <span class="hljs-meta">require</span> predis/predis</code></pre>\n  <blockquote>\n<p>{note} Predis has been abandoned by the package&#39;s original author and may be removed from Laravel in a future release.</p>\n</blockquote>\n<p><a name="configuration"></a></p>\n\n          <p><a name="configuration"></a></p>\n          <h3>\n            <a href="#configuration">\n              Configuration\n            </a>\n          </h3><p>The Redis configuration for your application is located in the <code>config/database.php</code> configuration file. Within this file, you will see a <code>redis</code> array containing the Redis servers utilized by your application:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'redis\'</span> =&gt; [\n\n    <span class="hljs-string">\'client\'</span> =&gt; env(<span class="hljs-string">\'REDIS_CLIENT\'</span>, <span class="hljs-string">\'phpredis\'</span>),\n\n    <span class="hljs-string">\'default\'</span> =&gt; [\n        <span class="hljs-string">\'host\'</span> =&gt; env(<span class="hljs-string">\'REDIS_HOST\'</span>, <span class="hljs-string">\'127.0.0.1\'</span>),\n        <span class="hljs-string">\'password\'</span> =&gt; env(<span class="hljs-string">\'REDIS_PASSWORD\'</span>, <span class="hljs-keyword">null</span>),\n        <span class="hljs-string">\'port\'</span> =&gt; env(<span class="hljs-string">\'REDIS_PORT\'</span>, <span class="hljs-number">6379</span>),\n        <span class="hljs-string">\'database\'</span> =&gt; env(<span class="hljs-string">\'REDIS_DB\'</span>, <span class="hljs-number">0</span>),\n    ],\n\n    <span class="hljs-string">\'cache\'</span> =&gt; [\n        <span class="hljs-string">\'host\'</span> =&gt; env(<span class="hljs-string">\'REDIS_HOST\'</span>, <span class="hljs-string">\'127.0.0.1\'</span>),\n        <span class="hljs-string">\'password\'</span> =&gt; env(<span class="hljs-string">\'REDIS_PASSWORD\'</span>, <span class="hljs-keyword">null</span>),\n        <span class="hljs-string">\'port\'</span> =&gt; env(<span class="hljs-string">\'REDIS_PORT\'</span>, <span class="hljs-number">6379</span>),\n        <span class="hljs-string">\'database\'</span> =&gt; env(<span class="hljs-string">\'REDIS_CACHE_DB\'</span>, <span class="hljs-number">1</span>),\n    ],\n\n],</code></pre>\n  <p>The default server configuration should suffice for development. However, you are free to modify this array based on your environment. Each Redis server defined in your configuration file is required to have a name, host, and port.</p>\n\n          <p><a name="configuring-clusters"></a></p>\n          <h4>\n            <a href="#configuring-clusters">\n              Configuring Clusters\n            </a>\n          </h4><p>If your application is utilizing a cluster of Redis servers, you should define these clusters within a <code>clusters</code> key of your Redis configuration:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'redis\'</span> =&gt; [\n\n    <span class="hljs-string">\'client\'</span> =&gt; env(<span class="hljs-string">\'REDIS_CLIENT\'</span>, <span class="hljs-string">\'phpredis\'</span>),\n\n    <span class="hljs-string">\'clusters\'</span> =&gt; [\n        <span class="hljs-string">\'default\'</span> =&gt; [\n            [\n                <span class="hljs-string">\'host\'</span> =&gt; env(<span class="hljs-string">\'REDIS_HOST\'</span>, <span class="hljs-string">\'localhost\'</span>),\n                <span class="hljs-string">\'password\'</span> =&gt; env(<span class="hljs-string">\'REDIS_PASSWORD\'</span>, <span class="hljs-keyword">null</span>),\n                <span class="hljs-string">\'port\'</span> =&gt; env(<span class="hljs-string">\'REDIS_PORT\'</span>, <span class="hljs-number">6379</span>),\n                <span class="hljs-string">\'database\'</span> =&gt; <span class="hljs-number">0</span>,\n            ],\n        ],\n    ],\n\n],</code></pre>\n  <p>By default, clusters will perform client-side sharding across your nodes, allowing you to pool nodes and create a large amount of available RAM. However, note that client-side sharding does not handle failover; therefore, is primarily suited for cached data that is available from another primary data store. If you would like to use native Redis clustering, you should specify this in the <code>options</code> key of your Redis configuration:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'redis\'</span> =&gt; [\n\n    <span class="hljs-string">\'client\'</span> =&gt; env(<span class="hljs-string">\'REDIS_CLIENT\'</span>, <span class="hljs-string">\'phpredis\'</span>),\n\n    <span class="hljs-string">\'options\'</span> =&gt; [\n        <span class="hljs-string">\'cluster\'</span> =&gt; env(<span class="hljs-string">\'REDIS_CLUSTER\'</span>, <span class="hljs-string">\'redis\'</span>),\n    ],\n\n    <span class="hljs-string">\'clusters\'</span> =&gt; [\n        <span class="hljs-comment">// ...</span>\n    ],\n\n],</code></pre>\n  <p><a name="predis"></a></p>\n\n          <p><a name="predis"></a></p>\n          <h3>\n            <a href="#predis">\n              Predis\n            </a>\n          </h3><p>To utilize the Predis extension, you should change the <code>REDIS_CLIENT</code> environment variable from <code>phpredis</code> to <code>predis</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'redis\'</span> =&gt; [\n\n    <span class="hljs-string">\'client\'</span> =&gt; env(<span class="hljs-string">\'REDIS_CLIENT\'</span>, <span class="hljs-string">\'predis\'</span>),\n\n    <span class="hljs-comment">// Rest of Redis configuration...</span>\n],</code></pre>\n  <p>In addition to the default <code>host</code>, <code>port</code>, <code>database</code>, and <code>password</code> server configuration options, Predis supports additional <router-link to="https://github.com/nrk/predis/wiki/Connection-Parameters">connection parameters</router-link> that may be defined for each of your Redis servers. To utilize these additional configuration options, add them to your Redis server configuration in the <code>config/database.php</code> configuration file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'default\'</span> =&gt; [\n    <span class="hljs-string">\'host\'</span> =&gt; env(<span class="hljs-string">\'REDIS_HOST\'</span>, <span class="hljs-string">\'localhost\'</span>),\n    <span class="hljs-string">\'password\'</span> =&gt; env(<span class="hljs-string">\'REDIS_PASSWORD\'</span>, <span class="hljs-keyword">null</span>),\n    <span class="hljs-string">\'port\'</span> =&gt; env(<span class="hljs-string">\'REDIS_PORT\'</span>, <span class="hljs-number">6379</span>),\n    <span class="hljs-string">\'database\'</span> =&gt; <span class="hljs-number">0</span>,\n    <span class="hljs-string">\'read_write_timeout\'</span> =&gt; <span class="hljs-number">60</span>,\n],</code></pre>\n  <p><a name="phpredis"></a></p>\n\n          <p><a name="phpredis"></a></p>\n          <h3>\n            <a href="#phpredis">\n              PhpRedis\n            </a>\n          </h3><p>The PhpRedis extension is configured as default at <code>REDIS_CLIENT</code> env and in your <code>config/database.php</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'redis\'</span> =&gt; [\n\n    <span class="hljs-string">\'client\'</span> =&gt; env(<span class="hljs-string">\'REDIS_CLIENT\'</span>, <span class="hljs-string">\'phpredis\'</span>),\n\n    <span class="hljs-comment">// Rest of Redis configuration...</span>\n],</code></pre>\n  <p>If you plan to use PhpRedis extension along with the <code>Redis</code> Facade alias, you should rename it to something else, like <code>RedisManager</code>, to avoid a collision with the Redis class. You can do that in the aliases section of your <code>app.php</code> config file.</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'RedisManager\'</span> =&gt; Illuminate\\Support\\Facades\\Redis::<span class="hljs-class"><span class="hljs-keyword">class</span>,</span></code></pre>\n  <p>In addition to the default <code>host</code>, <code>port</code>, <code>database</code>, and <code>password</code> server configuration options, PhpRedis supports the following additional connection parameters: <code>persistent</code>, <code>prefix</code>, <code>read_timeout</code> and <code>timeout</code>. You may add any of these options to your Redis server configuration in the <code>config/database.php</code> configuration file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'default\'</span> =&gt; [\n    <span class="hljs-string">\'host\'</span> =&gt; env(<span class="hljs-string">\'REDIS_HOST\'</span>, <span class="hljs-string">\'localhost\'</span>),\n    <span class="hljs-string">\'password\'</span> =&gt; env(<span class="hljs-string">\'REDIS_PASSWORD\'</span>, <span class="hljs-keyword">null</span>),\n    <span class="hljs-string">\'port\'</span> =&gt; env(<span class="hljs-string">\'REDIS_PORT\'</span>, <span class="hljs-number">6379</span>),\n    <span class="hljs-string">\'database\'</span> =&gt; <span class="hljs-number">0</span>,\n    <span class="hljs-string">\'read_timeout\'</span> =&gt; <span class="hljs-number">60</span>,\n],</code></pre>\n  \n          <p><a name="the-redis-facade"></a></p>\n          <h4>\n            <a href="#the-redis-facade">\n              The Redis Facade\n            </a>\n          </h4><p>To avoid class naming collisions with the Redis PHP extension itself, you will need to delete or rename the <code>Illuminate\\Support\\Facades\\Redis</code> facade alias from your <code>app</code> configuration file&#39;s <code>aliases</code> array. Generally, you should remove this alias entirely and only reference the facade by its fully qualified class name while using the Redis PHP extension.</p>\n<p><a name="interacting-with-redis"></a></p>\n\n          <p><a name="interacting-with-redis"></a></p>\n          <h2>\n            <a href="#interacting-with-redis">\n              Interacting With Redis\n            </a>\n          </h2><p>You may interact with Redis by calling various methods on the <code>Redis</code> <router-link to="/docs/{{version}}/facades">facade</router-link>. The <code>Redis</code> facade supports dynamic methods, meaning you may call any <router-link to="https://redis.io/commands">Redis command</router-link> on the facade and the command will be passed directly to Redis. In this example, we will call the Redis <code>GET</code> command by calling the <code>get</code> method on the <code>Redis</code> facade:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">Controller</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Redis</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Show the profile for the given user.\n     *\n     * <span class="hljs-doctag">@param</span>  int  $id\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showProfile</span><span class="hljs-params">($id)</span>\n    </span>{\n        $user = Redis::get(<span class="hljs-string">\'user:profile:\'</span>.$id);\n\n        <span class="hljs-keyword">return</span> view(<span class="hljs-string">\'user.profile\'</span>, [<span class="hljs-string">\'user\'</span> =&gt; $user]);\n    }\n}</span></code></pre>\n  <p>As mentioned above, you may call any of the Redis commands on the <code>Redis</code> facade. Laravel uses magic methods to pass the commands to the Redis server, so pass the arguments the Redis command expects:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Redis::<span class="hljs-keyword">set</span>(\'name\', \'Taylor\');\n\n$values = Redis::<span class="hljs-keyword">lrange</span>(\'names\', <span class="hljs-number">5</span>, <span class="hljs-number">10</span>);</code></pre>\n  <p>Alternatively, you may also pass commands to the server using the <code>command</code> method, which accepts the name of the command as its first argument, and an array of values as its second argument:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$values = Redis::command(\'<span class="hljs-keyword">lrange</span>\', [\'name\', <span class="hljs-number">5</span>, <span class="hljs-number">10</span>]);</code></pre>\n  \n          <p><a name="using-multiple-redis-connections"></a></p>\n          <h4>\n            <a href="#using-multiple-redis-connections">\n              Using Multiple Redis Connections\n            </a>\n          </h4><p>You may get a Redis instance by calling the <code>Redis::connection</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$redis</span> = Redis::connection();</code></pre>\n  <p>This will give you an instance of the default Redis server. You may also pass the connection or cluster name to the <code>connection</code> method to get a specific server or cluster as defined in your Redis configuration:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$redis</span> = Redis::connection(<span class="hljs-string">\'my-connection\'</span>);</code></pre>\n  <p><a name="pipelining-commands"></a></p>\n\n          <p><a name="pipelining-commands"></a></p>\n          <h3>\n            <a href="#pipelining-commands">\n              Pipelining Commands\n            </a>\n          </h3><p>Pipelining should be used when you need to send many commands to the server. The <code>pipeline</code> method accepts one argument: a <code>Closure</code> that receives a Redis instance. You may issue all of your commands to this Redis instance and they will all be streamed to the server thus providing better performance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Redis::pipeline(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($pipe)</span> </span>{\n    <span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; <span class="hljs-number">1000</span>; $i++) {\n        $pipe-&gt;set(<span class="hljs-string">"key:$i"</span>, $i);\n    }\n});</code></pre>\n  <p><a name="pubsub"></a></p>\n\n          <p><a name="pub-sub"></a></p>\n          <h2>\n            <a href="#pub-sub">\n              Pub / Sub\n            </a>\n          </h2><p>Laravel provides a convenient interface to the Redis <code>publish</code> and <code>subscribe</code> commands. These Redis commands allow you to listen for messages on a given &quot;channel&quot;. You may publish messages to the channel from another application, or even using another programming language, allowing easy communication between applications and processes.</p>\n<p>First, let&#39;s setup a channel listener using the <code>subscribe</code> method. We&#39;ll place this method call within an <router-link to="/docs/{{version}}/artisan">Artisan command</router-link> since calling the <code>subscribe</code> method begins a long-running process:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Console</span>\\<span class="hljs-title">Commands</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Console</span>\\<span class="hljs-title">Command</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Redis</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisSubscribe</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Command</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The name and signature of the console command.\n     *\n     * <span class="hljs-doctag">@var</span> string\n     */</span>\n    <span class="hljs-keyword">protected</span> $signature = <span class="hljs-string">\'redis:subscribe\'</span>;\n\n    <span class="hljs-comment">/**\n     * The console command description.\n     *\n     * <span class="hljs-doctag">@var</span> string\n     */</span>\n    <span class="hljs-keyword">protected</span> $description = <span class="hljs-string">\'Subscribe to a Redis channel\'</span>;\n\n    <span class="hljs-comment">/**\n     * Execute the console command.\n     *\n     * <span class="hljs-doctag">@return</span> mixed\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span>\n    </span>{\n        Redis::subscribe([<span class="hljs-string">\'test-channel\'</span>], <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($message)</span> </span>{\n            <span class="hljs-keyword">echo</span> $message;\n        });\n    }\n}</span></code></pre>\n  <p>Now we may publish messages to the channel using the <code>publish</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'publish\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">// Route logic...</span>\n\n    Redis::publish(<span class="hljs-string">\'test-channel\'</span>, json_encode([<span class="hljs-string">\'foo\'</span> =&gt; <span class="hljs-string">\'bar\'</span>]));\n});</code></pre>\n  \n          <p><a name="wildcard-subscriptions"></a></p>\n          <h4>\n            <a href="#wildcard-subscriptions">\n              Wildcard Subscriptions\n            </a>\n          </h4><p>Using the <code>psubscribe</code> method, you may subscribe to a wildcard channel, which may be useful for catching all messages on all channels. The <code>$channel</code> name will be passed as the second argument to the provided callback <code>Closure</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Redis::psubscribe([<span class="hljs-string">\'*\'</span>], <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($message, $channel)</span> </span>{\n    <span class="hljs-keyword">echo</span> $message;\n});\n\nRedis::psubscribe([<span class="hljs-string">\'users.*\'</span>], <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($message, $channel)</span> </span>{\n    <span class="hljs-keyword">echo</span> $message;\n});</code></pre>\n  '},2703:function(s,e,a){},"2a74":function(s,e,a){"use strict";a.r(e);a("a481"),a("ac6a");var n=a("d307"),t={};n.keys().forEach((function(s){"./index.js"!==s&&(t[s.replace(/(\.\/|\.js)/g,"")]=n(s).default)})),e["default"]=t},"2f08":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="contribution-guide"></a></p>\n          <h1>\n            <a href="#contribution-guide">\n              Contribution Guide\n            </a>\n          </h1><ul>\n<li><a href="#bug-reports">Bug Reports</a></li>\n<li><a href="#support-questions">Support Questions</a></li>\n<li><a href="#core-development-discussion">Core Development Discussion</a></li>\n<li><a href="#which-branch">Which Branch?</a></li>\n<li><a href="#compiled-assets">Compiled Assets</a></li>\n<li><a href="#security-vulnerabilities">Security Vulnerabilities</a></li>\n<li><a href="#coding-style">Coding Style</a><ul>\n<li><a href="#phpdoc">PHPDoc</a></li>\n<li><a href="#styleci">StyleCI</a></li>\n</ul>\n</li>\n<li><a href="#code-of-conduct">Code of Conduct</a></li>\n</ul>\n<p><a name="bug-reports"></a></p>\n\n          <p><a name="bug-reports"></a></p>\n          <h2>\n            <a href="#bug-reports">\n              Bug Reports\n            </a>\n          </h2><p>To encourage active collaboration, Laravel strongly encourages pull requests, not just bug reports. &quot;Bug reports&quot; may also be sent in the form of a pull request containing a failing test.</p>\n<p>However, if you file a bug report, your issue should contain a title and a clear description of the issue. You should also include as much relevant information as possible and a code sample that demonstrates the issue. The goal of a bug report is to make it easy for yourself - and others - to replicate the bug and develop a fix.</p>\n<p>Remember, bug reports are created in the hope that others with the same problem will be able to collaborate with you on solving it. Do not expect that the bug report will automatically see any activity or that others will jump to fix it. Creating a bug report serves to help yourself and others start on the path of fixing the problem.</p>\n<p>The Laravel source code is managed on GitHub, and there are repositories for each of the Laravel projects:</p>\n<div class="content-list" markdown="1">\n- [Laravel Application](https://github.com/laravel/laravel)\n- [Laravel Art](https://github.com/laravel/art)\n- [Laravel Documentation](https://github.com/laravel/docs)\n- [Laravel Cashier](https://github.com/laravel/cashier)\n- [Laravel Envoy](https://github.com/laravel/envoy)\n- [Laravel Framework](https://github.com/laravel/framework)\n- [Laravel Homestead](https://github.com/laravel/homestead)\n- [Laravel Homestead Build Scripts](https://github.com/laravel/settler)\n- [Laravel Horizon](https://github.com/laravel/horizon)\n- [Laravel Passport](https://github.com/laravel/passport)\n- [Laravel Scout](https://github.com/laravel/scout)\n- [Laravel Socialite](https://github.com/laravel/socialite)\n- [Laravel Telescope](https://github.com/laravel/telescope)\n- [Laravel Website](https://github.com/laravel/laravel.com-next)\n</div>\n\n<p><a name="support-questions"></a></p>\n\n          <p><a name="support-questions"></a></p>\n          <h2>\n            <a href="#support-questions">\n              Support Questions\n            </a>\n          </h2><p>Laravel&#39;s GitHub issue trackers are not intended to provide Laravel help or support. Instead, use one of the following channels:</p>\n<div class="content-list" markdown="1">\n- [Laracasts Forums](https://laracasts.com/discuss)\n- [Laravel.io Forums](https://laravel.io/forum)\n- [StackOverflow](https://stackoverflow.com/questions/tagged/laravel)\n- [Discord](https://discordapp.com/invite/KxwQuKb)\n- [Larachat](https://larachat.co)\n- [IRC](https://webchat.freenode.net/?nick=artisan&channels=%23laravel&prompt=1)\n</div>\n\n<p><a name="core-development-discussion"></a></p>\n\n          <p><a name="core-development-discussion"></a></p>\n          <h2>\n            <a href="#core-development-discussion">\n              Core Development Discussion\n            </a>\n          </h2><p>You may propose new features or improvements of existing Laravel behavior in the Laravel Ideas <router-link to="https://github.com/laravel/ideas/issues">issue board</router-link>. If you propose a new feature, please be willing to implement at least some of the code that would be needed to complete the feature.</p>\n<p>Informal discussion regarding bugs, new features, and implementation of existing features takes place in the <code>#internals</code> channel of the <router-link to="https://discordapp.com/invite/mPZNm7A">Laravel Discord server</router-link>. Taylor Otwell, the maintainer of Laravel, is typically present in the channel on weekdays from 8am-5pm (UTC-06:00 or America/Chicago), and sporadically present in the channel at other times.</p>\n<p><a name="which-branch"></a></p>\n\n          <p><a name="which-branch-"></a></p>\n          <h2>\n            <a href="#which-branch-">\n              Which Branch?\n            </a>\n          </h2><p><strong>All</strong> bug fixes should be sent to the latest stable branch or to the <router-link to="/docs/{{version}}/releases#support-policy">current LTS branch</router-link>. Bug fixes should <strong>never</strong> be sent to the <code>master</code> branch unless they fix features that exist only in the upcoming release.</p>\n<p><strong>Minor</strong> features that are <strong>fully backwards compatible</strong> with the current release may be sent to the latest stable branch.</p>\n<p><strong>Major</strong> new features should always be sent to the <code>master</code> branch, which contains the upcoming release.</p>\n<p>If you are unsure if your feature qualifies as a major or minor, please ask Taylor Otwell in the <code>#internals</code> channel of the <router-link to="https://discordapp.com/invite/mPZNm7A">Laravel Discord server</router-link>.</p>\n<p><a name="compiled-assets"></a></p>\n\n          <p><a name="compiled-assets"></a></p>\n          <h2>\n            <a href="#compiled-assets">\n              Compiled Assets\n            </a>\n          </h2><p>If you are submitting a change that will affect a compiled file, such as most of the files in <code>resources/sass</code> or <code>resources/js</code> of the <code>laravel/laravel</code> repository, do not commit the compiled files. Due to their large size, they cannot realistically be reviewed by a maintainer. This could be exploited as a way to inject malicious code into Laravel. In order to defensively prevent this, all compiled files will be generated and committed by Laravel maintainers.</p>\n<p><a name="security-vulnerabilities"></a></p>\n\n          <p><a name="security-vulnerabilities"></a></p>\n          <h2>\n            <a href="#security-vulnerabilities">\n              Security Vulnerabilities\n            </a>\n          </h2><p>If you discover a security vulnerability within Laravel, please send an email to Taylor Otwell at <a href="mailto:taylor@laravel.com">taylor@laravel.com</a>. All security vulnerabilities will be promptly addressed.</p>\n<p><a name="coding-style"></a></p>\n\n          <p><a name="coding-style"></a></p>\n          <h2>\n            <a href="#coding-style">\n              Coding Style\n            </a>\n          </h2><p>Laravel follows the <router-link to="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md">PSR-2</router-link> coding standard and the <router-link to="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md">PSR-4</router-link> autoloading standard.</p>\n<p><a name="phpdoc"></a></p>\n\n          <p><a name="phpdoc"></a></p>\n          <h3>\n            <a href="#phpdoc">\n              PHPDoc\n            </a>\n          </h3><p>Below is an example of a valid Laravel documentation block. Note that the <code>@param</code> attribute is followed by two spaces, the argument type, two more spaces, and finally the variable name:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Register a binding with the container.\n *\n * <span class="hljs-doctag">@param</span>  string|array  $abstract\n * <span class="hljs-doctag">@param</span>  \\Closure|string|null  $concrete\n * <span class="hljs-doctag">@param</span>  bool  $shared\n * <span class="hljs-doctag">@return</span> void\n *\n * <span class="hljs-doctag">@throws</span> \\Exception\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bind</span><span class="hljs-params">($abstract, $concrete = null, $shared = false)</span>\n</span>{\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p><a name="styleci"></a></p>\n\n          <p><a name="styleci"></a></p>\n          <h3>\n            <a href="#styleci">\n              StyleCI\n            </a>\n          </h3><p>Don&#39;t worry if your code styling isn&#39;t perfect! <router-link to="https://styleci.io/">StyleCI</router-link> will automatically merge any style fixes into the Laravel repository after pull requests are merged. This allows us to focus on the content of the contribution and not the code style.</p>\n<p><a name="code-of-conduct"></a></p>\n\n          <p><a name="code-of-conduct"></a></p>\n          <h2>\n            <a href="#code-of-conduct">\n              Code of Conduct\n            </a>\n          </h2><p>The Laravel code of conduct is derived from the Ruby code of conduct. Any violations of the code of conduct may be reported to Taylor Otwell (<router-link to="mailto:taylor@laravel.com">taylor@laravel.com</router-link>):</p>\n<div class="content-list" markdown="1">\n- Participants will be tolerant of opposing views.\n- Participants must ensure that their language and actions are free of personal attacks and disparaging personal remarks.\n- When interpreting the words and actions of others, participants should always assume good intentions.\n- Behavior which can be reasonably considered harassment will not be tolerated.\n</div>\n'},"2f4d":function(s,e,a){},"2ff1":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="facades"></a></p>\n          <h1>\n            <a href="#facades">\n              Facades\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#when-to-use-facades">When To Use Facades</a><ul>\n<li><a href="#facades-vs-dependency-injection">Facades Vs. Dependency Injection</a></li>\n<li><a href="#facades-vs-helper-functions">Facades Vs. Helper Functions</a></li>\n</ul>\n</li>\n<li><a href="#how-facades-work">How Facades Work</a></li>\n<li><a href="#real-time-facades">Real-Time Facades</a></li>\n<li><a href="#facade-class-reference">Facade Class Reference</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Facades provide a &quot;static&quot; interface to classes that are available in the application&#39;s <router-link to="/docs/{{version}}/container">service container</router-link>. Laravel ships with many facades which provide access to almost all of Laravel&#39;s features. Laravel facades serve as &quot;static proxies&quot; to underlying classes in the service container, providing the benefit of a terse, expressive syntax while maintaining more testability and flexibility than traditional static methods.</p>\n<p>All of Laravel&#39;s facades are defined in the <code>Illuminate\\Support\\Facades</code> namespace. So, we can easily access a facade like so:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Cache</span>;\n\nRoute::get(<span class="hljs-string">\'/cache\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> Cache::get(<span class="hljs-string">\'key\'</span>);\n});</code></pre>\n  <p>Throughout the Laravel documentation, many of the examples will use facades to demonstrate various features of the framework.</p>\n<p><a name="when-to-use-facades"></a></p>\n\n          <p><a name="when-to-use-facades"></a></p>\n          <h2>\n            <a href="#when-to-use-facades">\n              When To Use Facades\n            </a>\n          </h2><p>Facades have many benefits. They provide a terse, memorable syntax that allows you to use Laravel&#39;s features without remembering long class names that must be injected or configured manually. Furthermore, because of their unique usage of PHP&#39;s dynamic methods, they are easy to test.</p>\n<p>However, some care must be taken when using facades. The primary danger of facades is class scope creep. Since facades are so easy to use and do not require injection, it can be easy to let your classes continue to grow and use many facades in a single class. Using dependency injection, this potential is mitigated by the visual feedback a large constructor gives you that your class is growing too large. So, when using facades, pay special attention to the size of your class so that its scope of responsibility stays narrow.</p>\n<blockquote>\n<p>{tip} When building a third-party package that interacts with Laravel, it&#39;s better to inject <router-link to="/docs/{{version}}/contracts">Laravel contracts</router-link> instead of using facades. Since packages are built outside of Laravel itself, you will not have access to Laravel&#39;s facade testing helpers.</p>\n</blockquote>\n<p><a name="facades-vs-dependency-injection"></a></p>\n\n          <p><a name="facades-vs-dependency-injection"></a></p>\n          <h3>\n            <a href="#facades-vs-dependency-injection">\n              Facades Vs. Dependency Injection\n            </a>\n          </h3><p>One of the primary benefits of dependency injection is the ability to swap implementations of the injected class. This is useful during testing since you can inject a mock or stub and assert that various methods were called on the stub.</p>\n<p>Typically, it would not be possible to mock or stub a truly static class method. However, since facades use dynamic methods to proxy method calls to objects resolved from the service container, we actually can test facades just as we would test an injected class instance. For example, given the following route:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Cache</span>;\n\nRoute::get(<span class="hljs-string">\'/cache\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> Cache::get(<span class="hljs-string">\'key\'</span>);\n});</code></pre>\n  <p>We can write the following test to verify that the <code>Cache::get</code> method was called with the argument we expected:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Cache</span>;\n\n<span class="hljs-comment">/**\n * A basic functional test example.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testBasicExample</span><span class="hljs-params">()</span>\n</span>{\n    Cache::shouldReceive(<span class="hljs-string">\'get\'</span>)\n         -&gt;with(<span class="hljs-string">\'key\'</span>)\n         -&gt;andReturn(<span class="hljs-string">\'value\'</span>);\n\n    <span class="hljs-keyword">$this</span>-&gt;visit(<span class="hljs-string">\'/cache\'</span>)\n         -&gt;see(<span class="hljs-string">\'value\'</span>);\n}</code></pre>\n  <p><a name="facades-vs-helper-functions"></a></p>\n\n          <p><a name="facades-vs-helper-functions"></a></p>\n          <h3>\n            <a href="#facades-vs-helper-functions">\n              Facades Vs. Helper Functions\n            </a>\n          </h3><p>In addition to facades, Laravel includes a variety of &quot;helper&quot; functions which can perform common tasks like generating views, firing events, dispatching jobs, or sending HTTP responses. Many of these helper functions perform the same function as a corresponding facade. For example, this facade call and helper call are equivalent:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> View::make(<span class="hljs-string">\'profile\'</span>);\n\n<span class="hljs-keyword">return</span> view(<span class="hljs-string">\'profile\'</span>);</code></pre>\n  <p>There is absolutely no practical difference between facades and helper functions. When using helper functions, you may still test them exactly as you would the corresponding facade. For example, given the following route:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::<span class="hljs-keyword">get</span>(<span class="hljs-string">\'/cache\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> cache(<span class="hljs-string">\'key\'</span>);\n});</code></pre>\n  <p>Under the hood, the <code>cache</code> helper is going to call the <code>get</code> method on the class underlying the <code>Cache</code> facade. So, even though we are using the helper function, we can write the following test to verify that the method was called with the argument we expected:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Cache</span>;\n\n<span class="hljs-comment">/**\n * A basic functional test example.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testBasicExample</span><span class="hljs-params">()</span>\n</span>{\n    Cache::shouldReceive(<span class="hljs-string">\'get\'</span>)\n         -&gt;with(<span class="hljs-string">\'key\'</span>)\n         -&gt;andReturn(<span class="hljs-string">\'value\'</span>);\n\n    <span class="hljs-keyword">$this</span>-&gt;visit(<span class="hljs-string">\'/cache\'</span>)\n         -&gt;see(<span class="hljs-string">\'value\'</span>);\n}</code></pre>\n  <p><a name="how-facades-work"></a></p>\n\n          <p><a name="how-facades-work"></a></p>\n          <h2>\n            <a href="#how-facades-work">\n              How Facades Work\n            </a>\n          </h2><p>In a Laravel application, a facade is a class that provides access to an object from the container. The machinery that makes this work is in the <code>Facade</code> class. Laravel&#39;s facades, and any custom facades you create, will extend the base <code>Illuminate\\Support\\Facades\\Facade</code> class.</p>\n<p>The <code>Facade</code> base class makes use of the <code>__callStatic()</code> magic-method to defer calls from your facade to an object resolved from the container. In the example below, a call is made to the Laravel cache system. By glancing at this code, one might assume that the static method <code>get</code> is being called on the <code>Cache</code> class:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">Controller</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Cache</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Show the profile for the given user.\n     *\n     * <span class="hljs-doctag">@param</span>  int  $id\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showProfile</span><span class="hljs-params">($id)</span>\n    </span>{\n        $user = Cache::get(<span class="hljs-string">\'user:\'</span>.$id);\n\n        <span class="hljs-keyword">return</span> view(<span class="hljs-string">\'profile\'</span>, [<span class="hljs-string">\'user\'</span> =&gt; $user]);\n    }\n}</span></code></pre>\n  <p>Notice that near the top of the file we are &quot;importing&quot; the <code>Cache</code> facade. This facade serves as a proxy to accessing the underlying implementation of the <code>Illuminate\\Contracts\\Cache\\Factory</code> interface. Any calls we make using the facade will be passed to the underlying instance of Laravel&#39;s cache service.</p>\n<p>If we look at that <code>Illuminate\\Support\\Facades\\Cache</code> class, you&#39;ll see that there is no static method <code>get</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cache</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Facade</span></span>\n{\n    <span class="hljs-comment">/**\n     * Get the registered name of the component.\n     *\n     * @return string\n     */</span>\n    <span class="hljs-keyword">protected</span> static function getFacadeAccessor() { <span class="hljs-keyword">return</span> <span class="hljs-symbol">\'cach</span>e\'; }\n}</code></pre>\n  <p>Instead, the <code>Cache</code> facade extends the base <code>Facade</code> class and defines the method <code>getFacadeAccessor()</code>. This method&#39;s job is to return the name of a service container binding. When a user references any static method on the <code>Cache</code> facade, Laravel resolves the <code>cache</code> binding from the <router-link to="/docs/{{version}}/container">service container</router-link> and runs the requested method (in this case, <code>get</code>) against that object.</p>\n<p><a name="real-time-facades"></a></p>\n\n          <p><a name="real-time-facades"></a></p>\n          <h2>\n            <a href="#real-time-facades">\n              Real-Time Facades\n            </a>\n          </h2><p>Using real-time facades, you may treat any class in your application as if it were a facade. To illustrate how this can be used, let&#39;s examine an alternative. For example, let&#39;s assume our <code>Podcast</code> model has a <code>publish</code> method. However, in order to publish the podcast, we need to inject a <code>Publisher</code> instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">Publisher</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Podcast</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Publish the podcast.\n     *\n     * <span class="hljs-doctag">@param</span>  Publisher  $publisher\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">publish</span><span class="hljs-params">(Publisher $publisher)</span>\n    </span>{\n        <span class="hljs-keyword">$this</span>-&gt;update([<span class="hljs-string">\'publishing\'</span> =&gt; now()]);\n\n        $publisher-&gt;publish(<span class="hljs-keyword">$this</span>);\n    }\n}</span></code></pre>\n  <p>Injecting a publisher implementation into the method allows us to easily test the method in isolation since we can mock the injected publisher. However, it requires us to always pass a publisher instance each time we call the <code>publish</code> method. Using real-time facades, we can maintain the same testability while not being required to explicitly pass a <code>Publisher</code> instance. To generate a real-time facade, prefix the namespace of the imported class with <code>Facades</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Facades</span>\\<span class="hljs-title">App</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">Publisher</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Podcast</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Publish the podcast.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">publish</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">$this</span>-&gt;update([<span class="hljs-string">\'publishing\'</span> =&gt; now()]);\n\n        Publisher::publish(<span class="hljs-keyword">$this</span>);\n    }\n}</span></code></pre>\n  <p>When the real-time facade is used, the publisher implementation will be resolved out of the service container using the portion of the interface or class name that appears after the <code>Facades</code> prefix. When testing, we can use Laravel&#39;s built-in facade testing helpers to mock this method call:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">Feature</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Podcast</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Facades</span>\\<span class="hljs-title">App</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">Publisher</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">RefreshDatabase</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">TestCase</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PodcastTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">RefreshDatabase</span>;\n\n    <span class="hljs-comment">/**\n     * A test example.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test_podcast_can_be_published</span><span class="hljs-params">()</span>\n    </span>{\n        $podcast = factory(Podcast::class)-&gt;create();\n\n        Publisher::shouldReceive(<span class="hljs-string">\'publish\'</span>)-&gt;once()-&gt;with($podcast);\n\n        $podcast-&gt;publish();\n    }\n}</span></code></pre>\n  <p><a name="facade-class-reference"></a></p>\n\n          <p><a name="facade-class-reference"></a></p>\n          <h2>\n            <a href="#facade-class-reference">\n              Facade Class Reference\n            </a>\n          </h2><p>Below you will find every facade and its underlying class. This is a useful tool for quickly digging into the API documentation for a given facade root. The <router-link to="/docs/{{version}}/container">service container binding</router-link> key is also included where applicable.</p>\n<table>\n<thead>\n<tr>\n<th>Facade</th>\n<th>Class</th>\n<th>Service Container Binding</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>App</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Foundation/Application.html">Illuminate\\Foundation\\Application</router-link></td>\n<td><code>app</code></td>\n</tr>\n<tr>\n<td>Artisan</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Contracts/Console/Kernel.html">Illuminate\\Contracts\\Console\\Kernel</router-link></td>\n<td><code>artisan</code></td>\n</tr>\n<tr>\n<td>Auth</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Auth/AuthManager.html">Illuminate\\Auth\\AuthManager</router-link></td>\n<td><code>auth</code></td>\n</tr>\n<tr>\n<td>Auth (Instance)</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Contracts/Auth/Guard.html">Illuminate\\Contracts\\Auth\\Guard</router-link></td>\n<td><code>auth.driver</code></td>\n</tr>\n<tr>\n<td>Blade</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/View/Compilers/BladeCompiler.html">Illuminate\\View\\Compilers\\BladeCompiler</router-link></td>\n<td><code>blade.compiler</code></td>\n</tr>\n<tr>\n<td>Broadcast</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Contracts/Broadcasting/Factory.html">Illuminate\\Contracts\\Broadcasting\\Factory</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>Broadcast (Instance)</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Contracts/Broadcasting/Broadcaster.html">Illuminate\\Contracts\\Broadcasting\\Broadcaster</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>Bus</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Contracts/Bus/Dispatcher.html">Illuminate\\Contracts\\Bus\\Dispatcher</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>Cache</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Cache/CacheManager.html">Illuminate\\Cache\\CacheManager</router-link></td>\n<td><code>cache</code></td>\n</tr>\n<tr>\n<td>Cache (Instance)</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Cache/Repository.html">Illuminate\\Cache\\Repository</router-link></td>\n<td><code>cache.store</code></td>\n</tr>\n<tr>\n<td>Config</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Config/Repository.html">Illuminate\\Config\\Repository</router-link></td>\n<td><code>config</code></td>\n</tr>\n<tr>\n<td>Cookie</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Cookie/CookieJar.html">Illuminate\\Cookie\\CookieJar</router-link></td>\n<td><code>cookie</code></td>\n</tr>\n<tr>\n<td>Crypt</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Encryption/Encrypter.html">Illuminate\\Encryption\\Encrypter</router-link></td>\n<td><code>encrypter</code></td>\n</tr>\n<tr>\n<td>DB</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Database/DatabaseManager.html">Illuminate\\Database\\DatabaseManager</router-link></td>\n<td><code>db</code></td>\n</tr>\n<tr>\n<td>DB (Instance)</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Database/Connection.html">Illuminate\\Database\\Connection</router-link></td>\n<td><code>db.connection</code></td>\n</tr>\n<tr>\n<td>Event</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Events/Dispatcher.html">Illuminate\\Events\\Dispatcher</router-link></td>\n<td><code>events</code></td>\n</tr>\n<tr>\n<td>File</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Filesystem/Filesystem.html">Illuminate\\Filesystem\\Filesystem</router-link></td>\n<td><code>files</code></td>\n</tr>\n<tr>\n<td>Gate</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Contracts/Auth/Access/Gate.html">Illuminate\\Contracts\\Auth\\Access\\Gate</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>Hash</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Contracts/Hashing/Hasher.html">Illuminate\\Contracts\\Hashing\\Hasher</router-link></td>\n<td><code>hash</code></td>\n</tr>\n<tr>\n<td>Lang</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Translation/Translator.html">Illuminate\\Translation\\Translator</router-link></td>\n<td><code>translator</code></td>\n</tr>\n<tr>\n<td>Log</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Log/LogManager.html">Illuminate\\Log\\LogManager</router-link></td>\n<td><code>log</code></td>\n</tr>\n<tr>\n<td>Mail</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Mail/Mailer.html">Illuminate\\Mail\\Mailer</router-link></td>\n<td><code>mailer</code></td>\n</tr>\n<tr>\n<td>Notification</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Notifications/ChannelManager.html">Illuminate\\Notifications\\ChannelManager</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>Password</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Auth/Passwords/PasswordBrokerManager.html">Illuminate\\Auth\\Passwords\\PasswordBrokerManager</router-link></td>\n<td><code>auth.password</code></td>\n</tr>\n<tr>\n<td>Password (Instance)</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Auth/Passwords/PasswordBroker.html">Illuminate\\Auth\\Passwords\\PasswordBroker</router-link></td>\n<td><code>auth.password.broker</code></td>\n</tr>\n<tr>\n<td>Queue</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Queue/QueueManager.html">Illuminate\\Queue\\QueueManager</router-link></td>\n<td><code>queue</code></td>\n</tr>\n<tr>\n<td>Queue (Instance)</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Contracts/Queue/Queue.html">Illuminate\\Contracts\\Queue\\Queue</router-link></td>\n<td><code>queue.connection</code></td>\n</tr>\n<tr>\n<td>Queue (Base Class)</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Queue/Queue.html">Illuminate\\Queue\\Queue</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>Redirect</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Routing/Redirector.html">Illuminate\\Routing\\Redirector</router-link></td>\n<td><code>redirect</code></td>\n</tr>\n<tr>\n<td>Redis</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Redis/RedisManager.html">Illuminate\\Redis\\RedisManager</router-link></td>\n<td><code>redis</code></td>\n</tr>\n<tr>\n<td>Redis (Instance)</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Redis/Connections/Connection.html">Illuminate\\Redis\\Connections\\Connection</router-link></td>\n<td><code>redis.connection</code></td>\n</tr>\n<tr>\n<td>Request</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Http/Request.html">Illuminate\\Http\\Request</router-link></td>\n<td><code>request</code></td>\n</tr>\n<tr>\n<td>Response</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Contracts/Routing/ResponseFactory.html">Illuminate\\Contracts\\Routing\\ResponseFactory</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>Response (Instance)</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Http/Response.html">Illuminate\\Http\\Response</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>Route</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Routing/Router.html">Illuminate\\Routing\\Router</router-link></td>\n<td><code>router</code></td>\n</tr>\n<tr>\n<td>Schema</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Database/Schema/Builder.html">Illuminate\\Database\\Schema\\Builder</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>Session</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Session/SessionManager.html">Illuminate\\Session\\SessionManager</router-link></td>\n<td><code>session</code></td>\n</tr>\n<tr>\n<td>Session (Instance)</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Session/Store.html">Illuminate\\Session\\Store</router-link></td>\n<td><code>session.store</code></td>\n</tr>\n<tr>\n<td>Storage</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Filesystem/FilesystemManager.html">Illuminate\\Filesystem\\FilesystemManager</router-link></td>\n<td><code>filesystem</code></td>\n</tr>\n<tr>\n<td>Storage (Instance)</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Contracts/Filesystem/Filesystem.html">Illuminate\\Contracts\\Filesystem\\Filesystem</router-link></td>\n<td><code>filesystem.disk</code></td>\n</tr>\n<tr>\n<td>URL</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Routing/UrlGenerator.html">Illuminate\\Routing\\UrlGenerator</router-link></td>\n<td><code>url</code></td>\n</tr>\n<tr>\n<td>Validator</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Validation/Factory.html">Illuminate\\Validation\\Factory</router-link></td>\n<td><code>validator</code></td>\n</tr>\n<tr>\n<td>Validator (Instance)</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/Validation/Validator.html">Illuminate\\Validation\\Validator</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>View</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/View/Factory.html">Illuminate\\View\\Factory</router-link></td>\n<td><code>view</code></td>\n</tr>\n<tr>\n<td>View (Instance)</td>\n<td><router-link to="https://laravel.com/api/{{version}}/Illuminate/View/View.html">Illuminate\\View\\View</router-link></td>\n<td>&nbsp;</td>\n</tr>\n</tbody></table>\n'},3:function(s,e){},3470:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="resetting-passwords"></a></p>\n          <h1>\n            <a href="#resetting-passwords">\n              Resetting Passwords\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#resetting-database">Database Considerations</a></li>\n<li><a href="#resetting-routing">Routing</a></li>\n<li><a href="#resetting-views">Views</a></li>\n<li><a href="#after-resetting-passwords">After Resetting Passwords</a></li>\n<li><a href="#password-customization">Customization</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><blockquote>\n<p>{tip} <strong>Want to get started fast?</strong> Install the <code>laravel/ui</code> Composer package and run <code>php artisan ui vue --auth</code> in a fresh Laravel application. After migrating your database, navigate your browser to <code>http://your-app.test/register</code> or any other URL that is assigned to your application. This single command will take care of scaffolding your entire authentication system, including resetting passwords!</p>\n</blockquote>\n<p>Most web applications provide a way for users to reset their forgotten passwords. Rather than forcing you to re-implement this on each application, Laravel provides convenient methods for sending password reminders and performing password resets.</p>\n<blockquote>\n<p>{note} Before using the password reset features of Laravel, your user must use the <code>Illuminate\\Notifications\\Notifiable</code> trait.</p>\n</blockquote>\n<p><a name="resetting-database"></a></p>\n\n          <p><a name="database-considerations"></a></p>\n          <h2>\n            <a href="#database-considerations">\n              Database Considerations\n            </a>\n          </h2><p>To get started, verify that your <code>App\\User</code> model implements the <code>Illuminate\\Contracts\\Auth\\CanResetPassword</code> contract. The <code>App\\User</code> model included with the framework already implements this interface, and uses the <code>Illuminate\\Auth\\Passwords\\CanResetPassword</code> trait to include the methods needed to implement the interface.</p>\n\n          <p><a name="generating-the-reset-token-table-migration"></a></p>\n          <h4>\n            <a href="#generating-the-reset-token-table-migration">\n              Generating The Reset Token Table Migration\n            </a>\n          </h4><p>Next, a table must be created to store the password reset tokens. The migration for this table is included with Laravel out of the box, and resides in the <code>database/migrations</code> directory. So, all you need to do is run your database migrations:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">php artisan migrate</span></code></pre>\n  <p><a name="resetting-routing"></a></p>\n\n          <p><a name="routing"></a></p>\n          <h2>\n            <a href="#routing">\n              Routing\n            </a>\n          </h2><p>Laravel includes <code>Auth\\ForgotPasswordController</code> and <code>Auth\\ResetPasswordController</code> classes that contains the logic necessary to e-mail password reset links and reset user passwords. All of the routes needed to perform password resets may be generated using the <code>laravel/ui</code> Composer package:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">composer <span class="hljs-built_in">require</span> laravel/ui <span class="hljs-comment">--dev</span>\n\nphp artisan ui vue <span class="hljs-comment">--auth</span></code></pre>\n  <p><a name="resetting-views"></a></p>\n\n          <p><a name="views"></a></p>\n          <h2>\n            <a href="#views">\n              Views\n            </a>\n          </h2><p>To generate all of the necessary view for resetting passwords, you may use the <code>laravel/ui</code> Composer package:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">composer <span class="hljs-built_in">require</span> laravel/ui <span class="hljs-comment">--dev</span>\n\nphp artisan ui vue <span class="hljs-comment">--auth</span></code></pre>\n  <p>These views are placed in <code>resources/views/auth/passwords</code>. You are free to customize them as needed for your application.</p>\n<p><a name="after-resetting-passwords"></a></p>\n\n          <p><a name="after-resetting-passwords"></a></p>\n          <h2>\n            <a href="#after-resetting-passwords">\n              After Resetting Passwords\n            </a>\n          </h2><p>Once you have defined the routes and views to reset your user&#39;s passwords, you may access the route in your browser at <code>/password/reset</code>. The <code>ForgotPasswordController</code> included with the framework already includes the logic to send the password reset link e-mails, while the <code>ResetPasswordController</code> includes the logic to reset user passwords.</p>\n<p>After a password is reset, the user will automatically be logged into the application and redirected to <code>/home</code>. You can customize the post password reset redirect location by defining a <code>redirectTo</code> property on the <code>ResetPasswordController</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">protected</span> $redirectTo = <span class="hljs-string">\'/dashboard\'</span>;</code></pre>\n  <blockquote>\n<p>{note} By default, password reset tokens expire after one hour. You may change this via the password reset <code>expire</code> option in your <code>config/auth.php</code> file.</p>\n</blockquote>\n<p><a name="password-customization"></a></p>\n\n          <p><a name="customization"></a></p>\n          <h2>\n            <a href="#customization">\n              Customization\n            </a>\n          </h2>\n          <p><a name="authentication-guard-customization"></a></p>\n          <h4>\n            <a href="#authentication-guard-customization">\n              Authentication Guard Customization\n            </a>\n          </h4><p>In your <code>auth.php</code> configuration file, you may configure multiple &quot;guards&quot;, which may be used to define authentication behavior for multiple user tables. You can customize the included <code>ResetPasswordController</code> to use the guard of your choice by overriding the <code>guard</code> method on the controller. This method should return a guard instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Auth</span>;\n\n<span class="hljs-comment">/**\n * Get the guard to be used during password reset.\n *\n * <span class="hljs-doctag">@return</span> \\Illuminate\\Contracts\\Auth\\StatefulGuard\n */</span>\n<span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">guard</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> Auth::guard(<span class="hljs-string">\'guard-name\'</span>);\n}</code></pre>\n  \n          <p><a name="password-broker-customization"></a></p>\n          <h4>\n            <a href="#password-broker-customization">\n              Password Broker Customization\n            </a>\n          </h4><p>In your <code>auth.php</code> configuration file, you may configure multiple password &quot;brokers&quot;, which may be used to reset passwords on multiple user tables. You can customize the included <code>ForgotPasswordController</code> and <code>ResetPasswordController</code> to use the broker of your choice by overriding the <code>broker</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Password</span>;\n\n<span class="hljs-comment">/**\n * Get the broker to be used during password reset.\n *\n * <span class="hljs-doctag">@return</span> PasswordBroker\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">broker</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> Password::broker(<span class="hljs-string">\'name\'</span>);\n}</code></pre>\n  \n          <p><a name="reset-email-customization"></a></p>\n          <h4>\n            <a href="#reset-email-customization">\n              Reset Email Customization\n            </a>\n          </h4><p>You may easily modify the notification class used to send the password reset link to the user. To get started, override the <code>sendPasswordResetNotification</code> method on your <code>User</code> model. Within this method, you may send the notification using any notification class you choose. The password reset <code>$token</code> is the first argument received by the method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Send the password reset notification.\n *\n * <span class="hljs-doctag">@param</span>  string  $token\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sendPasswordResetNotification</span><span class="hljs-params">($token)</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;notify(<span class="hljs-keyword">new</span> ResetPasswordNotification($token));\n}</code></pre>\n  '},"34ad":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="database-getting-started"></a></p>\n          <h1>\n            <a href="#database-getting-started">\n              Database: Getting Started\n            </a>\n          </h1><ul>\n<li><a href="#running-queries">Running Raw SQL Queries</a></li>\n<li><a href="#listening-for-query-events">Listening For Query Events</a></li>\n<li><a href="#database-transactions">Database Transactions</a></li>\n</ul>\n<p><a name="running-queries"></a></p>\n\n          <p><a name="running-raw-sql-queries"></a></p>\n          <h2>\n            <a href="#running-raw-sql-queries">\n              Running Raw SQL Queries\n            </a>\n          </h2><p>Once you have configured your database connection, you may run queries using the <code>DB</code> facade. The <code>DB</code> facade provides methods for each type of query: <code>select</code>, <code>update</code>, <code>insert</code>, <code>delete</code>, and <code>statement</code>.</p>\n\n          <p><a name="running-a-select-query"></a></p>\n          <h4>\n            <a href="#running-a-select-query">\n              Running A Select Query\n            </a>\n          </h4><p>To run a basic query, you may use the <code>select</code> method on the <code>DB</code> facade:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiR1c2VyID0gVXNlcjo6Y3JlYXRlKFtcbiAgJ25hbWUnID0+ICdNYXJjZWwnLFxuICAnZW1haWwnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAncGFzc3dvcmQnID0+ICd0ZXN0Jyxcbl0pO1xuXG5EQjo6c2VsZWN0KCdzZWxlY3QgKiBmcm9tIHVzZXJzIHdoZXJlIG5hbWUgPSA/JywgWydNYXJjZWwnXSk7XG4iLCJoYXNoIjoiZGF0YWJhc2UtcnVubmluZy1hLXNlbGVjdC1xdWVyeSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">Controller</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">DB</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Show a list of all of the application\'s users.\n     *\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">()</span>\n    </span>{\n        $users = DB::select(<span class="hljs-string">\'select * from users where active = ?\'</span>, [<span class="hljs-number">1</span>]);\n\n        <span class="hljs-keyword">return</span> view(<span class="hljs-string">\'user.index\'</span>, [<span class="hljs-string">\'users\'</span> =&gt; $users]);\n    }\n}</span></code></pre>\n  <p>The first argument passed to the <code>select</code> method is the raw SQL query, while the second argument is any parameter bindings that need to be bound to the query. Typically, these are the values of the <code>where</code> clause constraints. Parameter binding provides protection against SQL injection.</p>\n<p>The <code>select</code> method will always return an <code>array</code> of results. Each result within the array will be a PHP <code>stdClass</code> object, allowing you to access the values of the results:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">foreach</span> ($users <span class="hljs-keyword">as</span> $user) {\n    <span class="hljs-keyword">echo</span> $user-&gt;name;\n}</code></pre>\n  \n          <p><a name="using-named-bindings"></a></p>\n          <h4>\n            <a href="#using-named-bindings">\n              Using Named Bindings\n            </a>\n          </h4><p>Instead of using <code>?</code> to represent your parameter bindings, you may execute a query using named bindings:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiR1c2VyID0gVXNlcjo6Y3JlYXRlKFtcbiAgJ25hbWUnID0+ICdNYXJjZWwnLFxuICAnZW1haWwnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAncGFzc3dvcmQnID0+ICd0ZXN0Jyxcbl0pO1xuXG5EQjo6c2VsZWN0KCdzZWxlY3QgKiBmcm9tIHVzZXJzIHdoZXJlIGlkID0gOmlkJywgWydpZCcgPT4gMV0pO1xuIiwiaGFzaCI6ImRhdGFiYXNlLXVzaW5nLW5hbWVkLWJpbmRpbmdzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$results = DB::select(<span class="hljs-string">\'select * from users where id = :id\'</span>, [<span class="hljs-string">\'id\'</span> =&gt; <span class="hljs-number">1</span>]);</code></pre>\n  \n          <p><a name="running-an-insert-statement"></a></p>\n          <h4>\n            <a href="#running-an-insert-statement">\n              Running An Insert Statement\n            </a>\n          </h4><p>To execute an <code>insert</code> statement, you may use the <code>insert</code> method on the <code>DB</code> facade. Like <code>select</code>, this method takes the raw SQL query as its first argument and bindings as its second argument:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IkRCOjppbnNlcnQoJ2luc2VydCBpbnRvIHVzZXJzIChuYW1lLCBlbWFpbCwgcGFzc3dvcmQpIHZhbHVlcyAoPywgPywgPyknLCBbJ01hcmNlbCcsICdtYXJjZWxAYmV5b25kY28uZGUnLCAndGVzdCddKTtcbiIsImhhc2giOiJkYXRhYmFzZS1ydW5uaW5nLWFuLWluc2VydC1zdGF0ZW1lbnQifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">DB::<span class="hljs-keyword">insert</span>(<span class="hljs-string">\'insert into users (id, name) values (?, ?)\'</span>, [<span class="hljs-number">1</span>, <span class="hljs-string">\'Dayle\'</span>]);</code></pre>\n  \n          <p><a name="running-an-update-statement"></a></p>\n          <h4>\n            <a href="#running-an-update-statement">\n              Running An Update Statement\n            </a>\n          </h4><p>The <code>update</code> method should be used to update existing records in the database. The number of rows affected by the statement will be returned:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$affected</span> = <span class="hljs-keyword">DB</span>::<span class="hljs-keyword">update</span>(\'<span class="hljs-keyword">update</span> users <span class="hljs-keyword">set</span> votes = 100 where name = ?\', [\'John\']);</code></pre>\n  \n          <p><a name="running-a-delete-statement"></a></p>\n          <h4>\n            <a href="#running-a-delete-statement">\n              Running A Delete Statement\n            </a>\n          </h4><p>The <code>delete</code> method should be used to delete records from the database. Like <code>update</code>, the number of rows affected will be returned:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IkRCOjppbnNlcnQoJ2luc2VydCBpbnRvIHVzZXJzIChuYW1lLCBlbWFpbCwgcGFzc3dvcmQpIHZhbHVlcyAoPywgPywgPyknLCBbJ01hcmNlbCcsICdtYXJjZWxAYmV5b25kY28uZGUnLCAndGVzdCddKTtcblxuREI6OmRlbGV0ZSgnZGVsZXRlIGZyb20gdXNlcnMnKTtcblxuREI6OnNlbGVjdCgnc2VsZWN0ICogZnJvbSB1c2VycycpO1xuIiwiaGFzaCI6ImRhdGFiYXNlLXJ1bm5pbmctYS1kZWxldGUtc3RhdGVtZW50In0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$deleted</span> = DB::<span class="hljs-keyword">delete</span>(<span class="hljs-string">\'delete from users\'</span>);</code></pre>\n  \n          <p><a name="running-a-general-statement"></a></p>\n          <h4>\n            <a href="#running-a-general-statement">\n              Running A General Statement\n            </a>\n          </h4><p>Some database statements do not return any value. For these types of operations, you may use the <code>statement</code> method on the <code>DB</code> facade:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">DB::statement(\'<span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">users</span><span class="hljs-string">\');</span></code></pre>\n  <p><a name="listening-for-query-events"></a></p>\n\n          <p><a name="listening-for-query-events"></a></p>\n          <h2>\n            <a href="#listening-for-query-events">\n              Listening For Query Events\n            </a>\n          </h2><p>If you would like to receive each SQL query executed by your application, you may use the <code>listen</code> method. This method is useful for logging queries or debugging. You may register your query listener in a <router-link to="/docs/providers">service provider</router-link>:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IkRCOjpsaXN0ZW4oZnVuY3Rpb24gKCRxdWVyeSkge1xuICAgIGVjaG8gJHF1ZXJ5LT5zcWwgLiBQSFBfRU9MO1xufSk7XG5cbkRCOjppbnNlcnQoJ2luc2VydCBpbnRvIHVzZXJzIChuYW1lLCBlbWFpbCwgcGFzc3dvcmQpIHZhbHVlcyAoPywgPywgPyknLCBbJ01hcmNlbCcsICdtYXJjZWxAYmV5b25kY28uZGUnLCAndGVzdCddKTtcbiIsImhhc2giOiJkYXRhYmFzZS1saXN0ZW5pbmctZm9yLXF1ZXJ5LWV2ZW50cyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Providers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">DB</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">ServiceProvider</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Register any application services.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-comment">//</span>\n    }\n\n    <span class="hljs-comment">/**\n     * Bootstrap any application services.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n    </span>{\n        DB::listen(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($query)</span> </span>{\n            <span class="hljs-comment">// $query-&gt;sql</span>\n            <span class="hljs-comment">// $query-&gt;bindings</span>\n            <span class="hljs-comment">// $query-&gt;time</span>\n        });\n    }\n}</span></code></pre>\n  <p><a name="database-transactions"></a></p>\n\n          <p><a name="database-transactions"></a></p>\n          <h2>\n            <a href="#database-transactions">\n              Database Transactions\n            </a>\n          </h2><p>You may use the <code>transaction</code> method on the <code>DB</code> facade to run a set of operations within a database transaction. If an exception is thrown within the transaction <code>Closure</code>, the transaction will automatically be rolled back. If the <code>Closure</code> executes successfully, the transaction will automatically be committed. You don&#39;t need to worry about manually rolling back or committing while using the <code>transaction</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">DB</span><span class="hljs-selector-pseudo">::transaction(function</span> () {\n    <span class="hljs-attribute">DB</span>::<span class="hljs-built_in">table</span>(<span class="hljs-string">\'users\'</span>)<span class="hljs-built_in">-</span>&gt;<span class="hljs-built_in">update</span>([<span class="hljs-string">\'votes\'</span> =&gt; 1]);\n\n    <span class="hljs-attribute">DB</span>::<span class="hljs-built_in">table</span>(<span class="hljs-string">\'posts\'</span>)<span class="hljs-built_in">-</span>&gt;<span class="hljs-built_in">delete</span>();\n});</code></pre>\n  \n          <p><a name="handling-deadlocks"></a></p>\n          <h4>\n            <a href="#handling-deadlocks">\n              Handling Deadlocks\n            </a>\n          </h4><p>The <code>transaction</code> method accepts an optional second argument which defines the number of times a transaction should be reattempted when a deadlock occurs. Once these attempts have been exhausted, an exception will be thrown:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">DB</span><span class="hljs-selector-pseudo">::transaction(function</span> () {\n    <span class="hljs-attribute">DB</span>::<span class="hljs-built_in">table</span>(<span class="hljs-string">\'users\'</span>)<span class="hljs-built_in">-</span>&gt;<span class="hljs-built_in">update</span>([<span class="hljs-string">\'votes\'</span> =&gt; 1]);\n\n    <span class="hljs-attribute">DB</span>::<span class="hljs-built_in">table</span>(<span class="hljs-string">\'posts\'</span>)<span class="hljs-built_in">-</span>&gt;<span class="hljs-built_in">delete</span>();\n}, 5);</code></pre>\n  \n          <p><a name="manually-using-transactions"></a></p>\n          <h4>\n            <a href="#manually-using-transactions">\n              Manually Using Transactions\n            </a>\n          </h4><p>If you would like to begin a transaction manually and have complete control over rollbacks and commits, you may use the <code>beginTransaction</code> method on the <code>DB</code> facade:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">DB::<span class="hljs-keyword">begin</span><span class="hljs-constructor">Transaction()</span>;</code></pre>\n  <p>You can rollback the transaction via the <code>rollBack</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">DB::<span class="hljs-keyword">rollBack</span>();</code></pre>\n  <p>Lastly, you can commit a transaction via the <code>commit</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">DB::<span class="hljs-keyword">commit</span>();</code></pre>\n  <blockquote>\n<p>{tip} The <code>DB</code> facade&#39;s transaction methods control the transactions for both the <router-link to="/docs/{{version}}/queries">query builder</router-link> and <router-link to="/docs/{{version}}/eloquent">Eloquent ORM</router-link>.</p>\n</blockquote>\n'},"38ec":function(s,e,a){},"3ba3":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="events"></a></p>\n          <h1>\n            <a href="#events">\n              Events\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#registering-events-and-listeners">Registering Events &amp; Listeners</a><ul>\n<li><a href="#generating-events-and-listeners">Generating Events &amp; Listeners</a></li>\n<li><a href="#manually-registering-events">Manually Registering Events</a></li>\n<li><a href="#event-discovery">Event Discovery</a></li>\n</ul>\n</li>\n<li><a href="#defining-events">Defining Events</a></li>\n<li><a href="#defining-listeners">Defining Listeners</a></li>\n<li><a href="#queued-event-listeners">Queued Event Listeners</a><ul>\n<li><a href="#manually-accessing-the-queue">Manually Accessing The Queue</a></li>\n<li><a href="#handling-failed-jobs">Handling Failed Jobs</a></li>\n</ul>\n</li>\n<li><a href="#dispatching-events">Dispatching Events</a></li>\n<li><a href="#event-subscribers">Event Subscribers</a><ul>\n<li><a href="#writing-event-subscribers">Writing Event Subscribers</a></li>\n<li><a href="#registering-event-subscribers">Registering Event Subscribers</a></li>\n</ul>\n</li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Laravel&#39;s events provide a simple observer implementation, allowing you to subscribe and listen for various events that occur in your application. Event classes are typically stored in the <code>app/Events</code> directory, while their listeners are stored in <code>app/Listeners</code>. Don&#39;t worry if you don&#39;t see these directories in your application, since they will be created for you as you generate events and listeners using Artisan console commands.</p>\n<p>Events serve as a great way to decouple various aspects of your application, since a single event can have multiple listeners that do not depend on each other. For example, you may wish to send a Slack notification to your user each time an order has shipped. Instead of coupling your order processing code to your Slack notification code, you can raise an <code>OrderShipped</code> event, which a listener can receive and transform into a Slack notification.</p>\n<p><a name="registering-events-and-listeners"></a></p>\n\n          <p><a name="registering-events-amp-listeners"></a></p>\n          <h2>\n            <a href="#registering-events-amp-listeners">\n              Registering Events &amp; Listeners\n            </a>\n          </h2><p>The <code>EventServiceProvider</code> included with your Laravel application provides a convenient place to register all of your application&#39;s event listeners. The <code>listen</code> property contains an array of all events (keys) and their listeners (values). You may add as many events to this array as your application requires. For example, let&#39;s add a <code>OrderShipped</code> event:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">/**\n * The event listener mappings for the application.\n *\n * @var<span class="hljs-built_in"> array\n</span> */<span class="hljs-keyword">\nprotected</span> $listen = [\n    \'App\\Events\\OrderShipped\' =&gt; [\n        \'App\\Listeners\\SendShipmentNotification\',\n    ],\n];</code></pre>\n  <p><a name="generating-events-and-listeners"></a></p>\n\n          <p><a name="generating-events-amp-listeners"></a></p>\n          <h3>\n            <a href="#generating-events-amp-listeners">\n              Generating Events &amp; Listeners\n            </a>\n          </h3><p>Of course, manually creating the files for each event and listener is cumbersome. Instead, add listeners and events to your <code>EventServiceProvider</code> and use the <code>event:generate</code> command. This command will generate any events or listeners that are listed in your <code>EventServiceProvider</code>. Events and listeners that already exist will be left untouched:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan <span class="hljs-keyword">event</span>:<span class="hljs-keyword">generate</span></code></pre>\n  <p><a name="manually-registering-events"></a></p>\n\n          <p><a name="manually-registering-events"></a></p>\n          <h3>\n            <a href="#manually-registering-events">\n              Manually Registering Events\n            </a>\n          </h3><p>Typically, events should be registered via the <code>EventServiceProvider</code> <code>$listen</code> array; however, you may also register Closure based events manually in the <code>boot</code> method of your <code>EventServiceProvider</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Register any other events for your application.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">parent</span>::boot();\n\n    Event::listen(<span class="hljs-string">\'event.name\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($foo, $bar)</span> </span>{\n        <span class="hljs-comment">//</span>\n    });\n}</code></pre>\n  \n          <p><a name="wildcard-event-listeners"></a></p>\n          <h4>\n            <a href="#wildcard-event-listeners">\n              Wildcard Event Listeners\n            </a>\n          </h4><p>You may even register listeners using the <code>*</code> as a wildcard parameter, allowing you to catch multiple events on the same listener. Wildcard listeners receive the event name as their first argument, and the entire event data array as their second argument:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Event::listen(\'event.*\', function ($eventName,<span class="hljs-built_in"> array </span>$data) {\n    //\n});</code></pre>\n  <p><a name="event-discovery"></a></p>\n\n          <p><a name="event-discovery"></a></p>\n          <h3>\n            <a href="#event-discovery">\n              Event Discovery\n            </a>\n          </h3><blockquote>\n<p>{note} Event Discovery is available for Laravel 5.8.9 or later.</p>\n</blockquote>\n<p>Instead of registering events and listeners manually in the <code>$listen</code> array of the <code>EventServiceProvider</code>, you can enable automatic event discovery. When event discovery is enabled, Laravel will automatically find and register your events and listeners by scanning your application&#39;s <code>Listeners</code> directory. In addition, any explicitly defined events listed in the <code>EventServiceProvider</code> will still be registered.</p>\n<p>Laravel finds event listeners by scanning the listener classes using reflection. When Laravel finds any listener class method that begins with <code>handle</code>, Laravel will register those methods as event listeners for the event that is type-hinted in the method&#39;s signature:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Events</span>\\<span class="hljs-title">PodcastProcessed</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SendPodcastProcessedNotification</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Handle the given event.\n     *\n     * <span class="hljs-doctag">@param</span>  \\App\\Events\\PodcastProcessed\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">(PodcastProcessed $event)</span>\n    </span>{\n        <span class="hljs-comment">//</span>\n    }\n}</code></pre>\n  <p>Event discovery is disabled by default, but you can enable it by overriding the <code>shouldDiscoverEvents</code> method of your application&#39;s <code>EventServiceProvider</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Determine if events and listeners should be automatically discovered.\n *\n * <span class="hljs-doctag">@return</span> bool\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shouldDiscoverEvents</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;\n}</code></pre>\n  <p>By default, all listeners within your application&#39;s Listeners directory will be scanned. If you would like to define additional directories to scan, you may override the <code>discoverEventsWithin</code> method in your <code>EventServiceProvider</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the listener directories that should be used to discover events.\n *\n * <span class="hljs-doctag">@return</span> array\n */</span>\n<span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">discoverEventsWithin</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> [\n        <span class="hljs-keyword">$this</span>-&gt;app-&gt;path(<span class="hljs-string">\'Listeners\'</span>),\n    ];\n}</code></pre>\n  <p>In production, you likely do not want the framework to scan all of your listeners on every request. Therefore, during your deployment process, you should run the <code>event:cache</code> Artisan command to cache a manifest of all of your application&#39;s events and listeners. This manifest will be used by the framework to speed up the event registration process. The <code>event:clear</code> command may be used to destroy the cache.</p>\n<blockquote>\n<p>{tip} The <code>event:list</code> command may be used to display a list of all events and listeners registered by your application.</p>\n</blockquote>\n<p><a name="defining-events"></a></p>\n\n          <p><a name="defining-events"></a></p>\n          <h2>\n            <a href="#defining-events">\n              Defining Events\n            </a>\n          </h2><p>An event class is a data container which holds the information related to the event. For example, let&#39;s assume our generated <code>OrderShipped</code> event receives an <router-link to="/docs/{{version}}/eloquent">Eloquent ORM</router-link> object:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Events</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Order</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Queue</span>\\<span class="hljs-title">SerializesModels</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderShipped</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">SerializesModels</span>;\n\n    <span class="hljs-keyword">public</span> $order;\n\n    <span class="hljs-comment">/**\n     * Create a new event instance.\n     *\n     * <span class="hljs-doctag">@param</span>  \\App\\Order  $order\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(Order $order)</span>\n    </span>{\n        <span class="hljs-keyword">$this</span>-&gt;order = $order;\n    }\n}</span></code></pre>\n  <p>As you can see, this event class contains no logic. It is a container for the <code>Order</code> instance that was purchased. The <code>SerializesModels</code> trait used by the event will gracefully serialize any Eloquent models if the event object is serialized using PHP&#39;s <code>serialize</code> function.</p>\n<p><a name="defining-listeners"></a></p>\n\n          <p><a name="defining-listeners"></a></p>\n          <h2>\n            <a href="#defining-listeners">\n              Defining Listeners\n            </a>\n          </h2><p>Next, let&#39;s take a look at the listener for our example event. Event listeners receive the event instance in their <code>handle</code> method. The <code>event:generate</code> command will automatically import the proper event class and type-hint the event on the <code>handle</code> method. Within the <code>handle</code> method, you may perform any actions necessary to respond to the event:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Listeners</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Events</span>\\<span class="hljs-title">OrderShipped</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SendShipmentNotification</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Create the event listener.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-comment">//</span>\n    }\n\n    <span class="hljs-comment">/**\n     * Handle the event.\n     *\n     * <span class="hljs-doctag">@param</span>  \\App\\Events\\OrderShipped  $event\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">(OrderShipped $event)</span>\n    </span>{\n        <span class="hljs-comment">// Access the order using $event-&gt;order...</span>\n    }\n}</span></code></pre>\n  <blockquote>\n<p>{tip} Your event listeners may also type-hint any dependencies they need on their constructors. All event listeners are resolved via the Laravel <router-link to="/docs/{{version}}/container">service container</router-link>, so dependencies will be injected automatically.</p>\n</blockquote>\n\n          <p><a name="stopping-the-propagation-of-an-event"></a></p>\n          <h4>\n            <a href="#stopping-the-propagation-of-an-event">\n              Stopping The Propagation Of An Event\n            </a>\n          </h4><p>Sometimes, you may wish to stop the propagation of an event to other listeners. You may do so by returning <code>false</code> from your listener&#39;s <code>handle</code> method.</p>\n<p><a name="queued-event-listeners"></a></p>\n\n          <p><a name="queued-event-listeners"></a></p>\n          <h2>\n            <a href="#queued-event-listeners">\n              Queued Event Listeners\n            </a>\n          </h2><p>Queueing listeners can be beneficial if your listener is going to perform a slow task such as sending an e-mail or making an HTTP request. Before getting started with queued listeners, make sure to <router-link to="/docs/{{version}}/queues">configure your queue</router-link> and start a queue listener on your server or local development environment.</p>\n<p>To specify that a listener should be queued, add the <code>ShouldQueue</code> interface to the listener class. Listeners generated by the <code>event:generate</code> Artisan command already have this interface imported into the current namespace, so you can use it immediately:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Listeners</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Events</span>\\<span class="hljs-title">OrderShipped</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">Queue</span>\\<span class="hljs-title">ShouldQueue</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SendShipmentNotification</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ShouldQueue</span>\n</span>{\n    <span class="hljs-comment">//</span>\n}</span></code></pre>\n  <p>That&#39;s it! Now, when this listener is called for an event, it will be automatically queued by the event dispatcher using Laravel&#39;s <router-link to="/docs/{{version}}/queues">queue system</router-link>. If no exceptions are thrown when the listener is executed by the queue, the queued job will automatically be deleted after it has finished processing.</p>\n\n          <p><a name="customizing-the-queue-connection-amp-queue-name"></a></p>\n          <h4>\n            <a href="#customizing-the-queue-connection-amp-queue-name">\n              Customizing The Queue Connection &amp; Queue Name\n            </a>\n          </h4><p>If you would like to customize the queue connection, queue name, or queue delay time of an event listener, you may define the <code>$connection</code>, <code>$queue</code>, or <code>$delay</code> properties on your listener class:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Listeners</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Events</span>\\<span class="hljs-title">OrderShipped</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">Queue</span>\\<span class="hljs-title">ShouldQueue</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SendShipmentNotification</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ShouldQueue</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The name of the connection the job should be sent to.\n     *\n     * <span class="hljs-doctag">@var</span> string|null\n     */</span>\n    <span class="hljs-keyword">public</span> $connection = <span class="hljs-string">\'sqs\'</span>;\n\n    <span class="hljs-comment">/**\n     * The name of the queue the job should be sent to.\n     *\n     * <span class="hljs-doctag">@var</span> string|null\n     */</span>\n    <span class="hljs-keyword">public</span> $queue = <span class="hljs-string">\'listeners\'</span>;\n\n    <span class="hljs-comment">/**\n     * The time (seconds) before the job should be processed.\n     *\n     * <span class="hljs-doctag">@var</span> int\n     */</span>\n    <span class="hljs-keyword">public</span> $delay = <span class="hljs-number">60</span>;\n}</span></code></pre>\n  \n          <p><a name="conditionally-queueing-listeners"></a></p>\n          <h4>\n            <a href="#conditionally-queueing-listeners">\n              Conditionally Queueing Listeners\n            </a>\n          </h4><p>Sometimes, you may need to determine whether a listener should be queued based on some data that&#39;s only available at runtime. To accomplish this, a <code>shouldQueue</code> method may be added to a listener to determine whether the listener should be queued and executed synchronously:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Listeners</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Events</span>\\<span class="hljs-title">OrderPlaced</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">Queue</span>\\<span class="hljs-title">ShouldQueue</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RewardGiftCard</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ShouldQueue</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Reward a gift card to the customer.\n     *\n     * <span class="hljs-doctag">@param</span>  \\App\\Events\\OrderPlaced  $event\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">(OrderPlaced $event)</span>\n    </span>{\n        <span class="hljs-comment">//</span>\n    }\n\n    <span class="hljs-comment">/**\n     * Determine whether the listener should be queued.\n     *\n     * <span class="hljs-doctag">@param</span>  \\App\\Events\\OrderPlaced  $event\n     * <span class="hljs-doctag">@return</span> bool\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shouldQueue</span><span class="hljs-params">(OrderPlaced $event)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> $event-&gt;order-&gt;subtotal &gt;= <span class="hljs-number">5000</span>;\n    }\n}</span></code></pre>\n  <p><a name="manually-accessing-the-queue"></a></p>\n\n          <p><a name="manually-accessing-the-queue"></a></p>\n          <h3>\n            <a href="#manually-accessing-the-queue">\n              Manually Accessing The Queue\n            </a>\n          </h3><p>If you need to manually access the listener&#39;s underlying queue job&#39;s <code>delete</code> and <code>release</code> methods, you may do so using the <code>Illuminate\\Queue\\InteractsWithQueue</code> trait. This trait is imported by default on generated listeners and provides access to these methods:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Listeners</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Events</span>\\<span class="hljs-title">OrderShipped</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">Queue</span>\\<span class="hljs-title">ShouldQueue</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Queue</span>\\<span class="hljs-title">InteractsWithQueue</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SendShipmentNotification</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ShouldQueue</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">InteractsWithQueue</span>;\n\n    <span class="hljs-comment">/**\n     * Handle the event.\n     *\n     * <span class="hljs-doctag">@param</span>  \\App\\Events\\OrderShipped  $event\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">(OrderShipped $event)</span>\n    </span>{\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">true</span>) {\n            <span class="hljs-keyword">$this</span>-&gt;release(<span class="hljs-number">30</span>);\n        }\n    }\n}</span></code></pre>\n  <p><a name="handling-failed-jobs"></a></p>\n\n          <p><a name="handling-failed-jobs"></a></p>\n          <h3>\n            <a href="#handling-failed-jobs">\n              Handling Failed Jobs\n            </a>\n          </h3><p>Sometimes your queued event listeners may fail. If queued listener exceeds the maximum number of attempts as defined by your queue worker, the <code>failed</code> method will be called on your listener. The <code>failed</code> method receives the event instance and the exception that caused the failure:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Listeners</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Events</span>\\<span class="hljs-title">OrderShipped</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">Queue</span>\\<span class="hljs-title">ShouldQueue</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Queue</span>\\<span class="hljs-title">InteractsWithQueue</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SendShipmentNotification</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ShouldQueue</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">InteractsWithQueue</span>;\n\n    <span class="hljs-comment">/**\n     * Handle the event.\n     *\n     * <span class="hljs-doctag">@param</span>  \\App\\Events\\OrderShipped  $event\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">(OrderShipped $event)</span>\n    </span>{\n        <span class="hljs-comment">//</span>\n    }\n\n    <span class="hljs-comment">/**\n     * Handle a job failure.\n     *\n     * <span class="hljs-doctag">@param</span>  \\App\\Events\\OrderShipped  $event\n     * <span class="hljs-doctag">@param</span>  \\Exception  $exception\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">failed</span><span class="hljs-params">(OrderShipped $event, $exception)</span>\n    </span>{\n        <span class="hljs-comment">//</span>\n    }\n}</span></code></pre>\n  <p><a name="dispatching-events"></a></p>\n\n          <p><a name="dispatching-events"></a></p>\n          <h2>\n            <a href="#dispatching-events">\n              Dispatching Events\n            </a>\n          </h2><p>To dispatch an event, you may pass an instance of the event to the <code>event</code> helper. The helper will dispatch the event to all of its registered listeners. Since the <code>event</code> helper is globally available, you may call it from anywhere in your application:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Events</span>\\<span class="hljs-title">OrderShipped</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">Controller</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Order</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Ship the given order.\n     *\n     * <span class="hljs-doctag">@param</span>  int  $orderId\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ship</span><span class="hljs-params">($orderId)</span>\n    </span>{\n        $order = Order::findOrFail($orderId);\n\n        <span class="hljs-comment">// Order shipment logic...</span>\n\n        event(<span class="hljs-keyword">new</span> OrderShipped($order));\n    }\n}</span></code></pre>\n  <blockquote>\n<p>{tip} When testing, it can be helpful to assert that certain events were dispatched without actually triggering their listeners. Laravel&#39;s <router-link to="/docs/{{version}}/mocking#event-fake">built-in testing helpers</router-link> makes it a cinch.</p>\n</blockquote>\n<p><a name="event-subscribers"></a></p>\n\n          <p><a name="event-subscribers"></a></p>\n          <h2>\n            <a href="#event-subscribers">\n              Event Subscribers\n            </a>\n          </h2><p><a name="writing-event-subscribers"></a></p>\n\n          <p><a name="writing-event-subscribers"></a></p>\n          <h3>\n            <a href="#writing-event-subscribers">\n              Writing Event Subscribers\n            </a>\n          </h3><p>Event subscribers are classes that may subscribe to multiple events from within the class itself, allowing you to define several event handlers within a single class. Subscribers should define a <code>subscribe</code> method, which will be passed an event dispatcher instance. You may call the <code>listen</code> method on the given dispatcher to register event listeners:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Listeners</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserEventSubscriber</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Handle user login events.\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleUserLogin</span><span class="hljs-params">($event)</span> </span>{}\n\n    <span class="hljs-comment">/**\n     * Handle user logout events.\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleUserLogout</span><span class="hljs-params">($event)</span> </span>{}\n\n    <span class="hljs-comment">/**\n     * Register the listeners for the subscriber.\n     *\n     * <span class="hljs-doctag">@param</span>  \\Illuminate\\Events\\Dispatcher  $events\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">subscribe</span><span class="hljs-params">($events)</span>\n    </span>{\n        $events-&gt;listen(\n            <span class="hljs-string">\'Illuminate\\Auth\\Events\\Login\'</span>,\n            <span class="hljs-string">\'App\\Listeners\\UserEventSubscriber@handleUserLogin\'</span>\n        );\n\n        $events-&gt;listen(\n            <span class="hljs-string">\'Illuminate\\Auth\\Events\\Logout\'</span>,\n            <span class="hljs-string">\'App\\Listeners\\UserEventSubscriber@handleUserLogout\'</span>\n        );\n    }\n}</span></code></pre>\n  <p><a name="registering-event-subscribers"></a></p>\n\n          <p><a name="registering-event-subscribers"></a></p>\n          <h3>\n            <a href="#registering-event-subscribers">\n              Registering Event Subscribers\n            </a>\n          </h3><p>After writing the subscriber, you are ready to register it with the event dispatcher. You may register subscribers using the <code>$subscribe</code> property on the <code>EventServiceProvider</code>. For example, let&#39;s add the <code>UserEventSubscriber</code> to the list:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Providers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Providers</span>\\<span class="hljs-title">EventServiceProvider</span> <span class="hljs-title">as</span> <span class="hljs-title">ServiceProvider</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The event listener mappings for the application.\n     *\n     * <span class="hljs-doctag">@var</span> array\n     */</span>\n    <span class="hljs-keyword">protected</span> $listen = [\n        <span class="hljs-comment">//</span>\n    ];\n\n    <span class="hljs-comment">/**\n     * The subscriber classes to register.\n     *\n     * <span class="hljs-doctag">@var</span> array\n     */</span>\n    <span class="hljs-keyword">protected</span> $subscribe = [\n        <span class="hljs-string">\'App\\Listeners\\UserEventSubscriber\'</span>,\n    ];\n}</span></code></pre>\n  '},"3bdc":function(s,e,a){"use strict";var n=a("70e9"),t=a.n(n);t.a},"3f4f":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="database-migrations"></a></p>\n          <h1>\n            <a href="#database-migrations">\n              Database: Migrations\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#generating-migrations">Generating Migrations</a></li>\n<li><a href="#migration-structure">Migration Structure</a></li>\n<li><a href="#running-migrations">Running Migrations</a><ul>\n<li><a href="#rolling-back-migrations">Rolling Back Migrations</a></li>\n</ul>\n</li>\n<li><a href="#tables">Tables</a><ul>\n<li><a href="#creating-tables">Creating Tables</a></li>\n<li><a href="#renaming-and-dropping-tables">Renaming / Dropping Tables</a></li>\n</ul>\n</li>\n<li><a href="#columns">Columns</a><ul>\n<li><a href="#creating-columns">Creating Columns</a></li>\n<li><a href="#column-modifiers">Column Modifiers</a></li>\n<li><a href="#modifying-columns">Modifying Columns</a></li>\n<li><a href="#dropping-columns">Dropping Columns</a></li>\n</ul>\n</li>\n<li><a href="#indexes">Indexes</a><ul>\n<li><a href="#creating-indexes">Creating Indexes</a></li>\n<li><a href="#renaming-indexes">Renaming Indexes</a></li>\n<li><a href="#dropping-indexes">Dropping Indexes</a></li>\n<li><a href="#foreign-key-constraints">Foreign Key Constraints</a></li>\n</ul>\n</li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Migrations are like version control for your database, allowing your team to easily modify and share the application&#39;s database schema. Migrations are typically paired with Laravel&#39;s schema builder to easily build your application&#39;s database schema. If you have ever had to tell a teammate to manually add a column to their local database schema, you&#39;ve faced the problem that database migrations solve.</p>\n<p>The Laravel <code>Schema</code> <router-link to="/docs/{{version}}/facades">facade</router-link> provides database agnostic support for creating and manipulating tables across all of Laravel&#39;s supported database systems.</p>\n<p><a name="generating-migrations"></a></p>\n\n          <p><a name="generating-migrations"></a></p>\n          <h2>\n            <a href="#generating-migrations">\n              Generating Migrations\n            </a>\n          </h2><p>To create a migration, use the <code>make:migration</code> <router-link to="/docs/{{version}}/artisan">Artisan command</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">make</span><span class="hljs-selector-pseudo">:migration</span> <span class="hljs-selector-tag">create_users_table</span></code></pre>\n  <p>The new migration will be placed in your <code>database/migrations</code> directory. Each migration file name contains a timestamp which allows Laravel to determine the order of the migrations.</p>\n<p>The <code>--table</code> and <code>--create</code> options may also be used to indicate the name of the table and whether the migration will be creating a new table. These options pre-fill the generated migration stub file with the specified table:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan make:migration create_users_table <span class="hljs-attribute">--create</span>=users\n\nphp artisan make:migration add_votes_to_users_table <span class="hljs-attribute">--table</span>=users</code></pre>\n  <p>If you would like to specify a custom output path for the generated migration, you may use the <code>--path</code> option when executing the <code>make:migration</code> command. The given path should be relative to your application&#39;s base path.</p>\n<p><a name="migration-structure"></a></p>\n\n          <p><a name="migration-structure"></a></p>\n          <h2>\n            <a href="#migration-structure">\n              Migration Structure\n            </a>\n          </h2><p>A migration class contains two methods: <code>up</code> and <code>down</code>. The <code>up</code> method is used to add new tables, columns, or indexes to your database, while the <code>down</code> method should reverse the operations performed by the <code>up</code> method.</p>\n<p>Within both of these methods you may use the Laravel schema builder to expressively create and modify tables. To learn about all of the methods available on the <code>Schema</code> builder, <a href="#creating-tables">check out its documentation</a>. For example, this migration example creates a <code>flights</code> table:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Migrations</span>\\<span class="hljs-title">Migration</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Schema</span>\\<span class="hljs-title">Blueprint</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Schema</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreateFlightsTable</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Migration</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Run the migrations.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">up</span><span class="hljs-params">()</span>\n    </span>{\n        Schema::create(<span class="hljs-string">\'flights\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Blueprint $table)</span> </span>{\n            $table-&gt;bigIncrements(<span class="hljs-string">\'id\'</span>);\n            $table-&gt;string(<span class="hljs-string">\'name\'</span>);\n            $table-&gt;string(<span class="hljs-string">\'airline\'</span>);\n            $table-&gt;timestamps();\n        });\n    }\n\n    <span class="hljs-comment">/**\n     * Reverse the migrations.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">down</span><span class="hljs-params">()</span>\n    </span>{\n        Schema::drop(<span class="hljs-string">\'flights\'</span>);\n    }\n}</span></code></pre>\n  <p><a name="running-migrations"></a></p>\n\n          <p><a name="running-migrations"></a></p>\n          <h2>\n            <a href="#running-migrations">\n              Running Migrations\n            </a>\n          </h2><p>To run all of your outstanding migrations, execute the <code>migrate</code> Artisan command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">php artisan migrate</span></code></pre>\n  <blockquote>\n<p>{note} If you are using the <router-link to="/docs/{{version}}/homestead">Homestead virtual machine</router-link>, you should run this command from within your virtual machine.</p>\n</blockquote>\n\n          <p><a name="forcing-migrations-to-run-in-production"></a></p>\n          <h4>\n            <a href="#forcing-migrations-to-run-in-production">\n              Forcing Migrations To Run In Production\n            </a>\n          </h4><p>Some migration operations are destructive, which means they may cause you to lose data. In order to protect you from running these commands against your production database, you will be prompted for confirmation before the commands are executed. To force the commands to run without a prompt, use the <code>--force</code> flag:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan migrate <span class="hljs-comment">--force</span></code></pre>\n  <p><a name="rolling-back-migrations"></a></p>\n\n          <p><a name="rolling-back-migrations"></a></p>\n          <h3>\n            <a href="#rolling-back-migrations">\n              Rolling Back Migrations\n            </a>\n          </h3><p>To rollback the latest migration operation, you may use the <code>rollback</code> command. This command rolls back the last &quot;batch&quot; of migrations, which may include multiple migration files:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">migrate</span><span class="hljs-selector-pseudo">:rollback</span></code></pre>\n  <p>You may rollback a limited number of migrations by providing the <code>step</code> option to the <code>rollback</code> command. For example, the following command will rollback the last five migrations:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan migrate:<span class="hljs-keyword">rollback</span> <span class="hljs-comment">--step=5</span></code></pre>\n  <p>The <code>migrate:reset</code> command will roll back all of your application&#39;s migrations:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">migrate</span><span class="hljs-selector-pseudo">:reset</span></code></pre>\n  \n          <p><a name="rollback-amp-migrate-in-single-command"></a></p>\n          <h4>\n            <a href="#rollback-amp-migrate-in-single-command">\n              Rollback &amp; Migrate In Single Command\n            </a>\n          </h4><p>The <code>migrate:refresh</code> command will roll back all of your migrations and then execute the <code>migrate</code> command. This command effectively re-creates your entire database:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan migrate:<span class="hljs-keyword">refresh</span>\n\n<span class="hljs-comment">// Refresh the database and run all database seeds...</span>\nphp artisan migrate:<span class="hljs-keyword">refresh</span> --<span class="hljs-keyword">seed</span></code></pre>\n  <p>You may rollback &amp; re-migrate a limited number of migrations by providing the <code>step</code> option to the <code>refresh</code> command. For example, the following command will rollback &amp; re-migrate the last five migrations:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan migrate:<span class="hljs-built_in">ref</span>resh --step=<span class="hljs-number">5</span></code></pre>\n  \n          <p><a name="drop-all-tables-amp-migrate"></a></p>\n          <h4>\n            <a href="#drop-all-tables-amp-migrate">\n              Drop All Tables &amp; Migrate\n            </a>\n          </h4><p>The <code>migrate:fresh</code> command will drop all tables from the database and then execute the <code>migrate</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">migrate</span><span class="hljs-selector-pseudo">:fresh</span>\n\n<span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">migrate</span><span class="hljs-selector-pseudo">:fresh</span> <span class="hljs-selector-tag">--seed</span></code></pre>\n  <p><a name="tables"></a></p>\n\n          <p><a name="tables"></a></p>\n          <h2>\n            <a href="#tables">\n              Tables\n            </a>\n          </h2><p><a name="creating-tables"></a></p>\n\n          <p><a name="creating-tables"></a></p>\n          <h3>\n            <a href="#creating-tables">\n              Creating Tables\n            </a>\n          </h3><p>To create a new database table, use the <code>create</code> method on the <code>Schema</code> facade. The <code>create</code> method accepts two arguments. The first is the name of the table, while the second is a <code>Closure</code> which receives a <code>Blueprint</code> object that may be used to define the new table:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Schema::create(<span class="hljs-string">\'users\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Blueprint $table)</span> </span>{\n    $table-&gt;bigIncrements(<span class="hljs-string">\'id\'</span>);\n});</code></pre>\n  <p>When creating the table, you may use any of the schema builder&#39;s <a href="#creating-columns">column methods</a> to define the table&#39;s columns.</p>\n\n          <p><a name="checking-for-table-column-existence"></a></p>\n          <h4>\n            <a href="#checking-for-table-column-existence">\n              Checking For Table / Column Existence\n            </a>\n          </h4><p>You may easily check for the existence of a table or column using the <code>hasTable</code> and <code>hasColumn</code> methods:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> (Schema::hasTable(<span class="hljs-string">\'users\'</span>)) {\n    <span class="hljs-regexp">//</span>\n}\n\n<span class="hljs-keyword">if</span> (Schema::hasColumn(<span class="hljs-string">\'users\'</span>, <span class="hljs-string">\'email\'</span>)) {\n    <span class="hljs-regexp">//</span>\n}</code></pre>\n  \n          <p><a name="database-connection-amp-table-options"></a></p>\n          <h4>\n            <a href="#database-connection-amp-table-options">\n              Database Connection &amp; Table Options\n            </a>\n          </h4><p>If you want to perform a schema operation on a database connection that is not your default connection, use the <code>connection</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Schema::connection(<span class="hljs-string">\'foo\'</span>)-&gt;create(<span class="hljs-string">\'users\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Blueprint $table)</span> </span>{\n    $table-&gt;bigIncrements(<span class="hljs-string">\'id\'</span>);\n});</code></pre>\n  <p>You may use the following commands on the schema builder to define the table&#39;s options:</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>$table-&gt;engine = &#39;InnoDB&#39;;</code></td>\n<td>Specify the table storage engine (MySQL).</td>\n</tr>\n<tr>\n<td><code>$table-&gt;charset = &#39;utf8&#39;;</code></td>\n<td>Specify a default character set for the table (MySQL).</td>\n</tr>\n<tr>\n<td><code>$table-&gt;collation = &#39;utf8_unicode_ci&#39;;</code></td>\n<td>Specify a default collation for the table (MySQL).</td>\n</tr>\n<tr>\n<td><code>$table-&gt;temporary();</code></td>\n<td>Create a temporary table (except SQL Server).</td>\n</tr>\n</tbody></table>\n<p><a name="renaming-and-dropping-tables"></a></p>\n\n          <p><a name="renaming-dropping-tables"></a></p>\n          <h3>\n            <a href="#renaming-dropping-tables">\n              Renaming / Dropping Tables\n            </a>\n          </h3><p>To rename an existing database table, use the <code>rename</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Schema::<span class="hljs-keyword">rename</span>($<span class="hljs-keyword">from</span>, $<span class="hljs-keyword">to</span>);</code></pre>\n  <p>To drop an existing table, you may use the <code>drop</code> or <code>dropIfExists</code> methods:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">Schema</span>::<span class="hljs-keyword">drop</span>(<span class="hljs-string">\'users\'</span>);\n\n<span class="hljs-keyword">Schema</span>::dropIfExists(<span class="hljs-string">\'users\'</span>);</code></pre>\n  \n          <p><a name="renaming-tables-with-foreign-keys"></a></p>\n          <h4>\n            <a href="#renaming-tables-with-foreign-keys">\n              Renaming Tables With Foreign Keys\n            </a>\n          </h4><p>Before renaming a table, you should verify that any foreign key constraints on the table have an explicit name in your migration files instead of letting Laravel assign a convention based name. Otherwise, the foreign key constraint name will refer to the old table name.</p>\n<p><a name="columns"></a></p>\n\n          <p><a name="columns"></a></p>\n          <h2>\n            <a href="#columns">\n              Columns\n            </a>\n          </h2><p><a name="creating-columns"></a></p>\n\n          <p><a name="creating-columns"></a></p>\n          <h3>\n            <a href="#creating-columns">\n              Creating Columns\n            </a>\n          </h3><p>The <code>table</code> method on the <code>Schema</code> facade may be used to update existing tables. Like the <code>create</code> method, the <code>table</code> method accepts two arguments: the name of the table and a <code>Closure</code> that receives a <code>Blueprint</code> instance you may use to add columns to the table:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Schema::table(<span class="hljs-string">\'users\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Blueprint $table)</span> </span>{\n    $table-&gt;string(<span class="hljs-string">\'email\'</span>);\n});</code></pre>\n  \n          <p><a name="available-column-types"></a></p>\n          <h4>\n            <a href="#available-column-types">\n              Available Column Types\n            </a>\n          </h4><p>The schema builder contains a variety of column types that you may specify when building your tables:</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>$table-&gt;bigIncrements(&#39;id&#39;);</code></td>\n<td>Auto-incrementing UNSIGNED BIGINT (primary key) equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;bigInteger(&#39;votes&#39;);</code></td>\n<td>BIGINT equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;binary(&#39;data&#39;);</code></td>\n<td>BLOB equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;boolean(&#39;confirmed&#39;);</code></td>\n<td>BOOLEAN equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;char(&#39;name&#39;, 100);</code></td>\n<td>CHAR equivalent column with a length.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;date(&#39;created_at&#39;);</code></td>\n<td>DATE equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;dateTime(&#39;created_at&#39;, 0);</code></td>\n<td>DATETIME equivalent column with precision (total digits).</td>\n</tr>\n<tr>\n<td><code>$table-&gt;dateTimeTz(&#39;created_at&#39;, 0);</code></td>\n<td>DATETIME (with timezone) equivalent column with precision (total digits).</td>\n</tr>\n<tr>\n<td><code>$table-&gt;decimal(&#39;amount&#39;, 8, 2);</code></td>\n<td>DECIMAL equivalent column with precision (total digits) and scale (decimal digits).</td>\n</tr>\n<tr>\n<td><code>$table-&gt;double(&#39;amount&#39;, 8, 2);</code></td>\n<td>DOUBLE equivalent column with precision (total digits) and scale (decimal digits).</td>\n</tr>\n<tr>\n<td><code>$table-&gt;enum(&#39;level&#39;, [&#39;easy&#39;, &#39;hard&#39;]);</code></td>\n<td>ENUM equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;float(&#39;amount&#39;, 8, 2);</code></td>\n<td>FLOAT equivalent column with a precision (total digits) and scale (decimal digits).</td>\n</tr>\n<tr>\n<td><code>$table-&gt;geometry(&#39;positions&#39;);</code></td>\n<td>GEOMETRY equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;geometryCollection(&#39;positions&#39;);</code></td>\n<td>GEOMETRYCOLLECTION equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;increments(&#39;id&#39;);</code></td>\n<td>Auto-incrementing UNSIGNED INTEGER (primary key) equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;integer(&#39;votes&#39;);</code></td>\n<td>INTEGER equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;ipAddress(&#39;visitor&#39;);</code></td>\n<td>IP address equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;json(&#39;options&#39;);</code></td>\n<td>JSON equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;jsonb(&#39;options&#39;);</code></td>\n<td>JSONB equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;lineString(&#39;positions&#39;);</code></td>\n<td>LINESTRING equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;longText(&#39;description&#39;);</code></td>\n<td>LONGTEXT equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;macAddress(&#39;device&#39;);</code></td>\n<td>MAC address equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;mediumIncrements(&#39;id&#39;);</code></td>\n<td>Auto-incrementing UNSIGNED MEDIUMINT (primary key) equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;mediumInteger(&#39;votes&#39;);</code></td>\n<td>MEDIUMINT equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;mediumText(&#39;description&#39;);</code></td>\n<td>MEDIUMTEXT equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;morphs(&#39;taggable&#39;);</code></td>\n<td>Adds <code>taggable_id</code> UNSIGNED BIGINT and <code>taggable_type</code> VARCHAR equivalent columns.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;uuidMorphs(&#39;taggable&#39;);</code></td>\n<td>Adds <code>taggable_id</code> CHAR(36) and <code>taggable_type</code> VARCHAR(255) UUID equivalent columns.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;multiLineString(&#39;positions&#39;);</code></td>\n<td>MULTILINESTRING equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;multiPoint(&#39;positions&#39;);</code></td>\n<td>MULTIPOINT equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;multiPolygon(&#39;positions&#39;);</code></td>\n<td>MULTIPOLYGON equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;nullableMorphs(&#39;taggable&#39;);</code></td>\n<td>Adds nullable versions of <code>morphs()</code> columns.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;nullableUuidMorphs(&#39;taggable&#39;);</code></td>\n<td>Adds nullable versions of <code>uuidMorphs()</code> columns.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;nullableTimestamps(0);</code></td>\n<td>Alias of <code>timestamps()</code> method.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;point(&#39;position&#39;);</code></td>\n<td>POINT equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;polygon(&#39;positions&#39;);</code></td>\n<td>POLYGON equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;rememberToken();</code></td>\n<td>Adds a nullable <code>remember_token</code> VARCHAR(100) equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;set(&#39;flavors&#39;, [&#39;strawberry&#39;, &#39;vanilla&#39;]);</code></td>\n<td>SET equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;smallIncrements(&#39;id&#39;);</code></td>\n<td>Auto-incrementing UNSIGNED SMALLINT (primary key) equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;smallInteger(&#39;votes&#39;);</code></td>\n<td>SMALLINT equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;softDeletes(0);</code></td>\n<td>Adds a nullable <code>deleted_at</code> TIMESTAMP equivalent column for soft deletes with precision (total digits).</td>\n</tr>\n<tr>\n<td><code>$table-&gt;softDeletesTz(0);</code></td>\n<td>Adds a nullable <code>deleted_at</code> TIMESTAMP (with timezone) equivalent column for soft deletes with precision (total digits).</td>\n</tr>\n<tr>\n<td><code>$table-&gt;string(&#39;name&#39;, 100);</code></td>\n<td>VARCHAR equivalent column with a length.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;text(&#39;description&#39;);</code></td>\n<td>TEXT equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;time(&#39;sunrise&#39;, 0);</code></td>\n<td>TIME equivalent column with precision (total digits).</td>\n</tr>\n<tr>\n<td><code>$table-&gt;timeTz(&#39;sunrise&#39;, 0);</code></td>\n<td>TIME (with timezone) equivalent column with precision (total digits).</td>\n</tr>\n<tr>\n<td><code>$table-&gt;timestamp(&#39;added_on&#39;, 0);</code></td>\n<td>TIMESTAMP equivalent column with precision (total digits).</td>\n</tr>\n<tr>\n<td><code>$table-&gt;timestampTz(&#39;added_on&#39;, 0);</code></td>\n<td>TIMESTAMP (with timezone) equivalent column with precision (total digits).</td>\n</tr>\n<tr>\n<td><code>$table-&gt;timestamps(0);</code></td>\n<td>Adds nullable <code>created_at</code> and <code>updated_at</code> TIMESTAMP equivalent columns with precision (total digits).</td>\n</tr>\n<tr>\n<td><code>$table-&gt;timestampsTz(0);</code></td>\n<td>Adds nullable <code>created_at</code> and <code>updated_at</code> TIMESTAMP (with timezone) equivalent columns with precision (total digits).</td>\n</tr>\n<tr>\n<td><code>$table-&gt;tinyIncrements(&#39;id&#39;);</code></td>\n<td>Auto-incrementing UNSIGNED TINYINT (primary key) equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;tinyInteger(&#39;votes&#39;);</code></td>\n<td>TINYINT equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;unsignedBigInteger(&#39;votes&#39;);</code></td>\n<td>UNSIGNED BIGINT equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;unsignedDecimal(&#39;amount&#39;, 8, 2);</code></td>\n<td>UNSIGNED DECIMAL equivalent column with a precision (total digits) and scale (decimal digits).</td>\n</tr>\n<tr>\n<td><code>$table-&gt;unsignedInteger(&#39;votes&#39;);</code></td>\n<td>UNSIGNED INTEGER equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;unsignedMediumInteger(&#39;votes&#39;);</code></td>\n<td>UNSIGNED MEDIUMINT equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;unsignedSmallInteger(&#39;votes&#39;);</code></td>\n<td>UNSIGNED SMALLINT equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;unsignedTinyInteger(&#39;votes&#39;);</code></td>\n<td>UNSIGNED TINYINT equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;uuid(&#39;id&#39;);</code></td>\n<td>UUID equivalent column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;year(&#39;birth_year&#39;);</code></td>\n<td>YEAR equivalent column.</td>\n</tr>\n</tbody></table>\n<p><a name="column-modifiers"></a></p>\n\n          <p><a name="column-modifiers"></a></p>\n          <h3>\n            <a href="#column-modifiers">\n              Column Modifiers\n            </a>\n          </h3><p>In addition to the column types listed above, there are several column &quot;modifiers&quot; you may use while adding a column to a database table. For example, to make the column &quot;nullable&quot;, you may use the <code>nullable</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Schema::table(<span class="hljs-string">\'users\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Blueprint $table)</span> </span>{\n    $table-&gt;string(<span class="hljs-string">\'email\'</span>)-&gt;nullable();\n});</code></pre>\n  <p>Below is a list of all the available column modifiers. This list does not include the <a href="#creating-indexes">index modifiers</a>:</p>\n<table>\n<thead>\n<tr>\n<th>Modifier</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-&gt;after(&#39;column&#39;)</code></td>\n<td>Place the column &quot;after&quot; another column (MySQL)</td>\n</tr>\n<tr>\n<td><code>-&gt;autoIncrement()</code></td>\n<td>Set INTEGER columns as auto-increment (primary key)</td>\n</tr>\n<tr>\n<td><code>-&gt;charset(&#39;utf8&#39;)</code></td>\n<td>Specify a character set for the column (MySQL)</td>\n</tr>\n<tr>\n<td><code>-&gt;collation(&#39;utf8_unicode_ci&#39;)</code></td>\n<td>Specify a collation for the column (MySQL/PostgreSQL/SQL Server)</td>\n</tr>\n<tr>\n<td><code>-&gt;comment(&#39;my comment&#39;)</code></td>\n<td>Add a comment to a column (MySQL/PostgreSQL)</td>\n</tr>\n<tr>\n<td><code>-&gt;default($value)</code></td>\n<td>Specify a &quot;default&quot; value for the column</td>\n</tr>\n<tr>\n<td><code>-&gt;first()</code></td>\n<td>Place the column &quot;first&quot; in the table (MySQL)</td>\n</tr>\n<tr>\n<td><code>-&gt;nullable($value = true)</code></td>\n<td>Allows (by default) NULL values to be inserted into the column</td>\n</tr>\n<tr>\n<td><code>-&gt;storedAs($expression)</code></td>\n<td>Create a stored generated column (MySQL)</td>\n</tr>\n<tr>\n<td><code>-&gt;unsigned()</code></td>\n<td>Set INTEGER columns as UNSIGNED (MySQL)</td>\n</tr>\n<tr>\n<td><code>-&gt;useCurrent()</code></td>\n<td>Set TIMESTAMP columns to use CURRENT_TIMESTAMP as default value</td>\n</tr>\n<tr>\n<td><code>-&gt;virtualAs($expression)</code></td>\n<td>Create a virtual generated column (MySQL)</td>\n</tr>\n<tr>\n<td><code>-&gt;generatedAs($expression)</code></td>\n<td>Create an identity column with specified sequence options (PostgreSQL)</td>\n</tr>\n<tr>\n<td><code>-&gt;always()</code></td>\n<td>Defines the precedence of sequence values over input for an identity column (PostgreSQL)</td>\n</tr>\n</tbody></table>\n\n          <p><a name="default-expressions"></a></p>\n          <h4>\n            <a href="#default-expressions">\n              Default Expressions\n            </a>\n          </h4><p>The <code>default</code> modifier accepts a value or an <code>\\Illuminate\\Database\\Query\\Expression</code> instance. Using an <code>Expression</code> instance will prevent wrapping the value in quotes and allow you to use database specific functions. One situation where this is particularly useful is assigning default values to JSON columns:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Schema</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Schema</span>\\<span class="hljs-title">Blueprint</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Query</span>\\<span class="hljs-title">Expression</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Migrations</span>\\<span class="hljs-title">Migration</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreateFlightsTable</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Migration</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Run the migrations.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">up</span><span class="hljs-params">()</span>\n    </span>{\n        Schema::create(<span class="hljs-string">\'flights\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Blueprint $table)</span> </span>{\n            $table-&gt;bigIncrements(<span class="hljs-string">\'id\'</span>);\n            $table-&gt;json(<span class="hljs-string">\'movies\'</span>)-&gt;default(<span class="hljs-keyword">new</span> Expression(<span class="hljs-string">\'(JSON_ARRAY())\'</span>));\n            $table-&gt;timestamps();\n        });\n    }\n}</span></code></pre>\n  <blockquote>\n<p>{note} Support for default expressions depends on your database driver, database version, and the field type. Please refer to the appropriate documentation for compatibility. Also note that using database specific functions may tightly couple you to a specific driver.</p>\n</blockquote>\n<p><a name="modifying-columns"></a></p>\n\n          <p><a name="modifying-columns"></a></p>\n          <h3>\n            <a href="#modifying-columns">\n              Modifying Columns\n            </a>\n          </h3>\n          <p><a name="prerequisites"></a></p>\n          <h4>\n            <a href="#prerequisites">\n              Prerequisites\n            </a>\n          </h4><p>Before modifying a column, be sure to add the <code>doctrine/dbal</code> dependency to your <code>composer.json</code> file. The Doctrine DBAL library is used to determine the current state of the column and create the SQL queries needed to make the specified adjustments to the column:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">composer</span> <span class="hljs-meta">require</span> doctrine/dbal</code></pre>\n  \n          <p><a name="updating-column-attributes"></a></p>\n          <h4>\n            <a href="#updating-column-attributes">\n              Updating Column Attributes\n            </a>\n          </h4><p>The <code>change</code> method allows you to modify some existing column types to a new type or modify the column&#39;s attributes. For example, you may wish to increase the size of a string column. To see the <code>change</code> method in action, let&#39;s increase the size of the <code>name</code> column from 25 to 50:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Schema::table(<span class="hljs-string">\'users\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Blueprint $table)</span> </span>{\n    $table-&gt;string(<span class="hljs-string">\'name\'</span>, <span class="hljs-number">50</span>)-&gt;change();\n});</code></pre>\n  <p>We could also modify a column to be nullable:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Schema::table(<span class="hljs-string">\'users\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Blueprint $table)</span> </span>{\n    $table-&gt;string(<span class="hljs-string">\'name\'</span>, <span class="hljs-number">50</span>)-&gt;nullable()-&gt;change();\n});</code></pre>\n  <blockquote>\n<p>{note} Only the following column types can be &quot;changed&quot;: bigInteger, binary, boolean, date, dateTime, dateTimeTz, decimal, integer, json, longText, mediumText, smallInteger, string, text, time, unsignedBigInteger, unsignedInteger and unsignedSmallInteger.</p>\n</blockquote>\n\n          <p><a name="renaming-columns"></a></p>\n          <h4>\n            <a href="#renaming-columns">\n              Renaming Columns\n            </a>\n          </h4><p>To rename a column, you may use the <code>renameColumn</code> method on the Schema builder. Before renaming a column, be sure to add the <code>doctrine/dbal</code> dependency to your <code>composer.json</code> file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Schema::table(<span class="hljs-string">\'users\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Blueprint $table)</span> </span>{\n    $table-&gt;renameColumn(<span class="hljs-string">\'from\'</span>, <span class="hljs-string">\'to\'</span>);\n});</code></pre>\n  <blockquote>\n<p>{note} Renaming any column in a table that also has a column of type <code>enum</code> is not currently supported.</p>\n</blockquote>\n<p><a name="dropping-columns"></a></p>\n\n          <p><a name="dropping-columns"></a></p>\n          <h3>\n            <a href="#dropping-columns">\n              Dropping Columns\n            </a>\n          </h3><p>To drop a column, use the <code>dropColumn</code> method on the Schema builder. Before dropping columns from a SQLite database, you will need to add the <code>doctrine/dbal</code> dependency to your <code>composer.json</code> file and run the <code>composer update</code> command in your terminal to install the library:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Schema::table(<span class="hljs-string">\'users\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Blueprint $table)</span> </span>{\n    $table-&gt;dropColumn(<span class="hljs-string">\'votes\'</span>);\n});</code></pre>\n  <p>You may drop multiple columns from a table by passing an array of column names to the <code>dropColumn</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Schema::table(<span class="hljs-string">\'users\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Blueprint $table)</span> </span>{\n    $table-&gt;dropColumn([<span class="hljs-string">\'votes\'</span>, <span class="hljs-string">\'avatar\'</span>, <span class="hljs-string">\'location\'</span>]);\n});</code></pre>\n  <blockquote>\n<p>{note} Dropping or modifying multiple columns within a single migration while using a SQLite database is not supported.</p>\n</blockquote>\n\n          <p><a name="available-command-aliases"></a></p>\n          <h4>\n            <a href="#available-command-aliases">\n              Available Command Aliases\n            </a>\n          </h4><table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>$table-&gt;dropMorphs(&#39;morphable&#39;);</code></td>\n<td>Drop the <code>morphable_id</code> and <code>morphable_type</code> columns.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;dropRememberToken();</code></td>\n<td>Drop the <code>remember_token</code> column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;dropSoftDeletes();</code></td>\n<td>Drop the <code>deleted_at</code> column.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;dropSoftDeletesTz();</code></td>\n<td>Alias of <code>dropSoftDeletes()</code> method.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;dropTimestamps();</code></td>\n<td>Drop the <code>created_at</code> and <code>updated_at</code> columns.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;dropTimestampsTz();</code></td>\n<td>Alias of <code>dropTimestamps()</code> method.</td>\n</tr>\n</tbody></table>\n<p><a name="indexes"></a></p>\n\n          <p><a name="indexes"></a></p>\n          <h2>\n            <a href="#indexes">\n              Indexes\n            </a>\n          </h2><p><a name="creating-indexes"></a></p>\n\n          <p><a name="creating-indexes"></a></p>\n          <h3>\n            <a href="#creating-indexes">\n              Creating Indexes\n            </a>\n          </h3><p>The schema builder supports several types of indexes. First, let&#39;s look at an example that specifies a column&#39;s values should be unique. To create the index, we can chain the <code>unique</code> method onto the column definition:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$table</span>-&gt;string(<span class="hljs-string">\'email\'</span>)-&gt;unique();</code></pre>\n  <p>Alternatively, you may create the index after defining the column. For example:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$table</span>-&gt;unique(<span class="hljs-string">\'email\'</span>);</code></pre>\n  <p>You may even pass an array of columns to an index method to create a compound (or composite) index:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$table</span>-&gt;index([<span class="hljs-string">\'account_id\'</span>, <span class="hljs-string">\'created_at\'</span>]);</code></pre>\n  <p>Laravel will automatically generate a reasonable index name, but you may pass a second argument to the method to specify the name yourself:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$table</span>-&gt;unique(<span class="hljs-string">\'email\'</span>, <span class="hljs-string">\'unique_email\'</span>);</code></pre>\n  \n          <p><a name="available-index-types"></a></p>\n          <h4>\n            <a href="#available-index-types">\n              Available Index Types\n            </a>\n          </h4><p>Each index method accepts an optional second argument to specify the name of the index. If omitted, the name will be derived from the names of the table and column(s).</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>$table-&gt;primary(&#39;id&#39;);</code></td>\n<td>Adds a primary key.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;primary([&#39;id&#39;, &#39;parent_id&#39;]);</code></td>\n<td>Adds composite keys.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;unique(&#39;email&#39;);</code></td>\n<td>Adds a unique index.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;index(&#39;state&#39;);</code></td>\n<td>Adds a plain index.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;spatialIndex(&#39;location&#39;);</code></td>\n<td>Adds a spatial index. (except SQLite)</td>\n</tr>\n</tbody></table>\n\n          <p><a name="index-lengths-amp-mysql-mariadb"></a></p>\n          <h4>\n            <a href="#index-lengths-amp-mysql-mariadb">\n              Index Lengths &amp; MySQL / MariaDB\n            </a>\n          </h4><p>Laravel uses the <code>utf8mb4</code> character set by default, which includes support for storing &quot;emojis&quot; in the database. If you are running a version of MySQL older than the 5.7.7 release or MariaDB older than the 10.2.2 release, you may need to manually configure the default string length generated by migrations in order for MySQL to create indexes for them. You may configure this by calling the <code>Schema::defaultStringLength</code> method within your <code>AppServiceProvider</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Schema</span>;\n\n<span class="hljs-comment">/**\n * Bootstrap any application services.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n</span>{\n    Schema::defaultStringLength(<span class="hljs-number">191</span>);\n}</code></pre>\n  <p>Alternatively, you may enable the <code>innodb_large_prefix</code> option for your database. Refer to your database&#39;s documentation for instructions on how to properly enable this option.</p>\n<p><a name="renaming-indexes"></a></p>\n\n          <p><a name="renaming-indexes"></a></p>\n          <h3>\n            <a href="#renaming-indexes">\n              Renaming Indexes\n            </a>\n          </h3><p>To rename an index, you may use the <code>renameIndex</code> method. This method accepts the current index name as its first argument and the desired name as its second argument:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$table</span>-&gt;renameIndex(<span class="hljs-string">\'from\'</span>, <span class="hljs-string">\'to\'</span>)</code></pre>\n  <p><a name="dropping-indexes"></a></p>\n\n          <p><a name="dropping-indexes"></a></p>\n          <h3>\n            <a href="#dropping-indexes">\n              Dropping Indexes\n            </a>\n          </h3><p>To drop an index, you must specify the index&#39;s name. By default, Laravel automatically assigns a reasonable name to the indexes. Concatenate the table name, the name of the indexed column, and the index type. Here are some examples:</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>$table-&gt;dropPrimary(&#39;users_id_primary&#39;);</code></td>\n<td>Drop a primary key from the &quot;users&quot; table.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;dropUnique(&#39;users_email_unique&#39;);</code></td>\n<td>Drop a unique index from the &quot;users&quot; table.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;dropIndex(&#39;geo_state_index&#39;);</code></td>\n<td>Drop a basic index from the &quot;geo&quot; table.</td>\n</tr>\n<tr>\n<td><code>$table-&gt;dropSpatialIndex(&#39;geo_location_spatialindex&#39;);</code></td>\n<td>Drop a spatial index from the &quot;geo&quot; table  (except SQLite).</td>\n</tr>\n</tbody></table>\n<p>If you pass an array of columns into a method that drops indexes, the conventional index name will be generated based on the table name, columns and key type:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Schema::table(<span class="hljs-string">\'geo\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Blueprint $table)</span> </span>{\n    $table-&gt;dropIndex([<span class="hljs-string">\'state\'</span>]); <span class="hljs-comment">// Drops index \'geo_state_index\'</span>\n});</code></pre>\n  <p><a name="foreign-key-constraints"></a></p>\n\n          <p><a name="foreign-key-constraints"></a></p>\n          <h3>\n            <a href="#foreign-key-constraints">\n              Foreign Key Constraints\n            </a>\n          </h3><p>Laravel also provides support for creating foreign key constraints, which are used to force referential integrity at the database level. For example, let&#39;s define a <code>user_id</code> column on the <code>posts</code> table that references the <code>id</code> column on a <code>users</code> table:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Schema::table(<span class="hljs-string">\'posts\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Blueprint $table)</span> </span>{\n    $table-&gt;unsignedBigInteger(<span class="hljs-string">\'user_id\'</span>);\n\n    $table-&gt;foreign(<span class="hljs-string">\'user_id\'</span>)-&gt;references(<span class="hljs-string">\'id\'</span>)-&gt;on(<span class="hljs-string">\'users\'</span>);\n});</code></pre>\n  <p>You may also specify the desired action for the &quot;on delete&quot; and &quot;on update&quot; properties of the constraint:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$table-&gt;foreign<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'user_id\'</span>)</span>\n      -&gt;</span>references<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'id\'</span>)</span>-&gt;</span><span class="hljs-literal">on</span><span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n      -&gt;</span>onDelete(<span class="hljs-string">\'cascade\'</span>);</code></pre>\n  <p>To drop a foreign key, you may use the <code>dropForeign</code> method. Foreign key constraints use the same naming convention as indexes. So, we will concatenate the table name and the columns in the constraint then suffix the name with &quot;_foreign&quot;:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$table</span>-&gt;dropForeign(<span class="hljs-string">\'posts_user_id_foreign\'</span>);</code></pre>\n  <p>Or, you may pass an array value which will automatically use the conventional constraint name when dropping:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$table</span>-&gt;dropForeign([<span class="hljs-string">\'user_id\'</span>]);</code></pre>\n  <p>You may enable or disable foreign key constraints within your migrations by using the following methods:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Schema::enableForeignKeyConstraints();\n\nSchema::disableForeignKeyConstraints();</code></pre>\n  <blockquote>\n<p>{note} SQLite disables foreign key constraints by default. When using SQLite, make sure to <router-link to="/docs/{{version}}/database#configuration">enable foreign key support</router-link> in your database configuration before attempting to create them in your migrations.</p>\n</blockquote>\n'},4:function(s,e){},"40f1":function(s,e,a){"use strict";var n=a("ec54"),t=a.n(n);t.a},4557:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="installation"></a></p>\n          <h1>\n            <a href="#installation">\n              Installation\n            </a>\n          </h1><ul>\n<li><a href="#installation">Installation</a><ul>\n<li><a href="#server-requirements">Server Requirements</a></li>\n<li><a href="#installing-laravel">Installing Laravel</a></li>\n<li><a href="#configuration">Configuration</a></li>\n</ul>\n</li>\n<li><a href="#web-server-configuration">Web Server Configuration</a><ul>\n<li><a href="#directory-configuration">Directory Configuration</a></li>\n<li><a href="#pretty-urls">Pretty URLs</a></li>\n</ul>\n</li>\n</ul>\n<p><a name="installation"></a></p>\n\n          <p><a name="installation"></a></p>\n          <h2>\n            <a href="#installation">\n              Installation\n            </a>\n          </h2><p><a name="server-requirements"></a></p>\n\n          <p><a name="server-requirements"></a></p>\n          <h3>\n            <a href="#server-requirements">\n              Server Requirements\n            </a>\n          </h3><p>The Laravel framework has a few system requirements. All of these requirements are satisfied by the <router-link to="/docs/{{version}}/homestead">Laravel Homestead</router-link> virtual machine, so it&#39;s highly recommended that you use Homestead as your local Laravel development environment.</p>\n<p>However, if you are not using Homestead, you will need to make sure your server meets the following requirements:</p>\n<div class="content-list" markdown="1">\n- PHP >= 7.2.0\n- BCMath PHP Extension\n- Ctype PHP Extension\n- JSON PHP Extension\n- Mbstring PHP Extension\n- OpenSSL PHP Extension\n- PDO PHP Extension\n- Tokenizer PHP Extension\n- XML PHP Extension\n</div>\n\n<p><a name="installing-laravel"></a></p>\n\n          <p><a name="installing-laravel"></a></p>\n          <h3>\n            <a href="#installing-laravel">\n              Installing Laravel\n            </a>\n          </h3><p>Laravel utilizes <router-link to="https://getcomposer.org">Composer</router-link> to manage its dependencies. So, before using Laravel, make sure you have Composer installed on your machine.</p>\n\n          <p><a name="via-laravel-installer"></a></p>\n          <h4>\n            <a href="#via-laravel-installer">\n              Via Laravel Installer\n            </a>\n          </h4><p>First, download the Laravel installer using Composer:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">composer</span> <span class="hljs-meta">global</span> <span class="hljs-meta">require</span> laravel/installer</code></pre>\n  <p>Make sure to place Composer&#39;s system-wide vendor bin directory in your <code>$PATH</code> so the laravel executable can be located by your system. This directory exists in different locations based on your operating system; however, some common locations include:</p>\n<div class="content-list" markdown="1">\n- macOS and GNU / Linux Distributions: `$HOME/.composer/vendor/bin`\n- Windows: `%USERPROFILE%\\AppData\\Roaming\\Composer\\vendor\\bin`\n</div>\n\n<p>Once installed, the <code>laravel new</code> command will create a fresh Laravel installation in the directory you specify. For instance, <code>laravel new blog</code> will create a directory named <code>blog</code> containing a fresh Laravel installation with all of Laravel&#39;s dependencies already installed:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">laravel <span class="hljs-keyword">new</span> blog</code></pre>\n  \n          <p><a name="via-composer-create-project"></a></p>\n          <h4>\n            <a href="#via-composer-create-project">\n              Via Composer Create-Project\n            </a>\n          </h4><p>Alternatively, you may also install Laravel by issuing the Composer <code>create-project</code> command in your terminal:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">composer </span><span class="hljs-built_in">create-project</span> <span class="hljs-built_in">--prefer-dist</span> <span class="hljs-string">laravel/</span><span class="hljs-string">laravel </span><span class="hljs-string">blog</span></code></pre>\n  \n          <p><a name="local-development-server"></a></p>\n          <h4>\n            <a href="#local-development-server">\n              Local Development Server\n            </a>\n          </h4><p>If you have PHP installed locally and you would like to use PHP&#39;s built-in development server to serve your application, you may use the <code>serve</code> Artisan command. This command will start a development server at <code>http://localhost:8000</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">php artisan serve</span></code></pre>\n  <p>More robust local development options are available via <router-link to="/docs/{{version}}/homestead">Homestead</router-link> and <router-link to="/docs/{{version}}/valet">Valet</router-link>.</p>\n<p><a name="configuration"></a></p>\n\n          <p><a name="configuration"></a></p>\n          <h3>\n            <a href="#configuration">\n              Configuration\n            </a>\n          </h3>\n          <p><a name="public-directory"></a></p>\n          <h4>\n            <a href="#public-directory">\n              Public Directory\n            </a>\n          </h4><p>After installing Laravel, you should configure your web server&#39;s document / web root to be the <code>public</code> directory. The <code>index.php</code> in this directory serves as the front controller for all HTTP requests entering your application.</p>\n\n          <p><a name="configuration-files"></a></p>\n          <h4>\n            <a href="#configuration-files">\n              Configuration Files\n            </a>\n          </h4><p>All of the configuration files for the Laravel framework are stored in the <code>config</code> directory. Each option is documented, so feel free to look through the files and get familiar with the options available to you.</p>\n\n          <p><a name="directory-permissions"></a></p>\n          <h4>\n            <a href="#directory-permissions">\n              Directory Permissions\n            </a>\n          </h4><p>After installing Laravel, you may need to configure some permissions. Directories within the <code>storage</code> and the <code>bootstrap/cache</code> directories should be writable by your web server or Laravel will not run. If you are using the <router-link to="/docs/{{version}}/homestead">Homestead</router-link> virtual machine, these permissions should already be set.</p>\n\n          <p><a name="application-key"></a></p>\n          <h4>\n            <a href="#application-key">\n              Application Key\n            </a>\n          </h4><p>The next thing you should do after installing Laravel is set your application key to a random string. If you installed Laravel via Composer or the Laravel installer, this key has already been set for you by the <code>php artisan key:generate</code> command.</p>\n<p>Typically, this string should be 32 characters long. The key can be set in the <code>.env</code> environment file. If you have not copied the <code>.env.example</code> file to a new file named <code>.env</code>, you should do that now. <strong>If the application key is not set, your user sessions and other encrypted data will not be secure!</strong></p>\n\n          <p><a name="additional-configuration"></a></p>\n          <h4>\n            <a href="#additional-configuration">\n              Additional Configuration\n            </a>\n          </h4><p>Laravel needs almost no other configuration out of the box. You are free to get started developing! However, you may wish to review the <code>config/app.php</code> file and its documentation. It contains several options such as <code>timezone</code> and <code>locale</code> that you may wish to change according to your application.</p>\n<p>You may also want to configure a few additional components of Laravel, such as:</p>\n<div class="content-list" markdown="1">\n- [Cache](/docs/{{version}}/cache#configuration)\n- [Database](/docs/{{version}}/database#configuration)\n- [Session](/docs/{{version}}/session#configuration)\n</div>\n\n<p><a name="web-server-configuration"></a></p>\n\n          <p><a name="web-server-configuration"></a></p>\n          <h2>\n            <a href="#web-server-configuration">\n              Web Server Configuration\n            </a>\n          </h2><p><a name="directory-configuration"></a></p>\n\n          <p><a name="directory-configuration"></a></p>\n          <h3>\n            <a href="#directory-configuration">\n              Directory Configuration\n            </a>\n          </h3><p>Laravel should always be served out of the root of the &quot;web directory&quot; configured for your web server. You should not attempt to serve a Laravel application out of a sub-directory of the &quot;web directory&quot;. Attempting to do so could expose sensitive files present within your application.</p>\n<p><a name="pretty-urls"></a></p>\n\n          <p><a name="pretty-urls"></a></p>\n          <h3>\n            <a href="#pretty-urls">\n              Pretty URLs\n            </a>\n          </h3>\n          <p><a name="apache"></a></p>\n          <h4>\n            <a href="#apache">\n              Apache\n            </a>\n          </h4><p>Laravel includes a <code>public/.htaccess</code> file that is used to provide URLs without the <code>index.php</code> front controller in the path. Before serving Laravel with Apache, be sure to enable the <code>mod_rewrite</code> module so the <code>.htaccess</code> file will be honored by the server.</p>\n<p>If the <code>.htaccess</code> file that ships with Laravel does not work with your Apache installation, try this alternative:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute"><span class="hljs-nomarkup">Options</span></span> +FollowSymLinks -Indexes\n<span class="hljs-attribute"><span class="hljs-nomarkup">RewriteEngine</span></span> <span class="hljs-literal">On</span>\n\n<span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%{HTTP:Authorization}</span> .\n<span class="hljs-attribute"><span class="hljs-nomarkup">RewriteRule</span></span> .* -<span class="hljs-meta"> [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]</span>\n\n<span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%{REQUEST_FILENAME}</span> !-d\n<span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%{REQUEST_FILENAME}</span> !-f\n<span class="hljs-attribute"><span class="hljs-nomarkup">RewriteRule</span></span> ^ index.php<span class="hljs-meta"> [L]</span></code></pre>\n  \n          <p><a name="nginx"></a></p>\n          <h4>\n            <a href="#nginx">\n              Nginx\n            </a>\n          </h4><p>If you are using Nginx, the following directive in your site configuration will direct all requests to the <code>index.php</code> front controller:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">location</span> / {\n    <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.php?<span class="hljs-variable">$query_string</span>;\n}</code></pre>\n  <p>When using <router-link to="/docs/{{version}}/homestead">Homestead</router-link> or <router-link to="/docs/{{version}}/valet">Valet</router-link>, pretty URLs will be automatically configured.</p>\n'},4827:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="package-development"></a></p>\n          <h1>\n            <a href="#package-development">\n              Package Development\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a><ul>\n<li><a href="#a-note-on-facades">A Note On Facades</a></li>\n</ul>\n</li>\n<li><a href="#package-discovery">Package Discovery</a></li>\n<li><a href="#service-providers">Service Providers</a></li>\n<li><a href="#resources">Resources</a><ul>\n<li><a href="#configuration">Configuration</a></li>\n<li><a href="#migrations">Migrations</a></li>\n<li><a href="#routes">Routes</a></li>\n<li><a href="#translations">Translations</a></li>\n<li><a href="#views">Views</a></li>\n</ul>\n</li>\n<li><a href="#commands">Commands</a></li>\n<li><a href="#public-assets">Public Assets</a></li>\n<li><a href="#publishing-file-groups">Publishing File Groups</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Packages are the primary way of adding functionality to Laravel. Packages might be anything from a great way to work with dates like <router-link to="https://github.com/briannesbitt/Carbon">Carbon</router-link>, or an entire BDD testing framework like <router-link to="https://github.com/Behat/Behat">Behat</router-link>.</p>\n<p>There are different types of packages. Some packages are stand-alone, meaning they work with any PHP framework. Carbon and Behat are examples of stand-alone packages. Any of these packages may be used with Laravel by requesting them in your <code>composer.json</code> file.</p>\n<p>On the other hand, other packages are specifically intended for use with Laravel. These packages may have routes, controllers, views, and configuration specifically intended to enhance a Laravel application. This guide primarily covers the development of those packages that are Laravel specific.</p>\n<p><a name="a-note-on-facades"></a></p>\n\n          <p><a name="a-note-on-facades"></a></p>\n          <h3>\n            <a href="#a-note-on-facades">\n              A Note On Facades\n            </a>\n          </h3><p>When writing a Laravel application, it generally does not matter if you use contracts or facades since both provide essentially equal levels of testability. However, when writing packages, your package will not typically have access to all of Laravel&#39;s testing helpers. If you would like to be able to write your package tests as if they existed inside a typical Laravel application, you may use the <router-link to="https://github.com/orchestral/testbench">Orchestral Testbench</router-link> package.</p>\n<p><a name="package-discovery"></a></p>\n\n          <p><a name="package-discovery"></a></p>\n          <h2>\n            <a href="#package-discovery">\n              Package Discovery\n            </a>\n          </h2><p>In a Laravel application&#39;s <code>config/app.php</code> configuration file, the <code>providers</code> option defines a list of service providers that should be loaded by Laravel. When someone installs your package, you will typically want your service provider to be included in this list. Instead of requiring users to manually add your service provider to the list, you may define the provider in the <code>extra</code> section of your package&#39;s <code>composer.json</code> file. In addition to service providers, you may also list any <router-link to="/docs/{{version}}/facades">facades</router-link> you would like to be registered:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">"extra"</span>: {\n    <span class="hljs-string">"laravel"</span>: {\n        <span class="hljs-string">"providers"</span>: [\n            <span class="hljs-string">"Barryvdh\\\\Debugbar\\\\ServiceProvider"</span>\n        ],\n        <span class="hljs-string">"aliases"</span>: {\n            <span class="hljs-string">"Debugbar"</span>: <span class="hljs-string">"Barryvdh\\\\Debugbar\\\\Facade"</span>\n        }\n    }\n},</code></pre>\n  <p>Once your package has been configured for discovery, Laravel will automatically register its service providers and facades when it is installed, creating a convenient installation experience for your package&#39;s users.</p>\n\n          <p><a name="opting-out-of-package-discovery"></a></p>\n          <h3>\n            <a href="#opting-out-of-package-discovery">\n              Opting Out Of Package Discovery\n            </a>\n          </h3><p>If you are the consumer of a package and would like to disable package discovery for a package, you may list the package name in the <code>extra</code> section of your application&#39;s <code>composer.json</code> file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">"extra"</span>: {\n    <span class="hljs-string">"laravel"</span>: {\n        <span class="hljs-string">"dont-discover"</span>: [\n            <span class="hljs-string">"barryvdh/laravel-debugbar"</span>\n        ]\n    }\n},</code></pre>\n  <p>You may disable package discovery for all packages using the <code>*</code> character inside of your application&#39;s <code>dont-discover</code> directive:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">"extra"</span>: {\n    <span class="hljs-string">"laravel"</span>: {\n        <span class="hljs-string">"dont-discover"</span>: [\n            <span class="hljs-string">"*"</span>\n        ]\n    }\n},</code></pre>\n  <p><a name="service-providers"></a></p>\n\n          <p><a name="service-providers"></a></p>\n          <h2>\n            <a href="#service-providers">\n              Service Providers\n            </a>\n          </h2><p><router-link to="/docs/{{version}}/providers">Service providers</router-link> are the connection points between your package and Laravel. A service provider is responsible for binding things into Laravel&#39;s <router-link to="/docs/{{version}}/container">service container</router-link> and informing Laravel where to load package resources such as views, configuration, and localization files.</p>\n<p>A service provider extends the <code>Illuminate\\Support\\ServiceProvider</code> class and contains two methods: <code>register</code> and <code>boot</code>. The base <code>ServiceProvider</code> class is located in the <code>illuminate/support</code> Composer package, which you should add to your own package&#39;s dependencies. To learn more about the structure and purpose of service providers, check out <router-link to="/docs/{{version}}/providers">their documentation</router-link>.</p>\n<p><a name="resources"></a></p>\n\n          <p><a name="resources"></a></p>\n          <h2>\n            <a href="#resources">\n              Resources\n            </a>\n          </h2><p><a name="configuration"></a></p>\n\n          <p><a name="configuration"></a></p>\n          <h3>\n            <a href="#configuration">\n              Configuration\n            </a>\n          </h3><p>Typically, you will need to publish your package&#39;s configuration file to the application&#39;s own <code>config</code> directory. This will allow users of your package to easily override your default configuration options. To allow your configuration files to be published, call the <code>publishes</code> method from the <code>boot</code> method of your service provider:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Bootstrap any application services.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;publishes([\n        <span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">\'/path/to/config/courier.php\'</span> =&gt; config_path(<span class="hljs-string">\'courier.php\'</span>),\n    ]);\n}</code></pre>\n  <p>Now, when users of your package execute Laravel&#39;s <code>vendor:publish</code> command, your file will be copied to the specified publish location. Once your configuration has been published, its values may be accessed like any other configuration file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">$value</span> = config(<span class="hljs-string">\'courier.option\'</span>);</code></pre>\n  <blockquote>\n<p>{note} You should not define Closures in your configuration files. They can not be serialized correctly when users execute the <code>config:cache</code> Artisan command.</p>\n</blockquote>\n\n          <p><a name="default-package-configuration"></a></p>\n          <h4>\n            <a href="#default-package-configuration">\n              Default Package Configuration\n            </a>\n          </h4><p>You may also merge your own package configuration file with the application&#39;s published copy. This will allow your users to define only the options they actually want to override in the published copy of the configuration. To merge the configurations, use the <code>mergeConfigFrom</code> method within your service provider&#39;s <code>register</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Register any application services.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;mergeConfigFrom(\n        <span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">\'/path/to/config/courier.php\'</span>, <span class="hljs-string">\'courier\'</span>\n    );\n}</code></pre>\n  <blockquote>\n<p>{note} This method only merges the first level of the configuration array. If your users partially define a multi-dimensional configuration array, the missing options will not be merged.</p>\n</blockquote>\n<p><a name="routes"></a></p>\n\n          <p><a name="routes"></a></p>\n          <h3>\n            <a href="#routes">\n              Routes\n            </a>\n          </h3><p>If your package contains routes, you may load them using the <code>loadRoutesFrom</code> method. This method will automatically determine if the application&#39;s routes are cached and will not load your routes file if the routes have already been cached:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Bootstrap any application services.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;loadRoutesFrom(<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">\'/routes.php\'</span>);\n}</code></pre>\n  <p><a name="migrations"></a></p>\n\n          <p><a name="migrations"></a></p>\n          <h3>\n            <a href="#migrations">\n              Migrations\n            </a>\n          </h3><p>If your package contains <router-link to="/docs/{{version}}/migrations">database migrations</router-link>, you may use the <code>loadMigrationsFrom</code> method to inform Laravel how to load them. The <code>loadMigrationsFrom</code> method accepts the path to your package&#39;s migrations as its only argument:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Bootstrap any application services.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;loadMigrationsFrom(<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">\'/path/to/migrations\'</span>);\n}</code></pre>\n  <p>Once your package&#39;s migrations have been registered, they will automatically be run when the <code>php artisan migrate</code> command is executed. You do not need to export them to the application&#39;s main <code>database/migrations</code> directory.</p>\n<p><a name="translations"></a></p>\n\n          <p><a name="translations"></a></p>\n          <h3>\n            <a href="#translations">\n              Translations\n            </a>\n          </h3><p>If your package contains <router-link to="/docs/{{version}}/localization">translation files</router-link>, you may use the <code>loadTranslationsFrom</code> method to inform Laravel how to load them. For example, if your package is named <code>courier</code>, you should add the following to your service provider&#39;s <code>boot</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Bootstrap any application services.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;loadTranslationsFrom(<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">\'/path/to/translations\'</span>, <span class="hljs-string">\'courier\'</span>);\n}</code></pre>\n  <p>Package translations are referenced using the <code>package::file.line</code> syntax convention. So, you may load the <code>courier</code> package&#39;s <code>welcome</code> line from the <code>messages</code> file like so:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">echo trans(\'courier:<span class="hljs-symbol">:messages</span>.welcome\')<span class="hljs-comment">;</span></code></pre>\n  \n          <p><a name="publishing-translations"></a></p>\n          <h4>\n            <a href="#publishing-translations">\n              Publishing Translations\n            </a>\n          </h4><p>If you would like to publish your package&#39;s translations to the application&#39;s <code>resources/lang/vendor</code> directory, you may use the service provider&#39;s <code>publishes</code> method. The <code>publishes</code> method accepts an array of package paths and their desired publish locations. For example, to publish the translation files for the <code>courier</code> package, you may do the following:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Bootstrap any application services.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;loadTranslationsFrom(<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">\'/path/to/translations\'</span>, <span class="hljs-string">\'courier\'</span>);\n\n    <span class="hljs-keyword">$this</span>-&gt;publishes([\n        <span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">\'/path/to/translations\'</span> =&gt; resource_path(<span class="hljs-string">\'lang/vendor/courier\'</span>),\n    ]);\n}</code></pre>\n  <p>Now, when users of your package execute Laravel&#39;s <code>vendor:publish</code> Artisan command, your package&#39;s translations will be published to the specified publish location.</p>\n<p><a name="views"></a></p>\n\n          <p><a name="views"></a></p>\n          <h3>\n            <a href="#views">\n              Views\n            </a>\n          </h3><p>To register your package&#39;s <router-link to="/docs/{{version}}/views">views</router-link> with Laravel, you need to tell Laravel where the views are located. You may do this using the service provider&#39;s <code>loadViewsFrom</code> method. The <code>loadViewsFrom</code> method accepts two arguments: the path to your view templates and your package&#39;s name. For example, if your package&#39;s name is <code>courier</code>, you would add the following to your service provider&#39;s <code>boot</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Bootstrap any application services.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;loadViewsFrom(<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">\'/path/to/views\'</span>, <span class="hljs-string">\'courier\'</span>);\n}</code></pre>\n  <p>Package views are referenced using the <code>package::view</code> syntax convention. So, once your view path is registered in a service provider, you may load the <code>admin</code> view from the <code>courier</code> package like so:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::<span class="hljs-keyword">get</span>(<span class="hljs-string">\'admin\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> view(<span class="hljs-string">\'courier::admin\'</span>);\n});</code></pre>\n  \n          <p><a name="overriding-package-views"></a></p>\n          <h4>\n            <a href="#overriding-package-views">\n              Overriding Package Views\n            </a>\n          </h4><p>When you use the <code>loadViewsFrom</code> method, Laravel actually registers two locations for your views: the application&#39;s <code>resources/views/vendor</code> directory and the directory you specify. So, using the <code>courier</code> example, Laravel will first check if a custom version of the view has been provided by the developer in <code>resources/views/vendor/courier</code>. Then, if the view has not been customized, Laravel will search the package view directory you specified in your call to <code>loadViewsFrom</code>. This makes it easy for package users to customize / override your package&#39;s views.</p>\n\n          <p><a name="publishing-views"></a></p>\n          <h4>\n            <a href="#publishing-views">\n              Publishing Views\n            </a>\n          </h4><p>If you would like to make your views available for publishing to the application&#39;s <code>resources/views/vendor</code> directory, you may use the service provider&#39;s <code>publishes</code> method. The <code>publishes</code> method accepts an array of package view paths and their desired publish locations:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Bootstrap any application services.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;loadViewsFrom(<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">\'/path/to/views\'</span>, <span class="hljs-string">\'courier\'</span>);\n\n    <span class="hljs-keyword">$this</span>-&gt;publishes([\n        <span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">\'/path/to/views\'</span> =&gt; resource_path(<span class="hljs-string">\'views/vendor/courier\'</span>),\n    ]);\n}</code></pre>\n  <p>Now, when users of your package execute Laravel&#39;s <code>vendor:publish</code> Artisan command, your package&#39;s views will be copied to the specified publish location.</p>\n<p><a name="commands"></a></p>\n\n          <p><a name="commands"></a></p>\n          <h2>\n            <a href="#commands">\n              Commands\n            </a>\n          </h2><p>To register your package&#39;s Artisan commands with Laravel, you may use the <code>commands</code> method. This method expects an array of command class names. Once the commands have been registered, you may execute them using the <router-link to="/docs/{{version}}/artisan">Artisan CLI</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Bootstrap the application services.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;app-&gt;runningInConsole()) {\n        <span class="hljs-keyword">$this</span>-&gt;commands([\n            FooCommand::class,\n            BarCommand::class,\n        ]);\n    }\n}</code></pre>\n  <p><a name="public-assets"></a></p>\n\n          <p><a name="public-assets"></a></p>\n          <h2>\n            <a href="#public-assets">\n              Public Assets\n            </a>\n          </h2><p>Your package may have assets such as JavaScript, CSS, and images. To publish these assets to the application&#39;s <code>public</code> directory, use the service provider&#39;s <code>publishes</code> method. In this example, we will also add a <code>public</code> asset group tag, which may be used to publish groups of related assets:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Bootstrap any application services.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;publishes([\n        <span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">\'/path/to/assets\'</span> =&gt; public_path(<span class="hljs-string">\'vendor/courier\'</span>),\n    ], <span class="hljs-string">\'public\'</span>);\n}</code></pre>\n  <p>Now, when your package&#39;s users execute the <code>vendor:publish</code> command, your assets will be copied to the specified publish location. Since you will typically need to overwrite the assets every time the package is updated, you may use the <code>--force</code> flag:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">php</span> <span class="hljs-comment">artisan</span> <span class="hljs-comment">vendor:publish</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">tag=public</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">force</span></code></pre>\n  <p><a name="publishing-file-groups"></a></p>\n\n          <p><a name="publishing-file-groups"></a></p>\n          <h2>\n            <a href="#publishing-file-groups">\n              Publishing File Groups\n            </a>\n          </h2><p>You may want to publish groups of package assets and resources separately. For instance, you might want to allow your users to publish your package&#39;s configuration files without being forced to publish your package&#39;s assets. You may do this by &quot;tagging&quot; them when calling the <code>publishes</code> method from a package&#39;s service provider. For example, let&#39;s use tags to define two publish groups in the <code>boot</code> method of a package service provider:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Bootstrap any application services.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;publishes([\n        <span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">\'/../config/package.php\'</span> =&gt; config_path(<span class="hljs-string">\'package.php\'</span>)\n    ], <span class="hljs-string">\'config\'</span>);\n\n    <span class="hljs-keyword">$this</span>-&gt;publishes([\n        <span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">\'/../database/migrations/\'</span> =&gt; database_path(<span class="hljs-string">\'migrations\'</span>)\n    ], <span class="hljs-string">\'migrations\'</span>);\n}</code></pre>\n  <p>Now your users may publish these groups separately by referencing their tag when executing the <code>vendor:publish</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan vendor:publish <span class="hljs-attribute">--tag</span>=config</code></pre>\n  '},"49a0":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="encryption"></a></p>\n          <h1>\n            <a href="#encryption">\n              Encryption\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#configuration">Configuration</a></li>\n<li><a href="#using-the-encrypter">Using The Encrypter</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Laravel&#39;s encrypter uses OpenSSL to provide AES-256 and AES-128 encryption. You are strongly encouraged to use Laravel&#39;s built-in encryption facilities and not attempt to roll your own &quot;home grown&quot; encryption algorithms. All of Laravel&#39;s encrypted values are signed using a message authentication code (MAC) so that their underlying value can not be modified once encrypted.</p>\n<p><a name="configuration"></a></p>\n\n          <p><a name="configuration"></a></p>\n          <h2>\n            <a href="#configuration">\n              Configuration\n            </a>\n          </h2><p>Before using Laravel&#39;s encrypter, you must set a <code>key</code> option in your <code>config/app.php</code> configuration file. You should use the <code>php artisan key:generate</code> command to generate this key since this Artisan command will use PHP&#39;s secure random bytes generator to build your key. If this value is not properly set, all values encrypted by Laravel will be insecure.</p>\n<p><a name="using-the-encrypter"></a></p>\n\n          <p><a name="using-the-encrypter"></a></p>\n          <h2>\n            <a href="#using-the-encrypter">\n              Using The Encrypter\n            </a>\n          </h2>\n          <p><a name="encrypting-a-value"></a></p>\n          <h4>\n            <a href="#encrypting-a-value">\n              Encrypting A Value\n            </a>\n          </h4><p>You may encrypt a value using the <code>encrypt</code> helper. All encrypted values are encrypted using OpenSSL and the <code>AES-256-CBC</code> cipher. Furthermore, all encrypted values are signed with a message authentication code (MAC) to detect any modifications to the encrypted string:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">Controller</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Request</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Store a secret message for the user.\n     *\n     * <span class="hljs-doctag">@param</span>  Request  $request\n     * <span class="hljs-doctag">@param</span>  int  $id\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">storeSecret</span><span class="hljs-params">(Request $request, $id)</span>\n    </span>{\n        $user = User::findOrFail($id);\n\n        $user-&gt;fill([\n            <span class="hljs-string">\'secret\'</span> =&gt; encrypt($request-&gt;secret),\n        ])-&gt;save();\n    }\n}</span></code></pre>\n  \n          <p><a name="encrypting-without-serialization"></a></p>\n          <h4>\n            <a href="#encrypting-without-serialization">\n              Encrypting Without Serialization\n            </a>\n          </h4><p>Encrypted values are passed through <code>serialize</code> during encryption, which allows for encryption of objects and arrays. Thus, non-PHP clients receiving encrypted values will need to <code>unserialize</code> the data. If you would like to encrypt and decrypt values without serialization, you may use the <code>encryptString</code> and <code>decryptString</code> methods of the <code>Crypt</code> facade:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Crypt</span>;\n\n$encrypted = Crypt::encryptString(<span class="hljs-string">\'Hello world.\'</span>);\n\n$decrypted = Crypt::decryptString($encrypted);</code></pre>\n  \n          <p><a name="decrypting-a-value"></a></p>\n          <h4>\n            <a href="#decrypting-a-value">\n              Decrypting A Value\n            </a>\n          </h4><p>You may decrypt values using the <code>decrypt</code> helper. If the value can not be properly decrypted, such as when the MAC is invalid, an <code>Illuminate\\Contracts\\Encryption\\DecryptException</code> will be thrown:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">Encryption</span>\\<span class="hljs-title">DecryptException</span>;\n\n<span class="hljs-keyword">try</span> {\n    $decrypted = decrypt($encryptedValue);\n} <span class="hljs-keyword">catch</span> (DecryptException $e) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  '},"4b36":function(s,e,a){"use strict";var n=a("2703"),t=a.n(n);t.a},"4bbd":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="laravel-socialite"></a></p>\n          <h1>\n            <a href="#laravel-socialite">\n              Laravel Socialite\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#upgrading-socialite">Upgrading Socialite</a></li>\n<li><a href="#installation">Installation</a></li>\n<li><a href="#configuration">Configuration</a></li>\n<li><a href="#routing">Routing</a></li>\n<li><a href="#optional-parameters">Optional Parameters</a></li>\n<li><a href="#access-scopes">Access Scopes</a></li>\n<li><a href="#stateless-authentication">Stateless Authentication</a></li>\n<li><a href="#retrieving-user-details">Retrieving User Details</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>In addition to typical, form based authentication, Laravel also provides a simple, convenient way to authenticate with OAuth providers using <router-link to="https://github.com/laravel/socialite">Laravel Socialite</router-link>. Socialite currently supports authentication with Facebook, Twitter, LinkedIn, Google, GitHub, GitLab and Bitbucket.</p>\n<blockquote>\n<p>{tip} Adapters for other platforms are listed at the community driven <router-link to="https://socialiteproviders.netlify.com/">Socialite Providers</router-link> website.</p>\n</blockquote>\n<p><a name="upgrading-socialite"></a></p>\n\n          <p><a name="upgrading-socialite"></a></p>\n          <h2>\n            <a href="#upgrading-socialite">\n              Upgrading Socialite\n            </a>\n          </h2><p>When upgrading to a new major version of Socialite, it&#39;s important that you carefully review <router-link to="https://github.com/laravel/socialite/blob/master/UPGRADE.md">the upgrade guide</router-link>.</p>\n<p><a name="installation"></a></p>\n\n          <p><a name="installation"></a></p>\n          <h2>\n            <a href="#installation">\n              Installation\n            </a>\n          </h2><p>To get started with Socialite, use Composer to add the package to your project&#39;s dependencies:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">composer</span> <span class="hljs-meta">require</span> laravel/socialite</code></pre>\n  <p><a name="configuration"></a></p>\n\n          <p><a name="configuration"></a></p>\n          <h2>\n            <a href="#configuration">\n              Configuration\n            </a>\n          </h2><p>Before using Socialite, you will also need to add credentials for the OAuth services your application utilizes. These credentials should be placed in your <code>config/services.php</code> configuration file, and should use the key <code>facebook</code>, <code>twitter</code>, <code>linkedin</code>, <code>google</code>, <code>github</code>, <code>gitlab</code> or <code>bitbucket</code>, depending on the providers your application requires. For example:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'github\'</span> =&gt; [\n    <span class="hljs-string">\'client_id\'</span> =&gt; env(<span class="hljs-string">\'GITHUB_CLIENT_ID\'</span>),\n    <span class="hljs-string">\'client_secret\'</span> =&gt; env(<span class="hljs-string">\'GITHUB_CLIENT_SECRET\'</span>),\n    <span class="hljs-string">\'redirect\'</span> =&gt; <span class="hljs-string">\'http://your-callback-url\'</span>,\n],</code></pre>\n  <blockquote>\n<p>{tip} If the <code>redirect</code> option contains a relative path, it will automatically be resolved to a fully qualified URL.</p>\n</blockquote>\n<p><a name="routing"></a></p>\n\n          <p><a name="routing"></a></p>\n          <h2>\n            <a href="#routing">\n              Routing\n            </a>\n          </h2><p>Next, you are ready to authenticate users! You will need two routes: one for redirecting the user to the OAuth provider, and another for receiving the callback from the provider after authentication. We will access Socialite using the <code>Socialite</code> facade:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">Auth</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Socialite</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Redirect the user to the GitHub authentication page.\n     *\n     * <span class="hljs-doctag">@return</span> \\Illuminate\\Http\\Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">redirectToProvider</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> Socialite::driver(<span class="hljs-string">\'github\'</span>)-&gt;redirect();\n    }\n\n    <span class="hljs-comment">/**\n     * Obtain the user information from GitHub.\n     *\n     * <span class="hljs-doctag">@return</span> \\Illuminate\\Http\\Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleProviderCallback</span><span class="hljs-params">()</span>\n    </span>{\n        $user = Socialite::driver(<span class="hljs-string">\'github\'</span>)-&gt;user();\n\n        <span class="hljs-comment">// $user-&gt;token;</span>\n    }\n}</span></code></pre>\n  <p>The <code>redirect</code> method takes care of sending the user to the OAuth provider, while the <code>user</code> method will read the incoming request and retrieve the user&#39;s information from the provider.</p>\n<p>You will need to define routes to your controller methods:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-type">Route</span>::get(<span class="hljs-symbol">\'login</span>/github\', <span class="hljs-symbol">\'Auth</span>\\<span class="hljs-type">LoginController</span>@redirectToProvider\');\n<span class="hljs-type">Route</span>::get(<span class="hljs-symbol">\'login</span>/github/callback\', <span class="hljs-symbol">\'Auth</span>\\<span class="hljs-type">LoginController</span>@handleProviderCallback\');</code></pre>\n  <p><a name="optional-parameters"></a></p>\n\n          <p><a name="optional-parameters"></a></p>\n          <h2>\n            <a href="#optional-parameters">\n              Optional Parameters\n            </a>\n          </h2><p>A number of OAuth providers support optional parameters in the redirect request. To include any optional parameters in the request, call the <code>with</code> method with an associative array:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> Socialite::driver<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'google\'</span>)</span>\n    -&gt;</span><span class="hljs-keyword">with</span><span class="hljs-function"><span class="hljs-params">([<span class="hljs-string">\'hd\'</span> =&gt; <span class="hljs-string">\'example.com\'</span>])</span>\n    -&gt;</span>redirect();</code></pre>\n  <blockquote>\n<p>{note} When using the <code>with</code> method, be careful not to pass any reserved keywords such as <code>state</code> or <code>response_type</code>.</p>\n</blockquote>\n<p><a name="access-scopes"></a></p>\n\n          <p><a name="access-scopes"></a></p>\n          <h2>\n            <a href="#access-scopes">\n              Access Scopes\n            </a>\n          </h2><p>Before redirecting the user, you may also add additional &quot;scopes&quot; on the request using the <code>scopes</code> method. This method will merge all existing scopes with the ones you supply:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> Socialite::driver<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'github\'</span>)</span>\n    -&gt;</span>scopes<span class="hljs-function"><span class="hljs-params">([<span class="hljs-string">\'read:user\'</span>, <span class="hljs-string">\'public_repo\'</span>])</span>\n    -&gt;</span>redirect();</code></pre>\n  <p>You can overwrite all existing scopes using the <code>setScopes</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> Socialite::driver<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'github\'</span>)</span>\n    -&gt;</span>setScopes<span class="hljs-function"><span class="hljs-params">([<span class="hljs-string">\'read:user\'</span>, <span class="hljs-string">\'public_repo\'</span>])</span>\n    -&gt;</span>redirect();</code></pre>\n  <p><a name="stateless-authentication"></a></p>\n\n          <p><a name="stateless-authentication"></a></p>\n          <h2>\n            <a href="#stateless-authentication">\n              Stateless Authentication\n            </a>\n          </h2><p>The <code>stateless</code> method may be used to disable session state verification. This is useful when adding social authentication to an API:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> Socialite::driver<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'google\'</span>)</span>-&gt;</span>stateless<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>user();</code></pre>\n  <p><a name="retrieving-user-details"></a></p>\n\n          <p><a name="retrieving-user-details"></a></p>\n          <h2>\n            <a href="#retrieving-user-details">\n              Retrieving User Details\n            </a>\n          </h2><p>Once you have a user instance, you can grab a few more details about the user:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span> = Socialite::driver(<span class="hljs-string">\'github\'</span>)-&gt;user();\n\n<span class="hljs-regexp">//</span> OAuth Two Providers\n<span class="hljs-variable">$token</span> = <span class="hljs-variable">$user</span>-&gt;token;\n<span class="hljs-variable">$refreshToken</span> = <span class="hljs-variable">$user</span>-&gt;refreshToken; <span class="hljs-regexp">//</span> <span class="hljs-keyword">not</span> always provided\n<span class="hljs-variable">$expiresIn</span> = <span class="hljs-variable">$user</span>-&gt;expiresIn;\n\n<span class="hljs-regexp">//</span> OAuth One Providers\n<span class="hljs-variable">$token</span> = <span class="hljs-variable">$user</span>-&gt;token;\n<span class="hljs-variable">$tokenSecret</span> = <span class="hljs-variable">$user</span>-&gt;tokenSecret;\n\n<span class="hljs-regexp">//</span> All Providers\n<span class="hljs-variable">$user</span>-&gt;getId();\n<span class="hljs-variable">$user</span>-&gt;getNickname();\n<span class="hljs-variable">$user</span>-&gt;getName();\n<span class="hljs-variable">$user</span>-&gt;getEmail();\n<span class="hljs-variable">$user</span>-&gt;getAvatar();</code></pre>\n  \n          <p><a name="retrieving-user-details-from-a-token-oauth2-"></a></p>\n          <h4>\n            <a href="#retrieving-user-details-from-a-token-oauth2-">\n              Retrieving User Details From A Token (OAuth2)\n            </a>\n          </h4><p>If you already have a valid access token for a user, you can retrieve their details using the <code>userFromToken</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span> = Socialite::driver(<span class="hljs-string">\'github\'</span>)-&gt;userFromToken(<span class="hljs-variable">$token</span>);</code></pre>\n  \n          <p><a name="retrieving-user-details-from-a-token-and-secret-oauth1-"></a></p>\n          <h4>\n            <a href="#retrieving-user-details-from-a-token-and-secret-oauth1-">\n              Retrieving User Details From A Token And Secret (OAuth1)\n            </a>\n          </h4><p>If you already have a valid pair of token / secret for a user, you can retrieve their details using the <code>userFromTokenAndSecret</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span> = Socialite::driver(<span class="hljs-string">\'twitter\'</span>)-&gt;userFromTokenAndSecret(<span class="hljs-variable">$token</span>, <span class="hljs-variable">$secret</span>);</code></pre>\n  '},"4f4a":function(s,e,a){"use strict";a.r(e),e["default"]="<p>The MIT License (MIT)</p>\n<p>Copyright (c) Taylor Otwell</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the &quot;Software&quot;), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.</p>\n"},"522e":function(module,__webpack_exports__,__webpack_require__){"use strict";var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("ac6a"),core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_0__),core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("a481"),core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_1__),vue__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("a026"),highlight_js_styles_github_css__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("2c43"),highlight_js_styles_github_css__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(highlight_js_styles_github_css__WEBPACK_IMPORTED_MODULE_3__),_raw_loader_snippets_documentation_md__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("be64");function htmlEntities(s){return String(s).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;")}vue__WEBPACK_IMPORTED_MODULE_2__["a"].component("dynamic-link",{template:'<component :is="transformed" /></component>',props:["text"],data:function(){return{}},computed:{transformed:function(){return{template:"<div>".concat(this.text,"</div>"),methods:{runCode:function(s){var e=atob(s);e=JSON.parse(e),this.$store.dispatch("tryCodeFromDocumentation",e),e.hash&&(this.$store.dispatch("setSavedHash",e.hash),this.$router.push("/snippets/".concat(e.hash)))}}}}}});var marked=__webpack_require__("0e54"),renderer=new marked.Renderer,files={};files=__webpack_require__("5be8");var docs={};function renderMarkdown(s){return marked(s,{renderer:renderer})}files.keys().forEach((function(s){"./documentation.md"!==s&&(docs[s.replace(/(\.\/|\.html)/g,"")]=files(s).default)})),renderer.link=function(s,e,a){return 0===s.indexOf("#")?'<a href="'.concat(s,'">').concat(a,"</a>"):'<router-link to="'.concat(s,'">').concat(a,"</router-link>")},renderer.heading=function(s,e){var a=s.toLowerCase().replace(/[^\w]+/g,"-");return'\n          <p><a name="'.concat(a,'"></a></p>\n          <h').concat(e,'>\n            <a href="#').concat(a,'">\n              ').concat(s,"\n            </a>\n          </h").concat(e,">")},renderer.code=function(code,infostring,escaped){if("try-code"===infostring){var codeObject=eval("(".concat(code,")"));return'<a href="" \n      class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n      @click.prevent="runCode(\''.concat(btoa(JSON.stringify(codeObject)),"')\">Tinker with this code</a>")}var formattedCode=htmlEntities(code);return'\n      <pre class="language-php" v-pre><code class="language-php">'.concat(formattedCode,"</code></pre>\n    ")},__webpack_exports__["a"]={data:function(){return{}},computed:{documentationTopics:function(){return docs["documentation"]},documentationHtml:function(){return this.$route.params.documentation?docs[this.$route.params.documentation]:docs.responses},documentation:function(){return this.$route.params.documentation}},methods:{closeDocumentation:function(){this.$router.push({path:"/"}),this.$store.dispatch("showDocumentation",!1)}}}},"53a7":function(s,e,a){},5461:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="request-lifecycle"></a></p>\n          <h1>\n            <a href="#request-lifecycle">\n              Request Lifecycle\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#lifecycle-overview">Lifecycle Overview</a></li>\n<li><a href="#focus-on-service-providers">Focus On Service Providers</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>When using any tool in the &quot;real world&quot;, you feel more confident if you understand how that tool works. Application development is no different. When you understand how your development tools function, you feel more comfortable and confident using them.</p>\n<p>The goal of this document is to give you a good, high-level overview of how the Laravel framework works. By getting to know the overall framework better, everything feels less &quot;magical&quot; and you will be more confident building your applications. If you don&#39;t understand all of the terms right away, don&#39;t lose heart! Just try to get a basic grasp of what is going on, and your knowledge will grow as you explore other sections of the documentation.</p>\n<p><a name="lifecycle-overview"></a></p>\n\n          <p><a name="lifecycle-overview"></a></p>\n          <h2>\n            <a href="#lifecycle-overview">\n              Lifecycle Overview\n            </a>\n          </h2>\n          <p><a name="first-things"></a></p>\n          <h3>\n            <a href="#first-things">\n              First Things\n            </a>\n          </h3><p>The entry point for all requests to a Laravel application is the <code>public/index.php</code> file. All requests are directed to this file by your web server (Apache / Nginx) configuration. The <code>index.php</code> file doesn&#39;t contain much code. Rather, it is a starting point for loading the rest of the framework.</p>\n<p>The <code>index.php</code> file loads the Composer generated autoloader definition, and then retrieves an instance of the Laravel application from <code>bootstrap/app.php</code> script. The first action taken by Laravel itself is to create an instance of the application / <router-link to="/docs/{{version}}/container">service container</router-link>.</p>\n\n          <p><a name="http-console-kernels"></a></p>\n          <h3>\n            <a href="#http-console-kernels">\n              HTTP / Console Kernels\n            </a>\n          </h3><p>Next, the incoming request is sent to either the HTTP kernel or the console kernel, depending on the type of request that is entering the application. These two kernels serve as the central location that all requests flow through. For now, let&#39;s just focus on the HTTP kernel, which is located in <code>app/Http/Kernel.php</code>.</p>\n<p>The HTTP kernel extends the <code>Illuminate\\Foundation\\Http\\Kernel</code> class, which defines an array of <code>bootstrappers</code> that will be run before the request is executed. These bootstrappers configure error handling, configure logging, <router-link to="/docs/{{version}}/configuration#environment-configuration">detect the application environment</router-link>, and perform other tasks that need to be done before the request is actually handled.</p>\n<p>The HTTP kernel also defines a list of HTTP <router-link to="/docs/{{version}}/middleware">middleware</router-link> that all requests must pass through before being handled by the application. These middleware handle reading and writing the <router-link to="/docs/{{version}}/session">HTTP session</router-link>, determining if the application is in maintenance mode, <router-link to="/docs/{{version}}/csrf">verifying the CSRF token</router-link>, and more.</p>\n<p>The method signature for the HTTP kernel&#39;s <code>handle</code> method is quite simple: receive a <code>Request</code> and return a <code>Response</code>. Think of the Kernel as being a big black box that represents your entire application. Feed it HTTP requests and it will return HTTP responses.</p>\n\n          <p><a name="service-providers"></a></p>\n          <h4>\n            <a href="#service-providers">\n              Service Providers\n            </a>\n          </h4><p>One of the most important Kernel bootstrapping actions is loading the <router-link to="/docs/{{version}}/providers">service providers</router-link> for your application. All of the service providers for the application are configured in the <code>config/app.php</code> configuration file&#39;s <code>providers</code> array. First, the <code>register</code> method will be called on all providers, then, once all providers have been registered, the <code>boot</code> method will be called.</p>\n<p>Service providers are responsible for bootstrapping all of the framework&#39;s various components, such as the database, queue, validation, and routing components. Since they bootstrap and configure every feature offered by the framework, service providers are the most important aspect of the entire Laravel bootstrap process.</p>\n\n          <p><a name="dispatch-request"></a></p>\n          <h4>\n            <a href="#dispatch-request">\n              Dispatch Request\n            </a>\n          </h4><p>Once the application has been bootstrapped and all service providers have been registered, the <code>Request</code> will be handed off to the router for dispatching. The router will dispatch the request to a route or controller, as well as run any route specific middleware.</p>\n<p><a name="focus-on-service-providers"></a></p>\n\n          <p><a name="focus-on-service-providers"></a></p>\n          <h2>\n            <a href="#focus-on-service-providers">\n              Focus On Service Providers\n            </a>\n          </h2><p>Service providers are truly the key to bootstrapping a Laravel application. The application instance is created, the service providers are registered, and the request is handed to the bootstrapped application. It&#39;s really that simple!</p>\n<p>Having a firm grasp of how a Laravel application is built and bootstrapped via service providers is very valuable. Your application&#39;s default service providers are stored in the <code>app/Providers</code> directory.</p>\n<p>By default, the <code>AppServiceProvider</code> is fairly empty. This provider is a great place to add your application&#39;s own bootstrapping and service container bindings. For large applications, you may wish to create several service providers, each with a more granular type of bootstrapping.</p>\n'},"56d7":function(s,e,a){"use strict";a.r(e);a("7f7f"),a("ac4d"),a("8a81"),a("ac6a"),a("386d"),a("cadf"),a("551c"),a("f751"),a("097d");var n=a("a026"),t=a("6018"),l=function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("router-view")},o=[],p={name:"App"},c=p,r=a("2877"),i=Object(r["a"])(c,l,o,!1,null,"6dd96670",null),h=i.exports,d=a("8c4f"),u=function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("main",{class:{"cursor-wait":s.isRunning}},[s.phpLoaded?s._e():a("php-loading"),a("PresetSelection"),a("GistModal"),a("EmbedModal"),a("div",{staticClass:"w-full max-h-screen h-screen overflow-y-hidden flex flex-col"},[s._e(),a("EmbedNavbar"),a("div",{staticClass:"flex-1 flex max-h-full"},[a("div",{staticClass:"flex flex-1 flex-row w-full"},[s.showDocumentation?a("Documentation"):s._e(),s.isEmbedded?s._e():a("Toolbar"),s.showFiles?a("Files"):s._e(),a("div",{staticClass:"flex w-full flex-row"},[a("Editor",{directives:[{name:"show",rawName:"v-show",value:s.codeVisible,expression:"codeVisible"}],ref:"editor",attrs:{classes:s.editorClasses,documentationProperty:"cliCode",defaultCode:s.defaultCliCode(),name:"preload",loading:s.loading},model:{value:s.preload,callback:function(e){s.preload=e},expression:"preload"}}),a("html-output",{directives:[{name:"show",rawName:"v-show",value:s.resultsVisible,expression:"resultsVisible"}]}),s.codeVisible||s.resultsVisible?s._e():a("div",{staticClass:"flex flex-1 items-center justify-center text-center"},[s._v("\n            Nothing to see here."),a("br"),s._v(' You should activate either the "Code" or the "Result" view.\n          ')])],1)],1)]),a("footer-bar")],1)],1)},g=[],m=(a("456d"),a("96cf"),a("3b8d")),y=a("9b6a"),j=a("2ef0"),b=a("cbde"),f=function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("div",{staticClass:"flex-1 flex flex-col justify-center align-center h-full absolute top-0 right-0 w-full z-50 bg-gray-900 text-white"},[a("div",{staticClass:"text-center flex align-center items-center justify-center flex-col"},[s.isSupportedBrowser?a("div",[a("h3",{staticClass:"text-2xl mt-3"},[s._v("Laravel Playground is loading")]),a("p",{staticClass:"mt-1"},[s._v("Please wait - depending on your internet connection the initial load might take a bit...")])]):a("div",[a("h3",{staticClass:"text-2xl mt-3"},[s._v("Unable to load Laravel Playground")]),a("p",{staticClass:"mt-1"},[s._v("Sorry, but your browser is currently not supported for Laravel Playground.")])])])])},w=[],v=a("5b7e"),k=a.n(v),I={name:"PhpLoading",components:{Spinner:k.a},data:function(){return{isSupportedBrowser:window.isSupportedBrowser}},mounted:function(){},methods:{progress:function(s){var e=s.loaded,a=s.total;this.progress=Math.round(e/a*100)+"%"}}},C=I,x=Object(r["a"])(C,f,w,!1,null,"7a853529",null),A=x.exports,G=function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("div",{staticClass:"documentation max-h-full h-full w-full absolute bg-white z-50 flex"},[a("nav",[a("div",{staticClass:"sidebar h-full px-12 pt-12"},[a("dynamic-link",{attrs:{text:s.documentationTopics}}),s._m(0)],1)]),a("div",{staticClass:"method-docs pl-10"},[a("div",{staticClass:"docs flex max-w-3xl leading-loose px-5"},[a("dynamic-link",{attrs:{text:s.documentationHtml}})],1)])])},T=[function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ul",[a("li",[a("h2",[a("a",{attrs:{href:"https://github.com/beyondcode/tinkerwell-web-docs",target:"_blank"}},[s._v("\n                Contribute to the documentation\n              ")])])])])}],R=a("522e"),W=R["a"],S=(a("cb29"),Object(r["a"])(W,G,T,!1,null,null,null)),Z=S.exports,J=function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("div",{staticClass:"flex flex-col",class:s.classes},[a("div",{staticClass:"flex",class:{"bg-white":"light"===s.editorTheme,"bg-gray-700":"light"!==s.editorTheme}},[a("p",{staticClass:"text-sm px-6 flex items-center h-8",class:{"cursor-pointer":s.isEmbedded,"bg-gray-200 text-gray-700":"light"===s.editorTheme,"bg-gray-800 text-white":"light"!==s.editorTheme},on:{click:s.toggleFiles}},[s.showFiles?a("i",{staticClass:"fa fa-arrow-right mr-1"}):s._e(),s.showFiles?s._e():a("i",{staticClass:"fa fa-arrow-left mr-1"}),s._v("\n      "+s._s(s.currentFile.filename)+"\n    ")])]),a("div",{staticClass:"border-r flex-1"},[a("MonacoEditor",{ref:"monaco",attrs:{width:"100%",theme:s.monacoTheme,value:s.editorValue,editorBeforeMount:s.initMonacoLanguages,editorMounted:s.initMonaco,language:"php",options:s.monacoOptions},on:{change:s.onChange}})],1)])},X=[],Y=(a("28a5"),a("b61c")),$=a.n(Y),V=a("0e09"),F=a("9f02"),q=a("07e9");a("56b3");function P(s){var e=null,a=[];return location.search.substr(1).split("&").forEach((function(n){a=n.split("="),a[0]===s&&(e=decodeURIComponent(a[1]))})),e}var N={name:"Editor",components:{Spinner:k.a,MonacoEditor:$.a},props:{name:String,documentationProperty:String,defaultCode:String,classes:String,value:String,loading:Boolean},data:function(){return{monaco:null,editorValue:"",unsubscriber:null,code:this.value,timeout:null,editor:null,monacoOptions:{readOnly:this.readOnly,automaticLayout:!1,scrollBeyondLastLine:!1,glyphMargin:!1,minimap:{enabled:!1},lightbulb:{enabled:!0}}}},computed:{monacoTheme:function(){return"light"!==this.editorTheme?"dark":"vs"},editorTheme:function(){return this.$store.state.Code.editorTheme},isEmbedded:function(){return!0===this.$store.state.Code.embed},readOnly:function(){return this.$store.state.Code.readOnly},showFiles:function(){return this.$store.state.Code.showFiles},editorHeight:function(){return"100%"},currentFile:function(){return this.$store.state.Code.currentFile}},watch:{readOnly:function(s){this.$refs.monaco.editor.updateOptions({readOnly:s})}},methods:{toggleFiles:function(){this.$store.dispatch("showFiles",!this.$store.state.Code.showFiles)},onChange:function(s){var e=this;s!==this.defaultCode&&this.$store.dispatch("setIsDirty",!0),this.timeout&&clearTimeout(this.timeout),this.timeout=setTimeout((function(){e.$emit("input",s)}),350)},initMonacoLanguages:function(s){s.languages.register({id:"php",extensions:[".php"],aliases:["php"],mimetypes:["application/text"]})},cleanupModels:function(){this.monaco.editor.getModels().forEach((function(s){s.dispose()}))},initMonaco:function(s,e){var n=this;window.monaco=this.monaco=e,this.editor=s,window.editor=s,a.e("chunk-2d0a36db").then(a.t.bind(null,"01ae",3)).then((function(s){e.editor.defineTheme("dark",s),"dark"===n.editorTheme&&e.editor.setTheme("dark")})),setInterval((function(){var s=document.getElementsByClassName("monaco-editor")[0];s.style.height="1px",n.editor.layout(),s.style.height=document.getElementsByClassName("overflow-guard")[0].style.height}),500);var t="/home/forge/tinkerwell-now";console.log=function(){},F["MonacoServices"].install(s,{rootUri:t});var l="wss://lsp.laravelplayground.com/php",o=c(l);function p(s){return new F["MonacoLanguageClient"]({name:"Sample Language Client",clientOptions:{documentSelector:["php"],initializationOptions:{},errorHandler:{error:function(){return F["ErrorAction"].Continue},closed:function(){return F["CloseAction"].DoNotRestart}}},connectionProvider:{get:function(e,a){return Promise.resolve(Object(F["createConnection"])(s,e,a))}}})}function c(s){var e={maxReconnectionDelay:1e4,minReconnectionDelay:1e3,reconnectionDelayGrowFactor:1.3,connectionTimeout:1e4,maxRetries:1/0,debug:!1};return new q(s,[],e)}Object(V["listen"])({webSocket:o,onConnection:function(s){var e=p(s),a=e.start();s.onClose((function(){return a.dispose()}))}})}},beforeDestroy:function(){this.unsubscriber()},mounted:function(){var s=this;this.unsubscriber=this.$store.subscribe((function(e,a){if("tryCodeFromDocumentation"===e.type&&e.payload[s.documentationProperty]&&(s.editorValue=e.payload[s.documentationProperty],s.$store.dispatch("setIsDirty",!1),setTimeout((function(){s.$root.$emit("php.run.tinkerwell")}),150)),"loadSnippet"===e.type){if(s.cleanupModels(),e.payload[s.documentationProperty]){for(var n in s.editorValue=e.payload[s.documentationProperty],e.payload.files){var t=s.monaco.Uri.file(e.payload.files[n].filename),l=void 0;l=s.monaco.editor.getModel(t),l?l.setValue(e.payload.files[n].content):s.monaco.editor.createModel(e.payload.files[n].content,"php",t)}s.$store.dispatch("setIsDirty",!1)}s.$store.state.Code.embed&&s.$root.$emit("php.run.tinkerwell")}if("setFiles"===e.type)for(var o in s.cleanupModels(),e.payload){var p=s.monaco.Uri.file(e.payload[o].filename),c=void 0;c=s.monaco.editor.getModel(p),c?c.setValue(e.payload[o].content):s.monaco.editor.createModel(e.payload[o].content,"php",p)}if("loadFile"===e.type){var r,i=s.monaco.Uri.file(e.payload.filename);r=s.monaco.editor.getModel(i),r?r.setValue(e.payload.content):r=s.monaco.editor.createModel(e.payload.content,"php",i),s.editorValue=e.payload.content,s.editor.setModel(r)}})),this.$root.$on("php.loaded",(function(){s.phpLoaded=!0;try{var e=P("code");if(null===e)return;var a=atob(decodeURIComponent(e));return s.$store.dispatch("setPreference",{key:"autoEvaluate",value:!1}),void(s.editorValue=a)}catch(n){}}))}},L=N,H=(a("9f53"),a("40f1"),Object(r["a"])(L,J,X,!1,null,"590ae560",null)),B=H.exports,z=function(){var s=this,e=s.$createElement;s._self._c;return s._m(0)},D=[function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("div",{staticClass:"flex-1 flex flex-col w-full md:w-1/2"},[a("div",{staticClass:"h-full"},[a("textarea",{attrs:{id:"output"}})])])}],M=(a("a481"),a("4917"),a("21a6"),a("697e"),a("d2e8"),a("8c06"),a("0109"),function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("div",{staticClass:"flex-1 flex flex-col align-center h-full"},[a("div",{staticClass:"bg-red-700 text-white font-bold px-4 py-2"},[s._v("\n    Execution Failed - "+s._s(s.error.type)+"\n  ")]),a("div",{staticClass:" border-red-400 bg-red-100 px-4 py-3 text-red-700 h-full"},[a("p",{staticClass:"whitespace-pre-wrap"},[s._v(s._s(s.error.message))])])])}),O=[],U={name:"PhpError",props:{error:Object}},E=U,_=Object(r["a"])(E,M,O,!1,null,"ab0a2cbc",null),Q=_.exports,K=a("56b3");a("9a48"),a("7289"),a("b933"),a("4895"),a("cbc8"),a("8d70"),a("aedd"),a("9eb9"),a("d69f"),a("d5e0"),a("4ba6"),a("44d5"),K.defineMode("ansi",(function(s,e){var a={token:function(s,e){var a;if(s.match("[43m"))while(null!=(a=s.next()))if("["==a&&"4"==s.next()&&"9"==s.next()&&"m"==s.next())return s.eat("4"),"warning";if(s.match("[41m"))while(null!=(a=s.next()))if("["==a&&"4"==s.next()&&"9"==s.next()&&"m"==s.next())return s.eat("4"),"error";while(null!=s.next()&&!s.match("[43m",!1)&&!s.match("[41m",!1));return null}};return K.overlayMode(K.getMode(s,e.backdrop||"text/x-php"),a)}));var ss={name:"Output",components:{PhpError:Q,PhpLoading:A},props:{value:String},data:function(){return{outputJson:null,outputError:null,editor:null}},computed:{phpLoaded:function(){return this.$store.state.Code.phpLoaded},theme:function(){return this.$store.state.Code.theme},lineHeight:function(){return this.$store.state.Code.lineHeight},fontSize:function(){return this.$store.state.Code.fontSize},font:function(){return this.$store.state.Code.font},lineNumbers:function(){return this.$store.state.Code.lineNumbers},lineWrapping:function(){return this.$store.state.Code.lineWrapping}},watch:{theme:function(s){this.editor.setOption("theme",s.toLowerCase()),this.editor.refresh()},lineNumbers:function(s){this.editor.setOption("lineNumbers",s)},lineWrapping:function(s){this.editor.setOption("lineWrapping",s)},lineHeight:function(s){this.editor.getWrapperElement().style.lineHeight=s,this.editor.refresh()},font:function(s){this.editor.getWrapperElement().style.fontFamily=s,this.editor.refresh()},fontSize:function(s){this.editor.getWrapperElement().style.fontSize=s+"px",this.editor.refresh()},value:function(s){this.outputJson=s}},methods:{loadSettings:function(){this.editor.setOption("theme",this.theme.toLowerCase()),this.editor.getWrapperElement().style.lineHeight=this.lineHeight,this.editor.getWrapperElement().style.fontSize=this.fontSize+"px",this.editor.setOption("lineNumbers",this.lineNumbers),this.editor.setOption("lineWrapping",this.lineWrapping),this.editor.refresh()}},mounted:function(){var s=this;this.editor=K.fromTextArea(document.getElementById("output"),{mode:"ansi",lineNumbers:!0,lineWrapping:!1,theme:"dracula",gutters:["CodeMirror-linenumbers","CodeMirror-foldgutter"],foldGutter:!0,readOnly:!0}),this.editor.on("renderLine",(function(s,e,a){var n=/(\[(43|41)m)(.*?)(\[49m)/gm,t=a.innerHTML;null!==n.exec(t)&&(a.innerHTML=t.replace(n,"$3"))})),this.editor.getWrapperElement().style.fontFamily="Fira Code",this.editor.refresh(),this.loadSettings(),this.$store.subscribe((function(e,a){"loadSnippet"===e.type&&s.editor.getDoc().setValue(e.payload.output)}))},created:function(){var s=this;if(!window.isSupportedBrowser)return this.$store.dispatch("setPHPLoaded",!0),void(this.outputError={type:"Browser Not Supported",message:"To use Tinkerwell, a recent desktop browser version supporting web assembly is required.\n\nChrome: >= v60\nFirefox: >= v60\nSafari: >= v13\n"});this.$root.$on("php.loaded",(function(){s.$store.dispatch("setPHPLoaded",!0)})),this.$root.$on("php.print",(function(e){s.outputJson=e,s.editor.getDoc().setValue(s.outputJson)}))}},es=ss,as=(a("1270"),Object(r["a"])(es,z,D,!1,null,"7e18b980",null)),ns=as.exports,ts=function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("div",{staticClass:"flex-1 flex flex-col",class:{"w-full md:w-1/2":!s.isEmbedded,"w-full z-10":s.isEmbedded}},[a("div",{staticClass:"h-full flex flex-col",style:s.outputStyle},[a("input",{directives:[{name:"model",rawName:"v-model",value:s.route,expression:"route"}],staticClass:"border-b border-gray-400 font-mono w-full focus:outline-none px-2 h-8",style:s.outputStyle,attrs:{type:"text",placeholder:"URL"},domProps:{value:s.route},on:{keyup:function(e){return!e.type.indexOf("key")&&s._k(e.keyCode,"enter",13,e.key,"Enter")?null:s.visitUrl(e)},input:function(e){e.target.composing||(s.route=e.target.value)}}}),a("iframe",{ref:"iframe",style:s.outputStyle,attrs:{id:"htmloutput"},on:{load:s.iframeLoaded}})])])},ls=[],os={name:"HtmlOutput",components:{PhpLoading:A},props:{value:String},data:function(){return{resizing:!1,route:"/",output:'<!DOCTYPE html>\n<html class="h-full" lang="en">\n    <head>\n        <meta charset="utf-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1">\n\n        <title>Tinkerwell</title>\n\n        \x3c!-- Styles --\x3e\n        <link href="https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css" rel="stylesheet">\n\n    </head>\n    <body class="h-full">\n        <div class="flex justify-center items-center h-full">\n            <div class="text-center">\n                <div class="text-6xl text-gray-700 font-bold">\n                    Tinkerwell\n                </div>\n\n                <div class="uppercase font-bold text-sm text-gray-600">\n                    <a href="https://tinkerwell.app">Get Tinkerwell App</a>\n                </div>\n            </div>\n        </div>\n    </body>\n</html>\n'}},computed:{outputStyle:function(){return this.resizing?{"pointer-events":!0===this.resizing?"none":"auto"}:{}},isEmbedded:function(){return!0===this.$store.state.Code.embed},phpLoaded:function(){return this.$store.state.Code.phpLoaded}},methods:{startResizing:function(){this.resizing=!0},stopResizing:function(){this.resizing=!1},tryResize:function(s){if(this.resizing){var e=document.body.offsetHeight-16,a=s.clientY/e*100;s.clientY<200||s.clientY>e-200||(this.$parent.$refs.editor.$el.style.height="".concat(a,"%"))}},visitUrl:function(){var s="https://".concat(this.$store.state.Code.iframeId,".").concat(this.$store.state.Code.deployment,".laravelplayground.com"),e=s+this.route;this.$refs.iframe.setAttribute("src",e)},iframeLoaded:function(){this.$refs.iframe.contentWindow.postMessage("getLocation","*"),this.$store.dispatch("setIframeLoaded",!0)}},mounted:function(){var s=this;this.$root.$on("php.loaded",(function(){s.$store.dispatch("setPHPLoaded",!0)})),this.$root.$on("php.print",(function(e){s.visitUrl()})),window.addEventListener("message",(function(e){"setLocation"===e.data.method&&(s.route=e.data.location||"/")}))}},ps=os,cs=(a("7c5b"),Object(r["a"])(ps,ts,ls,!1,null,"89610f56",null)),rs=cs.exports,is=function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("div",{staticClass:"tinkerToolbar bg-gray-200 text-black",class:{"bg-gray-200 text-gray-700":"light"===s.theme,"bg-gray-800 text-white":"light"!==s.theme}},[s.isEmbedded?s._e():a("a",{directives:[{name:"tippy",rawName:"v-tippy",value:{placement:"right",theme:"light",arrow:!0,distance:18},expression:"{placement: 'right', theme: 'light', arrow: true, distance: 18}"}],staticClass:"flex items-center justify-center text-current block text-md icon",attrs:{content:"New Playground",href:"#"},on:{click:function(e){return e.preventDefault(),s.showPresetSelection(e)}}},[a("i",{staticClass:"fas fa-plus"})]),s.isEmbedded?s._e():a("a",{directives:[{name:"tippy",rawName:"v-tippy",value:{placement:"right",theme:"light",arrow:!0,distance:18},expression:"{placement: 'right', theme: 'light', arrow: true, distance: 18}"}],staticClass:"flex items-center justify-center text-current block text-md icon",attrs:{content:"Open Gist",href:"#"},on:{click:function(e){return e.preventDefault(),s.showGistInput(e)}}},[a("i",{staticClass:"fab fa-github"})]),a("a",{directives:[{name:"tippy",rawName:"v-tippy",value:{placement:"right",theme:"light",arrow:!0,distance:18},expression:"{placement: 'right', theme: 'light', arrow: true, distance: 18}"}],staticClass:"flex items-center justify-center text-current block text-md icon",attrs:{content:"Files",href:"#"},on:{click:function(e){return e.preventDefault(),s.showFiles(e)}}},[a("i",{staticClass:"fas fa-file"})]),s.isEmbedded?s._e():a("a",{directives:[{name:"tippy",rawName:"v-tippy",value:{placement:"right",theme:"dark",arrow:!0,distance:18},expression:"{placement: 'right', theme: 'dark', arrow: true, distance: 18}"}],staticClass:"flex items-center justify-center text-current block text-md icon",attrs:{content:"Documentation",target:"_blank",href:"https://beyondco.de/docs/laravel-playground"}},[a("i",{staticClass:"fas fa-question"})]),s.isEmbedded||"light"===s.theme?s._e():a("a",{directives:[{name:"tippy",rawName:"v-tippy",value:{placement:"right",theme:"light",arrow:!0,distance:18},expression:"{placement: 'right', theme: 'light', arrow: true, distance: 18}"}],staticClass:"flex items-center justify-center text-current block text-md icon",attrs:{content:"Switch to light-mode",href:"#"},on:{click:function(e){return e.preventDefault(),s.setTheme("light")}}},[a("i",{staticClass:"fas fa-sun"})]),s.isEmbedded||"light"!==s.theme?s._e():a("a",{directives:[{name:"tippy",rawName:"v-tippy",value:{placement:"right",theme:"dark",arrow:!0,distance:18},expression:"{placement: 'right', theme: 'dark', arrow: true, distance: 18}"}],staticClass:"flex items-center justify-center text-current block text-md icon",attrs:{content:"Switch to dark-mode",href:"#"},on:{click:function(e){return e.preventDefault(),s.setTheme("dark")}}},[a("i",{staticClass:"fas fa-moon"})])])},hs=[],ds=a("3d20"),us=a.n(ds),gs={data:function(){return{}},computed:{theme:function(){return this.$store.state.Code.editorTheme},isEmbedded:function(){return!0===this.$store.state.Code.embed},autoEvaluate:function(){return this.$store.state.Code.autoEvaluate},mode:function(){return this.$store.state.Code.mode}},methods:{setTheme:function(s){this.$store.dispatch("setTheme",s)},showPresetSelection:function(){this.$store.dispatch("showPresetSelection",!0)},showGistInput:function(){this.$store.dispatch("showGistInput",!0)},openDocumentation:function(){this.$store.dispatch("showDocumentation",!0)},openWorkingDirectory:function(){us.a.fire({imageUrl:"https://tinkerwell.app/images/icon.png",imageWidth:150,imageHeight:150,title:"Open a local project",html:'<p class="pb-2 font-bold">This feature is available in the Tinkerwell app only.</p><p>With Tinkerwell, you can access your database via Eloquent models (<a class="border-b border-dashed border-black" href="https://tinkerwell.app/tutorials/1-tinker-with-your-database" target="_blank">read more</a>), follow model relationships or just tinker around.</p>',confirmButtonText:"Get Tinkerwell app",showCloseButton:!0,showCancelButton:!0,cancelButtonText:"Cancel"}).then((function(s){s.value&&window.open("https://tinkerwell.app/?ref=playground","_blank")}))},connectSSH:function(){us.a.fire({imageUrl:"https://tinkerwell.app/images/icon.png",imageWidth:150,imageHeight:150,title:"Connect to remote projects via SSH",html:'<p class="pb-2 font-bold">This feature is available in the Tinkerwell app only.</p><p>Tinkerwell connects to your remote Laravel applications via SSH and gives you a secure and convenient access to them.</p>',confirmButtonText:"Get Tinkerwell app",showCloseButton:!0,showCancelButton:!0,cancelButtonText:"Cancel"}).then((function(s){s.value&&window.open("https://tinkerwell.app/?ref=playground","_blank")}))},runCode:function(){this.$root.$emit("php.run.tinkerwell")},setMode:function(s){this.$store.dispatch("setPreference",{key:"mode",value:s})},showSettings:function(){this.$parent.showSettings=!0},showFiles:function(){this.$store.dispatch("showFiles",!this.$store.state.Code.showFiles)}}},ms=gs,ys=(a("fee4"),Object(r["a"])(ms,is,hs,!1,null,null,null)),js=ys.exports,bs=function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("div",{staticClass:"bg-gray-100 text-sm border-b flex justify-between"},[s._m(0),a("div",[a("button",{staticClass:"focus:outline-none mr-4 py-1 px-3 font-bold",class:{"bg-green-600 hover:bg-green-800 text-white":!s.isRunning,"cursor-not-allowed bg-gray-300 hover:bg-gray-400 text-gray-800":s.isRunning},attrs:{disabled:s.isRunning},on:{click:function(e){return e.preventDefault(),s.runCode(e)}}},[s._v("run")]),s.isEmbedded?s._e():a("button",{staticClass:"focus:outline-none mr-4 py-1 px-3 font-bold",class:{"bg-blue-500 hover:bg-blue-700 text-white":s.canSaveSnippet,"cursor-not-allowed bg-gray-500 hover:bg-gray-700":!s.canSaveSnippet},attrs:{href:"#",disabled:!s.canSaveSnippet},on:{click:function(e){return e.preventDefault(),s.saveSnippet(e)}}},[s._v("save")]),s.hasSnippet&&!s.isEmbedded?a("button",{staticClass:"focus:outline-none bg-red-500 hover:bg-red-700 ml-4 text-white py-1 px-3 font-bold",attrs:{href:"#"},on:{click:function(e){return e.preventDefault(),s.deleteSnippet(e)}}},[s._v("delete")]):s._e()])])},fs=[function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("div",[a("a",{staticClass:"inline-block py-1 px-3 hover:bg-gray-200 bg-gray-100 text-gray-800",attrs:{href:"#"}},[a("span",{staticClass:"font-medium"},[s._v("Laravel Playground")]),s._v(" by "),a("a",{staticClass:"underline",attrs:{href:"https://beyondco.de",target:"_blank"}},[s._v("Beyond Code")])]),a("a",{staticClass:"border-l inline-block py-1 px-3 bg-gray-100 text-gray-800 text-xs",attrs:{href:"#"}},[s._v("\n      Intellisense is powered by "),a("a",{staticClass:"underline",attrs:{href:"https://intelephense.com",target:"_blank"}},[s._v("intelephense")])])])}],ws=(a("bc3a"),{name:"Navbar",computed:{isEmbedded:function(){return!0===this.$store.state.Code.embed},canSaveSnippet:function(){return!0===this.$store.state.Code.isDirty},hasSnippet:function(){return this.$route.params.snippet},isRunning:function(){return!0===this.$store.state.Code.isRunning}},methods:{runCode:function(){this.$store.dispatch("isRunning",!0),this.$root.$emit("php.run.tinkerwell")},openSnippet:function(){var s=this.$store.state.Code.code;"cli"!==this.$store.state.Code.mode&&(s=this.$store.state.Code.controller),document.location.href="tinkerwell://?code="+btoa(s)},hideDocumentation:function(){this.$store.dispatch("showDocumentation",!1)},deleteSnippet:function(){var s=Object(m["a"])(regeneratorRuntime.mark((function s(){var e,a,n;return regeneratorRuntime.wrap((function(s){while(1)switch(s.prev=s.next){case 0:return s.next=2,us.a.fire({title:"Enter the delete password",text:"Please enter the password you chose when creating this snippet.",input:"text",allowOutsideClick:!1,allowEscapeKey:!1,showCancelButton:!0,inputValue:this.$store.state.Code.deletePassword});case 2:if(e=s.sent,a=e.value,n=e.dismiss,"cancel"!==n){s.next=7;break}return s.abrupt("return");case 7:return s.next=9,b["a"].delete(this.$route.params.snippet,a);case 9:this.$router.push("/");case 10:case"end":return s.stop()}}),s,this)})));function e(){return s.apply(this,arguments)}return e}(),saveSnippet:function(){var s=Object(m["a"])(regeneratorRuntime.mark((function s(){var e,a,n,t;return regeneratorRuntime.wrap((function(s){while(1)switch(s.prev=s.next){case 0:return this.$root.$emit("php.run.tinkerwell"),s.next=3,us.a.fire({title:"Enter a delete password",text:"Use this password if you want to delete the snippet later on.",allowOutsideClick:!1,allowEscapeKey:!1,input:"text",inputValue:this.$store.state.Code.deletePassword});case 3:return e=s.sent,a=e.value,this.$store.dispatch("setPreference",{key:"deletePassword",value:a}),this.$store.dispatch("setIsDirty",!1),n="preload"===this.$store.state.Code.mode?this.$store.state.Code.preload:this.$store.state.Code.code,s.next=10,b["a"].save(a,this.$store.state.Code.mode,n,this.$store.state.Code.controller,this.$store.state.Code.view,this.$store.state.Code.output,this.$store.state.Code.files);case 10:t=s.sent,null!==t&&(this.$store.dispatch("setSavedHash",t),this.$router.push("/snippets/".concat(t)));case 12:case"end":return s.stop()}}),s,this)})));function e(){return s.apply(this,arguments)}return e}()}}),vs=ws,ks=Object(r["a"])(vs,bs,fs,!1,null,"41db191a",null),Is=ks.exports,Cs=function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("div",{staticClass:"text-sm flex items-center justify-between py-2",class:{"bg-gray-100 border-b":"light"===s.theme,"bg-gray-900":"light"!==s.theme}},[a("div",{staticClass:"flex items-center ml-4"},[a("button",{staticClass:"rounded-sm focus:outline-none h-8 flex items-center p-2 mr-2 bg-gray-400",class:{"bg-gray-700 text-white":s.codeVisible},on:{click:s.toggleCode}},[s._v("Code")]),a("button",{staticClass:"rounded-sm focus:outline-none h-8 flex items-center p-2 mr-2 bg-gray-400",class:{"bg-gray-700 text-white":s.resultsVisible},on:{click:s.toggleResults}},[s._v("Result")])]),s.isEmbedded?s._e():a("div",{staticClass:"flex items-center mr-4"},[a("button",{staticClass:"bg-blue-500 hover:bg-blue-700 text-white rounded-sm focus:outline-none h-8 flex items-center p-2 mr-2",attrs:{href:"#"},on:{click:function(e){return e.preventDefault(),s.showEmbed(e)}}},[s._v("Embed")]),a("button",{staticClass:"rounded-sm focus:outline-none h-8 flex items-center p-2 mr-2 bg-gray-400",class:{"bg-blue-500 hover:bg-blue-700 text-white":s.canSaveSnippet,"cursor-not-allowed bg-gray-500 hover:bg-gray-700":!s.canSaveSnippet},attrs:{href:"#",disabled:!s.canSaveSnippet},on:{click:function(e){return e.preventDefault(),s.saveSnippet(e)}}},[s._v("Save")]),s.hasSnippet?a("button",{staticClass:"rounded-sm focus:outline-none h-8 flex items-center p-2 mr-2 bg-gray-400",attrs:{href:"#"},on:{click:function(e){return e.preventDefault(),s.deleteSnippet(e)}}},[s._v("Delete")]):s._e()]),s.isEmbedded?a("div",{staticClass:"flex items-center mr-4 cursor-pointer",class:{"text-black":"light"===s.theme,"text-white":"light"!==s.theme},on:{click:s.openPlayground}},[a("span",{staticClass:"mr-1"},[s._v("Edit on ")]),a("span",{staticClass:"font-medium",attrs:{target:"_blank"}},[s._v("Laravel Playground")])]):s._e()])},xs=[],As=(a("8615"),{computed:{isEmbedded:function(){return!0===this.$store.state.Code.embed},theme:function(){return this.$store.state.Code.editorTheme},resultsVisible:function(){return!0===this.$store.state.Code.showResults},codeVisible:function(){return!0===this.$store.state.Code.showCode},canSaveSnippet:function(){return!0===this.$store.state.Code.isDirty},hasSnippet:function(){return this.$route.params.snippet},hasGist:function(){return this.$route.params.gist},playgroundUrl:function(){var s="https://laravelplayground.com";return this.hasSnippet?"".concat(s,"/#/snippets/").concat(this.$route.params.snippet):this.hasGist?"".concat(s,"/#/gist/").concat(this.$route.params.gist):s}},methods:{openPlayground:function(){var s=Object(m["a"])(regeneratorRuntime.mark((function s(){var e,a;return regeneratorRuntime.wrap((function(s){while(1)switch(s.prev=s.next){case 0:return s.next=2,b["a"].storeFiles(Object.values(vue.$store.state.Code.files),null,!0);case 2:e=s.sent,a="https://laravelplayground.com/#/prefill/".concat(e.uuid),"tinker-php8"===vue.$store.state.Code.deployment&&(a+="?php=8"),"tinker-php81"===vue.$store.state.Code.deployment&&(a+="?php=81"),window.open(a);case 7:case"end":return s.stop()}}),s)})));function e(){return s.apply(this,arguments)}return e}(),showEmbed:function(){this.$store.dispatch("showEmbed",!0)},toggleResults:function(){document.body.clientWidth<800?this.$store.state.Code.showResults?(this.$store.dispatch("toggleCode",!0),this.$store.dispatch("toggleResults",!1)):(this.$store.dispatch("toggleCode",!1),this.$store.dispatch("toggleResults",!0)):this.$store.dispatch("toggleResults")},toggleCode:function(){document.body.clientWidth<800?this.$store.state.Code.showCode?(this.$store.dispatch("toggleCode",!1),this.$store.dispatch("toggleResults",!0)):(this.$store.dispatch("toggleCode",!0),this.$store.dispatch("toggleResults",!1)):this.$store.dispatch("toggleCode")},deleteSnippet:function(){var s=Object(m["a"])(regeneratorRuntime.mark((function s(){var e,a,n;return regeneratorRuntime.wrap((function(s){while(1)switch(s.prev=s.next){case 0:return s.next=2,us.a.fire({title:"Enter the delete password",text:"Please enter the password you chose when creating this snippet.",input:"text",allowOutsideClick:!1,allowEscapeKey:!1,showCancelButton:!0,inputValue:this.$store.state.Code.deletePassword});case 2:if(e=s.sent,a=e.value,n=e.dismiss,"cancel"!==n){s.next=7;break}return s.abrupt("return");case 7:return s.next=9,b["a"].delete(this.$route.params.snippet,a);case 9:this.$router.push("/");case 10:case"end":return s.stop()}}),s,this)})));function e(){return s.apply(this,arguments)}return e}(),saveSnippet:function(){var s=Object(m["a"])(regeneratorRuntime.mark((function s(){var e,a,n,t;return regeneratorRuntime.wrap((function(s){while(1)switch(s.prev=s.next){case 0:return this.$root.$emit("php.run.tinkerwell"),s.next=3,us.a.fire({title:"Enter a delete password",text:"Use this password if you want to delete the snippet later on.",allowOutsideClick:!1,allowEscapeKey:!1,input:"text",inputValue:this.$store.state.Code.deletePassword});case 3:return e=s.sent,a=e.value,this.$store.dispatch("setPreference",{key:"deletePassword",value:a}),this.$store.dispatch("setIsDirty",!1),n="preload"===this.$store.state.Code.mode?this.$store.state.Code.preload:this.$store.state.Code.code,s.next=10,b["a"].save(a,this.$store.state.Code.mode,n,this.$store.state.Code.controller,this.$store.state.Code.view,this.$store.state.Code.output,this.$store.state.Code.files);case 10:t=s.sent,null!==t&&(this.$store.dispatch("setSavedHash",t),this.$router.push("/snippets/".concat(t)));case 12:case"end":return s.stop()}}),s,this)})));function e(){return s.apply(this,arguments)}return e}()}}),Gs=As,Ts=Object(r["a"])(Gs,Cs,xs,!1,null,"d3c3d4ca",null),Rs=Ts.exports,Ws=function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("div",{staticClass:" text-sm border-t flex justify-between",class:{"bg-gray-100":"light"===s.theme,"bg-gray-900 border-gray-700":"light"!==s.theme}},[a("div",{staticClass:"flex items-center justify-center"},[a("a",{staticClass:"inline-block py-1 px-3  h-full",class:{"hover:bg-gray-200 bg-gray-100 text-gray-800":"light"===s.theme,"hover:bg-gray-700 bg-gray-800 text-white":"light"!==s.theme},attrs:{href:"https://laravelplayground.com",target:"_blank"}},[s._v("\n      Powered by "),a("span",{staticClass:"font-medium"},[s._v("Laravel Playground")]),s._v(" by "),a("a",{staticClass:"underline",attrs:{href:"https://beyondco.de",target:"_blank"}},[s._v("Beyond Code")])]),s.isEmbedded?s._e():a("a",{staticClass:"border-l items-center justify-center py-1 px-3 text-xs h-full",class:{"bg-gray-100 text-gray-800":"light"===s.theme,"bg-gray-800 text-white border-gray-900":"light"!==s.theme},attrs:{href:"#"}},[s._v("\n      Intellisense by "),a("a",{staticClass:"underline",attrs:{href:"https://intelephense.com",target:"_blank"}},[s._v("intelephense")])])]),a("div",[a("button",{staticClass:"py-1 px-3 font-bold h-full focus:outline-none",class:{"bg-green-600 hover:bg-green-800 text-white":!s.isRunning,"cursor-not-allowed bg-gray-300 hover:bg-gray-400 text-gray-800":s.isRunning&&"light"===s.theme,"cursor-not-allowed bg-gray-800 hover:bg-gray-700 text-white":s.isRunning&&"light"!==s.theme},attrs:{disabled:s.isRunning},on:{click:function(e){return e.preventDefault(),s.runCode(e)}}},[s._v("run "),s.readOnly||s.isEmbedded?s._e():a("span",{staticClass:"text-xs"},[s._v("(ctrl+enter)")])])])])},Ss=[],Zs={name:"Footer",computed:{isRunning:function(){return!0===this.$store.state.Code.isRunning},isEmbedded:function(){return!0===this.$store.state.Code.embed},readOnly:function(){return this.$store.state.Code.readOnly},theme:function(){return this.$store.state.Code.editorTheme}},methods:{runCode:function(){this.$store.dispatch("isRunning",!0),this.$root.$emit("php.run.tinkerwell")}}},Js=Zs,Xs=Object(r["a"])(Js,Ws,Ss,!1,null,"a0b4b054",null),Ys=Xs.exports,$s=function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("div",{staticClass:"flex flex-col w-64 border-r",class:{"bg-white text-black":"light"===s.theme,"bg-gray-900 text-white":"light"!==s.theme}},[s.readOnly?s._e():a("div",{staticClass:"font-medium py-2 px-4 flex items-center"},[a("p",{staticClass:"flex-1"},[s._v("Files")]),a("button",{directives:[{name:"tippy",rawName:"v-tippy"}],staticClass:"focus:outline-none px-2 border border-gray-700 rounded-sm",attrs:{content:"New File"},on:{click:s.addFile}},[s._v("+")])]),a("ul",{class:{"pt-1":!s.readOnly}},[s._l(s.files,(function(e,n){return a("li",{key:"file_"+n,staticClass:"cursor-pointer py-2 pl-4 flex items-center",class:{"bg-gray-400 text-black border border-black":s.renamingFile===e&&"light"!==s.theme,"bg-white text-black border border-black":s.renamingFile===e&&"light"===s.theme,"bg-gray-600 text-white":!s.renamingFile&&e===s.currentFile&&"light"===s.theme,"bg-gray-800 text-white":!s.renamingFile&&e===s.currentFile&&"light"!==s.theme,"text-black":e!==s.currentFile&&"light"===s.theme,"text-gray-300":e!==s.currentFile&&"light"!==s.theme},on:{click:function(a){return s.loadFile(e)},mouseover:function(a){return s.showSettings(e)},mouseout:function(e){s.settingsFile=null}}},[s.renamingFile!==e?a("div",{staticClass:"flex-1"},[s._v("\n            "+s._s(e.filename)+"\n          ")]):a("input",{directives:[{name:"model",rawName:"v-model",value:e.filename,expression:"file.filename"}],ref:"renameFileInput",refInFor:!0,staticClass:"w-full focus:outline-none bg-transparent text-black",attrs:{type:"text"},domProps:{value:e.filename},on:{keyup:function(e){if(!e.type.indexOf("key")&&s._k(e.keyCode,"enter",13,e.key,"Enter"))return null;s.renamingFile=null},input:function(a){a.target.composing||s.$set(e,"filename",a.target.value)}}}),a("tippy",{directives:[{name:"show",rawName:"v-show",value:s.settingsFile===e||s.currentFile===e,expression:"settingsFile === file || currentFile === file"}],ref:"tippy",refInFor:!0,attrs:{interactive:"","animate-fill":!1,placement:"bottom",theme:"light",animation:"fade",trigger:"click",arrow:""},scopedSlots:s._u([{key:"trigger",fn:function(){return[a("div",{staticClass:"text-white w-8 h-4 focus:outline-none"},[a("svg",{staticClass:" focus:outline-none",staticStyle:{height:"100%",width:"100%",display:"block"},attrs:{id:"threedotmenuicon","data-name":"Three dots menu",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 4.075 17.949"}},[a("circle",{staticStyle:{fill:"currentcolor"},attrs:{cx:"2.038",cy:"2.668",r:"1.852"}}),a("circle",{staticStyle:{fill:"currentcolor"},attrs:{cx:"2.038",cy:"8.974",r:"1.852"}}),a("circle",{staticStyle:{fill:"currentcolor"},attrs:{cx:"2.038",cy:"15.28",r:"1.852"}})])])]},proxy:!0}],null,!0)},[a("div",{staticClass:"w-32 flex flex-col"},[a("button",{staticClass:"flex  h-4 flex-1 items-center text-left p-2 focus:outline-none",class:{"hover:bg-gray-200":"light"===s.theme,"hover:bg-gray-700":"light"!==s.theme},on:{click:function(a){return s.renameFile(e)}}},[s._v("Rename")]),a("button",{staticClass:"flex hover:bg-red-400 h-4 flex-1 items-center text-left p-2 focus:outline-none",on:{click:function(a){return s.deleteFile(e)}}},[s._v("Delete")])])]),a("div",{directives:[{name:"show",rawName:"v-show",value:s.settingsFile!==e&&s.currentFile!==e,expression:"settingsFile !== file && currentFile !== file"}],staticClass:"text-white w-8 h-4 focus:outline-none"},[a("svg",{staticClass:" focus:outline-none",staticStyle:{height:"100%",width:"100%",display:"block"},attrs:{id:"threedotmenuicon","data-name":"Three dots menu",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 4.075 17.949"}},[a("circle",{staticStyle:{fill:"currentcolor"},attrs:{cx:"2.038",cy:"2.668",r:"1.852"}}),a("circle",{staticStyle:{fill:"currentcolor"},attrs:{cx:"2.038",cy:"8.974",r:"1.852"}}),a("circle",{staticStyle:{fill:"currentcolor"},attrs:{cx:"2.038",cy:"15.28",r:"1.852"}})])])],1)})),s.addingFile?a("li",{staticClass:"cursor-pointer bg-white py-2 pl-2 border border-black"},[a("input",{directives:[{name:"model",rawName:"v-model",value:s.filename,expression:"filename"}],ref:"filenameInput",staticClass:"w-full focus:outline-none bg-transparent text-black",attrs:{type:"text"},domProps:{value:s.filename},on:{keyup:function(e){return!e.type.indexOf("key")&&s._k(e.keyCode,"enter",13,e.key,"Enter")?null:s.saveFile(e)},input:function(e){e.target.composing||(s.filename=e.target.value)}}})]):s._e()],2)])},Vs=[],Fs={data:function(){return{renamingFile:null,settingsFile:null,addingFile:!1,filename:""}},computed:{theme:function(){return this.$store.state.Code.editorTheme},currentFile:function(){return this.$store.state.Code.currentFile},files:function(){return this.$store.state.Code.files},readOnly:function(){return this.$store.state.Code.readOnly}},mounted:function(){},methods:{renameFile:function(s){var e=this;this.renamingFile=s,this.$refs.tippy.forEach((function(s){s.tip.hide()})),this.$nextTick((function(){e.$refs.renameFileInput[0].focus()}))},deleteFile:function(s){this.$refs.tippy.forEach((function(s){s.tip.hide()})),this.$store.dispatch("deleteFile",s.filename)},showSettings:function(s){this.settingsFile=s},addFile:function(){var s=this;this.addingFile=!0,this.$nextTick((function(){s.$refs.filenameInput.focus()}))},loadFile:function(s){this.$store.dispatch("loadFile",s)},saveFile:function(){this.$store.dispatch("addFile",this.filename),this.filename="",this.addingFile=!1}}},qs=Fs,Ps=(a("3bdc"),Object(r["a"])(qs,$s,Vs,!1,null,null,null)),Ns=Ps.exports,Ls=function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("transition",{attrs:{"enter-active-class":"ease-out duration-300","enter-class":"opacity-0","enter-to-class":"opacity-100","leave-active-class":"ease-in duration-200","leave-class":"opacity-100","leave-to-class":"opacity-0"}},[a("div",{directives:[{name:"show",rawName:"v-show",value:s.showPresetSelection,expression:"showPresetSelection"}],staticClass:"fixed bottom-0 inset-x-0 px-4 pb-6 sm:inset-0 sm:p-0 sm:flex sm:items-center sm:justify-center z-10"},[a("transition",{attrs:{"enter-active-class":"ease-out duration-300","enter-class":"opacity-0","enter-to-class":"opacity-100","leave-active-class":"ease-in duration-200","leave-class":"opacity-100","leave-to-class":"opacity-0"}},[s.showPresetSelection?a("div",{staticClass:"fixed inset-0 transition-opacity"},[a("div",{staticClass:"absolute inset-0 bg-gray-500 opacity-75"})]):s._e()]),a("transition",{attrs:{"enter-active-class":"ease-out duration-300","enter-class":"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95","enter-to-class":"opacity-100 translate-y-0 sm:scale-100","leave-active-class":"ease-in duration-200","leave-class":"opacity-100 translate-y-0 sm:scale-100","leave-to-class":"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"}},[a("div",{directives:[{name:"show",rawName:"v-show",value:s.showPresetSelection,expression:"showPresetSelection"}],staticClass:"bg-white rounded-lg px-4 pt-5 pb-4 overflow-hidden shadow-xl transform transition-all sm:max-w-2xl sm:w-full sm:p-6 z-20",attrs:{role:"dialog","aria-modal":"true","aria-labelledby":"modal-headline"}},[a("div",[a("div",{staticClass:"mt-3 text-center sm:mt-5"},[a("h3",{staticClass:"text-lg leading-6 font-medium text-gray-900",attrs:{id:"modal-headline"}},[s._v("\n                    Create new playground\n                    ")]),a("div",{staticClass:"mt-2"},[a("p",{staticClass:"text-sm leading-5 text-gray-800"},[s._v("\n                        You can choose one of these available presets for your next playground.\n                    ")])])]),a("div",{staticClass:"grid grid-cols-2 gap-4 mt-4"},[a("div",{directives:[{name:"tippy",rawName:"v-tippy",value:{placement:"bottom",theme:"light",arrow:!0,distance:10},expression:"{placement: 'bottom', theme: 'light', arrow: true, distance: 10}"}],staticClass:"border rounded-sm border-gray-400 hover:border-gray-600 cursor-pointer p-2 flex flex-col items-center justify-center",attrs:{content:"A playground containing a route and a blade view"},on:{click:function(e){return s.choosePreset("view")}}},[a("svg",{attrs:{width:"114",height:"29",viewBox:"0 0 114 29",xmlns:"http://www.w3.org/2000/svg"}},[a("title",[s._v("Logotype")]),a("path",{attrs:{d:"M4.773.917v23.046h8.338v3.976H.333V.917h4.44zm24.01 11.465V9.95h4.208v17.99h-4.207v-2.433c-.567.901-1.37 1.609-2.413 2.123-1.042.515-2.091.772-3.146.772-1.365 0-2.613-.25-3.745-.752a8.758 8.758 0 0 1-2.915-2.066 9.6 9.6 0 0 1-1.89-3.01 9.717 9.717 0 0 1-.677-3.63c0-1.26.225-2.464.676-3.61a9.56 9.56 0 0 1 1.891-3.03 8.766 8.766 0 0 1 2.915-2.065c1.132-.502 2.38-.752 3.745-.752 1.055 0 2.104.257 3.146.772 1.042.515 1.846 1.222 2.413 2.123zm-.386 8.763a6.293 6.293 0 0 0 .387-2.2c0-.773-.13-1.506-.387-2.2a5.58 5.58 0 0 0-1.08-1.815 5.233 5.233 0 0 0-1.68-1.236c-.656-.308-1.383-.463-2.18-.463-.799 0-1.52.155-2.163.463a5.29 5.29 0 0 0-1.66 1.236 5.307 5.307 0 0 0-1.06 1.814 6.56 6.56 0 0 0-.368 2.2c0 .772.122 1.506.367 2.2.244.696.598 1.3 1.062 1.815a5.279 5.279 0 0 0 1.66 1.236c.642.309 1.363.463 2.161.463s1.525-.154 2.181-.463a5.222 5.222 0 0 0 1.68-1.236 5.575 5.575 0 0 0 1.08-1.814zm7.914 6.794V9.95h11.427v4.141h-7.22v13.85h-4.207zm26.675-15.557V9.95h4.208v17.99h-4.208v-2.433c-.566.901-1.37 1.609-2.413 2.123-1.042.515-2.09.772-3.146.772-1.364 0-2.612-.25-3.744-.752a8.758 8.758 0 0 1-2.915-2.066 9.6 9.6 0 0 1-1.891-3.01 9.717 9.717 0 0 1-.676-3.63c0-1.26.225-2.464.676-3.61a9.56 9.56 0 0 1 1.89-3.03 8.766 8.766 0 0 1 2.916-2.065c1.132-.502 2.38-.752 3.744-.752 1.055 0 2.104.257 3.146.772 1.043.515 1.847 1.222 2.413 2.123zm-.386 8.763a6.293 6.293 0 0 0 .386-2.2c0-.773-.13-1.506-.386-2.2a5.58 5.58 0 0 0-1.08-1.815 5.233 5.233 0 0 0-1.68-1.236c-.656-.308-1.384-.463-2.181-.463-.798 0-1.519.155-2.162.463a5.29 5.29 0 0 0-1.66 1.236 5.307 5.307 0 0 0-1.061 1.814 6.56 6.56 0 0 0-.367 2.2c0 .772.121 1.506.367 2.2.244.696.598 1.3 1.061 1.815a5.279 5.279 0 0 0 1.66 1.236c.643.309 1.364.463 2.162.463.797 0 1.525-.154 2.181-.463a5.222 5.222 0 0 0 1.68-1.236 5.575 5.575 0 0 0 1.08-1.814zM84.063 9.95h4.262L81.42 27.94H76.13L69.224 9.95h4.262l5.289 13.776L84.063 9.95zm13.44-.463c5.729 0 9.636 5.078 8.902 11.021H92.446c0 1.552 1.567 4.552 5.288 4.552 3.2 0 5.345-2.815 5.346-2.817l2.843 2.2c-2.542 2.713-4.623 3.96-7.882 3.96-5.823 0-9.77-3.684-9.77-9.458 0-5.223 4.079-9.458 9.231-9.458zm-5.046 7.894h10.084c-.031-.346-.578-4.552-5.072-4.552-4.495 0-4.98 4.206-5.012 4.552zm16.688 10.558V.917h4.208v27.022h-4.208z",fill:"#FF2D20","fill-rule":"evenodd"}})]),a("span",{staticClass:"inline-block text-sm text-gray-700 mt-1"},[s._v("\n                            Views\n                        ")])]),a("div",{directives:[{name:"tippy",rawName:"v-tippy",value:{placement:"bottom",theme:"light",arrow:!0,distance:10},expression:"{placement: 'bottom', theme: 'light', arrow: true, distance: 10}"}],staticClass:"border rounded-sm border-gray-400 hover:border-gray-600 cursor-pointer p-2 flex flex-col items-center justify-center",attrs:{content:"A playground containing a database migration and a custom model"},on:{click:function(e){return s.choosePreset("eloquent")}}},[a("svg",{attrs:{width:"114",height:"29",viewBox:"0 0 114 29",xmlns:"http://www.w3.org/2000/svg"}},[a("title",[s._v("Logotype")]),a("path",{attrs:{d:"M4.773.917v23.046h8.338v3.976H.333V.917h4.44zm24.01 11.465V9.95h4.208v17.99h-4.207v-2.433c-.567.901-1.37 1.609-2.413 2.123-1.042.515-2.091.772-3.146.772-1.365 0-2.613-.25-3.745-.752a8.758 8.758 0 0 1-2.915-2.066 9.6 9.6 0 0 1-1.89-3.01 9.717 9.717 0 0 1-.677-3.63c0-1.26.225-2.464.676-3.61a9.56 9.56 0 0 1 1.891-3.03 8.766 8.766 0 0 1 2.915-2.065c1.132-.502 2.38-.752 3.745-.752 1.055 0 2.104.257 3.146.772 1.042.515 1.846 1.222 2.413 2.123zm-.386 8.763a6.293 6.293 0 0 0 .387-2.2c0-.773-.13-1.506-.387-2.2a5.58 5.58 0 0 0-1.08-1.815 5.233 5.233 0 0 0-1.68-1.236c-.656-.308-1.383-.463-2.18-.463-.799 0-1.52.155-2.163.463a5.29 5.29 0 0 0-1.66 1.236 5.307 5.307 0 0 0-1.06 1.814 6.56 6.56 0 0 0-.368 2.2c0 .772.122 1.506.367 2.2.244.696.598 1.3 1.062 1.815a5.279 5.279 0 0 0 1.66 1.236c.642.309 1.363.463 2.161.463s1.525-.154 2.181-.463a5.222 5.222 0 0 0 1.68-1.236 5.575 5.575 0 0 0 1.08-1.814zm7.914 6.794V9.95h11.427v4.141h-7.22v13.85h-4.207zm26.675-15.557V9.95h4.208v17.99h-4.208v-2.433c-.566.901-1.37 1.609-2.413 2.123-1.042.515-2.09.772-3.146.772-1.364 0-2.612-.25-3.744-.752a8.758 8.758 0 0 1-2.915-2.066 9.6 9.6 0 0 1-1.891-3.01 9.717 9.717 0 0 1-.676-3.63c0-1.26.225-2.464.676-3.61a9.56 9.56 0 0 1 1.89-3.03 8.766 8.766 0 0 1 2.916-2.065c1.132-.502 2.38-.752 3.744-.752 1.055 0 2.104.257 3.146.772 1.043.515 1.847 1.222 2.413 2.123zm-.386 8.763a6.293 6.293 0 0 0 .386-2.2c0-.773-.13-1.506-.386-2.2a5.58 5.58 0 0 0-1.08-1.815 5.233 5.233 0 0 0-1.68-1.236c-.656-.308-1.384-.463-2.181-.463-.798 0-1.519.155-2.162.463a5.29 5.29 0 0 0-1.66 1.236 5.307 5.307 0 0 0-1.061 1.814 6.56 6.56 0 0 0-.367 2.2c0 .772.121 1.506.367 2.2.244.696.598 1.3 1.061 1.815a5.279 5.279 0 0 0 1.66 1.236c.643.309 1.364.463 2.162.463.797 0 1.525-.154 2.181-.463a5.222 5.222 0 0 0 1.68-1.236 5.575 5.575 0 0 0 1.08-1.814zM84.063 9.95h4.262L81.42 27.94H76.13L69.224 9.95h4.262l5.289 13.776L84.063 9.95zm13.44-.463c5.729 0 9.636 5.078 8.902 11.021H92.446c0 1.552 1.567 4.552 5.288 4.552 3.2 0 5.345-2.815 5.346-2.817l2.843 2.2c-2.542 2.713-4.623 3.96-7.882 3.96-5.823 0-9.77-3.684-9.77-9.458 0-5.223 4.079-9.458 9.231-9.458zm-5.046 7.894h10.084c-.031-.346-.578-4.552-5.072-4.552-4.495 0-4.98 4.206-5.012 4.552zm16.688 10.558V.917h4.208v27.022h-4.208z",fill:"#FF2D20","fill-rule":"evenodd"}})]),a("span",{staticClass:"inline-block text-sm text-gray-700 mt-1"},[s._v("\n                            Eloquent\n                        ")])]),a("div",{directives:[{name:"tippy",rawName:"v-tippy",value:{placement:"bottom",theme:"light",arrow:!0,distance:10},expression:"{placement: 'bottom', theme: 'light', arrow: true, distance: 10}"}],staticClass:"border rounded-sm border-gray-400 hover:border-gray-600 cursor-pointer p-2 flex flex-col items-center justify-center",attrs:{content:"A playground containing Blade UI Kit components"},on:{click:function(e){return s.choosePreset("blade-ui-kit")}}},[a("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",width:"150",height:"37",viewBox:"0 0 700 187"}},[a("path",{staticClass:"a",attrs:{d:"M0 124.7l36-21v83l-36-20z"}}),a("path",{staticClass:"b",attrs:{d:"M0 41.7l36 21v41l-36 21zM72 124.7l36 20-72 42v-42z"}}),a("path",{staticClass:"c",attrs:{d:"M108 103.7v41l-36-20z"}}),a("path",{staticClass:"d",attrs:{d:"M72 41.7l36 21-36 20z"}}),a("path",{staticClass:"e",attrs:{d:"M108 20.7v42l-36-21z"}}),a("path",{staticClass:"d",attrs:{d:"M72 82.7v42l36-21z"}}),a("path",{staticClass:"f",attrs:{d:"M36 103.7l36 21v-42z"}}),a("path",{staticClass:"b",attrs:{d:"M72-.3v42l36-21z"}}),a("path",{staticClass:"a",attrs:{d:"M36 20.7l-36 21 36 21 36-21v-42z"}}),a("path",{staticClass:"g",attrs:{d:"M36 103.7l36 21-36 20z"}}),a("path",{staticClass:"h",attrs:{d:"M226.4 110c2.5 3.3 3.7 7.4 3.7 12.2 0 6.7-2.3 12-7 15.7-4.6 3.7-11.1 5.6-19.4 5.6h-33.7v-78.2h32.6c8 0 14.3 1.8 18.8 5.4 4.5 3.6 6.7 8.6 6.7 15.1 0 4.2-1.1 7.8-3.2 10.8-2.2 3-5.2 5.3-9 6.7 4.5 1.2 8 3.4 10.5 6.7zm-45.2-10.7h19.7c10.9 0 16.3-4.2 16.3-12.6 0-8.1-5.4-12.2-16.3-12.2h-19.7v24.8zm33.9 32c2.6-2.1 3.9-5.3 3.9-9.7 0-4.5-1.3-7.8-4-9.9-2.7-2.2-6.8-3.2-12.4-3.2h-21.5v26.1h21.5c5.7-.2 9.9-1.2 12.5-3.3zm24.5 12.3v-80.9h10.9v80.9h-10.9zm73.2-55.4v55.4h-10.9v-9.5c-1.6 3.3-4 5.8-7.2 7.6-3.2 1.8-6.9 2.6-11.1 2.6-4.9 0-9.2-1.2-12.9-3.5-3.7-2.3-6.6-5.7-8.6-9.9-2-4.3-3.1-9.3-3.1-15s1-10.8 3.1-15.2c2.1-4.4 5-7.8 8.7-10.2 3.7-2.4 8-3.6 12.7-3.6 4.2 0 7.9.9 11.1 2.7 3.1 1.8 5.5 4.3 7.2 7.6v-9h11zm-15 42.1c2.7-3.5 4.1-8.4 4.1-14.7 0-6.4-1.4-11.3-4.1-14.7-2.7-3.4-6.6-5.2-11.7-5.2-5 0-8.8 1.8-11.7 5.3-2.8 3.6-4.2 8.5-4.2 14.8 0 6.2 1.4 11.1 4.2 14.5 2.8 3.4 6.7 5.2 11.8 5.2 5 0 8.9-1.7 11.6-5.2zm77.3-67.6v80.9h-10.9v-9.5c-1.6 3.3-4 5.8-7.2 7.6-3.2 1.8-6.9 2.6-11.1 2.6-4.7 0-9-1.2-12.7-3.6-3.7-2.4-6.6-5.8-8.7-10.2s-3.1-9.4-3.1-15.1c0-5.7 1-10.7 3.1-15.1 2-4.3 4.9-7.7 8.6-10 3.7-2.3 8-3.5 12.9-3.5 4.2 0 7.8.9 11 2.6 3.2 1.8 5.6 4.3 7.2 7.5v-34.2h10.9zm-15 67.6c2.7-3.5 4.1-8.4 4.1-14.7 0-6.3-1.4-11.2-4.1-14.7-2.7-3.5-6.6-5.2-11.5-5.2-5 0-9 1.7-11.8 5.2-2.8 3.4-4.2 8.3-4.2 14.5 0 6.3 1.4 11.2 4.2 14.8 2.8 3.6 6.7 5.3 11.7 5.3 4.9 0 8.8-1.7 11.6-5.2zm73.9-13.9h-39.4c.4 13 6.2 19.5 17.6 19.5 6.3 0 12.1-2.1 17.4-6.3l3.4 7.9c-2.5 2.2-5.6 3.9-9.5 5.2s-7.7 1.9-11.5 1.9c-8.8 0-15.8-2.5-20.8-7.6s-7.6-12.1-7.6-20.9c0-5.6 1.1-10.7 3.3-15.1 2.2-4.4 5.3-7.8 9.4-10.2 4-2.4 8.6-3.6 13.7-3.6 7.4 0 13.3 2.4 17.6 7.3 4.3 4.8 6.4 11.5 6.4 20.1v1.8zm-33.9-17.2c-2.6 2.5-4.3 6-5 10.7h29.2c-.4-4.7-1.9-8.3-4.3-10.7-2.4-2.5-5.7-3.7-9.7-3.7-4.2-.1-7.6 1.2-10.2 3.7z"}}),a("path",{staticClass:"b",attrs:{d:"M539.7 66.4h17.6v77.1h-17.6v-77.1zm-30.7 47.4c0 9.9-4.6 14.9-13.7 14.9s-13.7-4.8-13.7-14.3v-48h-17.6v48c0 9.6 2.9 17 8.6 22.3 5.7 5.3 13.3 7.9 22.7 7.9 9.6 0 17.2-2.6 22.8-7.9 5.6-5.3 8.5-13 8.5-23v-47.3h-17.6v47.4zm131.1 29.7h16.7v-58h-16.7v58zm45.9-58v-22.8h-16.7v80.9h16.7v-45.8h14v-12.3h-14zm-52 0h-18.4l-19.8 26.5v-45.6h-17.6v77.1h17.6v-26.2l20.7 26.2h19.4l-24-29 22.1-29z"}})])]),a("div",{directives:[{name:"tippy",rawName:"v-tippy",value:{placement:"bottom",theme:"light",arrow:!0,distance:10},expression:"{placement: 'bottom', theme: 'light', arrow: true, distance: 10}"}],staticClass:"border rounded-sm border-gray-400 hover:border-gray-600 cursor-pointer p-2 flex items-center justify-center",attrs:{content:"A playground containing a Livewire component"},on:{click:function(e){return s.choosePreset("livewire")}}},[a("svg",{attrs:{width:"234px",height:"54px",viewBox:"0 0 234 54",version:"1.1",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink"}},[a("defs",[a("path",{attrs:{d:"M6.21428571,3.96764549 L6.21428571,13.5302735 C6.21428571,15.2463011 4.82317047,16.6374164 3.10714286,16.6374164 C1.39111524,16.6374164 -2.95438243e-14,15.2463011 -2.97539771e-14,13.5302735 L-2.9041947e-14,1.98620229 C0.579922224,0.921664997 1.24240791,1.12585387e-13 2.43677218,1.0658141e-13 C4.3810703,1.0658141e-13 5.06039718,2.44244728 6.21428571,3.96764549 Z M17.952381,4.46584612 L17.952381,19.587619 C17.952381,21.4943164 16.4066974,23.04 14.5,23.04 C12.5933026,23.04 11.047619,21.4943164 11.047619,19.587619 L11.047619,2.47273143 C11.6977478,1.21920793 12.3678531,1.0658141e-13 13.7415444,1.0658141e-13 C15.916357,1.0658141e-13 16.5084695,3.05592831 17.952381,4.46584612 Z M29,4.18831009 L29,15.1664032 C29,16.8824308 27.6088848,18.2735461 25.8928571,18.2735461 C24.1768295,18.2735461 22.7857143,16.8824308 22.7857143,15.1664032 L22.7857143,1.67316044 C23.3267006,0.747223402 23.9709031,1.0658141e-13 25.0463166,1.0658141e-13 C27.0874587,1.0658141e-13 27.7344767,2.69181961 29,4.18831009 Z",id:"path-100"}}),a("path",{attrs:{d:"M6.21428571,6.89841791 C5.66311836,6.22351571 5.01068733,5.72269617 4.06708471,5.72269617 C1.82646191,5.72269617 1.41516964,8.5465388 1.66533454e-15,9.81963771 L4.4408921e-16,-2.36068323 C2.33936437e-16,-4.07671085 1.39111524,-5.46782609 3.10714286,-5.46782609 C4.82317047,-5.46782609 6.21428571,-4.07671085 6.21428571,-2.36068323 L6.21428571,6.89841791 Z M17.952381,7.11630262 C17.3645405,6.33416295 16.6773999,5.72269617 15.6347586,5.72269617 C13.1419388,5.72269617 12.9134319,9.21799873 11.047619,10.1843478 L11.047619,4.79760812 C11.047619,2.89091077 12.5933026,1.34522717 14.5,1.34522717 C16.4066974,1.34522717 17.952381,2.89091077 17.952381,4.79760812 L17.952381,7.11630262 Z M29,6.51179 C28.521687,6.04088112 27.9545545,5.72269617 27.2024325,5.72269617 C24.7875975,5.72269617 24.497619,9.0027269 22.7857143,10.086414 L22.7857143,-0.846671395 C22.7857143,-2.56269901 24.1768295,-3.95381425 25.8928571,-3.95381425 C27.6088848,-3.95381425 29,-2.56269901 29,-0.846671395 L29,6.51179 Z",id:"path-300"}})]),a("g",{attrs:{id:"Page-1",stroke:"none","stroke-width":"1",fill:"none","fill-rule":"evenodd"}},[a("g",{attrs:{id:"10.5″-iPad-Pro-Copy-6",transform:"translate(-116.000000, -134.000000)"}},[a("g",{attrs:{id:"Group-3",transform:"translate(115.000000, 136.000000)"}},[a("g",{attrs:{id:"Livewire",transform:"translate(65.535000, 5.881000)","fill-rule":"nonzero"}},[a("path",{attrs:{d:"M3.38593404,35.0257215 C2.53791669,35.0257215 1.83909806,34.7847546 1.28945719,34.3028134 C0.739816315,33.8208723 0.465,33.129064 0.465,32.2273676 L0.465,4.38374623 C0.465,3.4820499 0.739816315,2.79801468 1.28945719,2.33162003 C1.83909806,1.86522538 2.53791669,1.63203155 3.38593404,1.63203155 C4.23395139,1.63203155 4.94062191,1.86522538 5.50596681,2.33162003 C6.07131171,2.79801468 6.35397992,3.4820499 6.35397992,4.38374623 L6.35397992,32.2273676 C6.35397992,33.129064 6.07131171,33.8208723 5.50596681,34.3028134 C4.94062191,34.7847546 4.23395139,35.0257215 3.38593404,35.0257215 Z M15.5030991,35.0257215 C14.6550818,35.0257215 13.9562632,34.7847546 13.4066223,34.3028134 C12.8569814,33.8208723 12.5821651,33.129064 12.5821651,32.2273676 L12.5821651,14.2246241 C12.5821651,13.3229278 12.8569814,12.6388926 13.4066223,12.1724979 C13.9562632,11.7061033 14.6550818,11.4729095 15.5030991,11.4729095 C16.3511165,11.4729095 17.057787,11.7061033 17.6231319,12.1724979 C18.1884768,12.6388926 18.471145,13.3229278 18.471145,14.2246241 L18.471145,32.2273676 C18.471145,33.129064 18.1884768,33.8208723 17.6231319,34.3028134 C17.057787,34.7847546 16.3511165,35.0257215 15.5030991,35.0257215 Z M15.5030991,7.32201783 C14.4352254,7.32201783 13.5872208,7.03441211 12.9590598,6.45919204 C12.3308988,5.88397198 12.016823,5.1299786 12.016823,4.1971893 C12.016823,3.2644 12.3308988,2.51817975 12.9590598,1.95850617 C13.5872208,1.39883259 14.4352254,1.119 15.5030991,1.119 C16.5395648,1.119 17.3797175,1.39883259 18.0235826,1.95850617 C18.6674476,2.51817975 18.9893753,3.2644 18.9893753,4.1971893 C18.9893753,5.1299786 18.6752995,5.88397198 18.0471385,6.45919204 C17.4189775,7.03441211 16.5709728,7.32201783 15.5030991,7.32201783 Z M40.7644674,13.1519218 C41.0157318,12.5922482 41.3533633,12.1724993 41.777372,11.8926626 C42.2013807,11.6128258 42.6646424,11.4729095 43.1671712,11.4729095 C43.8895564,11.4729095 44.5412637,11.7138764 45.1223126,12.1958176 C45.7033615,12.6777587 45.9938816,13.2762895 45.9938816,13.991428 C45.9938816,14.3645437 45.8996589,14.7376538 45.7112106,15.1107695 L36.9955203,33.1601523 C36.7128478,33.7509188 36.3124012,34.2017602 35.7941684,34.51269 C35.2759356,34.8236198 34.7027472,34.9790823 34.0745862,34.9790823 C33.4778333,34.9790823 32.904645,34.8236198 32.3550041,34.51269 C31.8053632,34.2017602 31.3892128,33.7509188 31.1065404,33.1601523 L22.3437382,15.1107695 C22.186698,14.7998398 22.108179,14.4422759 22.108179,14.0380672 C22.108179,13.3229288 22.4144029,12.7166248 23.0268599,12.2191372 C23.6393169,11.7216495 24.3381355,11.4729095 25.1233368,11.4729095 C26.2540266,11.4729095 27.0863274,12.0170284 27.6202643,13.1052826 L34.2159218,27.5168052 L40.7644674,13.1519218 Z M67.4863027,28.4962291 C68.0202396,28.4962291 68.4520938,28.6983304 68.7818783,29.1025391 C69.1116629,29.5067478 69.2765526,30.0508667 69.2765526,30.7349122 C69.2765526,31.6987945 68.6955124,32.5071998 67.5334146,33.1601523 C66.4655409,33.7509188 65.2563491,34.2250796 63.905803,34.5826488 C62.5552568,34.9402181 61.2675461,35.119 60.0426321,35.119 C56.3364822,35.119 53.3998736,34.0618547 51.2327182,31.9475322 C49.0655627,29.8332098 47.9820013,26.9416064 47.9820013,23.2726351 C47.9820013,20.9406619 48.4531149,18.8730099 49.3953564,17.0696173 C50.3375979,15.2662246 51.6645681,13.8670617 53.3763069,12.8720864 C55.0880456,11.8771112 57.0274636,11.379631 59.194619,11.379631 C61.2675503,11.379631 63.0734861,11.8304724 64.6124805,12.7321687 C66.151475,13.633865 67.344963,14.908658 68.1929803,16.5565857 C69.0409977,18.2045135 69.465,20.1477954 69.465,22.3864897 C69.465,23.7234877 68.868256,24.3919767 67.6747501,24.3919767 L53.7767575,24.3919767 C53.9652058,26.5373921 54.5776536,28.115337 55.6141192,29.1258587 C56.6505849,30.1363805 58.1581487,30.6416337 60.1368558,30.6416337 C61.1419134,30.6416337 62.0291775,30.5172637 62.7986747,30.2685199 C63.568172,30.0197761 64.4397323,29.6777585 65.4133818,29.2424568 C66.3556233,28.7449692 67.04659,28.4962291 67.4863027,28.4962291 Z M59.3359545,15.4838834 C57.734144,15.4838834 56.4542852,15.9813636 55.4963396,16.9763388 C54.5383941,17.9713141 53.9652058,19.4015695 53.7767575,21.2671481 L64.4240332,21.2671481 C64.3612171,19.3704766 63.8901034,17.932448 63.010678,16.9530192 C62.1312526,15.9735904 60.906357,15.4838834 59.3359545,15.4838834 Z",id:"Combined-Shape",fill:"#4E56A6"}}),a("path",{attrs:{d:"M105.166478,12.5404386 C105.386697,11.9639618 105.709156,11.5316107 106.133866,11.2433723 C106.558575,10.9551339 107.022602,10.8110169 107.52596,10.8110169 C108.249539,10.8110169 108.902322,11.0592185 109.484331,11.555629 C110.06634,12.0520396 110.35734,12.6685402 110.35734,13.4051495 C110.35734,13.8214938 110.278691,14.1897929 110.121391,14.5100578 L102.335098,33.1013413 C102.083419,33.7098446 101.69804,34.1742217 101.178952,34.4944866 C100.659863,34.8147515 100.085728,34.9748815 99.4565291,34.9748815 C98.8587905,34.9748815 98.3003851,34.8147515 97.7812963,34.4944866 C97.2622075,34.1742217 96.8768291,33.7098446 96.6251497,33.1013413 L91.0095806,19.3620465 L85.5827701,33.1013413 C85.3310907,33.7098446 84.9457123,34.1742217 84.4266235,34.4944866 C83.9075347,34.8147515 83.3333996,34.9748815 82.704201,34.9748815 C82.1064624,34.9748815 81.5401922,34.8147515 81.0053734,34.4944866 C80.4705546,34.1742217 80.0773114,33.7098446 79.825632,33.1013413 L72.0865283,14.5100578 C71.9292287,14.0937135 71.85058,13.7414274 71.85058,13.453189 C71.85058,12.7165797 72.1651746,12.0840661 72.7943732,11.555629 C73.4235717,11.027192 74.1156798,10.7629774 74.8707181,10.7629774 C75.4055368,10.7629774 75.8931584,10.9070944 76.3335974,11.1953328 C76.7740364,11.4835712 77.1043607,11.9159223 77.3245802,12.4923991 L82.8929597,27.1444443 L88.6029081,12.6365176 C88.8545875,12.0280143 89.2163713,11.5716437 89.6882702,11.2673921 C90.1601691,10.9631404 90.6792502,10.8110169 91.2455289,10.8110169 C91.8118076,10.8110169 92.3308886,10.9631404 92.8027875,11.2673921 C93.2746865,11.5716437 93.6364702,12.0280143 93.8881496,12.6365176 L99.6452877,27.1924838 L105.166478,12.5404386 Z M117.445226,35.022921 C116.595808,35.022921 115.895835,34.7747195 115.345286,34.2783089 C114.794738,33.7818983 114.519467,33.0693196 114.519467,32.1405515 L114.519467,13.5973074 C114.519467,12.6685393 114.794738,11.9639671 115.345286,11.4835698 C115.895835,11.0031725 116.595808,10.7629774 117.445226,10.7629774 C118.294644,10.7629774 119.002482,11.0031725 119.568761,11.4835698 C120.135039,11.9639671 120.418175,12.6685393 120.418175,13.5973074 L120.418175,32.1405515 C120.418175,33.0693196 120.135039,33.7818983 119.568761,34.2783089 C119.002482,34.7747195 118.294644,35.022921 117.445226,35.022921 Z M117.445226,6.48746259 C116.375589,6.48746259 115.526183,6.19122201 114.896985,5.59873198 C114.267786,5.00624195 113.953192,4.22961125 113.953192,3.2688166 C113.953192,2.30802195 114.267786,1.53939776 114.896985,0.962920972 C115.526183,0.386444182 116.375589,0.098210111 117.445226,0.098210111 C118.483404,0.098210111 119.324944,0.386444182 119.969873,0.962920972 C120.614801,1.53939776 120.937261,2.30802195 120.937261,3.2688166 C120.937261,4.22961125 120.622666,5.00624195 119.993468,5.59873198 C119.364269,6.19122201 118.514864,6.48746259 117.445226,6.48746259 Z M139.539423,10.7629774 C140.357382,10.6989244 141.0023,10.8750675 141.474199,11.2914118 C141.946098,11.7077562 142.182044,12.3322633 142.182044,13.164952 C142.182044,14.0296672 141.977558,14.6701874 141.568579,15.0865317 C141.1596,15.5028761 140.420302,15.7750971 139.350665,15.9032031 L137.934975,16.0473216 C136.078839,16.2394805 134.718218,16.8800006 133.85307,17.9689012 C132.987922,19.0578019 132.555354,20.4189072 132.555354,22.0522581 L132.555354,32.1405515 C132.555354,33.0693196 132.272219,33.7818983 131.70594,34.2783089 C131.139662,34.7747195 130.431824,35.022921 129.582406,35.022921 C128.732988,35.022921 128.033015,34.7747195 127.482466,34.2783089 C126.931917,33.7818983 126.656647,33.0693196 126.656647,32.1405515 L126.656647,13.549268 C126.656647,12.6525263 126.931917,11.9639671 127.482466,11.4835698 C128.033015,11.0031725 128.717258,10.7629774 129.535216,10.7629774 C130.353174,10.7629774 131.013823,10.995166 131.517182,11.45955 C132.020541,11.9239341 132.272216,12.5884738 132.272216,13.453189 L132.272216,15.3747687 C132.869955,13.9656032 133.758685,12.8767189 134.938432,12.1080832 C136.118179,11.3394475 137.431612,10.9070964 138.878768,10.8110169 L139.539423,10.7629774 Z M162.671793,28.2973921 C163.206612,28.2973921 163.639179,28.5055611 163.969509,28.9219055 C164.299838,29.3382498 164.465,29.898705 164.465,30.6032877 C164.465,31.5961089 163.883,32.4287851 162.718983,33.1013413 C161.649345,33.7098446 160.438156,34.1982412 159.085379,34.5665458 C157.732602,34.9348505 156.442765,35.119 155.215827,35.119 C151.503556,35.119 148.562097,34.0301157 146.391362,31.8523145 C144.220626,29.6745133 143.135275,26.6960946 143.135275,22.916969 C143.135275,20.5149823 143.607167,18.3852528 144.550965,16.5277165 C145.494763,14.6701802 146.823925,13.2290098 148.538491,12.2041622 C150.253057,11.1793145 152.195678,10.6668984 154.366414,10.6668984 C156.442769,10.6668984 158.251688,11.1312755 159.793224,12.0600437 C161.33476,12.9888119 162.53022,14.3018782 163.379638,15.9992821 C164.229056,17.6966859 164.653759,19.6983114 164.653759,22.0042186 C164.653759,23.3813576 164.056029,24.0699168 162.860552,24.0699168 L148.939603,24.0699168 C149.128363,26.2797445 149.741822,27.9050644 150.78,28.9459252 C151.818177,29.9867861 153.328231,30.5072087 155.310207,30.5072087 C156.316924,30.5072087 157.205654,30.3791047 157.976422,30.1228928 C158.74719,29.8666809 159.62019,29.5143948 160.595448,29.066024 C161.539246,28.5536002 162.231354,28.2973921 162.671793,28.2973921 Z M154.507982,14.8943737 C152.903526,14.8943737 151.621553,15.4067899 150.662025,16.4316375 C149.702498,17.4564851 149.128363,18.9296815 148.939603,20.8512708 L159.604465,20.8512708 C159.541546,18.897655 159.069654,17.4164521 158.188776,16.4076177 C157.307898,15.3987834 156.080979,14.8943737 154.507982,14.8943737 Z",id:"Combined-Shape-Copy",stroke:"#4E56A6"}})]),a("g",{staticStyle:{transform:"translateY(2.54474%)"},attrs:{id:"Jelly"}},[a("path",{attrs:{d:"M46.7606724,33.2469068 C45.9448607,34.4803214 45.3250477,36 43.6664081,36 C40.8749581,36 40.7240285,31.6956522 37.9310842,31.6956522 C35.1381399,31.6956522 35.2890695,36 32.4976195,36 C29.7061695,36 29.55524,31.6956522 26.7622957,31.6956522 C23.9693513,31.6956522 24.1202809,36 21.3288309,36 C18.537381,36 18.3864514,31.6956522 15.5935071,31.6956522 C12.8005628,31.6956522 12.9514923,36 10.1600424,36 C9.2827466,36 8.66625943,35.5748524 8.14660082,34.9917876 C6.14914487,31.5156333 5,27.4421238 5,23.0869565 C5,10.3363825 14.8497355,0 27,0 C39.1502645,0 49,10.3363825 49,23.0869565 C49,26.7327091 48.1947338,30.1810893 46.7606724,33.2469068 Z",id:"Body-Copy-2",fill:"#FB70A9"}}),a("g",{attrs:{id:"Legs",transform:"translate(12.000000, 27.000000)"}},[a("mask",{attrs:{id:"mask-2",fill:"white"}},[a("use",{attrs:{"xlink:href":"#path-100"}})]),a("use",{attrs:{id:"Combined-Shape",fill:"#4E56A6","xlink:href":"#path-100"}}),a("mask",{attrs:{id:"mask-4",fill:"white"}},[a("use",{attrs:{"xlink:href":"#path-300"}})]),a("use",{attrs:{id:"Combined-Shape","fill-opacity":"0.298513986",fill:"#000000","xlink:href":"#path-300"}})]),a("path",{attrs:{d:"M46.7606724,33.2469068 C45.9448607,34.4803214 45.3250477,36 43.6664081,36 C40.8749581,36 40.7240285,31.6956522 37.9310842,31.6956522 C35.1381399,31.6956522 35.2890695,36 32.4976195,36 C29.7061695,36 29.55524,31.6956522 26.7622957,31.6956522 C23.9693513,31.6956522 24.1202809,36 21.3288309,36 C18.537381,36 18.3864514,31.6956522 15.5935071,31.6956522 C12.8005628,31.6956522 12.9514923,36 10.1600424,36 C9.2827466,36 8.66625943,35.5748524 8.14660082,34.9917876 C6.14914487,31.5156333 5,27.4421238 5,23.0869565 C5,10.3363825 14.8497355,0 27,0 C39.1502645,0 49,10.3363825 49,23.0869565 C49,26.7327091 48.1947338,30.1810893 46.7606724,33.2469068 Z",id:"Body-Copy-4",fill:"#FB70A9"}}),a("path",{attrs:{d:"M42,35.5400931 C47.765228,26.9635183 47.9142005,17.4501539 42.4469174,7 C46.4994826,11.151687 49,16.849102 49,23.1355865 C49,26.7676093 48.1653367,30.203003 46.6789234,33.2572748 C45.8333297,34.4860445 45.1908898,36 43.4716997,36 C42.8832919,36 42.4080759,35.8226537 42,35.5400931 Z",id:"Combined-Shape",fill:"#E24CA6"}}),a("g",{attrs:{id:"Eyes-Copy-2",transform:"translate(0.000000, 6.000000)"}},[a("path",{attrs:{d:"M25.8205128,22.8461538 C33.4710351,22.8461538 36.6923077,18.4078931 36.6923077,12.1048951 C36.6923077,5.80189712 31.8248393,0 25.8205128,0 C19.8161863,0 14.9487179,5.80189712 14.9487179,12.1048951 C14.9487179,18.4078931 18.1699905,22.8461538 25.8205128,22.8461538 Z",id:"Oval",fill:"#FFFFFF"}}),a("g",{attrs:{id:"Pupil",transform:"translate(18.820513, 3.461538)"}},[a("ellipse",{attrs:{id:"Oval",fill:"#030776",cx:"4.07692308",cy:"4.5",rx:"4.07692308",ry:"4.5"}}),a("ellipse",{attrs:{id:"Oval",fill:"#FFFFFF",cx:"3.3974359",cy:"3.46153846",rx:"2.03846154",ry:"2.07692308"}})])])])])])])])])])]),a("div",{staticClass:"mt-6 flex justify-center items-center"},[a("span",{staticClass:"mt-3 flex w-full rounded-md shadow-sm sm:mt-0 sm:col-start-1"},[a("button",{staticClass:"inline-flex justify-center w-full rounded-md border border-gray-300 px-4 py-2 bg-white text-base leading-6 font-medium text-gray-700 shadow-sm hover:text-gray-500 focus:outline-none focus:border-blue-300 focus:shadow-outline-blue transition ease-in-out duration-150 sm:text-sm sm:leading-5",attrs:{type:"button"},on:{click:s.closeModal}},[s._v("\n                Cancel\n                ")])])])])])],1)])},Hs=[],Bs={"blade-ui-kit":{"uikit.blade.php":{filename:"uikit.blade.php",content:'@extends(\'layout\')\n\n@section(\'uikit\')\n\n<h2>Blade UI Kit</h2>\n<p>You can use any of the available <a href="https://blade-ui-kit.com">Blade UI Kit</a> components.</p>\n\n<x-color-picker name="color" />\n\n<x-avatar search="driesvints" />\n\n<x-carbon :date="now()->addDay()" human />\n\n<x-countdown :expires="now()->addMinute()"/>\n\n<x-trix name="about" />\n\n@endsection'},"layout.blade.php":{filename:"layout.blade.php",content:"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Blade UI Kit</title>\n    @bukStyles(true)\n    @bukScripts(true)\n</head>\n<body>\n\n    @yield('uikit')\n    \n</body>\n</html>"},"index.php":{filename:"index.php",content:"<?php\n\nRoute::get('/', fn() => view('uikit') );"}},bladecomponent:{"index.php":{filename:"index.php",content:"<?php\n\nRoute::get('/', fn() => view('layout') );\n\n/**\n * Register the component once the playground\n * is loaded\n */\nLaravelPlayground::loaded(function() {\n  Blade::component(\"\\Playground\");\n});"},"Playground.php":{filename:"Playground.php",content:"<?php\n\nuse Illuminate\\View\\Component;\n\nclass Playground extends Component\n{\n    public $greeting;\n\n    public function __construct($greeting)\n    {\n        $this->greeting = $greeting;\n    }\n\n    public function render()\n    {\n        return view('playground');\n    }\n}"},"playground.blade.php":{filename:"playground.blade.php",content:"<div>\n    {{ $greeting }} {{ $slot }}\n</div>"},"layout.blade.php":{filename:"layout.blade.php",content:'<html>\n<body>\n\n<x-playground greeting="Hi">\n    Laravel Playground\n</x-playground>\n\n</body>\n</html>'}},eloquent:{"index.php":{filename:"index.php",content:"<?php\n\nRoute::get('/', function() {\n    $posts = Post::all();\n\n    return view('playground', [\n        'posts' => $posts,\n    ]);\n});\n\n/**\n* If there is no post created yet, let's\n* fake some data.\n*/\nLaravelPlayground::loaded(function (){\n    if (Post::count() === 0) {\n        Post::create([\n            'title' => 'This is a title',\n            'text' => 'Here goes a longer text for this post',\n        ]);\n    }\n});"},"create_posts_table.php":{filename:"create_posts_table.php",content:"<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass CreatePostsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('posts', function (Blueprint $table) {\n            $table->id();\n            $table->string('title');\n            $table->text('text');\n            $table->rememberToken();\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('posts');\n    }\n}\n"},"Post.php":{filename:"Post.php",content:"<?php\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Post extends Model {\n    protected $guarded = [];\n}\n"},"playground.blade.php":{filename:"playground.blade.php",content:"You have {{ $posts->count() }} {{ Str::plural('post', $posts->count()) }}."}},view:{"index.php":{filename:"index.php",content:"<?php\n\nRoute::get('/', function() {\n    return view('playground', [\n        'title' => 'Laravel Playground',\n    ]);\n});"},"playground.blade.php":{filename:"playground.blade.php",content:"<html>\n<body>\n    Welcome to the {{ $title }}.\n</body>\n</html>"}},livewire:{"index.php":{filename:"index.php",content:"<?php\n\nRoute::get('/', fn() => view('livewire') );\n\n/**\n * Once this playground is loaded,\n * we tell Livewire where to find\n * our component.\n */\nLaravelPlayground::loaded(function() {\n    Livewire::component('livewire-component', LivewireComponent::class);\n});"},"LivewireComponent.php":{filename:"LivewireComponent.php",content:"<?php\n\nuse Livewire\\Component;\n\nclass LivewireComponent extends Component\n{\n    public $name = 'Laravel Playground';\n  \n    public function render()\n    {\n        return view('livewire-component');\n    }\n}"},"livewire-component.blade.php":{filename:"livewire-component.blade.php",content:'<div>\n  <input wire:model="name" type="text"><br>\n  You entered: {{ $name }}\n</div>'},"livewire.blade.php":{filename:"livewire.blade.php",content:"<html>\n<head>\n    @livewireStyles\n</head>\n<body>\n  \n  <livewire:livewire-component />\n\n    @livewireScripts\n</body>\n</html>"}}},zs={data:function(){return{}},computed:{showPresetSelection:function(){return!0===this.$store.state.Code.showPresetSelection}},methods:{closeModal:function(){this.$store.dispatch("showPresetSelection",!1)},choosePreset:function(s){var e=this;try{this.$router.push({path:"/"})}catch(n){}this.$store.dispatch("setFiles",Bs[s]);var a=Object.keys(this.$store.state.Code.files)[0];this.$store.dispatch("loadFile",this.$store.state.Code.files[a]),setTimeout((function(){e.$store.dispatch("isRunning",!0),e.$root.$emit("php.run.tinkerwell")}),350),this.closeModal()}}},Ds=zs,Ms=(a("76bb"),Object(r["a"])(Ds,Ls,Hs,!1,null,null,null)),Os=Ms.exports,Us=function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("transition",{attrs:{"enter-active-class":"ease-out duration-300","enter-class":"opacity-0","enter-to-class":"opacity-100","leave-active-class":"ease-in duration-200","leave-class":"opacity-100","leave-to-class":"opacity-0"}},[a("div",{directives:[{name:"show",rawName:"v-show",value:s.showModal,expression:"showModal"}],staticClass:"fixed bottom-0 inset-x-0 px-4 pb-6 sm:inset-0 sm:p-0 sm:flex sm:items-center sm:justify-center z-10"},[a("transition",{attrs:{"enter-active-class":"ease-out duration-300","enter-class":"opacity-0","enter-to-class":"opacity-100","leave-active-class":"ease-in duration-200","leave-class":"opacity-100","leave-to-class":"opacity-0"}},[s.showModal?a("div",{staticClass:"fixed inset-0 transition-opacity"},[a("div",{staticClass:"absolute inset-0 bg-gray-500 opacity-75"})]):s._e()]),a("transition",{attrs:{"enter-active-class":"ease-out duration-300","enter-class":"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95","enter-to-class":"opacity-100 translate-y-0 sm:scale-100","leave-active-class":"ease-in duration-200","leave-class":"opacity-100 translate-y-0 sm:scale-100","leave-to-class":"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"}},[s.showModal?a("div",{staticClass:"bg-white rounded-lg px-4 pt-5 pb-4 overflow-hidden shadow-xl transform transition-all sm:max-w-3xl sm:w-full sm:p-6 z-20 max-h-screen",attrs:{role:"dialog","aria-modal":"true","aria-labelledby":"modal-headline"}},[a("div",[a("div",{staticClass:"mt-3 text-center sm:mt-5"},[a("h3",{staticClass:"text-lg leading-6 font-medium text-gray-900",attrs:{id:"modal-headline"}},[s._v("\n                    Open Gist\n                    ")]),a("div",{staticClass:"mt-2"},[a("p",{staticClass:"text-sm leading-5 text-gray-800"},[s._v("\n                        Open any Gist inside of Laravel Playground. Each file in the Gist will be added as a file in your Playground.\n                    ")])])]),a("div",{staticClass:"mt-4 text-gray-900"},[a("div",[a("label",{staticClass:"sr-only",attrs:{for:"gist"}},[s._v("Gist")]),a("div",{staticClass:"relative rounded-md shadow-sm"},[a("input",{directives:[{name:"model",rawName:"v-model",value:s.url,expression:"url"}],staticClass:"rounded-md border h-10 p-2 block w-full sm:text-sm sm:leading-5",attrs:{id:"gist",placeholder:"https://gist.github.com/username/..."},domProps:{value:s.url},on:{input:function(e){e.target.composing||(s.url=e.target.value)}}}),s.hasError?a("div",{staticClass:"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none"},[a("svg",{staticClass:"h-5 w-5 text-red-500",attrs:{fill:"currentColor",viewBox:"0 0 20 20"}},[a("path",{attrs:{"fill-rule":"evenodd",d:"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z","clip-rule":"evenodd"}})])]):s._e()]),s.hasError?a("p",{staticClass:"mt-2 text-sm text-red-600",attrs:{id:"email-error"}},[s._v("The Gist URL is invalid.")]):s._e()])])]),a("div",{staticClass:"mt-6 flex justify-center items-center"},[a("span",{staticClass:"mt-3 flex w-full rounded-md shadow-sm sm:mt-0 sm:col-start-1"},[a("button",{staticClass:"inline-flex justify-center w-full rounded-md border border-gray-300 px-4 py-2 bg-white text-base leading-6 font-medium text-gray-700 shadow-sm hover:text-gray-500 focus:outline-none focus:border-blue-300 focus:shadow-outline-blue transition ease-in-out duration-150 sm:text-sm sm:leading-5",attrs:{type:"button"},on:{click:s.closeModal}},[s._v("\n                Close\n                ")])]),a("span",{staticClass:"ml-3 mt-3 flex w-full rounded-md shadow-sm sm:mt-0 sm:col-start-1"},[a("button",{staticClass:"inline-flex justify-center w-full rounded-md border border-gray-300 px-4 py-2 bg-white text-base leading-6 font-medium text-gray-700 shadow-sm hover:text-gray-500 focus:outline-none focus:border-blue-300 focus:shadow-outline-blue transition ease-in-out duration-150 sm:text-sm sm:leading-5",attrs:{type:"button"},on:{click:s.openGist}},[s._v("\n                Open Gist\n                ")])])])]):s._e()])],1)])},Es=[],_s={data:function(){return{url:"",hasError:!1}},computed:{showModal:function(){return!0===this.$store.state.Code.showGistInput}},methods:{closeModal:function(){this.$store.dispatch("showGistInput",!1)},openGist:function(){var s=Object(m["a"])(regeneratorRuntime.mark((function s(){var e,a,n;return regeneratorRuntime.wrap((function(s){while(1)switch(s.prev=s.next){case 0:if(this.hasError=!1,e=/https:\/\/gist\.github\.com\/(.*)?\/(.*)/gm,a=e.exec(this.url),null!==a){s.next=6;break}return this.hasError=!0,s.abrupt("return");case 6:return n=a[2],s.next=9,this.loadGist(n);case 9:this.url="",this.closeModal();case 11:case"end":return s.stop()}}),s,this)})));function e(){return s.apply(this,arguments)}return e}(),loadGist:function(){var s=Object(m["a"])(regeneratorRuntime.mark((function s(e){var a,n=this;return regeneratorRuntime.wrap((function(s){while(1)switch(s.prev=s.next){case 0:return s.next=2,b["a"].loadGist(e);case 2:a=s.sent,this.$store.dispatch("loadSnippet",a),setTimeout((function(){n.$store.dispatch("isRunning",!0),n.$root.$emit("php.run.tinkerwell")}),350);case 5:case"end":return s.stop()}}),s,this)})));function e(e){return s.apply(this,arguments)}return e}()}},Qs=_s,Ks=Object(r["a"])(Qs,Us,Es,!1,null,null,null),se=Ks.exports,ee=function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("transition",{attrs:{"enter-active-class":"ease-out duration-300","enter-class":"opacity-0","enter-to-class":"opacity-100","leave-active-class":"ease-in duration-200","leave-class":"opacity-100","leave-to-class":"opacity-0"}},[a("div",{directives:[{name:"show",rawName:"v-show",value:s.showEmbedModal,expression:"showEmbedModal"}],staticClass:"fixed bottom-0 inset-x-0 px-4 pb-6 sm:inset-0 sm:p-0 sm:flex sm:items-center sm:justify-center z-10"},[a("transition",{attrs:{"enter-active-class":"ease-out duration-300","enter-class":"opacity-0","enter-to-class":"opacity-100","leave-active-class":"ease-in duration-200","leave-class":"opacity-100","leave-to-class":"opacity-0"}},[s.showEmbedModal?a("div",{staticClass:"fixed inset-0 transition-opacity"},[a("div",{staticClass:"absolute inset-0 bg-gray-500 opacity-75"})]):s._e()]),a("transition",{attrs:{"enter-active-class":"ease-out duration-300","enter-class":"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95","enter-to-class":"opacity-100 translate-y-0 sm:scale-100","leave-active-class":"ease-in duration-200","leave-class":"opacity-100 translate-y-0 sm:scale-100","leave-to-class":"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"}},[s.showEmbedModal?a("div",{staticClass:"bg-white rounded-lg px-4 pt-5 pb-4 overflow-hidden shadow-xl transform transition-all sm:max-w-3xl sm:w-full sm:p-6 z-20 max-h-screen overflow-y-scroll",attrs:{role:"dialog","aria-modal":"true","aria-labelledby":"modal-headline"}},[a("div",[a("div",{staticClass:"mt-3 text-center sm:mt-5"},[a("h3",{staticClass:"text-lg leading-6 font-medium text-gray-900",attrs:{id:"modal-headline"}},[s._v("\n                    Embed this Playground\n                    ")]),a("div",{staticClass:"mt-2"},[a("p",{staticClass:"text-sm leading-5 text-gray-800"},[s._v("\n                        Embed your playground into blog posts, forums, documentation, you name it!\n                    ")])])]),a("div",{staticClass:"mt-4 text-gray-900"},[a("div",{ref:"embedHolder"},[a("div",s._b({staticClass:"laravel-playground",domProps:{innerHTML:s._s(s.embedFiles)}},"div",s.embedOptions,!1))]),a("div",{staticClass:"pt-4"},[a("h2",{staticClass:"text-lg font-medium my-4"},[s._v("Embed Options")]),a("div",{staticClass:"items-center grid grid-cols-2 mb-2"},[a("label",{staticClass:"mr-2 font-medium",attrs:{for:"readonly"}},[s._v("Embed read-only:")]),a("input",{directives:[{name:"model",rawName:"v-model",value:s.readonly,expression:"readonly"}],attrs:{id:"readonly",type:"checkbox"},domProps:{checked:Array.isArray(s.readonly)?s._i(s.readonly,null)>-1:s.readonly},on:{change:function(e){var a=s.readonly,n=e.target,t=!!n.checked;if(Array.isArray(a)){var l=null,o=s._i(a,l);n.checked?o<0&&(s.readonly=a.concat([l])):o>-1&&(s.readonly=a.slice(0,o).concat(a.slice(o+1)))}else s.readonly=t}}})]),a("div",{staticClass:"items-center grid grid-cols-2 mb-2"},[a("label",{staticClass:"mr-2 font-medium",attrs:{for:"filename"}},[s._v("Opened File:")]),a("select",{directives:[{name:"model",rawName:"v-model",value:s.filename,expression:"filename"}],staticClass:"border rounded-sm p-1",attrs:{id:"filename"},on:{change:function(e){var a=Array.prototype.filter.call(e.target.options,(function(s){return s.selected})).map((function(s){var e="_value"in s?s._value:s.value;return e}));s.filename=e.target.multiple?a:a[0]}}},s._l(s.fileNames,(function(e){return a("option",{key:"option_"+e,domProps:{value:e}},[s._v(s._s(e))])})),0)]),a("div",{staticClass:"grid grid-cols-2 items-center mb-2"},[a("span",{staticClass:"mr-2 font-medium"},[s._v("Default view:")]),a("div",[a("input",{directives:[{name:"model",rawName:"v-model",value:s.defaultView,expression:"defaultView"}],attrs:{id:"deafult_view_code",value:"code",type:"radio"},domProps:{checked:s._q(s.defaultView,"code")},on:{change:function(e){s.defaultView="code"}}}),a("label",{staticClass:"ml-2 mr-4",attrs:{for:"deafult_view_code"}},[s._v("Code")]),a("input",{directives:[{name:"model",rawName:"v-model",value:s.defaultView,expression:"defaultView"}],attrs:{id:"deafult_view_result",value:"result",type:"radio"},domProps:{checked:s._q(s.defaultView,"result")},on:{change:function(e){s.defaultView="result"}}}),a("label",{staticClass:"ml-2",attrs:{for:"deafult_view_result"}},[s._v("Result")])])]),a("div",{staticClass:"grid grid-cols-2 items-center mb-2"},[a("span",{staticClass:"mr-2 font-medium"},[s._v("Theme:")]),a("div",[a("input",{directives:[{name:"model",rawName:"v-model",value:s.embedTheme,expression:"embedTheme"}],attrs:{id:"embed_theme_light",value:"light",type:"radio"},domProps:{checked:s._q(s.embedTheme,"light")},on:{change:function(e){s.embedTheme="light"}}}),a("label",{staticClass:"ml-2 mr-4",attrs:{for:"embed_theme_light"}},[s._v("Light")]),a("input",{directives:[{name:"model",rawName:"v-model",value:s.embedTheme,expression:"embedTheme"}],attrs:{id:"embed_theme_dark",value:"dark",type:"radio"},domProps:{checked:s._q(s.embedTheme,"dark")},on:{change:function(e){s.embedTheme="dark"}}}),a("label",{staticClass:"ml-2",attrs:{for:"embed_theme_dark"}},[s._v("Dark")])])]),a("div",{staticClass:"flex justify-between items-center py-2"},[a("p",{},[s._v("Your embed code:")]),a("tippy",{attrs:{to:"copyToClipboard",visible:s.copied,trigger:"manual"}},[s._v(" \n                                Copied!\n                            ")]),a("button",{staticClass:"clipboard focus:outline-none py-1 px-2 bg-gray-500 rounded-sm hover:bg-gray-600",attrs:{name:"copyToClipboard","data-clipboard-target":"#iframeCode"}},[s._v("Copy to clipboard")])],1),a("pre",{staticClass:"bg-gray-100 font-mono p-2 text-sm whitespace-pre-wrap overflow-y-scroll",staticStyle:{"max-height":"250px"}},[a("code",{attrs:{id:"iframeCode"}},[s._v('<div class="laravel-playground" '+s._s(s.dataAttributes)+">"+s._s(s.embedFiles)+'</div>\n\n<script type="text/javascript" src="https://embed.laravelplayground.com"><\/script>')])])])]),a("div",{staticClass:"mt-4 border-t border-blue-500 pt-2"},[s._v("\n                    Do you want to programatically create Laravel Playground embeds? Check out our "),a("a",{staticClass:"border-b border-dashed",attrs:{href:"https://beyondco.de/docs/laravel-playground",target:"_blank"}},[s._v("Documentation")]),s._v(".\n                ")])]),a("div",{staticClass:"mt-6 flex justify-center items-center"},[a("span",{staticClass:"mt-3 flex w-full rounded-md shadow-sm sm:mt-0 sm:col-start-1"},[a("button",{staticClass:"inline-flex justify-center w-full rounded-md border border-gray-300 px-4 py-2 bg-white text-base leading-6 font-medium text-gray-700 shadow-sm hover:text-gray-500 focus:outline-none focus:border-blue-300 focus:shadow-outline-blue transition ease-in-out duration-150 sm:text-sm sm:leading-5",attrs:{type:"button"},on:{click:s.closeModal}},[s._v("\n                Close\n                ")])])])]):s._e()])],1)])},ae=[],ne=a("7188"),te=a("b311"),le=a.n(te),oe={data:function(){return{filename:null,copied:!1,readonly:!1,defaultView:"code",embedTheme:"light"}},watch:{readonly:function(){var s=this;this.$nextTick((function(){s.$refs.embedHolder.innerHTML='<div class="laravel-playground" data-height="300px" '.concat(s.dataAttributes,">").concat(s.embedFiles,"</div>"),window.LaravelPlayground.createEmbeds()}))},embedTheme:function(){var s=this;this.$nextTick((function(){s.$refs.embedHolder.innerHTML='<div class="laravel-playground" data-height="300px" '.concat(s.dataAttributes,">").concat(s.embedFiles,"</div>"),window.LaravelPlayground.createEmbeds()}))},filename:function(){var s=this;this.$nextTick((function(){s.$refs.embedHolder.innerHTML='<div class="laravel-playground" data-height="300px" '.concat(s.dataAttributes,">").concat(s.embedFiles,"</div>"),window.LaravelPlayground.createEmbeds()}))},defaultView:function(){var s=this;this.$nextTick((function(){s.$refs.embedHolder.innerHTML='<div class="laravel-playground" data-height="300px" '.concat(s.dataAttributes,">").concat(s.embedFiles,"</div>"),window.LaravelPlayground.createEmbeds()}))},showEmbedModal:function(s){var e=this;s&&(this.filename=this.$store.state.Code.currentFile.filename,this.$nextTick((function(){e.$refs.embedHolder.innerHTML='<div class="laravel-playground" data-height="300px" '.concat(e.dataAttributes,">").concat(e.embedFiles,"</div>"),window.LaravelPlayground.createEmbeds()})))}},mounted:function(){var s=this,e=new le.a(".clipboard");e.on("success",(function(){s.copied=!0,setTimeout((function(){s.copied=!1}),2e3)}))},computed:{files:function(){return this.$store.state.Code.files},fileNames:function(){return Object.keys(this.$store.state.Code.files)},embedFiles:function(){if(this.hasSnippet||this.hasGist)return"";var s="";return Object.values(this.files).forEach((function(e){s+='<pre data-filename="'.concat(e.filename,'">').concat(Object(ne["a"])(e.content),"</pre>")+"\n"})),s},hasSnippet:function(){return this.$route.params.snippet},hasGist:function(){return this.$route.params.gist},showEmbedModal:function(){return!0===this.$store.state.Code.showEmbed},dataAttributes:function(){var s='data-theme="'.concat(this.embedTheme,'" ');return s+='data-filename="'.concat(this.filename,'" '),"tinker-php8"===this.$store.state.Code.deployment&&(s+='data-php="8" '),"tinker-php81"===this.$store.state.Code.deployment&&(s+='data-php="81" '),this.hasSnippet&&(s+='data-playground="'.concat(this.$route.params.snippet,'" ')),this.hasGist&&(s+='data-gist="'.concat(this.$route.params.gist,'" ')),this.readonly&&(s+='data-readonly="true" '),"code"===this.defaultView&&(s+='data-hide-result="true" '),"result"===this.defaultView&&(s+='data-hide-code="true" '),s},embedOptions:function(){var s={"data-height":"300px","data-theme":this.embedTheme};return"tinker-php8"===this.$store.state.Code.deployment&&(s["data-php"]="8"),"tinker-php81"===this.$store.state.Code.deployment&&(s["data-php"]="81"),this.hasSnippet&&(s["data-playground"]=this.$route.params.snippet),this.hasGist&&(s["data-gist"]=this.$route.params.gist),this.readonly&&(s["data-readonly"]="true"),"code"===this.defaultView&&(s["data-hide-result"]="true"),"result"===this.defaultView&&(s["data-hide-code"]="true"),s},playgroundUrl:function(){var s="https://laravelplayground.com/?embed=true&view=".concat(this.defaultView);return this.readonly&&(s+="&readonly=true"),this.hasSnippet?"".concat(s,"#/snippets/").concat(this.$route.params.snippet):this.hasGist?"".concat(s,"#/gist/").concat(this.$route.params.gist):s}},methods:{closeModal:function(){this.$store.dispatch("showEmbed",!1)},choosePreset:function(s){this.closeModal()}}},pe=oe,ce=Object(r["a"])(pe,ee,ae,!1,null,null,null),re=ce.exports,ie={components:{"footer-bar":Ys,PresetSelection:Os,GistModal:se,EmbedModal:re,EmbedNavbar:Rs,Navbar:Is,Toolbar:js,Files:Ns,"php-loading":A,"php-output":ns,"html-output":rs,Editor:B,Documentation:Z},data:function(){return{showSettings:!1,phpLoaded:!1,loading:!1,id:null,code:null,controller:null,view:null,preload:null,output:"",error:null,preferences:{fontSize:18,lineHeight:1.5,autoEvaluate:!0,lineNumbers:!0,lineWrapping:!0,font:"Fira Code"}}},watch:{$route:function(){this.onMount()},code:function(s,e){this.$store.dispatch("setCode",s),this.onInputsChange(s,e)},preload:function(s,e){this.$store.dispatch("setPreload",s)},controller:function(s,e){this.$store.dispatch("setController",s),this.execute()},view:function(s,e){this.$store.dispatch("setView",s),this.execute()}},methods:{defaultCliCode:function(){return"<?php\n\n/*\n|-------------------------------------------\n| Welcome to Laravel Playground\n|-------------------------------------------\n|\n| Laravel Playground allows you to try out PHP and Laravel all from your browser.\n| You have access to all Laravel classes and an extensive list of included\n| Laravel packages (like Laravel DebugBar).\n|\n| You can also load your own Gists! \n| Simply append /gist/{YOUR-GIST-ID} to the URL.\n|\n| Do you want to see some examples?\n|\n| Multiple views: https://laravelplayground.com/#/gist/d990a2c5f23b50564561b9266252f501\n| Form request validation: https://laravelplayground.com/#/gist/e5a0d029f6433e31672e55dd90429d3f\n| Livewire: https://laravelplayground.com/#/gist/286de510bfc0a88e697284e90ed1d7da\n|\n*/\n\nRoute::get('/', function (){\n  return view('tinkerwell', [\n    'title' => 'Laravel Playground'\n  ]);\n});\n"},defaultViewCode:function(){return'<!DOCTYPE html>\n<html class="h-full" lang="{{ str_replace(\'_\', \'-\', app()->getLocale()) }}">\n    <head>\n        <meta charset="utf-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1">\n\n        <title>Tinkerwell</title>\n\n        \x3c!-- Styles --\x3e\n        <link href="https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css" rel="stylesheet">\n\n    </head>\n    <body class="h-full">\n        <div class="flex justify-center items-center h-full">\n            <div class="text-center">\n                <div class="text-6xl text-gray-700 font-bold">\n                    Tinkerwell\n                </div>\n\n                <div class="uppercase font-bold text-sm text-gray-600">\n                    <a href="https://tinkerwell.app">Get Tinkerwell App</a>\n                </div>\n            </div>\n        </div>\n    </body>\n</html>'},defaultControllerCode:function(){return"class TinkerwellController {\n\n    public function index() {\n      return view('__tinker__::tinkerwell');\n    }\n\n}"},execute:Object(j["debounce"])((function(){this.output=null,this.phpLoaded&&this.$store.state.Code.autoEvaluate&&this.$root.$emit("php.run.tinkerwell")}),500),onInputsChange:function(s,e){e&&this.execute()},loadSnippet:function(){var s=Object(m["a"])(regeneratorRuntime.mark((function s(e){var a,n=this;return regeneratorRuntime.wrap((function(s){while(1)switch(s.prev=s.next){case 0:return s.next=2,b["a"].load(e);case 2:a=s.sent,this.$store.dispatch("loadSnippet",a),setTimeout((function(){n.$store.dispatch("isRunning",!0),n.$root.$emit("php.run.tinkerwell")}),350);case 5:case"end":return s.stop()}}),s,this)})));function e(e){return s.apply(this,arguments)}return e}(),loadGist:function(){var s=Object(m["a"])(regeneratorRuntime.mark((function s(e){var a,n=this;return regeneratorRuntime.wrap((function(s){while(1)switch(s.prev=s.next){case 0:return s.next=2,b["a"].loadGist(e);case 2:a=s.sent,this.$store.dispatch("loadSnippet",a),setTimeout((function(){n.$store.dispatch("isRunning",!0),n.$root.$emit("php.run.tinkerwell")}),350);case 5:case"end":return s.stop()}}),s,this)})));function e(e){return s.apply(this,arguments)}return e}(),loadPrefill:function(){var s=Object(m["a"])(regeneratorRuntime.mark((function s(e){var a,n,t=this;return regeneratorRuntime.wrap((function(s){while(1)switch(s.prev=s.next){case 0:return s.next=2,b["a"].loadPrefill(e);case 2:a=s.sent,n={},a.files.forEach((function(s){n[s.filename]=s})),this.$store.dispatch("setFiles",n),this.$router.push({path:"/",query:this.$route.query}),setTimeout((function(){t.$store.dispatch("isRunning",!0),t.$root.$emit("php.run.tinkerwell")}),350);case 8:case"end":return s.stop()}}),s,this)})));function e(e){return s.apply(this,arguments)}return e}(),onMount:function(){var s=this;if("8"===this.$route.query.php?this.$store.dispatch("setDeployment","tinker-php8"):"81"===this.$route.query.php?this.$store.dispatch("setDeployment","tinker-php81"):this.$store.dispatch("setDeployment","tinker"),this.$route.params.snippet&&this.$route.params.snippet!==this.$store.state.Code.savedHash)setTimeout((function(){s.loadSnippet(s.$route.params.snippet)}),350);else if(this.$route.params.gist)this.loadGist(this.$route.params.gist);else if(this.$route.params.prefill)this.loadPrefill(this.$route.params.prefill);else{var e=Object.keys(this.$store.state.Code.files)[0];this.$store.dispatch("loadFile",this.$store.state.Code.files[e]),setTimeout((function(){s.$store.dispatch("isRunning",!0),s.$root.$emit("php.run.tinkerwell")}),350)}y["a"].filter=function(){return!0},Object(y["a"])("ctrl+enter",(function(){s.$store.dispatch("isRunning",!0),s.$root.$emit("php.run.tinkerwell")}))}},computed:{resultsVisible:function(){return!0===this.$store.state.Code.showResults},codeVisible:function(){return!0===this.$store.state.Code.showCode},showPresetSelection:function(){return!0===this.$store.state.Code.showPresetSelection},showGistInput:function(){return!0===this.$store.state.Code.showGistInput},isEmbedded:function(){return!0===this.$store.state.Code.embed},isRunning:function(){return!0===this.$store.state.Code.isRunning},editorClasses:function(){return"flex-1 w-full md:w-1/2"},showDocumentation:function(){return this.$store.state.Code.showDocumentation},showFiles:function(){return this.$store.state.Code.showFiles},mode:function(){return this.$store.state.Code.mode},isSavedPlayground:function(){return null!==this.id}},mounted:function(){var s=this,e=new URLSearchParams(window.location.search);this.$store.dispatch("setEmbed","true"===e.get("embed")),this.isEmbedded&&this.$store.dispatch("setReadOnly","true"===e.get("readonly")),document.body.clientWidth<800&&("result"===e.get("view")?(this.$store.dispatch("toggleCode",!1),this.$store.dispatch("toggleResults",!0)):(this.$store.dispatch("toggleCode",!0),this.$store.dispatch("toggleResults",!1))),this.$root.$on("php.loaded",(function(){s.phpLoaded=!0})),this.onMount()}},he=ie,de=(a("4b36"),Object(r["a"])(he,u,g,!1,null,null,null)),ue=de.exports,ge=a("2f62"),me=a("2a74");n["a"].use(ge["a"]);var ye=new ge["a"].Store({modules:me["default"],plugins:[]});n["a"].use(d["a"]);var je=new d["a"]({base:"/",routes:[{path:"/",component:ue,beforeEnter:function(s,e,a){ye.dispatch("showDocumentation",!1),a()}},{path:"/docs/:documentation",component:ue,beforeEnter:function(s,e,a){ye.dispatch("showDocumentation",!0),a()}},{path:"/snippets/:snippet",component:ue},{path:"/gist/:gist",component:ue},,{path:"/prefill/:prefill",component:ue}]}),be=(a("04f5"),a("a7be"),a("1d15"),a("d225")),fe=a("b0b4"),we=function(){function s(){Object(be["a"])(this,s)}return Object(fe["a"])(s,[{key:"initialize",value:function(s){var e=this,a=s.files||[];s.php&&"8"===s.php&&this.setDeployment("tinker-php8"),s.php&&"81"===s.php&&this.setDeployment("tinker-php81"),s.theme&&this.setTheme(s.theme),Object.keys(a).length>0&&this.setFiles(a),s.gist&&this.loadGist(s.gist),s.snippet&&this.loadSnippet(s.snippet),s.hideFiles&&this.hideFiles(),s.readOnly&&this.setReadOnly(),s.codeHidden&&this.setCodeHidden(),s.resultHidden&&this.setResultHidden(),setTimeout((function(){s.filename&&e.loadFilename(s.filename),ye.dispatch("isRunning",!0),vue.$emit("php.run.tinkerwell")}),350)}},{key:"setFiles",value:function(s){ye.dispatch("setFiles",s);var e=Object.keys(ye.state.Code.files)[0];ye.dispatch("loadFile",ye.state.Code.files[e])}},{key:"setDeployment",value:function(s){ye.dispatch("setDeployment",s)}},{key:"run",value:function(){vue.$emit("php.run.tinkerwell")}},{key:"hideFiles",value:function(){ye.dispatch("showFiles",!1)}},{key:"loadFilename",value:function(s){ye.dispatch("loadFilename",s)}},{key:"setTheme",value:function(s){ye.dispatch("setTheme",s)}},{key:"setCodeHidden",value:function(){ye.dispatch("toggleCode",!1),ye.dispatch("toggleResults",!0)}},{key:"setResultHidden",value:function(){ye.dispatch("toggleResults",!1),ye.dispatch("toggleCode",!0)}},{key:"loadGist",value:function(){var s=Object(m["a"])(regeneratorRuntime.mark((function s(e){var a;return regeneratorRuntime.wrap((function(s){while(1)switch(s.prev=s.next){case 0:return s.next=2,b["a"].loadGist(e);case 2:a=s.sent,ye.dispatch("loadSnippet",a),ye.dispatch("showFiles",!1);case 5:case"end":return s.stop()}}),s)})));function e(e){return s.apply(this,arguments)}return e}()},{key:"loadSnippet",value:function(){var s=Object(m["a"])(regeneratorRuntime.mark((function s(e){var a;return regeneratorRuntime.wrap((function(s){while(1)switch(s.prev=s.next){case 0:return s.next=2,b["a"].load(e);case 2:a=s.sent,ye.dispatch("loadSnippet",a),ye.dispatch("showFiles",!1);case 5:case"end":return s.stop()}}),s)})));function e(e){return s.apply(this,arguments)}return e}()},{key:"setReadOnly",value:function(){ye.dispatch("setReadOnly",!0)}}]),s}(),ve=we,ke=new URLSearchParams(window.location.search);"true"!==ke.get("embed")&&window.addEventListener("beforeunload",(function(s){s.preventDefault(),s.returnValue=""}));var Ie=new ve;try{navigator.serviceWorker.getRegistrations().then((function(s){var e=!0,a=!1,n=void 0;try{for(var t,l=s[Symbol.iterator]();!(e=(t=l.next()).done);e=!0){var o=t.value;o.unregister()}}catch(p){a=!0,n=p}finally{try{e||null==l.return||l.return()}finally{if(a)throw n}}}))}catch(Ce){}window.addEventListener("message",(function(s){"invoke"===s.data.name&&Ie[s.data.method](s.data.args)}),!1),n["a"].use(t["b"]),n["a"].component("tippy",t["a"]),n["a"].config.productionTip=!1,window.vue=new n["a"]({router:je,store:ye,render:function(s){return s(h)}}).$mount("#app"),a("7a78")},"591f":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="mail"></a></p>\n          <h1>\n            <a href="#mail">\n              Mail\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a><ul>\n<li><a href="#driver-prerequisites">Driver Prerequisites</a></li>\n</ul>\n</li>\n<li><a href="#generating-mailables">Generating Mailables</a></li>\n<li><a href="#writing-mailables">Writing Mailables</a><ul>\n<li><a href="#configuring-the-sender">Configuring The Sender</a></li>\n<li><a href="#configuring-the-view">Configuring The View</a></li>\n<li><a href="#view-data">View Data</a></li>\n<li><a href="#attachments">Attachments</a></li>\n<li><a href="#inline-attachments">Inline Attachments</a></li>\n<li><a href="#customizing-the-swiftmailer-message">Customizing The SwiftMailer Message</a></li>\n</ul>\n</li>\n<li><a href="#markdown-mailables">Markdown Mailables</a><ul>\n<li><a href="#generating-markdown-mailables">Generating Markdown Mailables</a></li>\n<li><a href="#writing-markdown-messages">Writing Markdown Messages</a></li>\n<li><a href="#customizing-the-components">Customizing The Components</a></li>\n</ul>\n</li>\n<li><a href="#sending-mail">Sending Mail</a><ul>\n<li><a href="#queueing-mail">Queueing Mail</a></li>\n</ul>\n</li>\n<li><a href="#rendering-mailables">Rendering Mailables</a><ul>\n<li><a href="#previewing-mailables-in-the-browser">Previewing Mailables In The Browser</a></li>\n</ul>\n</li>\n<li><a href="#localizing-mailables">Localizing Mailables</a></li>\n<li><a href="#mail-and-local-development">Mail &amp; Local Development</a></li>\n<li><a href="#events">Events</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Laravel provides a clean, simple API over the popular <router-link to="https://swiftmailer.symfony.com/">SwiftMailer</router-link> library with drivers for SMTP, Mailgun, Postmark, Amazon SES, and <code>sendmail</code>, allowing you to quickly get started sending mail through a local or cloud based service of your choice.</p>\n<p><a name="driver-prerequisites"></a></p>\n\n          <p><a name="driver-prerequisites"></a></p>\n          <h3>\n            <a href="#driver-prerequisites">\n              Driver Prerequisites\n            </a>\n          </h3><p>The API based drivers such as Mailgun and Postmark are often simpler and faster than SMTP servers. If possible, you should use one of these drivers. All of the API drivers require the Guzzle HTTP library, which may be installed via the Composer package manager:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">composer</span> <span class="hljs-meta">require</span> guzzlehttp/guzzle</code></pre>\n  \n          <p><a name="mailgun-driver"></a></p>\n          <h4>\n            <a href="#mailgun-driver">\n              Mailgun Driver\n            </a>\n          </h4><p>To use the Mailgun driver, first install Guzzle, then set the <code>driver</code> option in your <code>config/mail.php</code> configuration file to <code>mailgun</code>. Next, verify that your <code>config/services.php</code> configuration file contains the following options:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'mailgun\'</span> =&gt; [\n    <span class="hljs-symbol">\'domain\'</span> =&gt; <span class="hljs-symbol">\'your</span>-mailgun-domain\',\n    <span class="hljs-symbol">\'secret\'</span> =&gt; <span class="hljs-symbol">\'your</span>-mailgun-key\',\n],</code></pre>\n  <p>If you are not using the &quot;US&quot; <router-link to="https://documentation.mailgun.com/en/latest/api-intro.html#mailgun-regions">Mailgun region</router-link>, you may define your region&#39;s endpoint in the <code>services</code> configuration file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'mailgun\'</span> =&gt; [\n    <span class="hljs-symbol">\'domain\'</span> =&gt; <span class="hljs-symbol">\'your</span>-mailgun-domain\',\n    <span class="hljs-symbol">\'secret\'</span> =&gt; <span class="hljs-symbol">\'your</span>-mailgun-key\',\n    <span class="hljs-symbol">\'endpoint\'</span> =&gt; <span class="hljs-symbol">\'api</span>.eu.mailgun.net\',\n],</code></pre>\n  \n          <p><a name="postmark-driver"></a></p>\n          <h4>\n            <a href="#postmark-driver">\n              Postmark Driver\n            </a>\n          </h4><p>To use the Postmark driver, install Postmark&#39;s SwiftMailer transport via Composer:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">composer</span> <span class="hljs-meta">require</span> wildbit/<span class="hljs-keyword">swiftmailer-postmark</span></code></pre>\n  <p>Next, install Guzzle and set the <code>driver</code> option in your <code>config/mail.php</code> configuration file to <code>postmark</code>. Finally, verify that your <code>config/services.php</code> configuration file contains the following options:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'postmark\'</span> =&gt; [\n    <span class="hljs-symbol">\'token\'</span> =&gt; <span class="hljs-symbol">\'your</span>-postmark-token\',\n],</code></pre>\n  \n          <p><a name="ses-driver"></a></p>\n          <h4>\n            <a href="#ses-driver">\n              SES Driver\n            </a>\n          </h4><p>To use the Amazon SES driver you must first install the Amazon AWS SDK for PHP. You may install this library by adding the following line to your <code>composer.json</code> file&#39;s <code>require</code> section and running the <code>composer update</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">"aws/aws-sdk-php"</span>: <span class="hljs-string">"~3.0"</span></code></pre>\n  <p>Next, set the <code>driver</code> option in your <code>config/mail.php</code> configuration file to <code>ses</code> and verify that your <code>config/services.php</code> configuration file contains the following options:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'ses\'</span> =&gt; [\n    <span class="hljs-string">\'key\'</span> =&gt; <span class="hljs-string">\'your-ses-key\'</span>,\n    <span class="hljs-string">\'secret\'</span> =&gt; <span class="hljs-string">\'your-ses-secret\'</span>,\n    <span class="hljs-string">\'region\'</span> =&gt; <span class="hljs-string">\'ses-region\'</span>,  <span class="hljs-comment">// e.g. us-east-1</span>\n],</code></pre>\n  <p>If you need to include <router-link to="https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-email-2010-12-01.html#sendrawemail">additional options</router-link> when executing the SES <code>SendRawEmail</code> request, you may define an <code>options</code> array within your <code>ses</code> configuration:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'ses\'</span> =&gt; [\n    <span class="hljs-string">\'key\'</span> =&gt; <span class="hljs-string">\'your-ses-key\'</span>,\n    <span class="hljs-string">\'secret\'</span> =&gt; <span class="hljs-string">\'your-ses-secret\'</span>,\n    <span class="hljs-string">\'region\'</span> =&gt; <span class="hljs-string">\'ses-region\'</span>,  <span class="hljs-comment">// e.g. us-east-1</span>\n    <span class="hljs-string">\'options\'</span> =&gt; [\n        <span class="hljs-string">\'ConfigurationSetName\'</span> =&gt; <span class="hljs-string">\'MyConfigurationSet\'</span>,\n        <span class="hljs-string">\'Tags\'</span> =&gt; [\n            [\n                <span class="hljs-string">\'Name\'</span> =&gt; <span class="hljs-string">\'foo\'</span>,\n                <span class="hljs-string">\'Value\'</span> =&gt; <span class="hljs-string">\'bar\'</span>,\n            ],\n        ],\n    ],\n],</code></pre>\n  <p><a name="generating-mailables"></a></p>\n\n          <p><a name="generating-mailables"></a></p>\n          <h2>\n            <a href="#generating-mailables">\n              Generating Mailables\n            </a>\n          </h2><p>In Laravel, each type of email sent by your application is represented as a &quot;mailable&quot; class. These classes are stored in the <code>app/Mail</code> directory. Don&#39;t worry if you don&#39;t see this directory in your application, since it will be generated for you when you create your first mailable class using the <code>make:mail</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">make</span><span class="hljs-selector-pseudo">:mail</span> <span class="hljs-selector-tag">OrderShipped</span></code></pre>\n  <p><a name="writing-mailables"></a></p>\n\n          <p><a name="writing-mailables"></a></p>\n          <h2>\n            <a href="#writing-mailables">\n              Writing Mailables\n            </a>\n          </h2><p>All of a mailable class&#39; configuration is done in the <code>build</code> method. Within this method, you may call various methods such as <code>from</code>, <code>subject</code>, <code>view</code>, and <code>attach</code> to configure the email&#39;s presentation and delivery.</p>\n<p><a name="configuring-the-sender"></a></p>\n\n          <p><a name="configuring-the-sender"></a></p>\n          <h3>\n            <a href="#configuring-the-sender">\n              Configuring The Sender\n            </a>\n          </h3>\n          <p><a name="using-the-code-from-code-method"></a></p>\n          <h4>\n            <a href="#using-the-code-from-code-method">\n              Using The <code>from</code> Method\n            </a>\n          </h4><p>First, let&#39;s explore configuring the sender of the email. Or, in other words, who the email is going to be &quot;from&quot;. There are two ways to configure the sender. First, you may use the <code>from</code> method within your mailable class&#39; <code>build</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Build the message.\n *\n * <span class="hljs-doctag">@return</span> $this\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">build</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;from(<span class="hljs-string">\'example@example.com\'</span>)\n                -&gt;view(<span class="hljs-string">\'emails.orders.shipped\'</span>);\n}</code></pre>\n  \n          <p><a name="using-a-global-code-from-code-address"></a></p>\n          <h4>\n            <a href="#using-a-global-code-from-code-address">\n              Using A Global <code>from</code> Address\n            </a>\n          </h4><p>However, if your application uses the same &quot;from&quot; address for all of its emails, it can become cumbersome to call the <code>from</code> method in each mailable class you generate. Instead, you may specify a global &quot;from&quot; address in your <code>config/mail.php</code> configuration file. This address will be used if no other &quot;from&quot; address is specified within the mailable class:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'from\'</span> =&gt; [<span class="hljs-symbol">\'address\'</span> =&gt; <span class="hljs-symbol">\'example</span>@example.com\', <span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'App</span> <span class="hljs-type">Name\'</span>],</code></pre>\n  <p>In addition, you may define a global &quot;reply_to&quot; address within your <code>config/mail.php</code> configuration file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'reply_to\'</span> =&gt; [<span class="hljs-symbol">\'address\'</span> =&gt; <span class="hljs-symbol">\'example</span>@example.com\', <span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'App</span> <span class="hljs-type">Name\'</span>],</code></pre>\n  <p><a name="configuring-the-view"></a></p>\n\n          <p><a name="configuring-the-view"></a></p>\n          <h3>\n            <a href="#configuring-the-view">\n              Configuring The View\n            </a>\n          </h3><p>Within a mailable class&#39; <code>build</code> method, you may use the <code>view</code> method to specify which template should be used when rendering the email&#39;s contents. Since each email typically uses a <router-link to="/docs/{{version}}/blade">Blade template</router-link> to render its contents, you have the full power and convenience of the Blade templating engine when building your email&#39;s HTML:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Build the message.\n *\n * <span class="hljs-doctag">@return</span> $this\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">build</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;view(<span class="hljs-string">\'emails.orders.shipped\'</span>);\n}</code></pre>\n  <blockquote>\n<p>{tip} You may wish to create a <code>resources/views/emails</code> directory to house all of your email templates; however, you are free to place them wherever you wish within your <code>resources/views</code> directory.</p>\n</blockquote>\n\n          <p><a name="plain-text-emails"></a></p>\n          <h4>\n            <a href="#plain-text-emails">\n              Plain Text Emails\n            </a>\n          </h4><p>If you would like to define a plain-text version of your email, you may use the <code>text</code> method. Like the <code>view</code> method, the <code>text</code> method accepts a template name which will be used to render the contents of the email. You are free to define both an HTML and plain-text version of your message:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Build the message.\n *\n * <span class="hljs-doctag">@return</span> $this\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">build</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;view(<span class="hljs-string">\'emails.orders.shipped\'</span>)\n                -&gt;text(<span class="hljs-string">\'emails.orders.shipped_plain\'</span>);\n}</code></pre>\n  <p><a name="view-data"></a></p>\n\n          <p><a name="view-data"></a></p>\n          <h3>\n            <a href="#view-data">\n              View Data\n            </a>\n          </h3>\n          <p><a name="via-public-properties"></a></p>\n          <h4>\n            <a href="#via-public-properties">\n              Via Public Properties\n            </a>\n          </h4><p>Typically, you will want to pass some data to your view that you can utilize when rendering the email&#39;s HTML. There are two ways you may make data available to your view. First, any public property defined on your mailable class will automatically be made available to the view. So, for example, you may pass data into your mailable class&#39; constructor and set that data to public properties defined on the class:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Mail</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Order</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Bus</span>\\<span class="hljs-title">Queueable</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Mail</span>\\<span class="hljs-title">Mailable</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Queue</span>\\<span class="hljs-title">SerializesModels</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderShipped</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Mailable</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">Queueable</span>, <span class="hljs-title">SerializesModels</span>;\n\n    <span class="hljs-comment">/**\n     * The order instance.\n     *\n     * <span class="hljs-doctag">@var</span> Order\n     */</span>\n    <span class="hljs-keyword">public</span> $order;\n\n    <span class="hljs-comment">/**\n     * Create a new message instance.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(Order $order)</span>\n    </span>{\n        <span class="hljs-keyword">$this</span>-&gt;order = $order;\n    }\n\n    <span class="hljs-comment">/**\n     * Build the message.\n     *\n     * <span class="hljs-doctag">@return</span> $this\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">build</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;view(<span class="hljs-string">\'emails.orders.shipped\'</span>);\n    }\n}</span></code></pre>\n  <p>Once the data has been set to a public property, it will automatically be available in your view, so you may access it like you would access any other data in your Blade templates:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">&lt;<span class="hljs-keyword">div</span>&gt;\n    Price: {{ $<span class="hljs-keyword">order</span>-&gt;price }}\n&lt;/<span class="hljs-keyword">div</span>&gt;</code></pre>\n  \n          <p><a name="via-the-code-with-code-method-"></a></p>\n          <h4>\n            <a href="#via-the-code-with-code-method-">\n              Via The <code>with</code> Method:\n            </a>\n          </h4><p>If you would like to customize the format of your email&#39;s data before it is sent to the template, you may manually pass your data to the view via the <code>with</code> method. Typically, you will still pass data via the mailable class&#39; constructor; however, you should set this data to <code>protected</code> or <code>private</code> properties so the data is not automatically made available to the template. Then, when calling the <code>with</code> method, pass an array of data that you wish to make available to the template:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Mail</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Order</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Bus</span>\\<span class="hljs-title">Queueable</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Mail</span>\\<span class="hljs-title">Mailable</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Queue</span>\\<span class="hljs-title">SerializesModels</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderShipped</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Mailable</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">Queueable</span>, <span class="hljs-title">SerializesModels</span>;\n\n    <span class="hljs-comment">/**\n     * The order instance.\n     *\n     * <span class="hljs-doctag">@var</span> Order\n     */</span>\n    <span class="hljs-keyword">protected</span> $order;\n\n    <span class="hljs-comment">/**\n     * Create a new message instance.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(Order $order)</span>\n    </span>{\n        <span class="hljs-keyword">$this</span>-&gt;order = $order;\n    }\n\n    <span class="hljs-comment">/**\n     * Build the message.\n     *\n     * <span class="hljs-doctag">@return</span> $this\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">build</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;view(<span class="hljs-string">\'emails.orders.shipped\'</span>)\n                    -&gt;with([\n                        <span class="hljs-string">\'orderName\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;order-&gt;name,\n                        <span class="hljs-string">\'orderPrice\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;order-&gt;price,\n                    ]);\n    }\n}</span></code></pre>\n  <p>Once the data has been passed to the <code>with</code> method, it will automatically be available in your view, so you may access it like you would access any other data in your Blade templates:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    Price: </span><span class="hljs-template-variable">{{ $orderPrice }}</span><span class="xml">\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></code></pre>\n  <p><a name="attachments"></a></p>\n\n          <p><a name="attachments"></a></p>\n          <h3>\n            <a href="#attachments">\n              Attachments\n            </a>\n          </h3><p>To add attachments to an email, use the <code>attach</code> method within the mailable class&#39; <code>build</code> method. The <code>attach</code> method accepts the full path to the file as its first argument:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Build the message.\n *\n * <span class="hljs-doctag">@return</span> $this\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">build</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;view(<span class="hljs-string">\'emails.orders.shipped\'</span>)\n                -&gt;attach(<span class="hljs-string">\'/path/to/file\'</span>);\n}</code></pre>\n  <p>When attaching files to a message, you may also specify the display name and / or MIME type by passing an <code>array</code> as the second argument to the <code>attach</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Build the message.\n *\n * <span class="hljs-doctag">@return</span> $this\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">build</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;view(<span class="hljs-string">\'emails.orders.shipped\'</span>)\n                -&gt;attach(<span class="hljs-string">\'/path/to/file\'</span>, [\n                    <span class="hljs-string">\'as\'</span> =&gt; <span class="hljs-string">\'name.pdf\'</span>,\n                    <span class="hljs-string">\'mime\'</span> =&gt; <span class="hljs-string">\'application/pdf\'</span>,\n                ]);\n}</code></pre>\n  \n          <p><a name="attaching-files-from-disk"></a></p>\n          <h4>\n            <a href="#attaching-files-from-disk">\n              Attaching Files from Disk\n            </a>\n          </h4><p>If you have stored a file on one of your <router-link to="/docs/{{version}}/filesystem">filesystem disks</router-link>, you may attach it to the email using the <code>attachFromStorage</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Build the message.\n *\n * <span class="hljs-doctag">@return</span> $this\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">build</span><span class="hljs-params">()</span>\n</span>{\n   <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;view(<span class="hljs-string">\'email.orders.shipped\'</span>)\n               -&gt;attachFromStorage(<span class="hljs-string">\'/path/to/file\'</span>);\n}</code></pre>\n  <p>If necessary, you may specify the file&#39;s attachment name and additional options using the second and third arguments to the <code>attachFromStorage</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Build the message.\n *\n * <span class="hljs-doctag">@return</span> $this\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">build</span><span class="hljs-params">()</span>\n</span>{\n   <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;view(<span class="hljs-string">\'email.orders.shipped\'</span>)\n               -&gt;attachFromStorage(<span class="hljs-string">\'/path/to/file\'</span>, <span class="hljs-string">\'name.pdf\'</span>, [\n                   <span class="hljs-string">\'mime\'</span> =&gt; <span class="hljs-string">\'application/pdf\'</span>\n               ]);\n}</code></pre>\n  <p>The <code>attachFromStorageDisk</code> method may be used if you need to specify a storage disk other than your default disk:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Build the message.\n *\n * <span class="hljs-doctag">@return</span> $this\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">build</span><span class="hljs-params">()</span>\n</span>{\n   <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;view(<span class="hljs-string">\'email.orders.shipped\'</span>)\n               -&gt;attachFromStorageDisk(<span class="hljs-string">\'s3\'</span>, <span class="hljs-string">\'/path/to/file\'</span>);\n}</code></pre>\n  \n          <p><a name="raw-data-attachments"></a></p>\n          <h4>\n            <a href="#raw-data-attachments">\n              Raw Data Attachments\n            </a>\n          </h4><p>The <code>attachData</code> method may be used to attach a raw string of bytes as an attachment. For example, you might use this method if you have generated a PDF in memory and want to attach it to the email without writing it to disk. The <code>attachData</code> method accepts the raw data bytes as its first argument, the name of the file as its second argument, and an array of options as its third argument:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Build the message.\n *\n * <span class="hljs-doctag">@return</span> $this\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">build</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;view(<span class="hljs-string">\'emails.orders.shipped\'</span>)\n                -&gt;attachData(<span class="hljs-keyword">$this</span>-&gt;pdf, <span class="hljs-string">\'name.pdf\'</span>, [\n                    <span class="hljs-string">\'mime\'</span> =&gt; <span class="hljs-string">\'application/pdf\'</span>,\n                ]);\n}</code></pre>\n  <p><a name="inline-attachments"></a></p>\n\n          <p><a name="inline-attachments"></a></p>\n          <h3>\n            <a href="#inline-attachments">\n              Inline Attachments\n            </a>\n          </h3><p>Embedding inline images into your emails is typically cumbersome; however, Laravel provides a convenient way to attach images to your emails and retrieving the appropriate CID. To embed an inline image, use the <code>embed</code> method on the <code>$message</code> variable within your email template. Laravel automatically makes the <code>$message</code> variable available to all of your email templates, so you don&#39;t need to worry about passing it in manually:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>\n    Here is an image:\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ $message-&gt;embed($pathToImage) }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span></code></pre>\n  <blockquote>\n<p>{note} <code>$message</code> variable is not available in plain-text messages since plain-text messages do not utilize inline attachments.</p>\n</blockquote>\n\n          <p><a name="embedding-raw-data-attachments"></a></p>\n          <h4>\n            <a href="#embedding-raw-data-attachments">\n              Embedding Raw Data Attachments\n            </a>\n          </h4><p>If you already have a raw data string you wish to embed into an email template, you may use the <code>embedData</code> method on the <code>$message</code> variable:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">&lt;body&gt;\n    Here <span class="hljs-keyword">is</span> an image from raw <span class="hljs-keyword">data</span>:\n\n    &lt;img src=<span class="hljs-string">"{{ <span class="hljs-variable">$message</span>-&gt;embedData(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$name</span>) }}"</span>&gt;\n&lt;/body&gt;</code></pre>\n  <p><a name="customizing-the-swiftmailer-message"></a></p>\n\n          <p><a name="customizing-the-swiftmailer-message"></a></p>\n          <h3>\n            <a href="#customizing-the-swiftmailer-message">\n              Customizing The SwiftMailer Message\n            </a>\n          </h3><p>The <code>withSwiftMessage</code> method of the <code>Mailable</code> base class allows you to register a callback which will be invoked with the raw SwiftMailer message instance before sending the message. This gives you an opportunity to customize the message before it is delivered:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Build the message.\n *\n * <span class="hljs-doctag">@return</span> $this\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">build</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;view(<span class="hljs-string">\'emails.orders.shipped\'</span>);\n\n    <span class="hljs-keyword">$this</span>-&gt;withSwiftMessage(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($message)</span> </span>{\n        $message-&gt;getHeaders()\n                -&gt;addTextHeader(<span class="hljs-string">\'Custom-Header\'</span>, <span class="hljs-string">\'HeaderValue\'</span>);\n    });\n}</code></pre>\n  <p><a name="markdown-mailables"></a></p>\n\n          <p><a name="markdown-mailables"></a></p>\n          <h2>\n            <a href="#markdown-mailables">\n              Markdown Mailables\n            </a>\n          </h2><p>Markdown mailable messages allow you to take advantage of the pre-built templates and components of mail notifications in your mailables. Since the messages are written in Markdown, Laravel is able to render beautiful, responsive HTML templates for the messages while also automatically generating a plain-text counterpart.</p>\n<p><a name="generating-markdown-mailables"></a></p>\n\n          <p><a name="generating-markdown-mailables"></a></p>\n          <h3>\n            <a href="#generating-markdown-mailables">\n              Generating Markdown Mailables\n            </a>\n          </h3><p>To generate a mailable with a corresponding Markdown template, you may use the <code>--markdown</code> option of the <code>make:mail</code> Artisan command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan make:mail OrderShipped --markdown=emails<span class="hljs-selector-class">.orders</span><span class="hljs-selector-class">.shipped</span></code></pre>\n  <p>Then, when configuring the mailable within its <code>build</code> method, call the <code>markdown</code> method instead of the <code>view</code> method. The <code>markdown</code> method accepts the name of the Markdown template and an optional array of data to make available to the template:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Build the message.\n *\n * <span class="hljs-doctag">@return</span> $this\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">build</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;from(<span class="hljs-string">\'example@example.com\'</span>)\n                -&gt;markdown(<span class="hljs-string">\'emails.orders.shipped\'</span>);\n}</code></pre>\n  <p><a name="writing-markdown-messages"></a></p>\n\n          <p><a name="writing-markdown-messages"></a></p>\n          <h3>\n            <a href="#writing-markdown-messages">\n              Writing Markdown Messages\n            </a>\n          </h3><p>Markdown mailables use a combination of Blade components and Markdown syntax which allow you to easily construct mail messages while leveraging Laravel&#39;s pre-crafted components:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@component</span>(<span class="hljs-string">\'mail::message\'</span>)\n# Order Shipped\n\nYour order has been shipped!\n\n<span class="hljs-variable">@component</span>(<span class="hljs-string">\'mail::button\'</span>, [<span class="hljs-string">\'url\'</span> =&gt; $url])\nView Order\n<span class="hljs-variable">@endcomponent</span>\n\nThanks,&lt;br&gt;\n{{ <span class="hljs-selector-tag">config</span>(<span class="hljs-string">\'app.name\'</span>) }}\n@<span class="hljs-selector-tag">endcomponent</span></code></pre>\n  <blockquote>\n<p>{tip} Do not use excess indentation when writing Markdown emails. Markdown parsers will render indented content as code blocks.</p>\n</blockquote>\n\n          <p><a name="button-component"></a></p>\n          <h4>\n            <a href="#button-component">\n              Button Component\n            </a>\n          </h4><p>The button component renders a centered button link. The component accepts two arguments, a <code>url</code> and an optional <code>color</code>. Supported colors are <code>primary</code>, <code>success</code>, and <code>error</code>. You may add as many button components to a message as you wish:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@component</span>(<span class="hljs-string">\'mail::button\'</span>, [<span class="hljs-string">\'url\'</span> =&gt; $url, <span class="hljs-string">\'color\'</span> =&gt; <span class="hljs-string">\'success\'</span>])\nView Order\n<span class="hljs-variable">@endcomponent</span></code></pre>\n  \n          <p><a name="panel-component"></a></p>\n          <h4>\n            <a href="#panel-component">\n              Panel Component\n            </a>\n          </h4><p>The panel component renders the given block of text in a panel that has a slightly different background color than the rest of the message. This allows you to draw attention to a given block of text:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@component</span>(<span class="hljs-string">\'mail::panel\'</span>)\nThis is the panel content.\n<span class="hljs-variable">@endcomponent</span></code></pre>\n  \n          <p><a name="table-component"></a></p>\n          <h4>\n            <a href="#table-component">\n              Table Component\n            </a>\n          </h4><p>The table component allows you to transform a Markdown table into an HTML table. The component accepts the Markdown table as its content. Table column alignment is supported using the default Markdown table alignment syntax:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">@component(<span class="hljs-string">\'mail::table\'</span>)\n<span class="hljs-params">| Laravel       |</span> Table         <span class="hljs-params">| Example  |</span>\n<span class="hljs-params">| ------------- |</span><span class="hljs-symbol">:-------------</span><span class="hljs-symbol">:|</span> --------<span class="hljs-symbol">:|</span>\n<span class="hljs-params">| Col 2 is      |</span> Centered      <span class="hljs-params">| $10      |</span>\n<span class="hljs-params">| Col 3 is      |</span> Right-Aligned <span class="hljs-params">| $20      |</span>\n@endcomponent</code></pre>\n  <p><a name="customizing-the-components"></a></p>\n\n          <p><a name="customizing-the-components"></a></p>\n          <h3>\n            <a href="#customizing-the-components">\n              Customizing The Components\n            </a>\n          </h3><p>You may export all of the Markdown mail components to your own application for customization. To export the components, use the <code>vendor:publish</code> Artisan command to publish the <code>laravel-mail</code> asset tag:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan vendor:publish <span class="hljs-attribute">--tag</span>=laravel-mail</code></pre>\n  <p>This command will publish the Markdown mail components to the <code>resources/views/vendor/mail</code> directory. The <code>mail</code> directory will contain an <code>html</code> and a <code>text</code> directory, each containing their respective representations of every available component. You are free to customize these components however you like.</p>\n\n          <p><a name="customizing-the-css"></a></p>\n          <h4>\n            <a href="#customizing-the-css">\n              Customizing The CSS\n            </a>\n          </h4><p>After exporting the components, the <code>resources/views/vendor/mail/html/themes</code> directory will contain a <code>default.css</code> file. You may customize the CSS in this file and your styles will automatically be in-lined within the HTML representations of your Markdown mail messages.</p>\n<p>If you would like to build an entirely new theme for Laravel&#39;s Markdown components, you may place a CSS file within the <code>html/themes</code> directory. After naming and saving your CSS file, update the <code>theme</code> option of the <code>mail</code> configuration file to match the name of your new theme.</p>\n<p>To customize the theme for an individual mailable, you may set the <code>$theme</code> property of the mailable class to the name of the theme that should be used when sending that mailable.</p>\n<p><a name="sending-mail"></a></p>\n\n          <p><a name="sending-mail"></a></p>\n          <h2>\n            <a href="#sending-mail">\n              Sending Mail\n            </a>\n          </h2><p>To send a message, use the <code>to</code> method on the <code>Mail</code> <router-link to="/docs/{{version}}/facades">facade</router-link>. The <code>to</code> method accepts an email address, a user instance, or a collection of users. If you pass an object or collection of objects, the mailer will automatically use their <code>email</code> and <code>name</code> properties when setting the email recipients, so make sure these attributes are available on your objects. Once you have specified your recipients, you may pass an instance of your mailable class to the <code>send</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">Controller</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Mail</span>\\<span class="hljs-title">OrderShipped</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Order</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Request</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Mail</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Ship the given order.\n     *\n     * <span class="hljs-doctag">@param</span>  Request  $request\n     * <span class="hljs-doctag">@param</span>  int  $orderId\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ship</span><span class="hljs-params">(Request $request, $orderId)</span>\n    </span>{\n        $order = Order::findOrFail($orderId);\n\n        <span class="hljs-comment">// Ship order...</span>\n\n        Mail::to($request-&gt;user())-&gt;send(<span class="hljs-keyword">new</span> OrderShipped($order));\n    }\n}</span></code></pre>\n  <p>You are not limited to just specifying the &quot;to&quot; recipients when sending a message. You are free to set &quot;to&quot;, &quot;cc&quot;, and &quot;bcc&quot; recipients all within a single, chained method call:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Mail::<span class="hljs-keyword">to</span><span class="hljs-function"><span class="hljs-params">($request-&gt;user())</span>\n    -&gt;</span>cc<span class="hljs-function"><span class="hljs-params">($moreUsers)</span>\n    -&gt;</span>bcc<span class="hljs-function"><span class="hljs-params">($evenMoreUsers)</span>\n    -&gt;</span>send(<span class="hljs-keyword">new</span> OrderShipped($order));</code></pre>\n  <p><a name="rendering-mailables"></a></p>\n\n          <p><a name="rendering-mailables"></a></p>\n          <h2>\n            <a href="#rendering-mailables">\n              Rendering Mailables\n            </a>\n          </h2><p>Sometimes you may wish to capture the HTML content of a mailable without sending it. To accomplish this, you may call the <code>render</code> method of the mailable. This method will return the evaluated contents of the mailable as a string:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$invoice = App\\Invoice::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> App\\Mail\\InvoicePaid($invoice))-&gt;render();</code></pre>\n  <p><a name="previewing-mailables-in-the-browser"></a></p>\n\n          <p><a name="previewing-mailables-in-the-browser"></a></p>\n          <h3>\n            <a href="#previewing-mailables-in-the-browser">\n              Previewing Mailables In The Browser\n            </a>\n          </h3><p>When designing a mailable&#39;s template, it is convenient to quickly preview the rendered mailable in your browser like a typical Blade template. For this reason, Laravel allows you to return any mailable directly from a route Closure or controller. When a mailable is returned, it will be rendered and displayed in the browser, allowing you to quickly preview its design without needing to send it to an actual email address:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'mailable\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    $invoice = App\\Invoice::find(<span class="hljs-number">1</span>);\n\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> App\\Mail\\InvoicePaid($invoice);\n});</code></pre>\n  <p><a name="queueing-mail"></a></p>\n\n          <p><a name="queueing-mail"></a></p>\n          <h3>\n            <a href="#queueing-mail">\n              Queueing Mail\n            </a>\n          </h3>\n          <p><a name="queueing-a-mail-message"></a></p>\n          <h4>\n            <a href="#queueing-a-mail-message">\n              Queueing A Mail Message\n            </a>\n          </h4><p>Since sending email messages can drastically lengthen the response time of your application, many developers choose to queue email messages for background sending. Laravel makes this easy using its built-in <router-link to="/docs/{{version}}/queues">unified queue API</router-link>. To queue a mail message, use the <code>queue</code> method on the <code>Mail</code> facade after specifying the message&#39;s recipients:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Mail::<span class="hljs-keyword">to</span><span class="hljs-function"><span class="hljs-params">($request-&gt;user())</span>\n    -&gt;</span>cc<span class="hljs-function"><span class="hljs-params">($moreUsers)</span>\n    -&gt;</span>bcc<span class="hljs-function"><span class="hljs-params">($evenMoreUsers)</span>\n    -&gt;</span>queue(<span class="hljs-keyword">new</span> OrderShipped($order));</code></pre>\n  <p>This method will automatically take care of pushing a job onto the queue so the message is sent in the background. You will need to <router-link to="/docs/{{version}}/queues">configure your queues</router-link> before using this feature.</p>\n\n          <p><a name="delayed-message-queueing"></a></p>\n          <h4>\n            <a href="#delayed-message-queueing">\n              Delayed Message Queueing\n            </a>\n          </h4><p>If you wish to delay the delivery of a queued email message, you may use the <code>later</code> method. As its first argument, the <code>later</code> method accepts a <code>DateTime</code> instance indicating when the message should be sent:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-keyword">when</span> = now<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>addMinutes(<span class="hljs-number">10</span>);\n\nMail::<span class="hljs-keyword">to</span><span class="hljs-function"><span class="hljs-params">($request-&gt;user())</span>\n    -&gt;</span>cc<span class="hljs-function"><span class="hljs-params">($moreUsers)</span>\n    -&gt;</span>bcc<span class="hljs-function"><span class="hljs-params">($evenMoreUsers)</span>\n    -&gt;</span>later($<span class="hljs-keyword">when</span>, <span class="hljs-keyword">new</span> OrderShipped($order));</code></pre>\n  \n          <p><a name="pushing-to-specific-queues"></a></p>\n          <h4>\n            <a href="#pushing-to-specific-queues">\n              Pushing To Specific Queues\n            </a>\n          </h4><p>Since all mailable classes generated using the <code>make:mail</code> command make use of the <code>Illuminate\\Bus\\Queueable</code> trait, you may call the <code>onQueue</code> and <code>onConnection</code> methods on any mailable class instance, allowing you to specify the connection and queue name for the message:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-function"><span class="hljs-title">$message</span> = <span class="hljs-params">(<span class="hljs-keyword">new</span> OrderShipped($order))</span>\n                -&gt;</span>onConnection<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'sqs\'</span>)</span>\n                -&gt;</span>onQueue(<span class="hljs-string">\'emails\'</span>);\n\nMail::<span class="hljs-keyword">to</span><span class="hljs-function"><span class="hljs-params">($request-&gt;user())</span>\n    -&gt;</span>cc<span class="hljs-function"><span class="hljs-params">($moreUsers)</span>\n    -&gt;</span>bcc<span class="hljs-function"><span class="hljs-params">($evenMoreUsers)</span>\n    -&gt;</span>queue($message);</code></pre>\n  \n          <p><a name="queueing-by-default"></a></p>\n          <h4>\n            <a href="#queueing-by-default">\n              Queueing By Default\n            </a>\n          </h4><p>If you have mailable classes that you want to always be queued, you may implement the <code>ShouldQueue</code> contract on the class. Now, even if you call the <code>send</code> method when mailing, the mailable will still be queued since it implements the contract:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">use <span class="hljs-type">Illuminate</span>\\<span class="hljs-type">Contracts</span>\\<span class="hljs-type">Queue</span>\\<span class="hljs-type">ShouldQueue</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderShipped</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Mailable</span> <span class="hljs-title">implements</span> <span class="hljs-title">ShouldQueue</span></span>\n{\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p><a name="localizing-mailables"></a></p>\n\n          <p><a name="localizing-mailables"></a></p>\n          <h2>\n            <a href="#localizing-mailables">\n              Localizing Mailables\n            </a>\n          </h2><p>Laravel allows you to send mailables in a locale other than the current language, and will even remember this locale if the mail is queued.</p>\n<p>To accomplish this, the <code>Mail</code> facade offers a <code>locale</code> method to set the desired language. The application will change into this locale when the mailable is being formatted and then revert back to the previous locale when formatting is complete:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Mail::<span class="hljs-keyword">to</span><span class="hljs-function"><span class="hljs-params">($request-&gt;user())</span>-&gt;</span>locale<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'es\'</span>)</span>-&gt;</span>send(\n    <span class="hljs-keyword">new</span> OrderShipped($order)\n);</code></pre>\n  \n          <p><a name="user-preferred-locales"></a></p>\n          <h3>\n            <a href="#user-preferred-locales">\n              User Preferred Locales\n            </a>\n          </h3><p>Sometimes, applications store each user&#39;s preferred locale. By implementing the <code>HasLocalePreference</code> contract on one or more of your models, you may instruct Laravel to use this stored locale when sending mail:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">Translation</span>\\<span class="hljs-title">HasLocalePreference</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HasLocalePreference</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Get the user\'s preferred locale.\n     *\n     * <span class="hljs-doctag">@return</span> string\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">preferredLocale</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;locale;\n    }\n}</code></pre>\n  <p>Once you have implemented the interface, Laravel will automatically use the preferred locale when sending mailables and notifications to the model. Therefore, there is no need to call the <code>locale</code> method when using this interface:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Mail::<span class="hljs-keyword">to</span><span class="hljs-function"><span class="hljs-params">($request-&gt;user())</span>-&gt;</span>send(<span class="hljs-keyword">new</span> OrderShipped($order));</code></pre>\n  <p><a name="mail-and-local-development"></a></p>\n\n          <p><a name="mail-amp-local-development"></a></p>\n          <h2>\n            <a href="#mail-amp-local-development">\n              Mail &amp; Local Development\n            </a>\n          </h2><p>When developing an application that sends email, you probably don&#39;t want to actually send emails to live email addresses. Laravel provides several ways to &quot;disable&quot; the actual sending of emails during local development.</p>\n\n          <p><a name="log-driver"></a></p>\n          <h4>\n            <a href="#log-driver">\n              Log Driver\n            </a>\n          </h4><p>Instead of sending your emails, the <code>log</code> mail driver will write all email messages to your log files for inspection. For more information on configuring your application per environment, check out the <router-link to="/docs/{{version}}/configuration#environment-configuration">configuration documentation</router-link>.</p>\n\n          <p><a name="universal-to"></a></p>\n          <h4>\n            <a href="#universal-to">\n              Universal To\n            </a>\n          </h4><p>Another solution provided by Laravel is to set a universal recipient of all emails sent by the framework. This way, all the emails generated by your application will be sent to a specific address, instead of the address actually specified when sending the message. This can be done via the <code>to</code> option in your <code>config/mail.php</code> configuration file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'to\'</span> =&gt; [\n    <span class="hljs-symbol">\'address\'</span> =&gt; <span class="hljs-symbol">\'example</span>@example.com\',\n    <span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Example\'</span>\n],</code></pre>\n  \n          <p><a name="mailtrap"></a></p>\n          <h4>\n            <a href="#mailtrap">\n              Mailtrap\n            </a>\n          </h4><p>Finally, you may use a service like <router-link to="https://mailtrap.io">Mailtrap</router-link> and the <code>smtp</code> driver to send your email messages to a &quot;dummy&quot; mailbox where you may view them in a true email client. This approach has the benefit of allowing you to actually inspect the final emails in Mailtrap&#39;s message viewer.</p>\n<p><a name="events"></a></p>\n\n          <p><a name="events"></a></p>\n          <h2>\n            <a href="#events">\n              Events\n            </a>\n          </h2><p>Laravel fires two events during the process of sending mail messages. The <code>MessageSending</code> event is fired prior to a message being sent, while the <code>MessageSent</code> event is fired after a message has been sent. Remember, these events are fired when the mail is being <em>sent</em>, not when it is queued. You may register an event listener for this event in your <code>EventServiceProvider</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * The event listener mappings for the application.\n *\n * <span class="hljs-doctag">@var</span> array\n */</span>\n<span class="hljs-keyword">protected</span> $listen = [\n    <span class="hljs-string">\'Illuminate\\Mail\\Events\\MessageSending\'</span> =&gt; [\n        <span class="hljs-string">\'App\\Listeners\\LogSendingMessage\'</span>,\n    ],\n    <span class="hljs-string">\'Illuminate\\Mail\\Events\\MessageSent\'</span> =&gt; [\n        <span class="hljs-string">\'App\\Listeners\\LogSentMessage\'</span>,\n    ],\n];</code></pre>\n  '},"5be8":function(s,e,a){var n={"./api-authentication.html":"aca0","./artisan.html":"f349","./authentication.html":"bd53","./authorization.html":"24dd","./billing.html":"d43f","./blade.html":"768d","./broadcasting.html":"c825","./cache.html":"b352","./collections.html":"d964","./configuration.html":"7f04","./console-tests.html":"bd56","./container.html":"e125","./contracts.html":"c81f","./contributions.html":"2f08","./controllers.html":"f227","./csrf.html":"69fe","./database-testing.html":"0b91","./database.html":"34ad","./deployment.html":"eb0a","./documentation.html":"0155","./dusk.html":"7bfe","./eloquent-collections.html":"0be5","./eloquent-mutators.html":"c889","./eloquent-relationships.html":"992f","./eloquent-resources.html":"11ea","./eloquent-serialization.html":"6edb","./eloquent.html":"c187","./encryption.html":"49a0","./envoy.html":"cdd6","./errors.html":"c909","./events.html":"3ba3","./facades.html":"2ff1","./filesystem.html":"0d01","./frontend.html":"c148","./hashing.html":"f0d6","./helpers.html":"6de7","./homestead.html":"1bee","./horizon.html":"a150","./http-tests.html":"8362","./installation.html":"4557","./license.html":"4f4a","./lifecycle.html":"5461","./localization.html":"7834","./logging.html":"24b2","./mail.html":"591f","./middleware.html":"8708","./migrations.html":"3f4f","./mix.html":"8672","./mocking.html":"101d","./notifications.html":"b115","./packages.html":"4827","./pagination.html":"b2726","./passport.html":"18af","./passwords.html":"3470","./providers.html":"f9af","./queries.html":"c06c","./queues.html":"d35c","./readme.html":"e381","./redirects.html":"7997","./redis.html":"25c4","./releases.html":"cee2","./requests.html":"1de4","./responses.html":"10ba","./routing.html":"bcbc","./scheduling.html":"7094","./scout.html":"9f07","./seeding.html":"b32e","./session.html":"fc70","./snippets.html":"14f2","./socialite.html":"4bbd","./structure.html":"78c4","./telescope.html":"fac8","./testing.html":"a367","./upgrade.html":"b261","./urls.html":"7016","./valet.html":"0e26","./validation.html":"ea0a","./verification.html":"d9d9","./views.html":"1d4d"};function t(s){var e=l(s);return a(e)}function l(s){if(!a.o(n,s)){var e=new Error("Cannot find module '"+s+"'");throw e.code="MODULE_NOT_FOUND",e}return n[s]}t.keys=function(){return Object.keys(n)},t.resolve=l,s.exports=t,t.id="5be8"},"69fe":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="csrf-protection"></a></p>\n          <h1>\n            <a href="#csrf-protection">\n              CSRF Protection\n            </a>\n          </h1><ul>\n<li><a href="#csrf-introduction">Introduction</a></li>\n<li><a href="#csrf-excluding-uris">Excluding URIs</a></li>\n<li><a href="#csrf-x-csrf-token">X-CSRF-Token</a></li>\n<li><a href="#csrf-x-xsrf-token">X-XSRF-Token</a></li>\n</ul>\n<p><a name="csrf-introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Laravel makes it easy to protect your application from <router-link to="https://en.wikipedia.org/wiki/Cross-site_request_forgery">cross-site request forgery</router-link> (CSRF) attacks. Cross-site request forgeries are a type of malicious exploit whereby unauthorized commands are performed on behalf of an authenticated user.</p>\n<p>Laravel automatically generates a CSRF &quot;token&quot; for each active user session managed by the application. This token is used to verify that the authenticated user is the one actually making the requests to the application.</p>\n<p>Anytime you define an HTML form in your application, you should include a hidden CSRF token field in the form so that the CSRF protection middleware can validate the request. You may use the <code>@csrf</code> Blade directive to generate the token field:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">&lt;form method=<span class="hljs-string">"<span class="hljs-keyword">POST</span>"</span> action=<span class="hljs-string">"/profile"</span>&gt;\n    @csrf\n    ...\n&lt;/form&gt;</code></pre>\n  <p>The <code>VerifyCsrfToken</code> <router-link to="/docs/{{version}}/middleware">middleware</router-link>, which is included in the <code>web</code> middleware group, will automatically verify that the token in the request input matches the token stored in the session.</p>\n\n          <p><a name="csrf-tokens-amp-javascript"></a></p>\n          <h4>\n            <a href="#csrf-tokens-amp-javascript">\n              CSRF Tokens &amp; JavaScript\n            </a>\n          </h4><p>When building JavaScript driven applications, it is convenient to have your JavaScript HTTP library automatically attach the CSRF token to every outgoing request. By default, the Axios HTTP library provided in the <code>resources/js/bootstrap.js</code> file automatically sends an <code>X-XSRF-TOKEN</code> header using the value of the encrypted <code>XSRF-TOKEN</code> cookie. If you are not using this library, you will need to manually configure this behavior for your application.</p>\n<p><a name="csrf-excluding-uris"></a></p>\n\n          <p><a name="excluding-uris-from-csrf-protection"></a></p>\n          <h2>\n            <a href="#excluding-uris-from-csrf-protection">\n              Excluding URIs From CSRF Protection\n            </a>\n          </h2><p>Sometimes you may wish to exclude a set of URIs from CSRF protection. For example, if you are using <router-link to="https://stripe.com">Stripe</router-link> to process payments and are utilizing their webhook system, you will need to exclude your Stripe webhook handler route from CSRF protection since Stripe will not know what CSRF token to send to your routes.</p>\n<p>Typically, you should place these kinds of routes outside of the <code>web</code> middleware group that the <code>RouteServiceProvider</code> applies to all routes in the <code>routes/web.php</code> file. However, you may also exclude the routes by adding their URIs to the <code>$except</code> property of the <code>VerifyCsrfToken</code> middleware:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Middleware</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Middleware</span>\\<span class="hljs-title">VerifyCsrfToken</span> <span class="hljs-title">as</span> <span class="hljs-title">Middleware</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VerifyCsrfToken</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Middleware</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The URIs that should be excluded from CSRF verification.\n     *\n     * <span class="hljs-doctag">@var</span> array\n     */</span>\n    <span class="hljs-keyword">protected</span> $except = [\n        <span class="hljs-string">\'stripe/*\'</span>,\n        <span class="hljs-string">\'http://example.com/foo/bar\'</span>,\n        <span class="hljs-string">\'http://example.com/foo/*\'</span>,\n    ];\n}</span></code></pre>\n  <blockquote>\n<p>{tip} The CSRF middleware is automatically disabled when <router-link to="/docs/{{version}}/testing">running tests</router-link>.</p>\n</blockquote>\n<p><a name="csrf-x-csrf-token"></a></p>\n\n          <p><a name="x-csrf-token"></a></p>\n          <h2>\n            <a href="#x-csrf-token">\n              X-CSRF-TOKEN\n            </a>\n          </h2><p>In addition to checking for the CSRF token as a POST parameter, the <code>VerifyCsrfToken</code> middleware will also check for the <code>X-CSRF-TOKEN</code> request header. You could, for example, store the token in an HTML <code>meta</code> tag:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">&lt;meta <span class="hljs-attribute">name</span>=<span class="hljs-string">"csrf-token"</span> <span class="hljs-attribute">content</span>=<span class="hljs-string">"{{ csrf_token() }}"</span>&gt;</code></pre>\n  <p>Then, once you have created the <code>meta</code> tag, you can instruct a library like jQuery to automatically add the token to all request headers. This provides simple, convenient CSRF protection for your AJAX based applications:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$.ajaxSetup({\n    <span class="hljs-attr">headers</span>: {\n        <span class="hljs-string">\'X-CSRF-TOKEN\'</span>: $(<span class="hljs-string">\'meta[name="csrf-token"]\'</span>).attr(<span class="hljs-string">\'content\'</span>)\n    }\n});</code></pre>\n  <p><a name="csrf-x-xsrf-token"></a></p>\n\n          <p><a name="x-xsrf-token"></a></p>\n          <h2>\n            <a href="#x-xsrf-token">\n              X-XSRF-TOKEN\n            </a>\n          </h2><p>Laravel stores the current CSRF token in an encrypted <code>XSRF-TOKEN</code> cookie that is included with each response generated by the framework. You can use the cookie value to set the <code>X-XSRF-TOKEN</code> request header.</p>\n<p>This cookie is primarily sent as a convenience since some JavaScript frameworks and libraries, like Angular and Axios, automatically place its value in the <code>X-XSRF-TOKEN</code> header on same-origin requests.</p>\n<blockquote>\n<p>{tip} By default, the <code>resources/js/bootstrap.js</code> file includes the Axios HTTP library which will automatically send this for you.</p>\n</blockquote>\n'},"6de7":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="helpers"></a></p>\n          <h1>\n            <a href="#helpers">\n              Helpers\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#available-methods">Available Methods</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Laravel includes a variety of global &quot;helper&quot; PHP functions. Many of these functions are used by the framework itself; however, you are free to use them in your own applications if you find them convenient.</p>\n<p><a name="available-methods"></a></p>\n\n          <p><a name="available-methods"></a></p>\n          <h2>\n            <a href="#available-methods">\n              Available Methods\n            </a>\n          </h2>\n          <p><a name="arrays-amp-objects"></a></p>\n          <h3>\n            <a href="#arrays-amp-objects">\n              Arrays &amp; Objects\n            </a>\n          </h3><div class="collection-method-list" markdown="1">\n\n<p><a href="#method-array-add">Arr::add</a>\n<a href="#method-array-collapse">Arr::collapse</a>\n<a href="#method-array-divide">Arr::divide</a>\n<a href="#method-array-dot">Arr::dot</a>\n<a href="#method-array-except">Arr::except</a>\n<a href="#method-array-first">Arr::first</a>\n<a href="#method-array-flatten">Arr::flatten</a>\n<a href="#method-array-forget">Arr::forget</a>\n<a href="#method-array-get">Arr::get</a>\n<a href="#method-array-has">Arr::has</a>\n<a href="#method-array-isassoc">Arr::isAssoc</a>\n<a href="#method-array-last">Arr::last</a>\n<a href="#method-array-only">Arr::only</a>\n<a href="#method-array-pluck">Arr::pluck</a>\n<a href="#method-array-prepend">Arr::prepend</a>\n<a href="#method-array-pull">Arr::pull</a>\n<a href="#method-array-random">Arr::random</a>\n<a href="#method-array-set">Arr::set</a>\n<a href="#method-array-sort">Arr::sort</a>\n<a href="#method-array-sort-recursive">Arr::sortRecursive</a>\n<a href="#method-array-where">Arr::where</a>\n<a href="#method-array-wrap">Arr::wrap</a>\n<a href="#method-data-fill">data_fill</a>\n<a href="#method-data-get">data_get</a>\n<a href="#method-data-set">data_set</a>\n<a href="#method-head">head</a>\n<a href="#method-last">last</a></p>\n</div>\n\n\n          <p><a name="paths"></a></p>\n          <h3>\n            <a href="#paths">\n              Paths\n            </a>\n          </h3><div class="collection-method-list" markdown="1">\n\n<p><a href="#method-app-path">app_path</a>\n<a href="#method-base-path">base_path</a>\n<a href="#method-config-path">config_path</a>\n<a href="#method-database-path">database_path</a>\n<a href="#method-mix">mix</a>\n<a href="#method-public-path">public_path</a>\n<a href="#method-resource-path">resource_path</a>\n<a href="#method-storage-path">storage_path</a></p>\n</div>\n\n\n          <p><a name="strings"></a></p>\n          <h3>\n            <a href="#strings">\n              Strings\n            </a>\n          </h3><div class="collection-method-list" markdown="1">\n\n<p><a href="#method-__">__</a>\n<a href="#method-class-basename">class_basename</a>\n<a href="#method-e">e</a>\n<a href="#method-preg-replace-array">preg_replace_array</a>\n<a href="#method-str-after">Str::after</a>\n<a href="#method-str-after-last">Str::afterLast</a>\n<a href="#method-str-before">Str::before</a>\n<a href="#method-str-before-last">Str::beforeLast</a>\n<a href="#method-camel-case">Str::camel</a>\n<a href="#method-str-contains">Str::contains</a>\n<a href="#method-str-contains-all">Str::containsAll</a>\n<a href="#method-ends-with">Str::endsWith</a>\n<a href="#method-str-finish">Str::finish</a>\n<a href="#method-str-is">Str::is</a>\n<a href="#method-kebab-case">Str::kebab</a>\n<a href="#method-str-limit">Str::limit</a>\n<a href="#method-str-ordered-uuid">Str::orderedUuid</a>\n<a href="#method-str-plural">Str::plural</a>\n<a href="#method-str-random">Str::random</a>\n<a href="#method-str-replace-array">Str::replaceArray</a>\n<a href="#method-str-replace-first">Str::replaceFirst</a>\n<a href="#method-str-replace-last">Str::replaceLast</a>\n<a href="#method-str-singular">Str::singular</a>\n<a href="#method-str-slug">Str::slug</a>\n<a href="#method-snake-case">Str::snake</a>\n<a href="#method-str-start">Str::start</a>\n<a href="#method-starts-with">Str::startsWith</a>\n<a href="#method-studly-case">Str::studly</a>\n<a href="#method-title-case">Str::title</a>\n<a href="#method-str-uuid">Str::uuid</a>\n<a href="#method-str-words">Str::words</a>\n<a href="#method-trans">trans</a>\n<a href="#method-trans-choice">trans_choice</a></p>\n</div>\n\n\n          <p><a name="urls"></a></p>\n          <h3>\n            <a href="#urls">\n              URLs\n            </a>\n          </h3><div class="collection-method-list" markdown="1">\n\n<p><a href="#method-action">action</a>\n<a href="#method-asset">asset</a>\n<a href="#method-route">route</a>\n<a href="#method-secure-asset">secure_asset</a>\n<a href="#method-secure-url">secure_url</a>\n<a href="#method-url">url</a></p>\n</div>\n\n\n          <p><a name="miscellaneous"></a></p>\n          <h3>\n            <a href="#miscellaneous">\n              Miscellaneous\n            </a>\n          </h3><div class="collection-method-list" markdown="1">\n\n<p><a href="#method-abort">abort</a>\n<a href="#method-abort-if">abort_if</a>\n<a href="#method-abort-unless">abort_unless</a>\n<a href="#method-app">app</a>\n<a href="#method-auth">auth</a>\n<a href="#method-back">back</a>\n<a href="#method-bcrypt">bcrypt</a>\n<a href="#method-blank">blank</a>\n<a href="#method-broadcast">broadcast</a>\n<a href="#method-cache">cache</a>\n<a href="#method-class-uses-recursive">class_uses_recursive</a>\n<a href="#method-collect">collect</a>\n<a href="#method-config">config</a>\n<a href="#method-cookie">cookie</a>\n<a href="#method-csrf-field">csrf_field</a>\n<a href="#method-csrf-token">csrf_token</a>\n<a href="#method-dd">dd</a>\n<a href="#method-decrypt">decrypt</a>\n<a href="#method-dispatch">dispatch</a>\n<a href="#method-dispatch-now">dispatch_now</a>\n<a href="#method-dump">dump</a>\n<a href="#method-encrypt">encrypt</a>\n<a href="#method-env">env</a>\n<a href="#method-event">event</a>\n<a href="#method-factory">factory</a>\n<a href="#method-filled">filled</a>\n<a href="#method-info">info</a>\n<a href="#method-logger">logger</a>\n<a href="#method-method-field">method_field</a>\n<a href="#method-now">now</a>\n<a href="#method-old">old</a>\n<a href="#method-optional">optional</a>\n<a href="#method-policy">policy</a>\n<a href="#method-redirect">redirect</a>\n<a href="#method-report">report</a>\n<a href="#method-request">request</a>\n<a href="#method-rescue">rescue</a>\n<a href="#method-resolve">resolve</a>\n<a href="#method-response">response</a>\n<a href="#method-retry">retry</a>\n<a href="#method-session">session</a>\n<a href="#method-tap">tap</a>\n<a href="#method-throw-if">throw_if</a>\n<a href="#method-throw-unless">throw_unless</a>\n<a href="#method-today">today</a>\n<a href="#method-trait-uses-recursive">trait_uses_recursive</a>\n<a href="#method-transform">transform</a>\n<a href="#method-validator">validator</a>\n<a href="#method-value">value</a>\n<a href="#method-view">view</a>\n<a href="#method-with">with</a></p>\n</div>\n\n<p><a name="method-listing"></a></p>\n\n          <p><a name="method-listing"></a></p>\n          <h2>\n            <a href="#method-listing">\n              Method Listing\n            </a>\n          </h2><p><a name="arrays"></a></p>\n\n          <p><a name="arrays-amp-objects"></a></p>\n          <h2>\n            <a href="#arrays-amp-objects">\n              Arrays &amp; Objects\n            </a>\n          </h2><p><a name="method-array-add"></a></p>\n\n          <p><a name="-code-arr-add-code-"></a></p>\n          <h4>\n            <a href="#-code-arr-add-code-">\n              <code>Arr::add()</code>\n            </a>\n          </h4><p>The <code>Arr::add</code> method adds a given key / value pair to an array if the given key doesn&#39;t already exist in the array or is set to <code>null</code>:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRhcnJheSA9IEFycjo6YWRkKFsnbmFtZScgPT4gJ0Rlc2snLCAncHJpY2UnID0+IG51bGxdLCAncHJpY2UnLCAxMDApO1xuIiwiaGFzaCI6ImhlbHBlcnMtYXJyYWRkIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> Illuminate\\Support\\Arr;\n\n<span class="hljs-variable">$array</span> = Arr::add([<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Desk\'</span>], <span class="hljs-string">\'price\'</span>, <span class="hljs-number">100</span>);\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Desk\'</span>, <span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">100</span>]\n\n<span class="hljs-variable">$array</span> = Arr::add([<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Desk\'</span>, <span class="hljs-string">\'price\'</span> =&gt; null], <span class="hljs-string">\'price\'</span>, <span class="hljs-number">100</span>);\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Desk\'</span>, <span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">100</span>]</code></pre>\n  <p><a name="method-array-collapse"></a></p>\n\n          <p><a name="-code-arr-collapse-code-"></a></p>\n          <h4>\n            <a href="#-code-arr-collapse-code-">\n              <code>Arr::collapse()</code>\n            </a>\n          </h4><p>The <code>Arr::collapse</code> method collapses an array of arrays into a single array:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlxuICRhcnJheSA9IEFycjo6Y29sbGFwc2UoW1sxLCAyLCAzXSwgWzQsIDUsIDZdLCBbNywgOCwgOV1dKTtcbiIsImhhc2giOiJoZWxwZXJzLWFycmNvbGxhcHNlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">use Illuminate\\Support\\Arr;\n\n$<span class="hljs-built_in">array</span> = Arr::collapse([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]]);\n\n<span class="hljs-comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></code></pre>\n  <p><a name="method-array-divide"></a></p>\n\n          <p><a name="-code-arr-divide-code-"></a></p>\n          <h4>\n            <a href="#-code-arr-divide-code-">\n              <code>Arr::divide()</code>\n            </a>\n          </h4><p>The <code>Arr::divide</code> method returns two arrays, one containing the keys, and the other containing the values of the given array:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlxuIFska2V5cywgJHZhbHVlc10gPSBBcnI6OmRpdmlkZShbJ25hbWUnID0+ICdEZXNrJ10pO1xuIiwiaGFzaCI6ImhlbHBlcnMtYXJyZGl2aWRlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">use Illuminate\\Support\\Arr;\n\n[<span class="hljs-variable">$keys</span>, <span class="hljs-variable">$values</span>] = Arr::divide([<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Desk\'</span>]);\n\n<span class="hljs-regexp">//</span> <span class="hljs-variable">$keys</span>: [<span class="hljs-string">\'name\'</span>]\n\n<span class="hljs-regexp">//</span> <span class="hljs-variable">$values</span>: [<span class="hljs-string">\'Desk\'</span>]</code></pre>\n  <p><a name="method-array-dot"></a></p>\n\n          <p><a name="-code-arr-dot-code-"></a></p>\n          <h4>\n            <a href="#-code-arr-dot-code-">\n              <code>Arr::dot()</code>\n            </a>\n          </h4><p>The <code>Arr::dot</code> method flattens a multi-dimensional array into a single level array that uses &quot;dot&quot; notation to indicate depth:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlxuICRhcnJheSA9IFsncHJvZHVjdHMnID0+IFsnZGVzaycgPT4gWydwcmljZScgPT4gMTAwXV1dO1xuXG4gJGZsYXR0ZW5lZCA9IEFycjo6ZG90KCRhcnJheSk7XG4iLCJoYXNoIjoiaGVscGVycy1hcnJkb3QifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Arr</span>;\n\n$array = [<span class="hljs-string">\'products\'</span> =&gt; [<span class="hljs-string">\'desk\'</span> =&gt; [<span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">100</span>]]];\n\n$flattened = Arr::dot($array);\n\n<span class="hljs-comment">// [\'products.desk.price\' =&gt; 100]</span></code></pre>\n  <p><a name="method-array-except"></a></p>\n\n          <p><a name="-code-arr-except-code-"></a></p>\n          <h4>\n            <a href="#-code-arr-except-code-">\n              <code>Arr::except()</code>\n            </a>\n          </h4><p>The <code>Arr::except</code> method removes the given key / value pairs from an array:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlxuICRhcnJheSA9IFsnbmFtZScgPT4gJ0Rlc2snLCAncHJpY2UnID0+IDEwMF07XG5cbiAkZmlsdGVyZWQgPSBBcnI6OmV4Y2VwdCgkYXJyYXksIFsncHJpY2UnXSk7XG4iLCJoYXNoIjoiaGVscGVycy1hcnJleGNlcHQifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Arr</span>;\n\n$array = [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Desk\'</span>, <span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">100</span>];\n\n$filtered = Arr::except($array, [<span class="hljs-string">\'price\'</span>]);\n\n<span class="hljs-comment">// [\'name\' =&gt; \'Desk\']</span></code></pre>\n  <p><a name="method-array-first"></a></p>\n\n          <p><a name="-code-arr-first-code-"></a></p>\n          <h4>\n            <a href="#-code-arr-first-code-">\n              <code>Arr::first()</code>\n            </a>\n          </h4><p>The <code>Arr::first</code> method returns the first element of an array passing a given truth test:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlxuICRhcnJheSA9IFsxMDAsIDIwMCwgMzAwXTtcblxuICRmaXJzdCA9IEFycjo6Zmlyc3QoJGFycmF5LCBmdW5jdGlvbiAoJHZhbHVlLCAka2V5KSB7XG4gIHJldHVybiAkdmFsdWUgPj0gMTUwO1xuIH0pO1xuIiwiaGFzaCI6ImhlbHBlcnMtYXJyZmlyc3QifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Arr</span>;\n\n$array = [<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>];\n\n$first = Arr::first($array, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($value, $key)</span> </span>{\n    <span class="hljs-keyword">return</span> $value &gt;= <span class="hljs-number">150</span>;\n});\n\n<span class="hljs-comment">// 200</span></code></pre>\n  <p>A default value may also be passed as the third parameter to the method. This value will be returned if no value passes the truth test:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Arr</span>;\n\n$first = Arr::first($array, $callback, $default);</code></pre>\n  <p><a name="method-array-flatten"></a></p>\n\n          <p><a name="-code-arr-flatten-code-"></a></p>\n          <h4>\n            <a href="#-code-arr-flatten-code-">\n              <code>Arr::flatten()</code>\n            </a>\n          </h4><p>The <code>Arr::flatten</code> method flattens a multi-dimensional array into a single level array:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlxuICRhcnJheSA9IFsnbmFtZScgPT4gJ0pvZScsICdsYW5ndWFnZXMnID0+IFsnUEhQJywgJ1J1YnknXV07XG5cbiAkZmxhdHRlbmVkID0gQXJyOjpmbGF0dGVuKCRhcnJheSk7XG4iLCJoYXNoIjoiaGVscGVycy1hcnJmbGF0dGVuIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> Illuminate\\Support\\Arr;\n\n<span class="hljs-variable">$array</span> = [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Joe\'</span>, <span class="hljs-string">\'languages\'</span> =&gt; [<span class="hljs-string">\'PHP\'</span>, <span class="hljs-string">\'Ruby\'</span>]];\n\n<span class="hljs-variable">$flattened</span> = Arr::flatten(<span class="hljs-variable">$array</span>);\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'Joe\'</span>, <span class="hljs-string">\'PHP\'</span>, <span class="hljs-string">\'Ruby\'</span>]</code></pre>\n  <p><a name="method-array-forget"></a></p>\n\n          <p><a name="-code-arr-forget-code-"></a></p>\n          <h4>\n            <a href="#-code-arr-forget-code-">\n              <code>Arr::forget()</code>\n            </a>\n          </h4><p>The <code>Arr::forget</code> method removes a given key / value pair from a deeply nested array using &quot;dot&quot; notation:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydEFycjtcblxuICRhcnJheSA9IFsncHJvZHVjdHMnID0+IFsnZGVzaycgPT4gWydwcmljZScgPT4gMTAwXV1dO1xuXG4gQXJyOjpmb3JnZXQoJGFycmF5LCAncHJvZHVjdHMuZGVzaycpO1xuIiwiaGFzaCI6ImhlbHBlcnMtYXJyZm9yZ2V0In0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Arr</span>;\n\n$array = [<span class="hljs-string">\'products\'</span> =&gt; [<span class="hljs-string">\'desk\'</span> =&gt; [<span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">100</span>]]];\n\nArr::forget($array, <span class="hljs-string">\'products.desk\'</span>);\n\n<span class="hljs-comment">// [\'products\' =&gt; []]</span></code></pre>\n  <p><a name="method-array-get"></a></p>\n\n          <p><a name="-code-arr-get-code-"></a></p>\n          <h4>\n            <a href="#-code-arr-get-code-">\n              <code>Arr::get()</code>\n            </a>\n          </h4><p>The <code>Arr::get</code> method retrieves a value from a deeply nested array using &quot;dot&quot; notation:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydEFycjtcblxuICRhcnJheSA9IFsncHJvZHVjdHMnID0+IFsnZGVzaycgPT4gWydwcmljZScgPT4gMTAwXV1dO1xuXG4gJHByaWNlID0gQXJyOjpnZXQoJGFycmF5LCAncHJvZHVjdHMuZGVzay5wcmljZScpO1xuIiwiaGFzaCI6ImhlbHBlcnMtYXJyZ2V0In0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Arr</span>;\n\n$array = [<span class="hljs-string">\'products\'</span> =&gt; [<span class="hljs-string">\'desk\'</span> =&gt; [<span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">100</span>]]];\n\n$price = Arr::get($array, <span class="hljs-string">\'products.desk.price\'</span>);\n\n<span class="hljs-comment">// 100</span></code></pre>\n  <p>The <code>Arr::get</code> method also accepts a default value, which will be returned if the specific key is not found:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Arr</span>;\n\n$discount = Arr::get($array, <span class="hljs-string">\'products.desk.discount\'</span>, <span class="hljs-number">0</span>);\n\n<span class="hljs-comment">// 0</span></code></pre>\n  <p><a name="method-array-has"></a></p>\n\n          <p><a name="-code-arr-has-code-"></a></p>\n          <h4>\n            <a href="#-code-arr-has-code-">\n              <code>Arr::has()</code>\n            </a>\n          </h4><p>The <code>Arr::has</code> method checks whether a given item or items exists in an array using &quot;dot&quot; notation:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydEFycjtcblxuICRhcnJheSA9IFsncHJvZHVjdCcgPT4gWyduYW1lJyA9PiAnRGVzaycsICdwcmljZScgPT4gMTAwXV07XG5cbiAkY29udGFpbnMgPSBBcnI6OmhhcygkYXJyYXksICdwcm9kdWN0Lm5hbWUnKTtcbiIsImhhc2giOiJoZWxwZXJzLWFycmhhcyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Arr</span>;\n\n$array = [<span class="hljs-string">\'product\'</span> =&gt; [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Desk\'</span>, <span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">100</span>]];\n\n$contains = Arr::has($array, <span class="hljs-string">\'product.name\'</span>);\n\n<span class="hljs-comment">// true</span>\n\n$contains = Arr::has($array, [<span class="hljs-string">\'product.price\'</span>, <span class="hljs-string">\'product.discount\'</span>]);\n\n<span class="hljs-comment">// false</span></code></pre>\n  <p><a name="method-array-isassoc"></a></p>\n\n          <p><a name="-code-arr-isassoc-code-"></a></p>\n          <h4>\n            <a href="#-code-arr-isassoc-code-">\n              <code>Arr::isAssoc()</code>\n            </a>\n          </h4><p>The <code>Arr::isAssoc</code> returns <code>true</code> if the given array is an associative array. An array is considered &quot;associative&quot; if it doesn&#39;t have sequential numerical keys beginning with zero:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydEFycjtcblxuICRpc0Fzc29jID0gQXJyOjppc0Fzc29jKFsncHJvZHVjdCcgPT4gWyduYW1lJyA9PiAnRGVzaycsICdwcmljZScgPT4gMTAwXV0pO1xuIiwiaGFzaCI6ImhlbHBlcnMtYXJyaXNhc3NvYyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Arr</span>;\n\n$isAssoc = Arr::isAssoc([<span class="hljs-string">\'product\'</span> =&gt; [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Desk\'</span>, <span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">100</span>]]);\n\n<span class="hljs-comment">// true</span>\n\n$isAssoc = Arr::isAssoc([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);\n\n<span class="hljs-comment">// false</span></code></pre>\n  <p><a name="method-array-last"></a></p>\n\n          <p><a name="-code-arr-last-code-"></a></p>\n          <h4>\n            <a href="#-code-arr-last-code-">\n              <code>Arr::last()</code>\n            </a>\n          </h4><p>The <code>Arr::last</code> method returns the last element of an array passing a given truth test:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydEFycjtcblxuICRhcnJheSA9IFsxMDAsIDIwMCwgMzAwLCAxMTBdO1xuXG4gJGxhc3QgPSBBcnI6Omxhc3QoJGFycmF5LCBmdW5jdGlvbiAoJHZhbHVlLCAka2V5KSB7XG4gIHJldHVybiAkdmFsdWUgPj0gMTUwO1xuIH0pO1xuIiwiaGFzaCI6ImhlbHBlcnMtYXJybGFzdCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Arr</span>;\n\n$array = [<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">110</span>];\n\n$last = Arr::last($array, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($value, $key)</span> </span>{\n    <span class="hljs-keyword">return</span> $value &gt;= <span class="hljs-number">150</span>;\n});\n\n<span class="hljs-comment">// 300</span></code></pre>\n  <p>A default value may be passed as the third argument to the method. This value will be returned if no value passes the truth test:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Arr</span>;\n\n$last = Arr::last($array, $callback, $default);</code></pre>\n  <p><a name="method-array-only"></a></p>\n\n          <p><a name="-code-arr-only-code-"></a></p>\n          <h4>\n            <a href="#-code-arr-only-code-">\n              <code>Arr::only()</code>\n            </a>\n          </h4><p>The <code>Arr::only</code> method returns only the specified key / value pairs from the given array:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydEFycjtcblxuICRhcnJheSA9IFsnbmFtZScgPT4gJ0Rlc2snLCAncHJpY2UnID0+IDEwMCwgJ29yZGVycycgPT4gMTBdO1xuXG4gJHNsaWNlID0gQXJyOjpvbmx5KCRhcnJheSwgWyduYW1lJywgJ3ByaWNlJ10pO1xuIiwiaGFzaCI6ImhlbHBlcnMtYXJyb25seSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Arr</span>;\n\n$array = [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Desk\'</span>, <span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">100</span>, <span class="hljs-string">\'orders\'</span> =&gt; <span class="hljs-number">10</span>];\n\n$slice = Arr::only($array, [<span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'price\'</span>]);\n\n<span class="hljs-comment">// [\'name\' =&gt; \'Desk\', \'price\' =&gt; 100]</span></code></pre>\n  <p><a name="method-array-pluck"></a></p>\n\n          <p><a name="-code-arr-pluck-code-"></a></p>\n          <h4>\n            <a href="#-code-arr-pluck-code-">\n              <code>Arr::pluck()</code>\n            </a>\n          </h4><p>The <code>Arr::pluck</code> method retrieves all of the values for a given key from an array:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydEFycjtcblxuICRhcnJheSA9IFtcbiAgWydkZXZlbG9wZXInID0+IFsnaWQnID0+IDEsICduYW1lJyA9PiAnVGF5bG9yJ11dLFxuICBbJ2RldmVsb3BlcicgPT4gWydpZCcgPT4gMiwgJ25hbWUnID0+ICdBYmlnYWlsJ11dLFxuIF07XG5cbiAkbmFtZXMgPSBBcnI6OnBsdWNrKCRhcnJheSwgJ2RldmVsb3Blci5uYW1lJyk7XG4iLCJoYXNoIjoiaGVscGVycy1hcnJwbHVjayJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Arr</span>;\n\n$array = [\n    [<span class="hljs-string">\'developer\'</span> =&gt; [<span class="hljs-string">\'id\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Taylor\'</span>]],\n    [<span class="hljs-string">\'developer\'</span> =&gt; [<span class="hljs-string">\'id\'</span> =&gt; <span class="hljs-number">2</span>, <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Abigail\'</span>]],\n];\n\n$names = Arr::pluck($array, <span class="hljs-string">\'developer.name\'</span>);\n\n<span class="hljs-comment">// [\'Taylor\', \'Abigail\']</span></code></pre>\n  <p>You may also specify how you wish the resulting list to be keyed:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> Illuminate\\Support\\Arr;\n\n<span class="hljs-variable">$names</span> = Arr::pluck(<span class="hljs-variable">$array</span>, <span class="hljs-string">\'developer.name\'</span>, <span class="hljs-string">\'developer.id\'</span>);\n\n<span class="hljs-regexp">//</span> [<span class="hljs-number">1</span> =&gt; <span class="hljs-string">\'Taylor\'</span>, <span class="hljs-number">2</span> =&gt; <span class="hljs-string">\'Abigail\'</span>]</code></pre>\n  <p><a name="method-array-prepend"></a></p>\n\n          <p><a name="-code-arr-prepend-code-"></a></p>\n          <h4>\n            <a href="#-code-arr-prepend-code-">\n              <code>Arr::prepend()</code>\n            </a>\n          </h4><p>The <code>Arr::prepend</code> method will push an item onto the beginning of an array:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydEFycjtcblxuICRhcnJheSA9IFsnb25lJywgJ3R3bycsICd0aHJlZScsICdmb3VyJ107XG5cbiAkYXJyYXkgPSBBcnI6OnByZXBlbmQoJGFycmF5LCAnemVybycpO1xuIiwiaGFzaCI6ImhlbHBlcnMtYXJycHJlcGVuZCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> Illuminate\\Support\\Arr;\n\n<span class="hljs-variable">$array</span> = [<span class="hljs-string">\'one\'</span>, <span class="hljs-string">\'two\'</span>, <span class="hljs-string">\'three\'</span>, <span class="hljs-string">\'four\'</span>];\n\n<span class="hljs-variable">$array</span> = Arr::prepend(<span class="hljs-variable">$array</span>, <span class="hljs-string">\'zero\'</span>);\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'zero\'</span>, <span class="hljs-string">\'one\'</span>, <span class="hljs-string">\'two\'</span>, <span class="hljs-string">\'three\'</span>, <span class="hljs-string">\'four\'</span>]</code></pre>\n  <p>If needed, you may specify the key that should be used for the value:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> Illuminate\\Support\\Arr;\n\n<span class="hljs-variable">$array</span> = [<span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">100</span>];\n\n<span class="hljs-variable">$array</span> = Arr::prepend(<span class="hljs-variable">$array</span>, <span class="hljs-string">\'Desk\'</span>, <span class="hljs-string">\'name\'</span>);\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Desk\'</span>, <span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">100</span>]</code></pre>\n  <p><a name="method-array-pull"></a></p>\n\n          <p><a name="-code-arr-pull-code-"></a></p>\n          <h4>\n            <a href="#-code-arr-pull-code-">\n              <code>Arr::pull()</code>\n            </a>\n          </h4><p>The <code>Arr::pull</code> method returns and removes a key / value pair from an array:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydEFycjtcblxuICRhcnJheSA9IFsnbmFtZScgPT4gJ0Rlc2snLCAncHJpY2UnID0+IDEwMF07XG5cbiAkbmFtZSA9IEFycjo6cHVsbCgkYXJyYXksICduYW1lJyk7XG4iLCJoYXNoIjoiaGVscGVycy1hcnJwdWxsIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Arr</span>;\n\n$array = [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Desk\'</span>, <span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">100</span>];\n\n$name = Arr::pull($array, <span class="hljs-string">\'name\'</span>);\n\n<span class="hljs-comment">// $name: Desk</span>\n\n<span class="hljs-comment">// $array: [\'price\' =&gt; 100]</span></code></pre>\n  <p>A default value may be passed as the third argument to the method. This value will be returned if the key doesn&#39;t exist:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Arr</span>;\n\n$value = Arr::pull($array, $key, $default);</code></pre>\n  <p><a name="method-array-random"></a></p>\n\n          <p><a name="-code-arr-random-code-"></a></p>\n          <h4>\n            <a href="#-code-arr-random-code-">\n              <code>Arr::random()</code>\n            </a>\n          </h4><p>The <code>Arr::random</code> method returns a random value from an array:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydEFycjtcblxuICRhcnJheSA9IFsxLCAyLCAzLCA0LCA1XTtcblxuICRyYW5kb20gPSBBcnI6OnJhbmRvbSgkYXJyYXkpO1xuIiwiaGFzaCI6ImhlbHBlcnMtYXJycmFuZG9tIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">use Illuminate\\Support\\Arr;\n\n$<span class="hljs-built_in">array</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];\n\n$random = Arr::random($<span class="hljs-built_in">array</span>);\n\n<span class="hljs-comment">// 4 - (retrieved randomly)</span></code></pre>\n  <p>You may also specify the number of items to return as an optional second argument. Note that providing this argument will return an array, even if only one item is desired:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Arr</span>;\n\n$items = Arr::random($array, <span class="hljs-number">2</span>);\n\n<span class="hljs-comment">// [2, 5] - (retrieved randomly)</span></code></pre>\n  <p><a name="method-array-set"></a></p>\n\n          <p><a name="-code-arr-set-code-"></a></p>\n          <h4>\n            <a href="#-code-arr-set-code-">\n              <code>Arr::set()</code>\n            </a>\n          </h4><p>The <code>Arr::set</code> method sets a value within a deeply nested array using &quot;dot&quot; notation:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydEFycjtcblxuICRhcnJheSA9IFsncHJvZHVjdHMnID0+IFsnZGVzaycgPT4gWydwcmljZScgPT4gMTAwXV1dO1xuXG4gQXJyOjpzZXQoJGFycmF5LCAncHJvZHVjdHMuZGVzay5wcmljZScsIDIwMCk7XG4iLCJoYXNoIjoiaGVscGVycy1hcnJzZXQifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Arr</span>;\n\n$array = [<span class="hljs-string">\'products\'</span> =&gt; [<span class="hljs-string">\'desk\'</span> =&gt; [<span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">100</span>]]];\n\nArr::set($array, <span class="hljs-string">\'products.desk.price\'</span>, <span class="hljs-number">200</span>);\n\n<span class="hljs-comment">// [\'products\' =&gt; [\'desk\' =&gt; [\'price\' =&gt; 200]]]</span></code></pre>\n  <p><a name="method-array-sort"></a></p>\n\n          <p><a name="-code-arr-sort-code-"></a></p>\n          <h4>\n            <a href="#-code-arr-sort-code-">\n              <code>Arr::sort()</code>\n            </a>\n          </h4><p>The <code>Arr::sort</code> method sorts an array by its values:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydEFycjtcblxuICRhcnJheSA9IFsnRGVzaycsICdUYWJsZScsICdDaGFpciddO1xuXG4gJHNvcnRlZCA9IEFycjo6c29ydCgkYXJyYXkpO1xuIiwiaGFzaCI6ImhlbHBlcnMtYXJyc29ydCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> Illuminate\\Support\\Arr;\n\n<span class="hljs-variable">$array</span> = [<span class="hljs-string">\'Desk\'</span>, <span class="hljs-string">\'Table\'</span>, <span class="hljs-string">\'Chair\'</span>];\n\n<span class="hljs-variable">$sorted</span> = Arr::sort(<span class="hljs-variable">$array</span>);\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'Chair\'</span>, <span class="hljs-string">\'Desk\'</span>, <span class="hljs-string">\'Table\'</span>]</code></pre>\n  <p>You may also sort the array by the results of the given Closure:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">use <span class="hljs-type">Illuminate</span>\\<span class="hljs-type">Support</span>\\<span class="hljs-type">Arr</span>;\n\n$<span class="hljs-built_in">array</span> = [\n    [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Desk\'</span>],\n    [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Table\'</span>],\n    [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Chair\'</span>],\n];\n\n$sorted = array_values(<span class="hljs-type">Arr</span>::sort($<span class="hljs-built_in">array</span>, <span class="hljs-keyword">function</span> ($<span class="hljs-keyword">value</span>) {\n    return $<span class="hljs-keyword">value</span>[<span class="hljs-symbol">\'name\'</span>];\n}));\n\n/*\n    [\n        [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Chair\'</span>],\n        [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Desk\'</span>],\n        [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Table\'</span>],\n    ]\n*/</code></pre>\n  <p><a name="method-array-sort-recursive"></a></p>\n\n          <p><a name="-code-arr-sortrecursive-code-"></a></p>\n          <h4>\n            <a href="#-code-arr-sortrecursive-code-">\n              <code>Arr::sortRecursive()</code>\n            </a>\n          </h4><p>The <code>Arr::sortRecursive</code> method recursively sorts an array using the <code>sort</code> function for numeric sub=arrays and <code>ksort</code> for associative sub-arrays:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydEFycjtcblxuICRhcnJheSA9IFtcbiAgWydSb21hbicsICdUYXlsb3InLCAnTGknXSxcbiAgWydQSFAnLCAnUnVieScsICdKYXZhU2NyaXB0J10sXG4gIFsnb25lJyA9PiAxLCAndHdvJyA9PiAyLCAndGhyZWUnID0+IDNdLFxuIF07XG5cbiAkc29ydGVkID0gQXJyOjpzb3J0UmVjdXJzaXZlKCRhcnJheSk7XG4iLCJoYXNoIjoiaGVscGVycy1hcnJzb3J0cmVjdXJzaXZlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">use <span class="hljs-type">Illuminate</span>\\<span class="hljs-type">Support</span>\\<span class="hljs-type">Arr</span>;\n\n$<span class="hljs-built_in">array</span> = [\n    [<span class="hljs-symbol">\'Roman\'</span>, <span class="hljs-symbol">\'Taylor\'</span>, <span class="hljs-symbol">\'Li\'</span>],\n    [<span class="hljs-symbol">\'PHP\'</span>, <span class="hljs-symbol">\'Ruby\'</span>, <span class="hljs-symbol">\'JavaScript\'</span>],\n    [<span class="hljs-symbol">\'one\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-symbol">\'two\'</span> =&gt; <span class="hljs-number">2</span>, <span class="hljs-symbol">\'three\'</span> =&gt; <span class="hljs-number">3</span>],\n];\n\n$sorted = <span class="hljs-type">Arr</span>::sortRecursive($<span class="hljs-built_in">array</span>);\n\n/*\n    [\n        [<span class="hljs-symbol">\'JavaScript\'</span>, <span class="hljs-symbol">\'PHP\'</span>, <span class="hljs-symbol">\'Ruby\'</span>],\n        [<span class="hljs-symbol">\'one\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-symbol">\'three\'</span> =&gt; <span class="hljs-number">3</span>, <span class="hljs-symbol">\'two\'</span> =&gt; <span class="hljs-number">2</span>],\n        [<span class="hljs-symbol">\'Li\'</span>, <span class="hljs-symbol">\'Roman\'</span>, <span class="hljs-symbol">\'Taylor\'</span>],\n    ]\n*/</code></pre>\n  <p><a name="method-array-where"></a></p>\n\n          <p><a name="-code-arr-where-code-"></a></p>\n          <h4>\n            <a href="#-code-arr-where-code-">\n              <code>Arr::where()</code>\n            </a>\n          </h4><p>The <code>Arr::where</code> method filters an array using the given Closure:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydEFycjtcblxuICRhcnJheSA9IFsxMDAsICcyMDAnLCAzMDAsICc0MDAnLCA1MDBdO1xuXG4gJGZpbHRlcmVkID0gQXJyOjp3aGVyZSgkYXJyYXksIGZ1bmN0aW9uICgkdmFsdWUsICRrZXkpIHtcbiAgcmV0dXJuIGlzX3N0cmluZygkdmFsdWUpO1xuIH0pO1xuIiwiaGFzaCI6ImhlbHBlcnMtYXJyd2hlcmUifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Arr</span>;\n\n$array = [<span class="hljs-number">100</span>, <span class="hljs-string">\'200\'</span>, <span class="hljs-number">300</span>, <span class="hljs-string">\'400\'</span>, <span class="hljs-number">500</span>];\n\n$filtered = Arr::where($array, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($value, $key)</span> </span>{\n    <span class="hljs-keyword">return</span> is_string($value);\n});\n\n<span class="hljs-comment">// [1 =&gt; \'200\', 3 =&gt; \'400\']</span></code></pre>\n  <p><a name="method-array-wrap"></a></p>\n\n          <p><a name="-code-arr-wrap-code-"></a></p>\n          <h4>\n            <a href="#-code-arr-wrap-code-">\n              <code>Arr::wrap()</code>\n            </a>\n          </h4><p>The <code>Arr::wrap</code> method wraps the given value in an array. If the given value is already an array it will not be changed:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydEFycjtcblxuICRzdHJpbmcgPSAnTGFyYXZlbCc7XG5cbiAkYXJyYXkgPSBBcnI6OndyYXAoJHN0cmluZyk7XG4iLCJoYXNoIjoiaGVscGVycy1hcnJ3cmFwIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> Illuminate\\Support\\Arr;\n\n<span class="hljs-variable">$string</span> = <span class="hljs-string">\'Laravel\'</span>;\n\n<span class="hljs-variable">$array</span> = Arr::wrap(<span class="hljs-variable">$string</span>);\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'Laravel\'</span>]</code></pre>\n  <p>If the given value is null, an empty array will be returned:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Arr</span>;\n\n$nothing = <span class="hljs-keyword">null</span>;\n\n$array = Arr::wrap($nothing);\n\n<span class="hljs-comment">// []</span></code></pre>\n  <p><a name="method-data-fill"></a></p>\n\n          <p><a name="-code-data_fill-code-"></a></p>\n          <h4>\n            <a href="#-code-data_fill-code-">\n              <code>data_fill()</code>\n            </a>\n          </h4><p>The <code>data_fill</code> function sets a missing value within a nested array or object using &quot;dot&quot; notation:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gWydwcm9kdWN0cycgPT4gWydkZXNrJyA9PiBbJ3ByaWNlJyA9PiAxMDBdXV07XG5cbiBkYXRhX2ZpbGwoJGRhdGEsICdwcm9kdWN0cy5kZXNrLnByaWNlJywgMjAwKTtcbiIsImhhc2giOiJoZWxwZXJzLWRhdGFfZmlsbCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$data = [<span class="hljs-string">\'products\'</span> =&gt; [<span class="hljs-string">\'desk\'</span> =&gt; [<span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">100</span>]]];\n\ndata_fill($data, <span class="hljs-string">\'products.desk.price\'</span>, <span class="hljs-number">200</span>);\n\n// [<span class="hljs-string">\'products\'</span> =&gt; [<span class="hljs-string">\'desk\'</span> =&gt; [<span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">100</span>]]]\n\ndata_fill($data, <span class="hljs-string">\'products.desk.discount\'</span>, <span class="hljs-number">10</span>);\n\n// [<span class="hljs-string">\'products\'</span> =&gt; [<span class="hljs-string">\'desk\'</span> =&gt; [<span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">100</span>, <span class="hljs-string">\'discount\'</span> =&gt; <span class="hljs-number">10</span>]]]</code></pre>\n  <p>This function also accepts asterisks as wildcards and will fill the target accordingly:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$data</span> = [\n    <span class="hljs-string">\'products\'</span> =&gt; [\n        [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Desk 1\'</span>, <span class="hljs-string">\'price\'</span> =&gt; 100],\n        [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Desk 2\'</span>],\n    ],\n];\n\ndata_fill(<span class="hljs-variable">$data</span>, <span class="hljs-string">\'products.*.price\'</span>, 200);\n\n/*\n    [\n        <span class="hljs-string">\'products\'</span> =&gt; [\n            [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Desk 1\'</span>, <span class="hljs-string">\'price\'</span> =&gt; 100],\n            [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Desk 2\'</span>, <span class="hljs-string">\'price\'</span> =&gt; 200],\n        ],\n    ]\n*/</code></pre>\n  <p><a name="method-data-get"></a></p>\n\n          <p><a name="-code-data_get-code-"></a></p>\n          <h4>\n            <a href="#-code-data_get-code-">\n              <code>data_get()</code>\n            </a>\n          </h4><p>The <code>data_get</code> function retrieves a value from a nested array or object using &quot;dot&quot; notation:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gWydwcm9kdWN0cycgPT4gWydkZXNrJyA9PiBbJ3ByaWNlJyA9PiAxMDBdXV07XG5cbiAkcHJpY2UgPSBkYXRhX2dldCgkZGF0YSwgJ3Byb2R1Y3RzLmRlc2sucHJpY2UnKTtcbiIsImhhc2giOiJoZWxwZXJzLWRhdGFfZ2V0In0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$data = [<span class="hljs-string">\'products\'</span> =&gt; [<span class="hljs-string">\'desk\'</span> =&gt; [<span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">100</span>]]];\n\n$price = data_get($data, <span class="hljs-string">\'products.desk.price\'</span>);\n\n<span class="hljs-comment">// 100</span></code></pre>\n  <p>The <code>data_get</code> function also accepts a default value, which will be returned if the specified key is not found:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$discount = data<span class="hljs-constructor">_get($<span class="hljs-params">data</span>, \'<span class="hljs-params">products</span>.<span class="hljs-params">desk</span>.<span class="hljs-params">discount</span>\', 0)</span>;\n\n<span class="hljs-comment">// 0</span></code></pre>\n  <p>The function also accepts wildcards using asterisks, which may target any key of the array or object:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$data = [\n    <span class="hljs-string">\'product-one\'</span> =&gt; [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Desk 1\'</span>, <span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">100</span>],\n    <span class="hljs-string">\'product-two\'</span> =&gt; [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Desk 2\'</span>, <span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">150</span>],\n];\n\ndata_get($data, <span class="hljs-string">\'*.name\'</span>);\n\n<span class="hljs-comment">// [\'Desk 1\', \'Desk 2\'];</span></code></pre>\n  <p><a name="method-data-set"></a></p>\n\n          <p><a name="-code-data_set-code-"></a></p>\n          <h4>\n            <a href="#-code-data_set-code-">\n              <code>data_set()</code>\n            </a>\n          </h4><p>The <code>data_set</code> function sets a value within a nested array or object using &quot;dot&quot; notation:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gWydwcm9kdWN0cycgPT4gWydkZXNrJyA9PiBbJ3ByaWNlJyA9PiAxMDBdXV07XG5cbiBkYXRhX3NldCgkZGF0YSwgJ3Byb2R1Y3RzLmRlc2sucHJpY2UnLCAyMDApO1xuIiwiaGFzaCI6ImhlbHBlcnMtZGF0YV9zZXQifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$data = [<span class="hljs-string">\'products\'</span> =&gt; [<span class="hljs-string">\'desk\'</span> =&gt; [<span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">100</span>]]];\n\ndata_set($data, <span class="hljs-string">\'products.desk.price\'</span>, <span class="hljs-number">200</span>);\n\n// [<span class="hljs-string">\'products\'</span> =&gt; [<span class="hljs-string">\'desk\'</span> =&gt; [<span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">200</span>]]]</code></pre>\n  <p>This function also accepts wildcards and will set values on the target accordingly:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$data = [\n    <span class="hljs-symbol">\'products\'</span> =&gt; [\n        [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Desk</span> <span class="hljs-number">1</span><span class="hljs-string">\', \'</span>price\' =&gt; <span class="hljs-number">100</span>],\n        [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Desk</span> <span class="hljs-number">2</span><span class="hljs-string">\', \'</span>price\' =&gt; <span class="hljs-number">150</span>],\n    ],\n];\n\ndata_set($data, <span class="hljs-symbol">\'products</span>.*.price\', <span class="hljs-number">200</span>);\n\n/*\n    [\n        <span class="hljs-symbol">\'products\'</span> =&gt; [\n            [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Desk</span> <span class="hljs-number">1</span><span class="hljs-string">\', \'</span>price\' =&gt; <span class="hljs-number">200</span>],\n            [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Desk</span> <span class="hljs-number">2</span><span class="hljs-string">\', \'</span>price\' =&gt; <span class="hljs-number">200</span>],\n        ],\n    ]\n*/</code></pre>\n  <p>By default, any existing values are overwritten. If you wish to only set a value if it doesn&#39;t exist, you may pass <code>false</code> as the fourth argument:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$data = [<span class="hljs-string">\'products\'</span> =&gt; [<span class="hljs-string">\'desk\'</span> =&gt; [<span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">100</span>]]];\n\ndata_set($data, <span class="hljs-string">\'products.desk.price\'</span>, <span class="hljs-number">200</span>, false);\n\n// [<span class="hljs-string">\'products\'</span> =&gt; [<span class="hljs-string">\'desk\'</span> =&gt; [<span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">100</span>]]]</code></pre>\n  <p><a name="method-head"></a></p>\n\n          <p><a name="-code-head-code-"></a></p>\n          <h4>\n            <a href="#-code-head-code-">\n              <code>head()</code>\n            </a>\n          </h4><p>The <code>head</code> function returns the first element in the given array:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRhcnJheSA9IFsxMDAsIDIwMCwgMzAwXTtcblxuICRmaXJzdCA9IGhlYWQoJGFycmF5KTtcbiIsImhhc2giOiJoZWxwZXJzLWhlYWQifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-built_in">array</span> = [<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>];\n\n$first = head($<span class="hljs-built_in">array</span>);\n\n<span class="hljs-comment">// 100</span></code></pre>\n  <p><a name="method-last"></a></p>\n\n          <p><a name="-code-last-code-"></a></p>\n          <h4>\n            <a href="#-code-last-code-">\n              <code>last()</code>\n            </a>\n          </h4><p>The <code>last</code> function returns the last element in the given array:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRhcnJheSA9IFsxMDAsIDIwMCwgMzAwXTtcblxuICRsYXN0ID0gbGFzdCgkYXJyYXkpO1xuIiwiaGFzaCI6ImhlbHBlcnMtbGFzdCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-built_in">array</span> = [<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>];\n\n$last = last($<span class="hljs-built_in">array</span>);\n\n<span class="hljs-comment">// 300</span></code></pre>\n  <p><a name="paths"></a></p>\n\n          <p><a name="paths"></a></p>\n          <h2>\n            <a href="#paths">\n              Paths\n            </a>\n          </h2><p><a name="method-app-path"></a></p>\n\n          <p><a name="-code-app_path-code-"></a></p>\n          <h4>\n            <a href="#-code-app_path-code-">\n              <code>app_path()</code>\n            </a>\n          </h4><p>The <code>app_path</code> function returns the fully qualified path to the <code>app</code> directory. You may also use the <code>app_path</code> function to generate a fully qualified path to a file relative to the application directory:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRwYXRoID0gYXBwX3BhdGgoKTtcblxuICRwYXRoID0gYXBwX3BhdGgoJ0h0dHAvQ29udHJvbGxlcnMvQ29udHJvbGxlci5waHAnKTtcbiIsImhhc2giOiJoZWxwZXJzLWFwcF9wYXRoIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-meta"><span class="hljs-meta-keyword">$path</span> = app_path();</span>\n\n<span class="hljs-meta"><span class="hljs-meta-keyword">$path</span> = app_path(\'Http/Controllers/Controller.php\');</span></code></pre>\n  <p><a name="method-base-path"></a></p>\n\n          <p><a name="-code-base_path-code-"></a></p>\n          <h4>\n            <a href="#-code-base_path-code-">\n              <code>base_path()</code>\n            </a>\n          </h4><p>The <code>base_path</code> function returns the fully qualified path to the project root. You may also use the <code>base_path</code> function to generate a fully qualified path to a given file relative to the project root directory:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRwYXRoID0gYmFzZV9wYXRoKCk7XG5cbiAkcGF0aCA9IGJhc2VfcGF0aCgndmVuZG9yL2JpbicpO1xuIiwiaGFzaCI6ImhlbHBlcnMtYmFzZV9wYXRoIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-meta"><span class="hljs-meta-keyword">$path</span> = base_path();</span>\n\n<span class="hljs-meta"><span class="hljs-meta-keyword">$path</span> = base_path(\'vendor/bin\');</span></code></pre>\n  <p><a name="method-config-path"></a></p>\n\n          <p><a name="-code-config_path-code-"></a></p>\n          <h4>\n            <a href="#-code-config_path-code-">\n              <code>config_path()</code>\n            </a>\n          </h4><p>The <code>config_path</code> function returns the fully qualified path to the <code>config</code> directory. You may also use the <code>config_path</code> function to generate a fully qualified path to a given file within the application&#39;s configuration directory:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRwYXRoID0gY29uZmlnX3BhdGgoKTtcblxuICRwYXRoID0gY29uZmlnX3BhdGgoJ2FwcC5waHAnKTtcbiIsImhhc2giOiJoZWxwZXJzLWNvbmZpZ19wYXRoIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-meta"><span class="hljs-meta-keyword">$path</span> = config_path();</span>\n\n<span class="hljs-meta"><span class="hljs-meta-keyword">$path</span> = config_path(\'app.php\');</span></code></pre>\n  <p><a name="method-database-path"></a></p>\n\n          <p><a name="-code-database_path-code-"></a></p>\n          <h4>\n            <a href="#-code-database_path-code-">\n              <code>database_path()</code>\n            </a>\n          </h4><p>The <code>database_path</code> function returns the fully qualified path to the <code>database</code> directory. You may also use the <code>database_path</code> function to generate a fully qualified path to a given file within the database directory:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRwYXRoID0gZGF0YWJhc2VfcGF0aCgpO1xuXG4gJHBhdGggPSBkYXRhYmFzZV9wYXRoKCdmYWN0b3JpZXMvVXNlckZhY3RvcnkucGhwJyk7XG4iLCJoYXNoIjoiaGVscGVycy1kYXRhYmFzZV9wYXRoIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-meta"><span class="hljs-meta-keyword">$path</span> = database_path();</span>\n\n<span class="hljs-meta"><span class="hljs-meta-keyword">$path</span> = database_path(\'factories/UserFactory.php\');</span></code></pre>\n  <p><a name="method-mix"></a></p>\n\n          <p><a name="-code-mix-code-"></a></p>\n          <h4>\n            <a href="#-code-mix-code-">\n              <code>mix()</code>\n            </a>\n          </h4><p>The <code>mix</code> function returns the path to a <router-link to="/docs/mix">versioned Mix file</router-link>:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRwYXRoID0gbWl4KCdjc3MvYXBwLmNzcycpO1xuIiwiaGFzaCI6ImhlbHBlcnMtbWl4In0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">$pat</span>h = mix(<span class="hljs-string">\'css/app.css\'</span>);</code></pre>\n  <p><a name="method-public-path"></a></p>\n\n          <p><a name="-code-public_path-code-"></a></p>\n          <h4>\n            <a href="#-code-public_path-code-">\n              <code>public_path()</code>\n            </a>\n          </h4><p>The <code>public_path</code> function returns the fully qualified path to the <code>public</code> directory. You may also use the <code>public_path</code> function to generate a fully qualified path to a given file within the public directory:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRwYXRoID0gcHVibGljX3BhdGgoKTtcblxuICRwYXRoID0gcHVibGljX3BhdGgoJ2Nzcy9hcHAuY3NzJyk7XG4iLCJoYXNoIjoiaGVscGVycy1wdWJsaWNfcGF0aCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$path = public<span class="hljs-constructor">_path()</span>;\n\n$path = public<span class="hljs-constructor">_path(\'<span class="hljs-params">css</span><span class="hljs-operator">/</span><span class="hljs-params">app</span>.<span class="hljs-params">css</span>\')</span>;</code></pre>\n  <p><a name="method-resource-path"></a></p>\n\n          <p><a name="-code-resource_path-code-"></a></p>\n          <h4>\n            <a href="#-code-resource_path-code-">\n              <code>resource_path()</code>\n            </a>\n          </h4><p>The <code>resource_path</code> function returns the fully qualified path to the <code>resources</code> directory. You may also use the <code>resource_path</code> function to generate a fully qualified path to a given file within the resources directory:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRwYXRoID0gcmVzb3VyY2VfcGF0aCgpO1xuXG4gJHBhdGggPSByZXNvdXJjZV9wYXRoKCdzYXNzL2FwcC5zY3NzJyk7XG4iLCJoYXNoIjoiaGVscGVycy1yZXNvdXJjZV9wYXRoIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$path = resource<span class="hljs-constructor">_path()</span>;\n\n$path = resource<span class="hljs-constructor">_path(\'<span class="hljs-params">sass</span><span class="hljs-operator">/</span><span class="hljs-params">app</span>.<span class="hljs-params">scss</span>\')</span>;</code></pre>\n  <p><a name="method-storage-path"></a></p>\n\n          <p><a name="-code-storage_path-code-"></a></p>\n          <h4>\n            <a href="#-code-storage_path-code-">\n              <code>storage_path()</code>\n            </a>\n          </h4><p>The <code>storage_path</code> function returns the fully qualified path to the <code>storage</code> directory. You may also use the <code>storage_path</code> function to generate a fully qualified path to a given file within the storage directory:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRwYXRoID0gc3RvcmFnZV9wYXRoKCk7XG5cbiAkcGF0aCA9IHN0b3JhZ2VfcGF0aCgnYXBwL2ZpbGUudHh0Jyk7XG4iLCJoYXNoIjoiaGVscGVycy1zdG9yYWdlX3BhdGgifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$path = storage<span class="hljs-constructor">_path()</span>;\n\n$path = storage<span class="hljs-constructor">_path(\'<span class="hljs-params">app</span><span class="hljs-operator">/</span><span class="hljs-params">file</span>.<span class="hljs-params">txt</span>\')</span>;</code></pre>\n  <p><a name="strings"></a></p>\n\n          <p><a name="strings"></a></p>\n          <h2>\n            <a href="#strings">\n              Strings\n            </a>\n          </h2><p><a name="method-__"></a></p>\n\n          <p><a name="-code-__-code-"></a></p>\n          <h4>\n            <a href="#-code-__-code-">\n              <code>__()</code>\n            </a>\n          </h4><p>The <code>__</code> function translates the given translation string or translation key using your <router-link to="/docs/localization">localization files</router-link>:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImVjaG8gX18oJ1dlbGNvbWUgdG8gb3VyIGFwcGxpY2F0aW9uJyk7XG5cbiBlY2hvIF9fKCdtZXNzYWdlcy53ZWxjb21lJyk7XG4iLCJoYXNoIjoiaGVscGVycy1fXyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">echo <span class="hljs-constructor">__(\'Welcome <span class="hljs-params">to</span> <span class="hljs-params">our</span> <span class="hljs-params">application</span>\')</span>;\n\necho <span class="hljs-constructor">__(\'<span class="hljs-params">messages</span>.<span class="hljs-params">welcome</span>\')</span>;</code></pre>\n  <p>If the specified translation string or key does not exist, the <code>__</code> function will return the given value. So, using the example above, the <code>__</code> function would return <code>messages.welcome</code> if that translation key does not exist.</p>\n<p><a name="method-class-basename"></a></p>\n\n          <p><a name="-code-class_basename-code-"></a></p>\n          <h4>\n            <a href="#-code-class_basename-code-">\n              <code>class_basename()</code>\n            </a>\n          </h4><p>The <code>class_basename</code> function returns the class name of the given class with the class&#39; namespace removed:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjbGFzcyA9IGNsYXNzX2Jhc2VuYW1lKCdGb29CYXJCYXonKTtcbiIsImhhc2giOiJoZWxwZXJzLWNsYXNzX2Jhc2VuYW1lIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-keyword">class</span> = class_basename(<span class="hljs-string">\'Foo\\Bar\\Baz\'</span>);\n\n<span class="hljs-comment">// Baz</span></code></pre>\n  <p><a name="method-e"></a></p>\n\n          <p><a name="-code-e-code-"></a></p>\n          <h4>\n            <a href="#-code-e-code-">\n              <code>e()</code>\n            </a>\n          </h4><p>The <code>e</code> function runs PHP&#39;s <code>htmlspecialchars</code> function with the <code>double_encode</code> option set to <code>true</code> by default:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImVjaG8gZSgnPGh0bWw+Zm9vPC9odG1sPicpO1xuIiwiaGFzaCI6ImhlbHBlcnMtZSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">echo e(<span class="hljs-string">\'&lt;html&gt;foo&lt;/html&gt;\'</span>);\n\n// <span class="hljs-variable">&amp;lt</span>;html<span class="hljs-variable">&amp;gt</span>;foo<span class="hljs-variable">&amp;lt</span>;/html<span class="hljs-variable">&amp;gt</span>;</code></pre>\n  <p><a name="method-preg-replace-array"></a></p>\n\n          <p><a name="-code-preg_replace_array-code-"></a></p>\n          <h4>\n            <a href="#-code-preg_replace_array-code-">\n              <code>preg_replace_array()</code>\n            </a>\n          </h4><p>The <code>preg_replace_array</code> function replaces a given pattern in the string sequentially using an array:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRzdHJpbmcgPSAnVGhlIGV2ZW50IHdpbGwgdGFrZSBwbGFjZSBiZXR3ZWVuIDpzdGFydCBhbmQgOmVuZCc7XG5cbiAkcmVwbGFjZWQgPSBwcmVnX3JlcGxhY2VfYXJyYXkoJy86W2Etel9dKy8nLCBbJzg6MzAnLCAnOTowMCddLCAkc3RyaW5nKTtcbiIsImhhc2giOiJoZWxwZXJzLXByZWdfcmVwbGFjZV9hcnJheSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$string = <span class="hljs-string">\'The event will take place between :start and :end\'</span>;\n\n$replaced = preg_replace_array(<span class="hljs-string">\'/:[a-z_]+/\'</span>, [<span class="hljs-string">\'8:30\'</span>, <span class="hljs-string">\'9:00\'</span>], $string);\n\n<span class="hljs-comment">// The event will take place between 8:30 and 9:00</span></code></pre>\n  <p><a name="method-str-after"></a></p>\n\n          <p><a name="-code-str-after-code-"></a></p>\n          <h4>\n            <a href="#-code-str-after-code-">\n              <code>Str::after()</code>\n            </a>\n          </h4><p>The <code>Str::after</code> method returns everything after the given value in a string:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydFN0cjtcblxuICRzbGljZSA9IFN0cjo6YWZ0ZXIoJ1RoaXMgaXMgbXkgbmFtZScsICdUaGlzIGlzJyk7XG4iLCJoYXNoIjoiaGVscGVycy1zdHJhZnRlciJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> Illuminate\\Support\\Str;\n\n<span class="hljs-variable">$slice</span> = Str::after(<span class="hljs-string">\'This is my name\'</span>, <span class="hljs-string">\'This is\'</span>);\n\n<span class="hljs-regexp">//</span> <span class="hljs-string">\' my name\'</span></code></pre>\n  <p><a name="method-str-after-last"></a></p>\n\n          <p><a name="-code-str-afterlast-code-"></a></p>\n          <h4>\n            <a href="#-code-str-afterlast-code-">\n              <code>Str::afterLast()</code>\n            </a>\n          </h4><p>The <code>Str::afterLast</code> method returns everything after the last occurrence of the given value in a string:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydFN0cjtcblxuICRzbGljZSA9IFN0cjo6YWZ0ZXJMYXN0KCdBcHBIdHRwQ29udHJvbGxlcnNDb250cm9sbGVyJywgJ1xcJyk7XG4iLCJoYXNoIjoiaGVscGVycy1zdHJhZnRlcmxhc3QifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> Illuminate\\Support\\Str;\n\n<span class="hljs-variable">$slice</span> = Str::afterLast(<span class="hljs-string">\'App\\Http\\Controllers\\Controller\'</span>, <span class="hljs-string">\'\\\\\'</span>);\n\n<span class="hljs-regexp">//</span> <span class="hljs-string">\'Controller\'</span></code></pre>\n  <p><a name="method-str-before"></a></p>\n\n          <p><a name="-code-str-before-code-"></a></p>\n          <h4>\n            <a href="#-code-str-before-code-">\n              <code>Str::before()</code>\n            </a>\n          </h4><p>The <code>Str::before</code> method returns everything before the given value in a string:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydFN0cjtcblxuICRzbGljZSA9IFN0cjo6YmVmb3JlKCdUaGlzIGlzIG15IG5hbWUnLCAnbXkgbmFtZScpO1xuIiwiaGFzaCI6ImhlbHBlcnMtc3RyYmVmb3JlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> Illuminate\\Support\\Str;\n\n<span class="hljs-variable">$slice</span> = Str::before(<span class="hljs-string">\'This is my name\'</span>, <span class="hljs-string">\'my name\'</span>);\n\n<span class="hljs-regexp">//</span> <span class="hljs-string">\'This is \'</span></code></pre>\n  <p><a name="method-str-before-last"></a></p>\n\n          <p><a name="-code-str-beforelast-code-"></a></p>\n          <h4>\n            <a href="#-code-str-beforelast-code-">\n              <code>Str::beforeLast()</code>\n            </a>\n          </h4><p>The <code>Str::beforeLast</code> method returns everything before the last occurrence of the given value in a string:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydFN0cjtcblxuICRzbGljZSA9IFN0cjo6YmVmb3JlTGFzdCgnVGhpcyBpcyBteSBuYW1lJywgJ2lzJyk7XG4iLCJoYXNoIjoiaGVscGVycy1zdHJiZWZvcmVsYXN0In0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> Illuminate\\Support\\Str;\n\n<span class="hljs-variable">$slice</span> = Str::beforeLast(<span class="hljs-string">\'This is my name\'</span>, <span class="hljs-string">\'is\'</span>);\n\n<span class="hljs-regexp">//</span> <span class="hljs-string">\'This \'</span></code></pre>\n  <p><a name="method-camel-case"></a></p>\n\n          <p><a name="-code-str-camel-code-"></a></p>\n          <h4>\n            <a href="#-code-str-camel-code-">\n              <code>Str::camel()</code>\n            </a>\n          </h4><p>The <code>Str::camel</code> method converts the given string to <code>camelCase</code>:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydFN0cjtcblxuICRjb252ZXJ0ZWQgPSBTdHI6OmNhbWVsKCdmb29fYmFyJyk7XG4iLCJoYXNoIjoiaGVscGVycy1zdHJjYW1lbCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Str</span>;\n\n$converted = Str::camel(<span class="hljs-string">\'foo_bar\'</span>);\n\n<span class="hljs-comment">// fooBar</span></code></pre>\n  <p><a name="method-str-contains"></a></p>\n\n          <p><a name="-code-str-contains-code-"></a></p>\n          <h4>\n            <a href="#-code-str-contains-code-">\n              <code>Str::contains()</code>\n            </a>\n          </h4><p>The <code>Str::contains</code> method determines if the given string contains the given value (case sensitive):</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydFN0cjtcblxuICRjb250YWlucyA9IFN0cjo6Y29udGFpbnMoJ1RoaXMgaXMgbXkgbmFtZScsICdteScpO1xuIiwiaGFzaCI6ImhlbHBlcnMtc3RyY29udGFpbnMifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> Illuminate\\Support\\Str;\n\n<span class="hljs-variable">$contains</span> = Str::contains(<span class="hljs-string">\'This is my name\'</span>, <span class="hljs-string">\'my\'</span>);\n\n<span class="hljs-regexp">//</span> <span class="hljs-keyword">true</span></code></pre>\n  <p>You may also pass an array of values to determine if the given string contains any of the values:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> Illuminate\\Support\\Str;\n\n<span class="hljs-variable">$contains</span> = Str::contains(<span class="hljs-string">\'This is my name\'</span>, [<span class="hljs-string">\'my\'</span>, <span class="hljs-string">\'foo\'</span>]);\n\n<span class="hljs-regexp">//</span> <span class="hljs-keyword">true</span></code></pre>\n  <p><a name="method-str-contains-all"></a></p>\n\n          <p><a name="-code-str-containsall-code-"></a></p>\n          <h4>\n            <a href="#-code-str-containsall-code-">\n              <code>Str::containsAll()</code>\n            </a>\n          </h4><p>The <code>Str::containsAll</code> method determines if the given string contains all array values:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydFN0cjtcblxuICRjb250YWluc0FsbCA9IFN0cjo6Y29udGFpbnNBbGwoJ1RoaXMgaXMgbXkgbmFtZScsIFsnbXknLCAnbmFtZSddKTtcbiIsImhhc2giOiJoZWxwZXJzLXN0cmNvbnRhaW5zYWxsIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> Illuminate\\Support\\Str;\n\n<span class="hljs-variable">$containsAll</span> = Str::containsAll(<span class="hljs-string">\'This is my name\'</span>, [<span class="hljs-string">\'my\'</span>, <span class="hljs-string">\'name\'</span>]);\n\n<span class="hljs-regexp">//</span> <span class="hljs-keyword">true</span></code></pre>\n  <p><a name="method-ends-with"></a></p>\n\n          <p><a name="-code-str-endswith-code-"></a></p>\n          <h4>\n            <a href="#-code-str-endswith-code-">\n              <code>Str::endsWith()</code>\n            </a>\n          </h4><p>The <code>Str::endsWith</code> method determines if the given string ends with the given value:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydFN0cjtcblxuICRyZXN1bHQgPSBTdHI6OmVuZHNXaXRoKCdUaGlzIGlzIG15IG5hbWUnLCAnbmFtZScpO1xuIiwiaGFzaCI6ImhlbHBlcnMtc3RyZW5kc3dpdGgifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> Illuminate\\Support\\Str;\n\n<span class="hljs-variable">$result</span> = Str::endsWith(<span class="hljs-string">\'This is my name\'</span>, <span class="hljs-string">\'name\'</span>);\n\n<span class="hljs-regexp">//</span> <span class="hljs-keyword">true</span></code></pre>\n  <p>You may also pass an array of values to determine if the given string ends with any of the given values:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> Illuminate\\Support\\Str;\n\n<span class="hljs-variable">$result</span> = Str::endsWith(<span class="hljs-string">\'This is my name\'</span>, [<span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'foo\'</span>]);\n\n<span class="hljs-regexp">//</span> <span class="hljs-keyword">true</span>\n\n<span class="hljs-variable">$result</span> = Str::endsWith(<span class="hljs-string">\'This is my name\'</span>, [<span class="hljs-string">\'this\'</span>, <span class="hljs-string">\'foo\'</span>]);\n\n<span class="hljs-regexp">//</span> <span class="hljs-keyword">false</span></code></pre>\n  <p><a name="method-str-finish"></a></p>\n\n          <p><a name="-code-str-finish-code-"></a></p>\n          <h4>\n            <a href="#-code-str-finish-code-">\n              <code>Str::finish()</code>\n            </a>\n          </h4><p>The <code>Str::finish</code> method adds a single instance of the given value to a string if it does not already end with the value:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydFN0cjtcblxuICRhZGp1c3RlZCA9IFN0cjo6ZmluaXNoKCd0aGlzL3N0cmluZycsICcvJyk7XG4iLCJoYXNoIjoiaGVscGVycy1zdHJmaW5pc2gifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Str</span>;\n\n$adjusted = Str::finish(<span class="hljs-string">\'this/string\'</span>, <span class="hljs-string">\'/\'</span>);\n\n<span class="hljs-comment">// this/string/</span>\n\n$adjusted = Str::finish(<span class="hljs-string">\'this/string/\'</span>, <span class="hljs-string">\'/\'</span>);\n\n<span class="hljs-comment">// this/string/</span></code></pre>\n  <p><a name="method-str-is"></a></p>\n\n          <p><a name="-code-str-is-code-"></a></p>\n          <h4>\n            <a href="#-code-str-is-code-">\n              <code>Str::is()</code>\n            </a>\n          </h4><p>The <code>Str::is</code> method determines if a given string matches a given pattern. Asterisks may be used to indicate wildcards:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydFN0cjtcblxuICRtYXRjaGVzID0gU3RyOjppcygnZm9vKicsICdmb29iYXInKTtcbiIsImhhc2giOiJoZWxwZXJzLXN0cmlzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> Illuminate\\Support\\Str;\n\n<span class="hljs-variable">$matches</span> = Str::is(<span class="hljs-string">\'foo*\'</span>, <span class="hljs-string">\'foobar\'</span>);\n\n<span class="hljs-regexp">//</span> <span class="hljs-keyword">true</span>\n\n<span class="hljs-variable">$matches</span> = Str::is(<span class="hljs-string">\'baz*\'</span>, <span class="hljs-string">\'foobar\'</span>);\n\n<span class="hljs-regexp">//</span> <span class="hljs-keyword">false</span></code></pre>\n  <p><a name="method-kebab-case"></a></p>\n\n          <p><a name="-code-str-kebab-code-"></a></p>\n          <h4>\n            <a href="#-code-str-kebab-code-">\n              <code>Str::kebab()</code>\n            </a>\n          </h4><p>The <code>Str::kebab</code> method converts the given string to <code>kebab-case</code>:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydFN0cjtcblxuICRjb252ZXJ0ZWQgPSBTdHI6OmtlYmFiKCdmb29CYXInKTtcbiIsImhhc2giOiJoZWxwZXJzLXN0cmtlYmFiIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Str</span>;\n\n$converted = Str::kebab(<span class="hljs-string">\'fooBar\'</span>);\n\n<span class="hljs-comment">// foo-bar</span></code></pre>\n  <p><a name="method-str-limit"></a></p>\n\n          <p><a name="-code-str-limit-code-"></a></p>\n          <h4>\n            <a href="#-code-str-limit-code-">\n              <code>Str::limit()</code>\n            </a>\n          </h4><p>The <code>Str::limit</code> method truncates the given string at the specified length:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydFN0cjtcblxuICR0cnVuY2F0ZWQgPSBTdHI6OmxpbWl0KCdUaGUgcXVpY2sgYnJvd24gZm94IGp1bXBzIG92ZXIgdGhlIGxhenkgZG9nJywgMjApO1xuIiwiaGFzaCI6ImhlbHBlcnMtc3RybGltaXQifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Str</span>;\n\n$truncated = Str::limit(<span class="hljs-string">\'The quick brown fox jumps over the lazy dog\'</span>, <span class="hljs-number">20</span>);\n\n<span class="hljs-comment">// The quick brown fox...</span></code></pre>\n  <p>You may also pass a third argument to change the string that will be appended to the end:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Str</span>;\n\n$truncated = Str::limit(<span class="hljs-string">\'The quick brown fox jumps over the lazy dog\'</span>, <span class="hljs-number">20</span>, <span class="hljs-string">\' (...)\'</span>);\n\n<span class="hljs-comment">// The quick brown fox (...)</span></code></pre>\n  <p><a name="method-str-ordered-uuid"></a></p>\n\n          <p><a name="-code-str-ordereduuid-code-"></a></p>\n          <h4>\n            <a href="#-code-str-ordereduuid-code-">\n              <code>Str::orderedUuid()</code>\n            </a>\n          </h4><p>The <code>Str::orderedUuid</code> method generates a &quot;timestamp first&quot; UUID that may be efficiently stored in an indexed database column:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydFN0cjtcblxuIHJldHVybiAoc3RyaW5nKSBTdHI6Om9yZGVyZWRVdWlkKCk7XG4iLCJoYXNoIjoiaGVscGVycy1zdHJvcmRlcmVkdXVpZCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> Illuminate\\Support\\Str;\n\n<span class="hljs-keyword">return</span> (<span class="hljs-keyword">string</span>) Str::<span class="hljs-built_in">orderedUuid</span>();</code></pre>\n  <p><a name="method-str-plural"></a></p>\n\n          <p><a name="-code-str-plural-code-"></a></p>\n          <h4>\n            <a href="#-code-str-plural-code-">\n              <code>Str::plural()</code>\n            </a>\n          </h4><p>The <code>Str::plural</code> method converts a string to its plural form. This function currently only supports the English language:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydFN0cjtcblxuICRwbHVyYWwgPSBTdHI6OnBsdXJhbCgnY2FyJyk7XG4iLCJoYXNoIjoiaGVscGVycy1zdHJwbHVyYWwifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Str</span>;\n\n$plural = Str::plural(<span class="hljs-string">\'car\'</span>);\n\n<span class="hljs-comment">// cars</span>\n\n$plural = Str::plural(<span class="hljs-string">\'child\'</span>);\n\n<span class="hljs-comment">// children</span></code></pre>\n  <p>You may provide an integer as a second argument to the function to retrieve the singular or plural form of the string:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Str</span>;\n\n$plural = Str::plural(<span class="hljs-string">\'child\'</span>, <span class="hljs-number">2</span>);\n\n<span class="hljs-comment">// children</span>\n\n$plural = Str::plural(<span class="hljs-string">\'child\'</span>, <span class="hljs-number">1</span>);\n\n<span class="hljs-comment">// child</span></code></pre>\n  <p><a name="method-str-random"></a></p>\n\n          <p><a name="-code-str-random-code-"></a></p>\n          <h4>\n            <a href="#-code-str-random-code-">\n              <code>Str::random()</code>\n            </a>\n          </h4><p>The <code>Str::random</code> method generates a random string of the specified length. This function uses PHP&#39;s <code>random_bytes</code> function:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydFN0cjtcblxuICRyYW5kb20gPSBTdHI6OnJhbmRvbSg0MCk7XG4iLCJoYXNoIjoiaGVscGVycy1zdHJyYW5kb20ifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">use Illuminate\\Support\\Str<span class="hljs-comment">;</span>\n\n$<span class="hljs-built_in">random</span> = Str::<span class="hljs-built_in">random</span>(<span class="hljs-number">40</span>)<span class="hljs-comment">;</span></code></pre>\n  <p><a name="method-str-replace-array"></a></p>\n\n          <p><a name="-code-str-replacearray-code-"></a></p>\n          <h4>\n            <a href="#-code-str-replacearray-code-">\n              <code>Str::replaceArray()</code>\n            </a>\n          </h4><p>The <code>Str::replaceArray</code> method replaces a given value in the string sequentially using an array:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydFN0cjtcblxuICRzdHJpbmcgPSAnVGhlIGV2ZW50IHdpbGwgdGFrZSBwbGFjZSBiZXR3ZWVuID8gYW5kID8nO1xuXG4gJHJlcGxhY2VkID0gU3RyOjpyZXBsYWNlQXJyYXkoJz8nLCBbJzg6MzAnLCAnOTowMCddLCAkc3RyaW5nKTtcbiIsImhhc2giOiJoZWxwZXJzLXN0cnJlcGxhY2VhcnJheSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Str</span>;\n\n$string = <span class="hljs-string">\'The event will take place between ? and ?\'</span>;\n\n$replaced = Str::replaceArray(<span class="hljs-string">\'?\'</span>, [<span class="hljs-string">\'8:30\'</span>, <span class="hljs-string">\'9:00\'</span>], $string);\n\n<span class="hljs-comment">// The event will take place between 8:30 and 9:00</span></code></pre>\n  <p><a name="method-str-replace-first"></a></p>\n\n          <p><a name="-code-str-replacefirst-code-"></a></p>\n          <h4>\n            <a href="#-code-str-replacefirst-code-">\n              <code>Str::replaceFirst()</code>\n            </a>\n          </h4><p>The <code>Str::replaceFirst</code> method replaces the first occurrence of a given value in a string:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydFN0cjtcblxuICRyZXBsYWNlZCA9IFN0cjo6cmVwbGFjZUZpcnN0KCd0aGUnLCAnYScsICd0aGUgcXVpY2sgYnJvd24gZm94IGp1bXBzIG92ZXIgdGhlIGxhenkgZG9nJyk7XG4iLCJoYXNoIjoiaGVscGVycy1zdHJyZXBsYWNlZmlyc3QifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">use Illuminate\\Support\\Str;\n\n$replaced = Str::replace<span class="hljs-constructor">First(\'<span class="hljs-params">the</span>\', \'<span class="hljs-params">a</span>\', \'<span class="hljs-params">the</span> <span class="hljs-params">quick</span> <span class="hljs-params">brown</span> <span class="hljs-params">fox</span> <span class="hljs-params">jumps</span> <span class="hljs-params">over</span> <span class="hljs-params">the</span> <span class="hljs-params">lazy</span> <span class="hljs-params">dog</span>\')</span>;\n\n<span class="hljs-comment">// a quick brown fox jumps over the lazy dog</span></code></pre>\n  <p><a name="method-str-replace-last"></a></p>\n\n          <p><a name="-code-str-replacelast-code-"></a></p>\n          <h4>\n            <a href="#-code-str-replacelast-code-">\n              <code>Str::replaceLast()</code>\n            </a>\n          </h4><p>The <code>Str::replaceLast</code> method replaces the last occurrence of a given value in a string:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydFN0cjtcblxuICRyZXBsYWNlZCA9IFN0cjo6cmVwbGFjZUxhc3QoJ3RoZScsICdhJywgJ3RoZSBxdWljayBicm93biBmb3gganVtcHMgb3ZlciB0aGUgbGF6eSBkb2cnKTtcbiIsImhhc2giOiJoZWxwZXJzLXN0cnJlcGxhY2VsYXN0In0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">use Illuminate\\Support\\Str;\n\n$replaced = Str::replace<span class="hljs-constructor">Last(\'<span class="hljs-params">the</span>\', \'<span class="hljs-params">a</span>\', \'<span class="hljs-params">the</span> <span class="hljs-params">quick</span> <span class="hljs-params">brown</span> <span class="hljs-params">fox</span> <span class="hljs-params">jumps</span> <span class="hljs-params">over</span> <span class="hljs-params">the</span> <span class="hljs-params">lazy</span> <span class="hljs-params">dog</span>\')</span>;\n\n<span class="hljs-comment">// the quick brown fox jumps over a lazy dog</span></code></pre>\n  <p><a name="method-str-singular"></a></p>\n\n          <p><a name="-code-str-singular-code-"></a></p>\n          <h4>\n            <a href="#-code-str-singular-code-">\n              <code>Str::singular()</code>\n            </a>\n          </h4><p>The <code>Str::singular</code> method converts a string to its singular form. This function currently only supports the English language:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydFN0cjtcblxuU3RyOjpzaW5ndWxhcignY2FycycpO1xuIiwiaGFzaCI6ImhlbHBlcnMtc3Ryc2luZ3VsYXIifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Str</span>;\n\n$singular = Str::singular(<span class="hljs-string">\'cars\'</span>);\n\n<span class="hljs-comment">// car</span>\n\n$singular = Str::singular(<span class="hljs-string">\'children\'</span>);\n\n<span class="hljs-comment">// child</span></code></pre>\n  <p><a name="method-str-slug"></a></p>\n\n          <p><a name="-code-str-slug-code-"></a></p>\n          <h4>\n            <a href="#-code-str-slug-code-">\n              <code>Str::slug()</code>\n            </a>\n          </h4><p>The <code>Str::slug</code> method generates a URL friendly &quot;slug&quot; from the given string:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydFN0cjtcblxuU3RyOjpzbHVnKCdMYXJhdmVsIDUgRnJhbWV3b3JrJywgJy0nKTtcbiIsImhhc2giOiJoZWxwZXJzLXN0cnNsdWcifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Str</span>;\n\n$slug = Str::slug(<span class="hljs-string">\'Laravel 5 Framework\'</span>, <span class="hljs-string">\'-\'</span>);\n\n<span class="hljs-comment">// laravel-5-framework</span></code></pre>\n  <p><a name="method-snake-case"></a></p>\n\n          <p><a name="-code-str-snake-code-"></a></p>\n          <h4>\n            <a href="#-code-str-snake-code-">\n              <code>Str::snake()</code>\n            </a>\n          </h4><p>The <code>Str::snake</code> method converts the given string to <code>snake_case</code>:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydFN0cjtcblxuU3RyOjpzbmFrZSgnZm9vQmFyJyk7XG4iLCJoYXNoIjoiaGVscGVycy1zdHJzbmFrZSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Str</span>;\n\n$converted = Str::snake(<span class="hljs-string">\'fooBar\'</span>);\n\n<span class="hljs-comment">// foo_bar</span></code></pre>\n  <p><a name="method-str-start"></a></p>\n\n          <p><a name="-code-str-start-code-"></a></p>\n          <h4>\n            <a href="#-code-str-start-code-">\n              <code>Str::start()</code>\n            </a>\n          </h4><p>The <code>Str::start</code> method adds a single instance of the given value to a string if it does not already start with the value:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydFN0cjtcblxuU3RyOjpzdGFydCgndGhpcy9zdHJpbmcnLCAnLycpO1xuIiwiaGFzaCI6ImhlbHBlcnMtc3Ryc3RhcnQifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Str</span>;\n\n$adjusted = Str::start(<span class="hljs-string">\'this/string\'</span>, <span class="hljs-string">\'/\'</span>);\n\n<span class="hljs-comment">// /this/string</span>\n\n$adjusted = Str::start(<span class="hljs-string">\'/this/string\'</span>, <span class="hljs-string">\'/\'</span>);\n\n<span class="hljs-comment">// /this/string</span></code></pre>\n  <p><a name="method-starts-with"></a></p>\n\n          <p><a name="-code-str-startswith-code-"></a></p>\n          <h4>\n            <a href="#-code-str-startswith-code-">\n              <code>Str::startsWith()</code>\n            </a>\n          </h4><p>The <code>Str::startsWith</code> method determines if the given string begins with the given value:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydFN0cjtcblxuU3RyOjpzdGFydHNXaXRoKCdUaGlzIGlzIG15IG5hbWUnLCAnVGhpcycpO1xuIiwiaGFzaCI6ImhlbHBlcnMtc3Ryc3RhcnRzd2l0aCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> Illuminate\\Support\\Str;\n\n<span class="hljs-variable">$result</span> = Str::startsWith(<span class="hljs-string">\'This is my name\'</span>, <span class="hljs-string">\'This\'</span>);\n\n<span class="hljs-regexp">//</span> <span class="hljs-keyword">true</span></code></pre>\n  <p><a name="method-studly-case"></a></p>\n\n          <p><a name="-code-str-studly-code-"></a></p>\n          <h4>\n            <a href="#-code-str-studly-code-">\n              <code>Str::studly()</code>\n            </a>\n          </h4><p>The <code>Str::studly</code> method converts the given string to <code>StudlyCase</code>:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydFN0cjtcblxuU3RyOjpzdHVkbHkoJ2Zvb19iYXInKTtcbiIsImhhc2giOiJoZWxwZXJzLXN0cnN0dWRseSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Str</span>;\n\n$converted = Str::studly(<span class="hljs-string">\'foo_bar\'</span>);\n\n<span class="hljs-comment">// FooBar</span></code></pre>\n  <p><a name="method-title-case"></a></p>\n\n          <p><a name="-code-str-title-code-"></a></p>\n          <h4>\n            <a href="#-code-str-title-code-">\n              <code>Str::title()</code>\n            </a>\n          </h4><p>The <code>Str::title</code> method converts the given string to <code>Title Case</code>:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydFN0cjtcblxuU3RyOjp0aXRsZSgnYSBuaWNlIHRpdGxlIHVzZXMgdGhlIGNvcnJlY3QgY2FzZScpO1xuIiwiaGFzaCI6ImhlbHBlcnMtc3RydGl0bGUifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Str</span>;\n\n$converted = Str::title(<span class="hljs-string">\'a nice title uses the correct case\'</span>);\n\n<span class="hljs-comment">// A Nice Title Uses The Correct Case</span></code></pre>\n  <p><a name="method-str-uuid"></a></p>\n\n          <p><a name="-code-str-uuid-code-"></a></p>\n          <h4>\n            <a href="#-code-str-uuid-code-">\n              <code>Str::uuid()</code>\n            </a>\n          </h4><p>The <code>Str::uuid</code> method generates a UUID (version 4):</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydFN0cjtcblxuKHN0cmluZykgU3RyOjp1dWlkKCk7XG4iLCJoYXNoIjoiaGVscGVycy1zdHJ1dWlkIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> Illuminate\\Support\\Str;\n\n<span class="hljs-keyword">return</span> (<span class="hljs-keyword">string</span>) Str::<span class="hljs-built_in">uuid</span>();</code></pre>\n  <p><a name="method-str-words"></a></p>\n\n          <p><a name="-code-str-words-code-"></a></p>\n          <h4>\n            <a href="#-code-str-words-code-">\n              <code>Str::words()</code>\n            </a>\n          </h4><p>The <code>Str::words</code> method limits the number of words in a string:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlU3VwcG9ydFN0cjtcblxuU3RyOjp3b3JkcygnUGVyZmVjdGx5IGJhbGFuY2VkLCBhcyBhbGwgdGhpbmdzIHNob3VsZCBiZS4nLCAzLCAnID4+PicpO1xuIiwiaGFzaCI6ImhlbHBlcnMtc3Ryd29yZHMifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">use Illuminate\\Support\\Str;\n\n<span class="hljs-keyword">return</span> Str::words(<span class="hljs-string">\'Perfectly balanced, as all things should be.\'</span>, <span class="hljs-number">3</span>, <span class="hljs-string">\' &gt;&gt;&gt;\'</span>);\n\n<span class="hljs-regexp">//</span> Perfectly balanced, as <span class="hljs-meta">&gt;&gt;&gt;</span></code></pre>\n  <p><a name="method-trans"></a></p>\n\n          <p><a name="-code-trans-code-"></a></p>\n          <h4>\n            <a href="#-code-trans-code-">\n              <code>trans()</code>\n            </a>\n          </h4><p>The <code>trans</code> function translates the given translation key using your <router-link to="/docs/localization">localization files</router-link>:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImVjaG8gdHJhbnMoJ21lc3NhZ2VzLndlbGNvbWUnKTtcbiIsImhhc2giOiJoZWxwZXJzLXRyYW5zIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-function">echo <span class="hljs-title">trans</span><span class="hljs-params">(<span class="hljs-string">\'messages.welcome\'</span>)</span></span>;</code></pre>\n  <p>If the specified translation key does not exist, the <code>trans</code> function will return the given key. So, using the example above, the <code>trans</code> function would return <code>messages.welcome</code> if the translation key does not exist.</p>\n<p><a name="method-trans-choice"></a></p>\n\n          <p><a name="-code-trans_choice-code-"></a></p>\n          <h4>\n            <a href="#-code-trans_choice-code-">\n              <code>trans_choice()</code>\n            </a>\n          </h4><p>The <code>trans_choice</code> function translates the given translation key with inflection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImVjaG8gdHJhbnNfY2hvaWNlKCdtZXNzYWdlcy5ub3RpZmljYXRpb25zJywgJHVucmVhZENvdW50KTtcbiIsImhhc2giOiJoZWxwZXJzLXRyYW5zX2Nob2ljZSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">echo trans<span class="hljs-constructor">_choice(\'<span class="hljs-params">messages</span>.<span class="hljs-params">notifications</span>\', $<span class="hljs-params">unreadCount</span>)</span>;</code></pre>\n  <p>If the specified translation key does not exist, the <code>trans_choice</code> function will return the given key. So, using the example above, the <code>trans_choice</code> function would return <code>messages.notifications</code> if the translation key does not exist.</p>\n<p><a name="urls"></a></p>\n\n          <p><a name="urls"></a></p>\n          <h2>\n            <a href="#urls">\n              URLs\n            </a>\n          </h2><p><a name="method-action"></a></p>\n\n          <p><a name="-code-action-code-"></a></p>\n          <h4>\n            <a href="#-code-action-code-">\n              <code>action()</code>\n            </a>\n          </h4><p>The <code>action</code> function generates a URL for the given controller action. You do not need to pass the full namespace of the controller. Instead, pass the controller class name relative to the <code>App\\Http\\Controllers</code> namespace:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiR1cmwgPSBhY3Rpb24oJ0hvbWVDb250cm9sbGVyQGluZGV4Jyk7XG5cbiAkdXJsID0gYWN0aW9uKFtIb21lQ29udHJvbGxlcjo6Y2xhc3MsICdpbmRleCddKTtcbiIsImhhc2giOiJoZWxwZXJzLWFjdGlvbiJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$url = action(<span class="hljs-string">\'HomeController@index\'</span>);\n\n$url = action([HomeController::<span class="hljs-class"><span class="hljs-keyword">class</span>, \'<span class="hljs-title">index</span>\']);</span></code></pre>\n  <p>If the method accepts route parameters, you may pass them as the second argument to the method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$url = action(<span class="hljs-string">\'UserController@profile\'</span>, [<span class="hljs-string">\'id\'</span> =&gt; <span class="hljs-number">1</span>]);</code></pre>\n  <p><a name="method-asset"></a></p>\n\n          <p><a name="-code-asset-code-"></a></p>\n          <h4>\n            <a href="#-code-asset-code-">\n              <code>asset()</code>\n            </a>\n          </h4><p>The <code>asset</code> function generates a URL for an asset using the current scheme of the request (HTTP or HTTPS):</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiR1cmwgPSBhc3NldCgnaW1nL3Bob3RvLmpwZycpO1xuIiwiaGFzaCI6ImhlbHBlcnMtYXNzZXQifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">$url</span> = asset(<span class="hljs-string">\'img/photo.jpg\'</span>);</code></pre>\n  <p>You can configure the asset URL host by setting the <code>ASSET_URL</code> variable in your <code>.env</code> file. This can be useful if you host your assets on an external service like Amazon S3:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">/<span class="hljs-regexp">/ ASSET_URL=http:/</span><span class="hljs-regexp">/example.com/assets</span>\n\n<span class="hljs-variable">$url</span> = asset(<span class="hljs-string">\'img/photo.jpg\'</span>); <span class="hljs-regexp">//</span> <span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/example.com/assets</span><span class="hljs-regexp">/img/photo</span>.jpg</code></pre>\n  <p><a name="method-route"></a></p>\n\n          <p><a name="-code-route-code-"></a></p>\n          <h4>\n            <a href="#-code-route-code-">\n              <code>route()</code>\n            </a>\n          </h4><p>The <code>route</code> function generates a URL for the given named route:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">$url</span> = route(<span class="hljs-string">\'routeName\'</span>);</code></pre>\n  <p>If the route accepts parameters, you may pass them as the second argument to the method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$url = route(<span class="hljs-string">\'routeName\'</span>, [<span class="hljs-string">\'id\'</span> =&gt; <span class="hljs-number">1</span>]);</code></pre>\n  <p>By default, the <code>route</code> function generates an absolute URL. If you wish to generate a relative URL, you may pass <code>false</code> as the third argument:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$url = route(<span class="hljs-string">\'routeName\'</span>, [<span class="hljs-string">\'id\'</span> =&gt; <span class="hljs-number">1</span>], <span class="hljs-keyword">false</span>);</code></pre>\n  <p><a name="method-secure-asset"></a></p>\n\n          <p><a name="-code-secure_asset-code-"></a></p>\n          <h4>\n            <a href="#-code-secure_asset-code-">\n              <code>secure_asset()</code>\n            </a>\n          </h4><p>The <code>secure_asset</code> function generates a URL for an asset using HTTPS:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiR1cmwgPSBzZWN1cmVfYXNzZXQoJ2ltZy9waG90by5qcGcnKTtcbiIsImhhc2giOiJoZWxwZXJzLXNlY3VyZV9hc3NldCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$url = secure<span class="hljs-constructor">_asset(\'<span class="hljs-params">img</span><span class="hljs-operator">/</span><span class="hljs-params">photo</span>.<span class="hljs-params">jpg</span>\')</span>;</code></pre>\n  <p><a name="method-secure-url"></a></p>\n\n          <p><a name="-code-secure_url-code-"></a></p>\n          <h4>\n            <a href="#-code-secure_url-code-">\n              <code>secure_url()</code>\n            </a>\n          </h4><p>The <code>secure_url</code> function generates a fully qualified HTTPS URL to the given path:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiR1cmwgPSBzZWN1cmVfdXJsKCd1c2VyL3Byb2ZpbGUnKTtcblxuICR1cmwgPSBzZWN1cmVfdXJsKCd1c2VyL3Byb2ZpbGUnLCBbMV0pO1xuIiwiaGFzaCI6ImhlbHBlcnMtc2VjdXJlX3VybCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$url</span> = secure_url(\'<span class="hljs-keyword">user</span>/<span class="hljs-keyword">profile</span>\');\n\n<span class="hljs-variable">$url</span> = secure_url(\'<span class="hljs-keyword">user</span>/<span class="hljs-keyword">profile</span>\', [<span class="hljs-number">1</span>]);</code></pre>\n  <p><a name="method-url"></a></p>\n\n          <p><a name="-code-url-code-"></a></p>\n          <h4>\n            <a href="#-code-url-code-">\n              <code>url()</code>\n            </a>\n          </h4><p>The <code>url</code> function generates a fully qualified URL to the given path:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiR1cmwgPSB1cmwoJ3VzZXIvcHJvZmlsZScpO1xuXG4gJHVybCA9IHVybCgndXNlci9wcm9maWxlJywgWzFdKTtcbiIsImhhc2giOiJoZWxwZXJzLXVybCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$url</span> = url(\'<span class="hljs-keyword">user</span>/<span class="hljs-keyword">profile</span>\');\n\n<span class="hljs-variable">$url</span> = url(\'<span class="hljs-keyword">user</span>/<span class="hljs-keyword">profile</span>\', [<span class="hljs-number">1</span>]);</code></pre>\n  <p>If no path is provided, a <code>Illuminate\\Routing\\UrlGenerator</code> instance is returned:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$current = url<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>current();\n\n$full = url<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>full();\n\n$previous = url<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>previous();</code></pre>\n  <p><a name="miscellaneous"></a></p>\n\n          <p><a name="miscellaneous"></a></p>\n          <h2>\n            <a href="#miscellaneous">\n              Miscellaneous\n            </a>\n          </h2><p><a name="method-abort"></a></p>\n\n          <p><a name="-code-abort-code-"></a></p>\n          <h4>\n            <a href="#-code-abort-code-">\n              <code>abort()</code>\n            </a>\n          </h4><p>The <code>abort</code> function throws <router-link to="/docs/errors#http-exceptions">an HTTP exception</router-link> which will be rendered by the <router-link to="/docs/errors#the-exception-handler">exception handler</router-link>:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImFib3J0KDQwMyk7XG4iLCJoYXNoIjoiaGVscGVycy1hYm9ydCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">abort(<span class="hljs-number">403</span>)<span class="hljs-comment">;</span></code></pre>\n  <p>You may also provide the exception&#39;s response text and custom response headers:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">abort</span>(<span class="hljs-number">403</span>, <span class="hljs-string">\'Unauthorized.\'</span>, <span class="hljs-symbol">$</span>headers);</code></pre>\n  <p><a name="method-abort-if"></a></p>\n\n          <p><a name="-code-abort_if-code-"></a></p>\n          <h4>\n            <a href="#-code-abort_if-code-">\n              <code>abort_if()</code>\n            </a>\n          </h4><p>The <code>abort_if</code> function throws an HTTP exception if a given boolean expression evaluates to <code>true</code>:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImFib3J0X2lmKCEgQXV0aDo6dXNlcigpLT5pc0FkbWluKCksIDQwMyk7XG4iLCJoYXNoIjoiaGVscGVycy1hYm9ydF9pZiJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">abort_if(! Auth:<span class="hljs-symbol">:user</span>()-&gt;isAdmin(), <span class="hljs-number">403</span>)<span class="hljs-comment">;</span></code></pre>\n  <p>Like the <code>abort</code> method, you may also provide the exception&#39;s response text as the third argument and an array of custom response headers as the fourth argument.</p>\n<p><a name="method-abort-unless"></a></p>\n\n          <p><a name="-code-abort_unless-code-"></a></p>\n          <h4>\n            <a href="#-code-abort_unless-code-">\n              <code>abort_unless()</code>\n            </a>\n          </h4><p>The <code>abort_unless</code> function throws an HTTP exception if a given boolean expression evaluates to <code>false</code>:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImFib3J0X3VubGVzcyhBdXRoOjp1c2VyKCktPmlzQWRtaW4oKSwgNDAzKTtcbiIsImhhc2giOiJoZWxwZXJzLWFib3J0X3VubGVzcyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">abort_unless(<span class="hljs-name">Auth</span>:<span class="hljs-symbol">:user</span>()-&gt;isAdmin(), <span class="hljs-number">403</span>)<span class="hljs-comment">;</span></code></pre>\n  <p>Like the <code>abort</code> method, you may also provide the exception&#39;s response text as the third argument and an array of custom response headers as the fourth argument.</p>\n<p><a name="method-app"></a></p>\n\n          <p><a name="-code-app-code-"></a></p>\n          <h4>\n            <a href="#-code-app-code-">\n              <code>app()</code>\n            </a>\n          </h4><p>The <code>app</code> function returns the <router-link to="/docs/container">service container</router-link> instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-meta"><span class="hljs-meta-keyword">$container</span> = app();</span></code></pre>\n  <p>You may pass a class or interface name to resolve it from the container:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">$api</span> = app(<span class="hljs-string">\'HelpSpot\\API\'</span>);</code></pre>\n  <p><a name="method-auth"></a></p>\n\n          <p><a name="-code-auth-code-"></a></p>\n          <h4>\n            <a href="#-code-auth-code-">\n              <code>auth()</code>\n            </a>\n          </h4><p>The <code>auth</code> function returns an <router-link to="/docs/authentication">authenticator</router-link> instance. You may use it instead of the <code>Auth</code> facade for convenience:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiR1c2VyID0gYXV0aCgpLT51c2VyKCk7XG4iLCJoYXNoIjoiaGVscGVycy1hdXRoIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-keyword">user</span> <span class="hljs-title">= auth</span>()-&gt;user();</code></pre>\n  <p>If needed, you may specify which guard instance you would like to access:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user = auth<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'admin\'</span>)</span>-&gt;</span>user();</code></pre>\n  <p><a name="method-back"></a></p>\n\n          <p><a name="-code-back-code-"></a></p>\n          <h4>\n            <a href="#-code-back-code-">\n              <code>back()</code>\n            </a>\n          </h4><p>The <code>back</code> function generates a <router-link to="/docs/responses#redirects">redirect HTTP response</router-link> to the user&#39;s previous location:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> back($status = <span class="hljs-number">302</span>, $headers = [], $fallback = <span class="hljs-literal">false</span>)<span class="hljs-comment">;</span>\n\n<span class="hljs-keyword">return</span> back()<span class="hljs-comment">;</span></code></pre>\n  <p><a name="method-bcrypt"></a></p>\n\n          <p><a name="-code-bcrypt-code-"></a></p>\n          <h4>\n            <a href="#-code-bcrypt-code-">\n              <code>bcrypt()</code>\n            </a>\n          </h4><p>The <code>bcrypt</code> function <router-link to="/docs/hashing">hashes</router-link> the given value using Bcrypt. You may use it as an alternative to the <code>Hash</code> facade:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">$pa</span>ssword = bcrypt(<span class="hljs-string">\'my-secret-password\'</span>);</code></pre>\n  <p><a name="method-blank"></a></p>\n\n          <p><a name="-code-blank-code-"></a></p>\n          <h4>\n            <a href="#-code-blank-code-">\n              <code>blank()</code>\n            </a>\n          </h4><p>The <code>blank</code> function returns whether the given value is &quot;blank&quot;:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImJsYW5rKGNvbGxlY3QoKSk7XG4iLCJoYXNoIjoiaGVscGVycy1ibGFuayJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-function"><span class="hljs-title">blank</span>(<span class="hljs-string">\'\'</span>);\n<span class="hljs-title">blank</span>(<span class="hljs-string">\'   \'</span>);\n<span class="hljs-title">blank</span>(<span class="hljs-variable"><span class="hljs-literal">null</span></span>);\n<span class="hljs-title">blank</span>(<span class="hljs-title">collect</span>());\n\n<span class="hljs-comment">// true</span>\n\n<span class="hljs-title">blank</span>(<span class="hljs-number">0</span>);\n<span class="hljs-title">blank</span>(<span class="hljs-variable"><span class="hljs-literal">true</span></span>);\n<span class="hljs-title">blank</span>(<span class="hljs-variable"><span class="hljs-literal">false</span></span>);\n\n<span class="hljs-comment">// false</span></span></code></pre>\n  <p>For the inverse of <code>blank</code>, see the <a href="#method-filled"><code>filled</code></a> method.</p>\n<p><a name="method-broadcast"></a></p>\n\n          <p><a name="-code-broadcast-code-"></a></p>\n          <h4>\n            <a href="#-code-broadcast-code-">\n              <code>broadcast()</code>\n            </a>\n          </h4><p>The <code>broadcast</code> function <router-link to="/docs/broadcasting">broadcasts</router-link> the given <router-link to="/docs/events">event</router-link> to its listeners:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">broadcast(<span class="hljs-name">new</span> UserRegistered($user))<span class="hljs-comment">;</span></code></pre>\n  <p><a name="method-cache"></a></p>\n\n          <p><a name="-code-cache-code-"></a></p>\n          <h4>\n            <a href="#-code-cache-code-">\n              <code>cache()</code>\n            </a>\n          </h4><p>The <code>cache</code> function may be used to get values from the <router-link to="/docs/cache">cache</router-link>. If the given key does not exist in the cache, an optional default value will be returned:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImNhY2hlKCdrZXknLCAnZGVmYXVsdCcpO1xuIiwiaGFzaCI6ImhlbHBlcnMtY2FjaGUifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$value = <span class="hljs-keyword">cache</span>(<span class="hljs-string">\'key\'</span>);\n\n$value = <span class="hljs-keyword">cache</span>(<span class="hljs-string">\'key\'</span>, <span class="hljs-string">\'default\'</span>);</code></pre>\n  <p>You may add items to the cache by passing an array of key / value pairs to the function. You should also pass the number of seconds or duration the cached value should be considered valid:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">cache</span>([<span class="hljs-string">\'key\'</span> =&gt; <span class="hljs-string">\'value\'</span>], <span class="hljs-number">300</span>);\n\n<span class="hljs-keyword">cache</span>([<span class="hljs-string">\'key\'</span> =&gt; <span class="hljs-string">\'value\'</span>], <span class="hljs-keyword">now</span>()-&gt;addSeconds(<span class="hljs-number">10</span>));</code></pre>\n  <p><a name="method-class-uses-recursive"></a></p>\n\n          <p><a name="-code-class_uses_recursive-code-"></a></p>\n          <h4>\n            <a href="#-code-class_uses_recursive-code-">\n              <code>class_uses_recursive()</code>\n            </a>\n          </h4><p>The <code>class_uses_recursive</code> function returns all traits used by a class, including traits used by all of its parent classes:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiR0cmFpdHMgPSBjbGFzc191c2VzX3JlY3Vyc2l2ZShBcHBVc2VyOjpjbGFzcyk7XG4iLCJoYXNoIjoiaGVscGVycy1jbGFzc191c2VzX3JlY3Vyc2l2ZSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$traits = class_uses_recursive(App\\User::<span class="hljs-class"><span class="hljs-keyword">class</span>);</span></code></pre>\n  <p><a name="method-collect"></a></p>\n\n          <p><a name="-code-collect-code-"></a></p>\n          <h4>\n            <a href="#-code-collect-code-">\n              <code>collect()</code>\n            </a>\n          </h4><p>The <code>collect</code> function creates a <router-link to="/docs/collections">collection</router-link> instance from the given value:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImNvbGxlY3QoWyd0YXlsb3InLCAnYWJpZ2FpbCddKTtcbiIsImhhc2giOiJoZWxwZXJzLWNvbGxlY3QifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-string">\'taylor\'</span>, <span class="hljs-string">\'abigail\'</span>])<span class="hljs-comment">;</span></code></pre>\n  <p><a name="method-config"></a></p>\n\n          <p><a name="-code-config-code-"></a></p>\n          <h4>\n            <a href="#-code-config-code-">\n              <code>config()</code>\n            </a>\n          </h4><p>The <code>config</code> function gets the value of a <router-link to="/docs/configuration">configuration</router-link> variable. The configuration values may be accessed using &quot;dot&quot; syntax, which includes the name of the file and the option you wish to access. A default value may be specified and is returned if the configuration option does not exist:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiR2YWx1ZSA9IGNvbmZpZygnYXBwLnRpbWV6b25lJyk7XG5cbmNvbmZpZygnYXBwLnRpbWV6b25lJywgJGRlZmF1bHQpO1xuIiwiaGFzaCI6ImhlbHBlcnMtY29uZmlnIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$value = <span class="hljs-built_in">config</span>(<span class="hljs-string">\'app.timezone\'</span>);\n\n$value = <span class="hljs-built_in">config</span>(<span class="hljs-string">\'app.timezone\'</span>, $<span class="hljs-built_in">default</span>);</code></pre>\n  <p>You may set configuration variables at runtime by passing an array of key / value pairs:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">config([<span class="hljs-symbol">\'app</span>.debug\' =&gt; <span class="hljs-literal">true</span>]);</code></pre>\n  <p><a name="method-cookie"></a></p>\n\n          <p><a name="-code-cookie-code-"></a></p>\n          <h4>\n            <a href="#-code-cookie-code-">\n              <code>cookie()</code>\n            </a>\n          </h4><p>The <code>cookie</code> function creates a new <router-link to="/docs/requests#cookies">cookie</router-link> instance:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImNvb2tpZSgnbmFtZScsICd2YWx1ZScsICRtaW51dGVzKTtcbiIsImhhc2giOiJoZWxwZXJzLWNvb2tpZSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$cookie = cookie(<span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'value\'</span>, $minutes)<span class="hljs-comment">;</span></code></pre>\n  <p><a name="method-csrf-field"></a></p>\n\n          <p><a name="-code-csrf_field-code-"></a></p>\n          <h4>\n            <a href="#-code-csrf_field-code-">\n              <code>csrf_field()</code>\n            </a>\n          </h4><p>The <code>csrf_field</code> function generates an HTML <code>hidden</code> input field containing the value of the CSRF token. For example, using <router-link to="/docs/blade">Blade syntax</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">{{ csrf_field() }}</code></pre>\n  <p><a name="method-csrf-token"></a></p>\n\n          <p><a name="-code-csrf_token-code-"></a></p>\n          <h4>\n            <a href="#-code-csrf_token-code-">\n              <code>csrf_token()</code>\n            </a>\n          </h4><p>The <code>csrf_token</code> function retrieves the value of the current CSRF token:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImNzcmZfdG9rZW4oKTtcbiIsImhhc2giOiJoZWxwZXJzLWNzcmZfdG9rZW4ifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-meta"><span class="hljs-meta-keyword">$token</span> = csrf_token();</span></code></pre>\n  <p><a name="method-dd"></a></p>\n\n          <p><a name="-code-dd-code-"></a></p>\n          <h4>\n            <a href="#-code-dd-code-">\n              <code>dd()</code>\n            </a>\n          </h4><p>The <code>dd</code> function dumps the given variables and ends execution of the script:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">\n<span class="hljs-code">    dd($value);</span>\n\n<span class="hljs-code">    dd($value1, $value2, $value3, ...);</span>\n\nIf you do not want to halt the execution of your script, use the [<span class="hljs-string">`dump`</span>](<span class="hljs-link">#method-dump</span>) function instead.\n\n<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"method-decrypt"</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>\n<span class="hljs-section">#### `decrypt()` </span>\n\nThe <span class="hljs-code">`decrypt`</span> function decrypts the given value using Laravel\'s [<span class="hljs-string">encrypter</span>](<span class="hljs-link">/docs/encryption</span>):\n\n<span class="hljs-code">```try-code\n{\n    mode: \'cli\',\n    cliCode: `$decrypted = decrypt($encrypted_value);\n`\n}</span></code></pre>\n  \n    <pre class="language-php" v-pre><code class="language-php">$decrypted = decrypt($encrypted_value)<span class="hljs-comment">;</span></code></pre>\n  <p><a name="method-dispatch"></a></p>\n\n          <p><a name="-code-dispatch-code-"></a></p>\n          <h4>\n            <a href="#-code-dispatch-code-">\n              <code>dispatch()</code>\n            </a>\n          </h4><p>The <code>dispatch</code> function pushes the given <router-link to="/docs/queues#creating-jobs">job</router-link> onto the Laravel <router-link to="/docs/queues">job queue</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">dispatch(<span class="hljs-keyword">new</span> <span class="hljs-type">App</span>\\Jobs\\SendEmails);</code></pre>\n  <p><a name="method-dispatch-now"></a></p>\n\n          <p><a name="-code-dispatch_now-code-"></a></p>\n          <h4>\n            <a href="#-code-dispatch_now-code-">\n              <code>dispatch_now()</code>\n            </a>\n          </h4><p>The <code>dispatch_now</code> function runs the given <router-link to="/docs/queues#creating-jobs">job</router-link> immediately and returns the value from its <code>handle</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">$result = dispatch_now</span>(new App<span class="hljs-symbol">\\J</span>obs<span class="hljs-symbol">\\S</span>endEmails);</code></pre>\n  <p><a name="method-dump"></a></p>\n\n          <p><a name="-code-dump-code-"></a></p>\n          <h4>\n            <a href="#-code-dump-code-">\n              <code>dump()</code>\n            </a>\n          </h4><p>The <code>dump</code> function dumps the given variables:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">dump</span>($value);\n\n<span class="hljs-keyword">dump</span>($value1, $value2, $value3, ...);</code></pre>\n  <p>If you want to stop executing the script after dumping the variables, use the <a href="#method-dd"><code>dd</code></a> function instead.</p>\n<p><a name="method-encrypt"></a></p>\n\n          <p><a name="-code-encrypt-code-"></a></p>\n          <h4>\n            <a href="#-code-encrypt-code-">\n              <code>encrypt()</code>\n            </a>\n          </h4><p>The <code>encrypt</code> function encrypts the given value using Laravel&#39;s <router-link to="/docs/encryption">encrypter</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">$e</span>ncrypted = encrypt(<span class="hljs-symbol">$u</span>nencrypted_value);</code></pre>\n  <p><a name="method-env"></a></p>\n\n          <p><a name="-code-env-code-"></a></p>\n          <h4>\n            <a href="#-code-env-code-">\n              <code>env()</code>\n            </a>\n          </h4><p>The <code>env</code> function retrieves the value of an <router-link to="/docs/configuration#environment-configuration">environment variable</router-link> or returns a default value:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImVudignQVBQX0VOVicpO1xuIiwiaGFzaCI6ImhlbHBlcnMtZW52In0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$env = env(<span class="hljs-string">\'APP_ENV\'</span>);\n\n<span class="hljs-regexp">//</span> Returns <span class="hljs-string">\'production\'</span> <span class="hljs-keyword">if</span> APP_ENV is <span class="hljs-keyword">not</span> set...\n$env = env(<span class="hljs-string">\'APP_ENV\'</span>, <span class="hljs-string">\'production\'</span>);</code></pre>\n  <blockquote>\n<p>{note} If you execute the <code>config:cache</code> command during your deployment process, you should be sure that you are only calling the <code>env</code> function from within your configuration files. Once the configuration has been cached, the <code>.env</code> file will not be loaded and all calls to the <code>env</code> function will return <code>null</code>.</p>\n</blockquote>\n<p><a name="method-event"></a></p>\n\n          <p><a name="-code-event-code-"></a></p>\n          <h4>\n            <a href="#-code-event-code-">\n              <code>event()</code>\n            </a>\n          </h4><p>The <code>event</code> function dispatches the given <router-link to="/docs/events">event</router-link> to its listeners:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">event(<span class="hljs-name">new</span> UserRegistered($user))<span class="hljs-comment">;</span></code></pre>\n  <p><a name="method-factory"></a></p>\n\n          <p><a name="-code-factory-code-"></a></p>\n          <h4>\n            <a href="#-code-factory-code-">\n              <code>factory()</code>\n            </a>\n          </h4><p>The <code>factory</code> function creates a model factory builder for a given class, name, and amount. It can be used while <router-link to="/docs/database-testing#writing-factories">testing</router-link> or <router-link to="/docs/seeding#using-model-factories">seeding</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user = factory(App\\User::<span class="hljs-class"><span class="hljs-keyword">class</span>)-&gt;<span class="hljs-title">make</span>();</span></code></pre>\n  <p><a name="method-filled"></a></p>\n\n          <p><a name="-code-filled-code-"></a></p>\n          <h4>\n            <a href="#-code-filled-code-">\n              <code>filled()</code>\n            </a>\n          </h4><p>The <code>filled</code> function returns whether the given value is not &quot;blank&quot;:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImZpbGxlZCgwKTtcbiIsImhhc2giOiJoZWxwZXJzLWZpbGxlZCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-function"><span class="hljs-title">filled</span>(<span class="hljs-number">0</span>);\n<span class="hljs-title">filled</span>(<span class="hljs-variable"><span class="hljs-literal">true</span></span>);\n<span class="hljs-title">filled</span>(<span class="hljs-variable"><span class="hljs-literal">false</span></span>);\n\n<span class="hljs-comment">// true</span>\n\n<span class="hljs-title">filled</span>(<span class="hljs-string">\'\'</span>);\n<span class="hljs-title">filled</span>(<span class="hljs-string">\'   \'</span>);\n<span class="hljs-title">filled</span>(<span class="hljs-variable"><span class="hljs-literal">null</span></span>);\n<span class="hljs-title">filled</span>(<span class="hljs-title">collect</span>());\n\n<span class="hljs-comment">// false</span></span></code></pre>\n  <p>For the inverse of <code>filled</code>, see the <a href="#method-blank"><code>blank</code></a> method.</p>\n<p><a name="method-info"></a></p>\n\n          <p><a name="-code-info-code-"></a></p>\n          <h4>\n            <a href="#-code-info-code-">\n              <code>info()</code>\n            </a>\n          </h4><p>The <code>info</code> function will write information to the <router-link to="/docs/logging">log</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-function"><span class="hljs-title">info</span>(<span class="hljs-string">\'Some helpful information!\'</span>);</span></code></pre>\n  <p>An array of contextual data may also be passed to the function:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">info(<span class="hljs-string">\'User login attempt failed.\'</span>, [<span class="hljs-string">\'id\'</span> =&gt; $user-&gt;id]);</code></pre>\n  <p><a name="method-logger"></a></p>\n\n          <p><a name="-code-logger-code-"></a></p>\n          <h4>\n            <a href="#-code-logger-code-">\n              <code>logger()</code>\n            </a>\n          </h4><p>The <code>logger</code> function can be used to write a <code>debug</code> level message to the <router-link to="/docs/logging">log</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-function"><span class="hljs-title">logger</span>(<span class="hljs-string">\'Debug message\'</span>);</span></code></pre>\n  <p>An array of contextual data may also be passed to the function:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">logger(<span class="hljs-string">\'User has logged in.\'</span>, [<span class="hljs-string">\'id\'</span> =&gt; $user-&gt;id]);</code></pre>\n  <p>A <router-link to="/docs/errors#logging">logger</router-link> instance will be returned if no value is passed to the function:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">logger<span class="hljs-comment">()</span>-&gt;error<span class="hljs-comment">(\'You are not allowed here.\')</span>;</code></pre>\n  <p><a name="method-method-field"></a></p>\n\n          <p><a name="-code-method_field-code-"></a></p>\n          <h4>\n            <a href="#-code-method_field-code-">\n              <code>method_field()</code>\n            </a>\n          </h4><p>The <code>method_field</code> function generates an HTML <code>hidden</code> input field containing the spoofed value of the form&#39;s HTTP verb. For example, using <router-link to="/docs/blade">Blade syntax</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">&lt;form method=<span class="hljs-string">"<span class="hljs-keyword">POST</span>"</span>&gt;\n    {{ method_field(\'DELETE\') }}\n&lt;/form&gt;</code></pre>\n  <p><a name="method-now"></a></p>\n\n          <p><a name="-code-now-code-"></a></p>\n          <h4>\n            <a href="#-code-now-code-">\n              <code>now()</code>\n            </a>\n          </h4><p>The <code>now</code> function creates a new <code>Illuminate\\Support\\Carbon</code> instance for the current time:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Im5vdygpO1xuIiwiaGFzaCI6ImhlbHBlcnMtbm93In0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-built_in">now</span> = <span class="hljs-built_in">now</span>();</code></pre>\n  <p><a name="method-old"></a></p>\n\n          <p><a name="-code-old-code-"></a></p>\n          <h4>\n            <a href="#-code-old-code-">\n              <code>old()</code>\n            </a>\n          </h4><p>The <code>old</code> function <router-link to="/docs/requests#retrieving-input">retrieves</router-link> an <router-link to="/docs/requests#old-input">old input</router-link> value flashed into the session:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">$value</span> = old(<span class="hljs-string">\'value\'</span>);\n\n<span class="hljs-symbol">$value</span> = old(<span class="hljs-string">\'value\'</span>, <span class="hljs-string">\'default\'</span>);</code></pre>\n  <p><a name="method-optional"></a></p>\n\n          <p><a name="-code-optional-code-"></a></p>\n          <h4>\n            <a href="#-code-optional-code-">\n              <code>optional()</code>\n            </a>\n          </h4><p>The <code>optional</code> function accepts any argument and allows you to access properties or call methods on that object. If the given object is <code>null</code>, properties and methods will return <code>null</code> instead of causing an error:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Im9wdGlvbmFsKFVzZXI6OmZpbmQoMSkpLT5uYW1lO1xuIiwiaGFzaCI6ImhlbHBlcnMtb3B0aW9uYWwifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">return optional($user-&gt;address)-&gt;street;\n\n{!! old(<span class="hljs-string">\'name\'</span>, optional($user)-&gt;name) !!}</code></pre>\n  <p>The <code>optional</code> function also accepts a Closure as its second argument. The Closure will be invoked if the value provided as the first argument is not null:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> optional(User::find($id), <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($user)</span> </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DummyUser;\n});</code></pre>\n  <p><a name="method-policy"></a></p>\n\n          <p><a name="-code-policy-code-"></a></p>\n          <h4>\n            <a href="#-code-policy-code-">\n              <code>policy()</code>\n            </a>\n          </h4><p>The <code>policy</code> method retrieves a <router-link to="/docs/authorization#creating-policies">policy</router-link> instance for a given class:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$policy = policy(App\\User::<span class="hljs-class"><span class="hljs-keyword">class</span>);</span></code></pre>\n  <p><a name="method-redirect"></a></p>\n\n          <p><a name="-code-redirect-code-"></a></p>\n          <h4>\n            <a href="#-code-redirect-code-">\n              <code>redirect()</code>\n            </a>\n          </h4><p>The <code>redirect</code> function returns a <router-link to="/docs/responses#redirects">redirect HTTP response</router-link>, or returns the redirector instance if called with no arguments:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">return</span> <span class="hljs-literal">redirect</span>(<span class="hljs-variable">$to</span> = null, <span class="hljs-variable">$status</span> = <span class="hljs-number">302</span>, <span class="hljs-variable">$headers</span> = [], <span class="hljs-variable">$secure</span> = null);\n\n<span class="hljs-attribute">return</span> <span class="hljs-literal">redirect</span>(<span class="hljs-string">\'/home\'</span>);\n\n<span class="hljs-attribute">return</span> <span class="hljs-literal">redirect</span>()-&gt;route(<span class="hljs-string">\'route.name\'</span>);</code></pre>\n  <p><a name="method-report"></a></p>\n\n          <p><a name="-code-report-code-"></a></p>\n          <h4>\n            <a href="#-code-report-code-">\n              <code>report()</code>\n            </a>\n          </h4><p>The <code>report</code> function will report an exception using your <router-link to="/docs/errors#the-exception-handler">exception handler</router-link>&#39;s <code>report</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">report</span>(<span class="hljs-variable">$e</span>);</code></pre>\n  <p><a name="method-request"></a></p>\n\n          <p><a name="-code-request-code-"></a></p>\n          <h4>\n            <a href="#-code-request-code-">\n              <code>request()</code>\n            </a>\n          </h4><p>The <code>request</code> function returns the current <router-link to="/docs/requests">request</router-link> instance or obtains an input item:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InJlcXVlc3QoKTsiLCJoYXNoIjoiaGVscGVycy1yZXF1ZXN0In0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$request = request()<span class="hljs-comment">;</span>\n\n$value = request(<span class="hljs-string">\'key\'</span>, $default)<span class="hljs-comment">;</span></code></pre>\n  <p><a name="method-rescue"></a></p>\n\n          <p><a name="-code-rescue-code-"></a></p>\n          <h4>\n            <a href="#-code-rescue-code-">\n              <code>rescue()</code>\n            </a>\n          </h4><p>The <code>rescue</code> function executes the given Closure and catches any exceptions that occur during its execution. All exceptions that are caught will be sent to your <router-link to="/docs/errors#the-exception-handler">exception handler</router-link>&#39;s <code>report</code> method; however, the request will continue processing:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> rescue(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;method();\n});</code></pre>\n  <p>You may also pass a second argument to the <code>rescue</code> function. This argument will be the &quot;default&quot; value that should be returned if an exception occurs while executing the Closure:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> rescue(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;method();\n}, <span class="hljs-keyword">false</span>);\n\n<span class="hljs-keyword">return</span> rescue(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;method();\n}, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;failure();\n});</code></pre>\n  <p><a name="method-resolve"></a></p>\n\n          <p><a name="-code-resolve-code-"></a></p>\n          <h4>\n            <a href="#-code-resolve-code-">\n              <code>resolve()</code>\n            </a>\n          </h4><p>The <code>resolve</code> function resolves a given class or interface name to its instance using the <router-link to="/docs/container">service container</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">$api</span> = resolve(<span class="hljs-string">\'HelpSpot\\API\'</span>);</code></pre>\n  <p><a name="method-response"></a></p>\n\n          <p><a name="-code-response-code-"></a></p>\n          <h4>\n            <a href="#-code-response-code-">\n              <code>response()</code>\n            </a>\n          </h4><p>The <code>response</code> function creates a <router-link to="/docs/responses">response</router-link> instance or obtains an instance of the response factory:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InJlc3BvbnNlKCdIZWxsbyBXb3JsZCcsIDIwMCwgJGhlYWRlcnMpOyIsImhhc2giOiJoZWxwZXJzLXJlc3BvbnNlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> response(<span class="hljs-string">\'Hello World\'</span>, <span class="hljs-number">200</span>, $headers);\n\n<span class="hljs-keyword">return</span> response()-&gt;json([<span class="hljs-string">\'foo\'</span> =&gt; <span class="hljs-string">\'bar\'</span>], <span class="hljs-number">200</span>, $headers);</code></pre>\n  <p><a name="method-retry"></a></p>\n\n          <p><a name="-code-retry-code-"></a></p>\n          <h4>\n            <a href="#-code-retry-code-">\n              <code>retry()</code>\n            </a>\n          </h4><p>The <code>retry</code> function attempts to execute the given callback until the given maximum attempt threshold is met. If the callback does not throw an exception, its return value will be returned. If the callback throws an exception, it will automatically be retried. If the maximum attempt count is exceeded, the exception will be thrown:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InJldHVybiByZXRyeSg1LCBmdW5jdGlvbiAoKSB7XG4gIC8vIEF0dGVtcHQgNSB0aW1lcyB3aGlsZSByZXN0aW5nIDEwMG1zIGluIGJldHdlZW4gYXR0ZW1wdHMuLi5cbiB9LCAxMDApO1xuIiwiaGFzaCI6ImhlbHBlcnMtcmV0cnkifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> retry(<span class="hljs-number">5</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span></span> {\n    // Attempt <span class="hljs-number">5</span> times <span class="hljs-keyword">while</span> resting <span class="hljs-number">100</span>ms <span class="hljs-keyword">in</span> between attempts...\n}, <span class="hljs-number">100</span>);</code></pre>\n  <p><a name="method-session"></a></p>\n\n          <p><a name="-code-session-code-"></a></p>\n          <h4>\n            <a href="#-code-session-code-">\n              <code>session()</code>\n            </a>\n          </h4><p>The <code>session</code> function may be used to get or set <router-link to="/docs/session">session</router-link> values:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">$value</span> = session(<span class="hljs-string">\'key\'</span>);</code></pre>\n  <p>You may set values by passing an array of key / value pairs to the function:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">session([<span class="hljs-string">\'chairs\'</span> =&gt; <span class="hljs-number">7</span>, <span class="hljs-string">\'instruments\'</span> =&gt; <span class="hljs-number">3</span>]);</code></pre>\n  <p>The session store will be returned if no value is passed to the function:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$value = session<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>get(<span class="hljs-string">\'key\'</span>);\n\nsession<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>put(<span class="hljs-string">\'key\'</span>, $value);</code></pre>\n  <p><a name="method-tap"></a></p>\n\n          <p><a name="-code-tap-code-"></a></p>\n          <h4>\n            <a href="#-code-tap-code-">\n              <code>tap()</code>\n            </a>\n          </h4><p>The <code>tap</code> function accepts two arguments: an arbitrary <code>$value</code> and a Closure. The <code>$value</code> will be passed to the Closure and then be returned by the <code>tap</code> function. The return value of the Closure is irrelevant:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user = tap(User::first(), <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($user)</span> </span>{\n    $user-&gt;name = <span class="hljs-string">\'taylor\'</span>;\n\n    $user-&gt;save();\n});</code></pre>\n  <p>If no Closure is passed to the <code>tap</code> function, you may call any method on the given <code>$value</code>. The return value of the method you call will always be <code>$value</code>, regardless of what the method actually returns in its definition. For example, the Eloquent <code>update</code> method typically returns an integer. However, we can force the method to return the model itself by chaining the <code>update</code> method call through the <code>tap</code> function:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user = tap($user)-&gt;update([\n    <span class="hljs-string">\'name\'</span> =&gt; $name,\n    <span class="hljs-string">\'email\'</span> =&gt; $email,\n]);</code></pre>\n  <p>To add a <code>tap</code> method to a class, you may add the <code>Illuminate\\Support\\Traits\\Tappable</code> trait to the class. The <code>tap</code> method of this trait accepts a Closure as its only argument. The object instance itself will be passed to the Closure and then be returned by the <code>tap</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> $user-&gt;tap(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($user)</span> </span>{\n    <span class="hljs-comment">//</span>\n});</code></pre>\n  <p><a name="method-throw-if"></a></p>\n\n          <p><a name="-code-throw_if-code-"></a></p>\n          <h4>\n            <a href="#-code-throw_if-code-">\n              <code>throw_if()</code>\n            </a>\n          </h4><p>The <code>throw_if</code> function throws the given exception if a given boolean expression evaluates to <code>true</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">throw_if(! Auth:<span class="hljs-symbol">:user</span>()-&gt;isAdmin(), AuthorizationException:<span class="hljs-symbol">:class</span>)<span class="hljs-comment">;</span>\n\nthrow_if(\n    ! Auth:<span class="hljs-symbol">:user</span>()-&gt;isAdmin(),\n    AuthorizationException:<span class="hljs-symbol">:class</span>,\n    \'You are not allowed to access this page\'\n)<span class="hljs-comment">;</span></code></pre>\n  <p><a name="method-throw-unless"></a></p>\n\n          <p><a name="-code-throw_unless-code-"></a></p>\n          <h4>\n            <a href="#-code-throw_unless-code-">\n              <code>throw_unless()</code>\n            </a>\n          </h4><p>The <code>throw_unless</code> function throws the given exception if a given boolean expression evaluates to <code>false</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">throw_unless(<span class="hljs-name">Auth</span>:<span class="hljs-symbol">:user</span>()-&gt;isAdmin(), AuthorizationException:<span class="hljs-symbol">:class</span>)<span class="hljs-comment">;</span>\n\nthrow_unless(\n    <span class="hljs-name">Auth</span>:<span class="hljs-symbol">:user</span>()-&gt;isAdmin(),\n    AuthorizationException:<span class="hljs-symbol">:class</span>,\n    \'You are not allowed to access this page\'\n)<span class="hljs-comment">;</span></code></pre>\n  <p><a name="method-today"></a></p>\n\n          <p><a name="-code-today-code-"></a></p>\n          <h4>\n            <a href="#-code-today-code-">\n              <code>today()</code>\n            </a>\n          </h4><p>The <code>today</code> function creates a new <code>Illuminate\\Support\\Carbon</code> instance for the current date:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InRvZGF5KCk7XG4iLCJoYXNoIjoiaGVscGVycy10b2RheSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-built_in">today</span> = <span class="hljs-built_in">today</span>();</code></pre>\n  <p><a name="method-trait-uses-recursive"></a></p>\n\n          <p><a name="-code-trait_uses_recursive-code-"></a></p>\n          <h4>\n            <a href="#-code-trait_uses_recursive-code-">\n              <code>trait_uses_recursive()</code>\n            </a>\n          </h4><p>The <code>trait_uses_recursive</code> function returns all traits used by a trait:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InRyYWl0X3VzZXNfcmVjdXJzaXZlKElsbHVtaW5hdGVOb3RpZmljYXRpb25zTm90aWZpYWJsZTo6Y2xhc3MpO1xuIiwiaGFzaCI6ImhlbHBlcnMtdHJhaXRfdXNlc19yZWN1cnNpdmUifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$traits = trait_uses_recursive(\\Illuminate\\Notifications\\Notifiable::<span class="hljs-class"><span class="hljs-keyword">class</span>);</span></code></pre>\n  <p><a name="method-transform"></a></p>\n\n          <p><a name="-code-transform-code-"></a></p>\n          <h4>\n            <a href="#-code-transform-code-">\n              <code>transform()</code>\n            </a>\n          </h4><p>The <code>transform</code> function executes a <code>Closure</code> on a given value if the value is not <a href="#method-blank">blank</a> and returns the result of the <code>Closure</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$callback = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($value)</span> </span>{\n    <span class="hljs-keyword">return</span> $value * <span class="hljs-number">2</span>;\n};\n\n$result = transform(<span class="hljs-number">5</span>, $callback);\n\n<span class="hljs-comment">// 10</span></code></pre>\n  <p>A default value or <code>Closure</code> may also be passed as the third parameter to the method. This value will be returned if the given value is blank:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$result = transform(<span class="hljs-keyword">null</span>, $callback, <span class="hljs-string">\'The value is blank\'</span>);\n\n<span class="hljs-comment">// The value is blank</span></code></pre>\n  <p><a name="method-validator"></a></p>\n\n          <p><a name="-code-validator-code-"></a></p>\n          <h4>\n            <a href="#-code-validator-code-">\n              <code>validator()</code>\n            </a>\n          </h4><p>The <code>validator</code> function creates a new <router-link to="/docs/validation">validator</router-link> instance with the given arguments. You may use it instead of the <code>Validator</code> facade for convenience:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$validator = validator($data, $rules, $messages)<span class="hljs-comment">;</span></code></pre>\n  <p><a name="method-value"></a></p>\n\n          <p><a name="-code-value-code-"></a></p>\n          <h4>\n            <a href="#-code-value-code-">\n              <code>value()</code>\n            </a>\n          </h4><p>The <code>value</code> function returns the value it is given. However, if you pass a <code>Closure</code> to the function, the <code>Closure</code> will be executed then its result will be returned:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">$re</span>sult = value(<span class="hljs-literal">true</span>);\n\n<span class="hljs-comment">// true</span>\n\n<span class="hljs-symbol">$re</span>sult = value(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;\n});\n\n<span class="hljs-comment">// false</span></code></pre>\n  <p><a name="method-view"></a></p>\n\n          <p><a name="-code-view-code-"></a></p>\n          <h4>\n            <a href="#-code-view-code-">\n              <code>view()</code>\n            </a>\n          </h4><p>The <code>view</code> function retrieves a <router-link to="/docs/views">view</router-link> instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">view</span><span class="hljs-params">(<span class="hljs-string">\'auth.login\'</span>)</span></span>;</code></pre>\n  <p><a name="method-with"></a></p>\n\n          <p><a name="-code-with-code-"></a></p>\n          <h4>\n            <a href="#-code-with-code-">\n              <code>with()</code>\n            </a>\n          </h4><p>The <code>with</code> function returns the value it is given. If a <code>Closure</code> is passed as the second argument to the function, the <code>Closure</code> will be executed and its result will be returned:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$callback = function ($value) {\n    <span class="hljs-keyword">return</span> (is_numeric($value)) ? $value * <span class="hljs-number">2</span> : <span class="hljs-number">0</span>;\n};\n\n$result = <span class="hljs-keyword">with</span>(<span class="hljs-number">5</span>, $callback);\n\n<span class="hljs-comment">// 10</span>\n\n$result = <span class="hljs-keyword">with</span>(<span class="hljs-built_in">null</span>, $callback);\n\n<span class="hljs-comment">// 0</span>\n\n$result = <span class="hljs-keyword">with</span>(<span class="hljs-number">5</span>, <span class="hljs-built_in">null</span>);\n\n<span class="hljs-comment">// 5</span></code></pre>\n  '},"6edb":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="eloquent-serialization"></a></p>\n          <h1>\n            <a href="#eloquent-serialization">\n              Eloquent: Serialization\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#serializing-models-and-collections">Serializing Models &amp; Collections</a><ul>\n<li><a href="#serializing-to-arrays">Serializing To Arrays</a></li>\n<li><a href="#serializing-to-json">Serializing To JSON</a></li>\n</ul>\n</li>\n<li><a href="#hiding-attributes-from-json">Hiding Attributes From JSON</a></li>\n<li><a href="#appending-values-to-json">Appending Values To JSON</a></li>\n<li><a href="#date-serialization">Date Serialization</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>When building JSON APIs, you will often need to convert your models and relationships to arrays or JSON. Eloquent includes convenient methods for making these conversions, as well as controlling which attributes are included in your serializations.</p>\n<p><a name="serializing-models-and-collections"></a></p>\n\n          <p><a name="serializing-models-amp-collections"></a></p>\n          <h2>\n            <a href="#serializing-models-amp-collections">\n              Serializing Models &amp; Collections\n            </a>\n          </h2><p><a name="serializing-to-arrays"></a></p>\n\n          <p><a name="serializing-to-arrays"></a></p>\n          <h3>\n            <a href="#serializing-to-arrays">\n              Serializing To Arrays\n            </a>\n          </h3><p>To convert a model and its loaded <router-link to="/docs/eloquent-relationships">relationships</router-link> to an array, you should use the <code>toArray</code> method. This method is recursive, so all attributes and all relations (including the relations of relations) will be converted to arrays:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2d1ZXN0cycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ2ZpcnN0X25hbWUnKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5jbGFzcyBHdWVzdCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsnZmlyc3RfbmFtZSddO1xufVxuXG5HdWVzdDo6Y3JlYXRlKFsnZmlyc3RfbmFtZScgPT4gJ01hcmNlbCddKTtcblxuJGd1ZXN0ID0gR3Vlc3Q6OmZpbmQoMSk7XG5cbiRndWVzdC0+dG9BcnJheSgpO1xuIiwiaGFzaCI6ImVsb3F1ZW50LXNlcmlhbGl6YXRpb24tc2VyaWFsaXppbmctdG8tYXJyYXlzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span> = App\\User::<span class="hljs-keyword">with</span>(<span class="hljs-string">\'roles\'</span>)-&gt;first();\n\n<span class="hljs-keyword">return</span> <span class="hljs-variable">$user</span>-&gt;toArray();</code></pre>\n  <p>To convert only a model&#39;s attributes to an array, use the <code>attributesToArray</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span> = App\\User::first();\n\n<span class="hljs-keyword">return</span> <span class="hljs-variable">$user</span>-&gt;attributesToArray();</code></pre>\n  <p>You may also convert entire <router-link to="/docs/eloquent-collections">collections</router-link> of models to arrays:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$users</span> = App\\User::all();\n\n<span class="hljs-keyword">return</span> <span class="hljs-variable">$users</span>-&gt;toArray();</code></pre>\n  <p><a name="serializing-to-json"></a></p>\n\n          <p><a name="serializing-to-json"></a></p>\n          <h3>\n            <a href="#serializing-to-json">\n              Serializing To JSON\n            </a>\n          </h3><p>To convert a model to JSON, you should use the <code>toJson</code> method. Like <code>toArray</code>, the <code>toJson</code> method is recursive, so all attributes and relations will be converted to JSON. You may also specify JSON encoding options <router-link to="https://secure.php.net/manual/en/function.json-encode.php">supported by PHP</router-link>:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2d1ZXN0cycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ2ZpcnN0X25hbWUnKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5jbGFzcyBHdWVzdCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsnZmlyc3RfbmFtZSddO1xufVxuXG5HdWVzdDo6Y3JlYXRlKFsnZmlyc3RfbmFtZScgPT4gJ01hcmNlbCddKTtcblxuJGd1ZXN0ID0gR3Vlc3Q6OmZpbmQoMSk7XG5cbiRndWVzdC0+dG9Kc29uKEpTT05fUFJFVFRZX1BSSU5UKTtcbiIsImhhc2giOiJlbG9xdWVudC1zZXJpYWxpemF0aW9uLXNlcmlhbGl6aW5nLXRvLWpzb24ifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span> = App\\User::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-keyword">return</span> <span class="hljs-variable">$user</span>-&gt;toJson();\n\n<span class="hljs-keyword">return</span> <span class="hljs-variable">$user</span>-&gt;toJson(JSON_PRETTY_PRINT);</code></pre>\n  <p>Alternatively, you may cast a model or collection to a string, which will automatically call the <code>toJson</code> method on the model or collection:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user = App\\User<span class="hljs-type">::find</span>(<span class="hljs-number">1</span>);\n\n<span class="hljs-keyword">return</span> (<span class="hljs-built_in">string</span>) $user;</code></pre>\n  <p>Since models and collections are converted to JSON when cast to a string, you can return Eloquent objects directly from your application&#39;s routes or controllers:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'users\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> App\\User::all();\n});</code></pre>\n  \n          <p><a name="relationships"></a></p>\n          <h4>\n            <a href="#relationships">\n              Relationships\n            </a>\n          </h4><p>When an Eloquent model is converted to JSON, its loaded relationships will automatically be included as attributes on the JSON object. Also, though Eloquent relationship methods are defined using &quot;camel case&quot;, a relationship&#39;s JSON attribute will be &quot;snake case&quot;.</p>\n<p><a name="hiding-attributes-from-json"></a></p>\n\n          <p><a name="hiding-attributes-from-json"></a></p>\n          <h2>\n            <a href="#hiding-attributes-from-json">\n              Hiding Attributes From JSON\n            </a>\n          </h2><p>Sometimes you may wish to limit the attributes, such as passwords, that are included in your model&#39;s array or JSON representation. To do so, add a <code>$hidden</code> property to your model:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2d1ZXN0cycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ2ZpcnN0X25hbWUnKTtcbiAgICAkdGFibGUtPnN0cmluZygncGFzc3dvcmQnKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5jbGFzcyBHdWVzdCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsnZmlyc3RfbmFtZScsICdwYXNzd29yZCddO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYmUgaGlkZGVuIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAdmFyIGFycmF5XG4gICAgICovXG4gICAgcHJvdGVjdGVkICRoaWRkZW4gPSBbJ3Bhc3N3b3JkJ107XG59XG5cbkd1ZXN0OjpjcmVhdGUoWydmaXJzdF9uYW1lJyA9PiAnTWFyY2VsJywgJ3Bhc3N3b3JkJyA9PiAnc2VjcmV0J10pO1xuXG4kZ3Vlc3QgPSBHdWVzdDo6ZmluZCgxKTtcblxuJGd1ZXN0LT50b0FycmF5KClcbiIsImhhc2giOiJlbG9xdWVudC1zZXJpYWxpemF0aW9uLWhpZGluZy1hdHRyaWJ1dGVzLWZyb20tanNvbiJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">&lt;?php\n\nnamespace <span class="hljs-type">App</span>;\n\nuse <span class="hljs-type">Illuminate</span>\\<span class="hljs-type">Database</span>\\<span class="hljs-type">Eloquent</span>\\<span class="hljs-type">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span>\n{\n    <span class="hljs-comment">/**\n     * The attributes that should be hidden for arrays.\n     *\n     * @var array\n     */</span>\n    <span class="hljs-keyword">protected</span> $hidden = [<span class="hljs-symbol">\'passwor</span>d\'];\n}</code></pre>\n  <p>Alternatively, you may use the <code>visible</code> property to define a white-list of attributes that should be included in your model&#39;s array and JSON representation. All other attributes will be hidden when the model is converted to an array or JSON:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2d1ZXN0cycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ2ZpcnN0X25hbWUnKTtcbiAgICAkdGFibGUtPnN0cmluZygncGFzc3dvcmQnKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5jbGFzcyBHdWVzdCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsnZmlyc3RfbmFtZScsICdwYXNzd29yZCddO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYmUgdmlzaWJsZSBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHZhciBhcnJheVxuICAgICAqL1xuICAgIHByb3RlY3RlZCAkdmlzaWJsZSA9IFsnZmlyc3RfbmFtZSddO1xufVxuXG5HdWVzdDo6Y3JlYXRlKFsnZmlyc3RfbmFtZScgPT4gJ01hcmNlbCcsICdwYXNzd29yZCcgPT4gJ3NlY3JldCddKTtcblxuJGd1ZXN0ID0gR3Vlc3Q6OmZpbmQoMSk7XG5cbiRndWVzdC0+dG9BcnJheSgpO1xuIiwiaGFzaCI6ImVsb3F1ZW50LXNlcmlhbGl6YXRpb24taGlkaW5nLWF0dHJpYnV0ZXMtZnJvbS1qc29uIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">&lt;?php\n\nnamespace <span class="hljs-type">App</span>;\n\nuse <span class="hljs-type">Illuminate</span>\\<span class="hljs-type">Database</span>\\<span class="hljs-type">Eloquent</span>\\<span class="hljs-type">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span>\n{\n    <span class="hljs-comment">/**\n     * The attributes that should be visible in arrays.\n     *\n     * @var array\n     */</span>\n    <span class="hljs-keyword">protected</span> $visible = [<span class="hljs-symbol">\'first_nam</span>e\', <span class="hljs-symbol">\'last_nam</span>e\'];\n}</code></pre>\n  \n          <p><a name="temporarily-modifying-attribute-visibility"></a></p>\n          <h4>\n            <a href="#temporarily-modifying-attribute-visibility">\n              Temporarily Modifying Attribute Visibility\n            </a>\n          </h4><p>If you would like to make some typically hidden attributes visible on a given model instance, you may use the <code>makeVisible</code> method. The <code>makeVisible</code> method returns the model instance for convenient method chaining:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> <span class="hljs-variable">$user</span>-&gt;makeVisible(<span class="hljs-string">\'attribute\'</span>)-&gt;toArray();</code></pre>\n  <p>Likewise, if you would like to make some typically visible attributes hidden on a given model instance, you may use the <code>makeHidden</code> method.</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> <span class="hljs-variable">$user</span>-&gt;makeHidden(<span class="hljs-string">\'attribute\'</span>)-&gt;toArray();</code></pre>\n  <p><a name="appending-values-to-json"></a></p>\n\n          <p><a name="appending-values-to-json"></a></p>\n          <h2>\n            <a href="#appending-values-to-json">\n              Appending Values To JSON\n            </a>\n          </h2><p>Occasionally, when casting models to an array or JSON, you may wish to add attributes that do not have a corresponding column in your database. To do so, first define an <router-link to="/docs/eloquent-mutators">accessor</router-link> for the value:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2d1ZXN0cycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ2ZpcnN0X25hbWUnKTtcbiAgICAkdGFibGUtPnN0cmluZygncGFzc3dvcmQnKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5jbGFzcyBHdWVzdCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsnZmlyc3RfbmFtZScsICdwYXNzd29yZCddO1xuXG4gICAgcHJvdGVjdGVkICRhcHBlbmRzID0gWydpc19hZG1pbiddO1xuXG4gICAgcHVibGljIGZ1bmN0aW9uIGdldElzQWRtaW5BdHRyaWJ1dGUoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuXG5HdWVzdDo6Y3JlYXRlKFsnZmlyc3RfbmFtZScgPT4gJ01hcmNlbCcsICdwYXNzd29yZCcgPT4gJ3NlY3JldCddKTtcblxuJGd1ZXN0ID0gR3Vlc3Q6OmZpbmQoMSk7XG5cbiRndWVzdC0+dG9BcnJheSgpXG4iLCJoYXNoIjoiZWxvcXVlbnQtc2VyaWFsaXphdGlvbi1hcHBlbmRpbmctdmFsdWVzLXRvLWpzb24ifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Get the administrator flag for the user.\n     *\n     * <span class="hljs-doctag">@return</span> bool\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getIsAdminAttribute</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;attributes[<span class="hljs-string">\'admin\'</span>] === <span class="hljs-string">\'yes\'</span>;\n    }\n}</span></code></pre>\n  <p>After creating the accessor, add the attribute name to the <code>appends</code> property on the model. Note that attribute names are typically referenced in &quot;snake case&quot;, even though the accessor is defined using &quot;camel case&quot;:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">&lt;?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    /**\n     * The accessors to append to the model\'s<span class="hljs-built_in"> array </span>form.\n     *\n     * @var<span class="hljs-built_in"> array\n</span>     */\n   <span class="hljs-keyword"> protected</span> $appends = [\'is_admin\'];\n}</code></pre>\n  <p>Once the attribute has been added to the <code>appends</code> list, it will be included in both the model&#39;s array and JSON representations. Attributes in the <code>appends</code> array will also respect the <code>visible</code> and <code>hidden</code> settings configured on the model.</p>\n\n          <p><a name="appending-at-run-time"></a></p>\n          <h4>\n            <a href="#appending-at-run-time">\n              Appending At Run Time\n            </a>\n          </h4><p>You may instruct a single model instance to append attributes using the <code>append</code> method. Or, you may use the <code>setAppends</code> method to override the entire array of appended properties for a given model instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> <span class="hljs-variable">$user</span>-&gt;append(<span class="hljs-string">\'is_admin\'</span>)-&gt;toArray();\n\n<span class="hljs-keyword">return</span> <span class="hljs-variable">$user</span>-&gt;setAppends([<span class="hljs-string">\'is_admin\'</span>])-&gt;toArray();</code></pre>\n  <p><a name="date-serialization"></a></p>\n\n          <p><a name="date-serialization"></a></p>\n          <h2>\n            <a href="#date-serialization">\n              Date Serialization\n            </a>\n          </h2>\n          <p><a name="customizing-the-date-format-per-attribute"></a></p>\n          <h4>\n            <a href="#customizing-the-date-format-per-attribute">\n              Customizing The Date Format Per Attribute\n            </a>\n          </h4><p>You may customize the serialization format of individual Eloquent date attributes by specifying the date format in the <router-link to="/docs/eloquent-mutators#attribute-casting">cast declaration</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">protected</span> $casts = [\n    <span class="hljs-string">\'birthday\'</span> =&gt; <span class="hljs-string">\'date:Y-m-d\'</span>,\n    <span class="hljs-string">\'joined_at\'</span> =&gt; <span class="hljs-string">\'datetime:Y-m-d H:00\'</span>,\n];</code></pre>\n  '},7016:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="url-generation"></a></p>\n          <h1>\n            <a href="#url-generation">\n              URL Generation\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#the-basics">The Basics</a><ul>\n<li><a href="#generating-basic-urls">Generating Basic URLs</a></li>\n<li><a href="#accessing-the-current-url">Accessing The Current URL</a></li>\n</ul>\n</li>\n<li><a href="#urls-for-named-routes">URLs For Named Routes</a><ul>\n<li><a href="#signed-urls">Signed URLs</a></li>\n</ul>\n</li>\n<li><a href="#urls-for-controller-actions">URLs For Controller Actions</a></li>\n<li><a href="#default-values">Default Values</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Laravel provides several helpers to assist you in generating URLs for your application. These are mainly helpful when building links in your templates and API responses, or when generating redirect responses to another part of your application.</p>\n<p><a name="the-basics"></a></p>\n\n          <p><a name="the-basics"></a></p>\n          <h2>\n            <a href="#the-basics">\n              The Basics\n            </a>\n          </h2><p><a name="generating-basic-urls"></a></p>\n\n          <p><a name="generating-basic-urls"></a></p>\n          <h3>\n            <a href="#generating-basic-urls">\n              Generating Basic URLs\n            </a>\n          </h3><p>The <code>url</code> helper may be used to generate arbitrary URLs for your application. The generated URL will automatically use the scheme (HTTP or HTTPS) and host from the current request:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IkFwcFxcVXNlcjo6Y3JlYXRlKFtcbiAgICAnbmFtZScgPT4gJ01hcmNlbCcsXG4gICAgJ2VtYWlsJyA9PiAnbWFyY2VsQGJleW9uZGNvLmRlJyxcbiAgICAncGFzc3dvcmQnID0+ICdzZWNyZXQnLFxuXSk7XG5cbiR1c2VyID0gQXBwXFxVc2VyOjpmaW5kKDEpO1xuXG5lY2hvIHVybChcIi91c2Vycy97JHVzZXItPmlkfVwiKTsiLCJoYXNoIjoidXJscy1nZW5lcmF0aW5nLWJhc2ljLXVybHMifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$post</span> = App\\Post::find(<span class="hljs-number">1</span>);\n\necho url(<span class="hljs-string">"/posts/{$post-&gt;id}"</span>);\n\n<span class="hljs-regexp">//</span> http:<span class="hljs-regexp">//</span>example.com<span class="hljs-regexp">/posts/</span><span class="hljs-number">1</span></code></pre>\n  <p><a name="accessing-the-current-url"></a></p>\n\n          <p><a name="accessing-the-current-url"></a></p>\n          <h3>\n            <a href="#accessing-the-current-url">\n              Accessing The Current URL\n            </a>\n          </h3><p>If no path is provided to the <code>url</code> helper, a <code>Illuminate\\Routing\\UrlGenerator</code> instance is returned, allowing you to access information about the current URL:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImVjaG8gdXJsKCktPmN1cnJlbnQoKTsiLCJoYXNoIjoidXJscy1hY2Nlc3NpbmctdGhlLWN1cnJlbnQtdXJsIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Get the current URL without the query string...</span>\n<span class="hljs-selector-tag">echo</span> <span class="hljs-selector-tag">url</span>()<span class="hljs-selector-tag">-</span>&gt;<span class="hljs-selector-tag">current</span>();\n\n<span class="hljs-comment">// Get the current URL including the query string...</span>\n<span class="hljs-selector-tag">echo</span> <span class="hljs-selector-tag">url</span>()<span class="hljs-selector-tag">-</span>&gt;<span class="hljs-selector-tag">full</span>();\n\n<span class="hljs-comment">// Get the full URL for the previous request...</span>\n<span class="hljs-selector-tag">echo</span> <span class="hljs-selector-tag">url</span>()<span class="hljs-selector-tag">-</span>&gt;<span class="hljs-selector-tag">previous</span>();</code></pre>\n  <p>Each of these methods may also be accessed via the <code>URL</code> <router-link to="/docs/facades">facade</router-link>:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlXFxTdXBwb3J0XFxGYWNhZGVzXFxVUkw7XG5cbmVjaG8gVVJMOjpjdXJyZW50KCk7IiwiaGFzaCI6InVybHMtYWNjZXNzaW5nLXRoZS1jdXJyZW50LXVybCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">URL</span>;\n\n<span class="hljs-keyword">echo</span> URL::current();</code></pre>\n  <p><a name="urls-for-named-routes"></a></p>\n\n          <p><a name="urls-for-named-routes"></a></p>\n          <h2>\n            <a href="#urls-for-named-routes">\n              URLs For Named Routes\n            </a>\n          </h2><p>The <code>route</code> helper may be used to generate URLs to named routes. Named routes allow you to generate URLs without being coupled to the actual URL defined on the route. Therefore, if the route&#39;s URL changes, no changes need to be made to your <code>route</code> function calls. For example, imagine your application contains a route defined like the following:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlJvdXRlOjpnZXQoJy9wb3N0L3twb3N0fScsIGZ1bmN0aW9uICgpIHtcbiAgICAvL1xufSktPm5hbWUoJ3Bvc3Quc2hvdycpO1xuXG4vLyBPbmx5IG5lZWRlZCB0byBkeW5hbWljYWxseSBhZGQgdGhlIHJvdXRlXG5Sb3V0ZTo6Z2V0Um91dGVzKCktPnJlZnJlc2hOYW1lTG9va3VwcygpO1xuXG5lY2hvIHJvdXRlKCdwb3N0LnNob3cnLCBbJ3Bvc3QnID0+IDFdKTtcbiIsImhhc2giOiJ1cmxzLXVybHMtZm9yLW5hbWVkLXJvdXRlcyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'/post/{post}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">//</span>\n})-&gt;name(<span class="hljs-string">\'post.show\'</span>);</code></pre>\n  <p>To generate a URL to this route, you may use the <code>route</code> helper like so:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">echo route(<span class="hljs-string">\'post.show\'</span>, [<span class="hljs-string">\'post\'</span> =&gt; <span class="hljs-number">1</span>]);\n\n<span class="hljs-regexp">//</span> http:<span class="hljs-regexp">//</span>example.com<span class="hljs-regexp">/post/</span><span class="hljs-number">1</span></code></pre>\n  <p>You will often be generating URLs using the primary key of <router-link to="/docs/eloquent">Eloquent models</router-link>. For this reason, you may pass Eloquent models as parameter values. The <code>route</code> helper will automatically extract the model&#39;s primary key:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">echo</span> route(<span class="hljs-string">\'post.show\'</span>, [<span class="hljs-string">\'post\'</span> =&gt; $post]);</code></pre>\n  <p>The <code>route</code> helper may also be used to generate URLs for routes with multiple parameters:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlJvdXRlOjpnZXQoJy9wb3N0L3twb3N0fS9jb21tZW50L3tjb21tZW50fScsIGZ1bmN0aW9uICgpIHtcbiAgICAvL1xufSktPm5hbWUoJ2NvbW1lbnQuc2hvdycpO1xuXG4vLyBPbmx5IG5lZWRlZCB0byBkeW5hbWljYWxseSBhZGQgdGhlIHJvdXRlXG5Sb3V0ZTo6Z2V0Um91dGVzKCktPnJlZnJlc2hOYW1lTG9va3VwcygpO1xuXG5lY2hvIHJvdXRlKCdjb21tZW50LnNob3cnLCBbJ3Bvc3QnID0+IDEsICdjb21tZW50JyA9PiAzXSk7XG4iLCJoYXNoIjoidXJscy11cmxzLWZvci1uYW1lZC1yb3V0ZXMifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'/post/{post}/comment/{comment}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">//</span>\n})-&gt;name(<span class="hljs-string">\'comment.show\'</span>);\n\n<span class="hljs-keyword">echo</span> route(<span class="hljs-string">\'comment.show\'</span>, [<span class="hljs-string">\'post\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">\'comment\'</span> =&gt; <span class="hljs-number">3</span>]);\n\n<span class="hljs-comment">// http://example.com/post/1/comment/3</span></code></pre>\n  <p><a name="signed-urls"></a></p>\n\n          <p><a name="signed-urls"></a></p>\n          <h3>\n            <a href="#signed-urls">\n              Signed URLs\n            </a>\n          </h3><p>Laravel allows you to easily create &quot;signed&quot; URLs to named routes. These URLs have a &quot;signature&quot; hash appended to the query string which allows Laravel to verify that the URL has not been modified since it was created. Signed URLs are especially useful for routes that are publicly accessible yet need a layer of protection against URL manipulation.</p>\n<p>For example, you might use signed URLs to implement a public &quot;unsubscribe&quot; link that is emailed to your customers. To create a signed URL to a named route, use the <code>signedRoute</code> method of the <code>URL</code> facade:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">URL</span>;\n\n<span class="hljs-keyword">return</span> URL::signedRoute(<span class="hljs-string">\'unsubscribe\'</span>, [<span class="hljs-string">\'user\'</span> =&gt; <span class="hljs-number">1</span>]);</code></pre>\n  <p>If you would like to generate a temporary signed route URL that expires, you may use the <code>temporarySignedRoute</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">URL</span>;\n\n<span class="hljs-keyword">return</span> URL::temporarySignedRoute(\n    <span class="hljs-string">\'unsubscribe\'</span>, now()-&gt;addMinutes(<span class="hljs-number">30</span>), [<span class="hljs-string">\'user\'</span> =&gt; <span class="hljs-number">1</span>]\n);</code></pre>\n  \n          <p><a name="validating-signed-route-requests"></a></p>\n          <h4>\n            <a href="#validating-signed-route-requests">\n              Validating Signed Route Requests\n            </a>\n          </h4><p>To verify that an incoming request has a valid signature, you should call the <code>hasValidSignature</code> method on the incoming <code>Request</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Request</span>;\n\nRoute::get(<span class="hljs-string">\'/unsubscribe/{user}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Request $request)</span> </span>{\n    <span class="hljs-keyword">if</span> (! $request-&gt;hasValidSignature()) {\n        abort(<span class="hljs-number">401</span>);\n    }\n\n    <span class="hljs-comment">// ...</span>\n})-&gt;name(<span class="hljs-string">\'unsubscribe\'</span>);</code></pre>\n  <p>Alternatively, you may assign the <code>Illuminate\\Routing\\Middleware\\ValidateSignature</code> middleware to the route. If it is not already present, you should assign this middleware a key in your HTTP kernel&#39;s <code>routeMiddleware</code> array:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">/**\n * The application\'s route middleware.\n *\n * These middleware may be assigned to groups<span class="hljs-built_in"> or </span>used individually.\n *\n * @var<span class="hljs-built_in"> array\n</span> */<span class="hljs-keyword">\nprotected</span> $routeMiddleware = [\n    \'signed\' =&gt; \\Illuminate\\Routing\\Middleware\\ValidateSignature::class,\n];</code></pre>\n  <p>Once you have registered the middleware in your kernel, you may attach it to a route. If the incoming request does not have a valid signature, the middleware will automatically return a <code>403</code> error response:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::post(<span class="hljs-string">\'/unsubscribe/{user}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Request $request)</span> </span>{\n    <span class="hljs-comment">// ...</span>\n})-&gt;name(<span class="hljs-string">\'unsubscribe\'</span>)-&gt;middleware(<span class="hljs-string">\'signed\'</span>);</code></pre>\n  <p><a name="urls-for-controller-actions"></a></p>\n\n          <p><a name="urls-for-controller-actions"></a></p>\n          <h2>\n            <a href="#urls-for-controller-actions">\n              URLs For Controller Actions\n            </a>\n          </h2><p>The <code>action</code> function generates a URL for the given controller action. You do not need to pass the full namespace of the controller. Instead, pass the controller class name relative to the <code>App\\Http\\Controllers</code> namespace:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">$url</span> = action(<span class="hljs-string">\'HomeController@index\'</span>);</code></pre>\n  <p>You may also reference actions with a &quot;callable&quot; array syntax:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">HomeController</span>;\n\n$url = action([HomeController::class, <span class="hljs-string">\'index\'</span>]);</code></pre>\n  <p>If the controller method accepts route parameters, you may pass them as the second argument to the function:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$url = action(<span class="hljs-string">\'UserController@profile\'</span>, [<span class="hljs-string">\'id\'</span> =&gt; <span class="hljs-number">1</span>]);</code></pre>\n  <p><a name="default-values"></a></p>\n\n          <p><a name="default-values"></a></p>\n          <h2>\n            <a href="#default-values">\n              Default Values\n            </a>\n          </h2><p>For some applications, you may wish to specify request-wide default values for certain URL parameters. For example, imagine many of your routes define a <code>{locale}</code> parameter:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'/{locale}/posts\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">//</span>\n})-&gt;name(<span class="hljs-string">\'post.index\'</span>);</code></pre>\n  <p>It is cumbersome to always pass the <code>locale</code> every time you call the <code>route</code> helper. So, you may use the <code>URL::defaults</code> method to define a default value for this parameter that will always be applied during the current request. You may wish to call this method from a <router-link to="/docs/middleware#assigning-middleware-to-routes">route middleware</router-link> so that you have access to the current request:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Middleware</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Closure</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">URL</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SetDefaultLocaleForUrls</span>\n</span>{\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">($request, Closure $next)</span>\n    </span>{\n        URL::defaults([<span class="hljs-string">\'locale\'</span> =&gt; $request-&gt;user()-&gt;locale]);\n\n        <span class="hljs-keyword">return</span> $next($request);\n    }\n}</span></code></pre>\n  <p>Once the default value for the <code>locale</code> parameter has been set, you are no longer required to pass its value when generating URLs via the <code>route</code> helper.</p>\n'},7094:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="task-scheduling"></a></p>\n          <h1>\n            <a href="#task-scheduling">\n              Task Scheduling\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#defining-schedules">Defining Schedules</a><ul>\n<li><a href="#scheduling-artisan-commands">Scheduling Artisan Commands</a></li>\n<li><a href="#scheduling-queued-jobs">Scheduling Queued Jobs</a></li>\n<li><a href="#scheduling-shell-commands">Scheduling Shell Commands</a></li>\n<li><a href="#schedule-frequency-options">Schedule Frequency Options</a></li>\n<li><a href="#timezones">Timezones</a></li>\n<li><a href="#preventing-task-overlaps">Preventing Task Overlaps</a></li>\n<li><a href="#running-tasks-on-one-server">Running Tasks On One Server</a></li>\n<li><a href="#background-tasks">Background Tasks</a></li>\n<li><a href="#maintenance-mode">Maintenance Mode</a></li>\n</ul>\n</li>\n<li><a href="#task-output">Task Output</a></li>\n<li><a href="#task-hooks">Task Hooks</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>In the past, you may have generated a Cron entry for each task you needed to schedule on your server. However, this can quickly become a pain, because your task schedule is no longer in source control and you must SSH into your server to add additional Cron entries.</p>\n<p>Laravel&#39;s command scheduler allows you to fluently and expressively define your command schedule within Laravel itself. When using the scheduler, only a single Cron entry is needed on your server. Your task schedule is defined in the <code>app/Console/Kernel.php</code> file&#39;s <code>schedule</code> method. To help you get started, a simple example is defined within the method.</p>\n\n          <p><a name="starting-the-scheduler"></a></p>\n          <h3>\n            <a href="#starting-the-scheduler">\n              Starting The Scheduler\n            </a>\n          </h3><p>When using the scheduler, you only need to add the following Cron entry to your server. If you do not know how to add Cron entries to your server, consider using a service such as <router-link to="https://forge.laravel.com">Laravel Forge</router-link> which can manage the Cron entries for you:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">* * * * * cd /path-to-your-project &amp;&amp; php artisan schedule:run &gt;&gt; /dev/<span class="hljs-literal">null</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span></code></pre>\n  <p>This Cron will call the Laravel command scheduler every minute. When the <code>schedule:run</code> command is executed, Laravel will evaluate your scheduled tasks and runs the tasks that are due.</p>\n<p><a name="defining-schedules"></a></p>\n\n          <p><a name="defining-schedules"></a></p>\n          <h2>\n            <a href="#defining-schedules">\n              Defining Schedules\n            </a>\n          </h2><p>You may define all of your scheduled tasks in the <code>schedule</code> method of the <code>App\\Console\\Kernel</code> class. To get started, let&#39;s look at an example of scheduling a task. In this example, we will schedule a <code>Closure</code> to be called every day at midnight. Within the <code>Closure</code> we will execute a database query to clear a table:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Console</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Console</span>\\<span class="hljs-title">Scheduling</span>\\<span class="hljs-title">Schedule</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Console</span>\\<span class="hljs-title">Kernel</span> <span class="hljs-title">as</span> <span class="hljs-title">ConsoleKernel</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">DB</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Kernel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsoleKernel</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The Artisan commands provided by your application.\n     *\n     * <span class="hljs-doctag">@var</span> array\n     */</span>\n    <span class="hljs-keyword">protected</span> $commands = [\n        <span class="hljs-comment">//</span>\n    ];\n\n    <span class="hljs-comment">/**\n     * Define the application\'s command schedule.\n     *\n     * <span class="hljs-doctag">@param</span>  \\Illuminate\\Console\\Scheduling\\Schedule  $schedule\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">schedule</span><span class="hljs-params">(Schedule $schedule)</span>\n    </span>{\n        $schedule-&gt;call(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n            DB::table(<span class="hljs-string">\'recent_users\'</span>)-&gt;delete();\n        })-&gt;daily();\n    }\n}</span></code></pre>\n  <p>In addition to scheduling using Closures, you may also use <router-link to="https://secure.php.net/manual/en/language.oop5.magic.php#object.invoke">invokable objects</router-link>. Invokable objects are simple PHP classes that contain an <code>__invoke</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$schedule-&gt;call<span class="hljs-function"><span class="hljs-params">(<span class="hljs-keyword">new</span> DeleteRecentUsers)</span>-&gt;</span>daily();</code></pre>\n  <p><a name="scheduling-artisan-commands"></a></p>\n\n          <p><a name="scheduling-artisan-commands"></a></p>\n          <h3>\n            <a href="#scheduling-artisan-commands">\n              Scheduling Artisan Commands\n            </a>\n          </h3><p>In addition to scheduling Closure calls, you may also schedule <router-link to="/docs/{{version}}/artisan">Artisan commands</router-link> and operating system commands. For example, you may use the <code>command</code> method to schedule an Artisan command using either the command&#39;s name or class:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$schedule</span>-&gt;command(<span class="hljs-string">\'emails:send Taylor --force\'</span>)-&gt;daily();\n\n<span class="hljs-variable">$schedule</span>-&gt;command(EmailsCommand::class, [<span class="hljs-string">\'Taylor\'</span>, <span class="hljs-string">\'--force\'</span>])-&gt;daily();</code></pre>\n  <p><a name="scheduling-queued-jobs"></a></p>\n\n          <p><a name="scheduling-queued-jobs"></a></p>\n          <h3>\n            <a href="#scheduling-queued-jobs">\n              Scheduling Queued Jobs\n            </a>\n          </h3><p>The <code>job</code> method may be used to schedule a <router-link to="/docs/{{version}}/queues">queued job</router-link>. This method provides a convenient way to schedule jobs without using the <code>call</code> method to manually create Closures to queue the job:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$schedule-&gt;job(<span class="hljs-keyword">new</span> Heartbeat)-&gt;everyFiveMinutes();\n\n<span class="hljs-comment">// Dispatch the job to the "heartbeats" queue...</span>\n$schedule-&gt;job(<span class="hljs-keyword">new</span> Heartbeat, <span class="hljs-string">\'heartbeats\'</span>)-&gt;everyFiveMinutes();</code></pre>\n  <p><a name="scheduling-shell-commands"></a></p>\n\n          <p><a name="scheduling-shell-commands"></a></p>\n          <h3>\n            <a href="#scheduling-shell-commands">\n              Scheduling Shell Commands\n            </a>\n          </h3><p>The <code>exec</code> method may be used to issue a command to the operating system:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$schedule-&gt;exec(\'<span class="hljs-keyword">node</span> <span class="hljs-title">/home</span>/forge/script.js\')-&gt;daily();</code></pre>\n  <p><a name="schedule-frequency-options"></a></p>\n\n          <p><a name="schedule-frequency-options"></a></p>\n          <h3>\n            <a href="#schedule-frequency-options">\n              Schedule Frequency Options\n            </a>\n          </h3><p>There are a variety of schedules you may assign to your task:</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-&gt;cron(&#39;* * * * *&#39;);</code></td>\n<td>Run the task on a custom Cron schedule</td>\n</tr>\n<tr>\n<td><code>-&gt;everyMinute();</code></td>\n<td>Run the task every minute</td>\n</tr>\n<tr>\n<td><code>-&gt;everyFiveMinutes();</code></td>\n<td>Run the task every five minutes</td>\n</tr>\n<tr>\n<td><code>-&gt;everyTenMinutes();</code></td>\n<td>Run the task every ten minutes</td>\n</tr>\n<tr>\n<td><code>-&gt;everyFifteenMinutes();</code></td>\n<td>Run the task every fifteen minutes</td>\n</tr>\n<tr>\n<td><code>-&gt;everyThirtyMinutes();</code></td>\n<td>Run the task every thirty minutes</td>\n</tr>\n<tr>\n<td><code>-&gt;hourly();</code></td>\n<td>Run the task every hour</td>\n</tr>\n<tr>\n<td><code>-&gt;hourlyAt(17);</code></td>\n<td>Run the task every hour at 17 minutes past the hour</td>\n</tr>\n<tr>\n<td><code>-&gt;daily();</code></td>\n<td>Run the task every day at midnight</td>\n</tr>\n<tr>\n<td><code>-&gt;dailyAt(&#39;13:00&#39;);</code></td>\n<td>Run the task every day at 13:00</td>\n</tr>\n<tr>\n<td><code>-&gt;twiceDaily(1, 13);</code></td>\n<td>Run the task daily at 1:00 &amp; 13:00</td>\n</tr>\n<tr>\n<td><code>-&gt;weekly();</code></td>\n<td>Run the task every sunday at 00:00</td>\n</tr>\n<tr>\n<td><code>-&gt;weeklyOn(1, &#39;8:00&#39;);</code></td>\n<td>Run the task every week on Monday at 8:00</td>\n</tr>\n<tr>\n<td><code>-&gt;monthly();</code></td>\n<td>Run the task on the first day of every month at 00:00</td>\n</tr>\n<tr>\n<td><code>-&gt;monthlyOn(4, &#39;15:00&#39;);</code></td>\n<td>Run the task every month on the 4th at 15:00</td>\n</tr>\n<tr>\n<td><code>-&gt;quarterly();</code></td>\n<td>Run the task on the first day of every quarter at 00:00</td>\n</tr>\n<tr>\n<td><code>-&gt;yearly();</code></td>\n<td>Run the task on the first day of every year at 00:00</td>\n</tr>\n<tr>\n<td><code>-&gt;timezone(&#39;America/New_York&#39;);</code></td>\n<td>Set the timezone</td>\n</tr>\n</tbody></table>\n<p>These methods may be combined with additional constraints to create even more finely tuned schedules that only run on certain days of the week. For example, to schedule a command to run weekly on Monday:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Run once per week on Monday at 1 PM...</span>\n$schedule-&gt;call(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">//</span>\n})-&gt;weekly()-&gt;mondays()-&gt;at(<span class="hljs-string">\'13:00\'</span>);\n\n<span class="hljs-comment">// Run hourly from 8 AM to 5 PM on weekdays...</span>\n$schedule-&gt;command(<span class="hljs-string">\'foo\'</span>)\n          -&gt;weekdays()\n          -&gt;hourly()\n          -&gt;timezone(<span class="hljs-string">\'America/Chicago\'</span>)\n          -&gt;between(<span class="hljs-string">\'8:00\'</span>, <span class="hljs-string">\'17:00\'</span>);</code></pre>\n  <p>Below is a list of the additional schedule constraints:</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-&gt;weekdays();</code></td>\n<td>Limit the task to weekdays</td>\n</tr>\n<tr>\n<td><code>-&gt;weekends();</code></td>\n<td>Limit the task to weekends</td>\n</tr>\n<tr>\n<td><code>-&gt;sundays();</code></td>\n<td>Limit the task to Sunday</td>\n</tr>\n<tr>\n<td><code>-&gt;mondays();</code></td>\n<td>Limit the task to Monday</td>\n</tr>\n<tr>\n<td><code>-&gt;tuesdays();</code></td>\n<td>Limit the task to Tuesday</td>\n</tr>\n<tr>\n<td><code>-&gt;wednesdays();</code></td>\n<td>Limit the task to Wednesday</td>\n</tr>\n<tr>\n<td><code>-&gt;thursdays();</code></td>\n<td>Limit the task to Thursday</td>\n</tr>\n<tr>\n<td><code>-&gt;fridays();</code></td>\n<td>Limit the task to Friday</td>\n</tr>\n<tr>\n<td><code>-&gt;saturdays();</code></td>\n<td>Limit the task to Saturday</td>\n</tr>\n<tr>\n<td><code>-&gt;between($start, $end);</code></td>\n<td>Limit the task to run between start and end times</td>\n</tr>\n<tr>\n<td><code>-&gt;when(Closure);</code></td>\n<td>Limit the task based on a truth test</td>\n</tr>\n<tr>\n<td><code>-&gt;environments($env);</code></td>\n<td>Limit the task to specific environments</td>\n</tr>\n</tbody></table>\n\n          <p><a name="between-time-constraints"></a></p>\n          <h4>\n            <a href="#between-time-constraints">\n              Between Time Constraints\n            </a>\n          </h4><p>The <code>between</code> method may be used to limit the execution of a task based on the time of day:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$schedule-&gt;command<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'reminders:send\'</span>)</span>\n                    -&gt;</span>hourly<span class="hljs-function"><span class="hljs-params">()</span>\n                    -&gt;</span>between(<span class="hljs-string">\'7:00\'</span>, <span class="hljs-string">\'22:00\'</span>);</code></pre>\n  <p>Similarly, the <code>unlessBetween</code> method can be used to exclude the execution of a task for a period of time:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$schedule-&gt;command<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'reminders:send\'</span>)</span>\n                    -&gt;</span>hourly<span class="hljs-function"><span class="hljs-params">()</span>\n                    -&gt;</span>unlessBetween(<span class="hljs-string">\'23:00\'</span>, <span class="hljs-string">\'4:00\'</span>);</code></pre>\n  \n          <p><a name="truth-test-constraints"></a></p>\n          <h4>\n            <a href="#truth-test-constraints">\n              Truth Test Constraints\n            </a>\n          </h4><p>The <code>when</code> method may be used to limit the execution of a task based on the result of a given truth test. In other words, if the given <code>Closure</code> returns <code>true</code>, the task will execute as long as no other constraining conditions prevent the task from running:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$schedule-&gt;command<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'emails:send\'</span>)</span>-&gt;</span>daily<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span><span class="hljs-keyword">when</span>(<span class="hljs-keyword">function</span> () {\n    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;\n});</code></pre>\n  <p>The <code>skip</code> method may be seen as the inverse of <code>when</code>. If the <code>skip</code> method returns <code>true</code>, the scheduled task will not be executed:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$schedule-&gt;command<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'emails:send\'</span>)</span>-&gt;</span>daily<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>skip(<span class="hljs-keyword">function</span> () {\n    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;\n});</code></pre>\n  <p>When using chained <code>when</code> methods, the scheduled command will only execute if all <code>when</code> conditions return <code>true</code>.</p>\n\n          <p><a name="environment-constraints"></a></p>\n          <h4>\n            <a href="#environment-constraints">\n              Environment Constraints\n            </a>\n          </h4><p>The <code>environments</code> method may be used to execute tasks only on the given environments:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$schedule-&gt;command<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'emails:send\'</span>)</span>\n            -&gt;</span>daily<span class="hljs-function"><span class="hljs-params">()</span>\n            -&gt;</span>environments([<span class="hljs-string">\'staging\'</span>, <span class="hljs-string">\'production\'</span>]);</code></pre>\n  <p><a name="timezones"></a></p>\n\n          <p><a name="timezones"></a></p>\n          <h3>\n            <a href="#timezones">\n              Timezones\n            </a>\n          </h3><p>Using the <code>timezone</code> method, you may specify that a scheduled task&#39;s time should be interpreted within a given timezone:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$schedule-&gt;command<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'report:generate\'</span>)</span>\n         -&gt;</span>timezone<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'America/New_York\'</span>)</span>\n         -&gt;</span>at(<span class="hljs-string">\'02:00\'</span>)</code></pre>\n  <p>If you are assigning the same timezone to all of your scheduled tasks, you may wish to define a <code>scheduleTimezone</code> method in your <code>app/Console/Kernel.php</code> file. This method should return the default timezone that should be assigned to all scheduled tasks:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the timezone that should be used by default for scheduled events.\n *\n * <span class="hljs-doctag">@return</span> \\DateTimeZone|string|null\n */</span>\n<span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">scheduleTimezone</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-string">\'America/Chicago\'</span>;\n}</code></pre>\n  <blockquote>\n<p>{note} Remember that some timezones utilize daylight savings time. When daylight saving time changes occur, your scheduled task may run twice or even not run at all. For this reason, we recommend avoiding timezone scheduling when possible.</p>\n</blockquote>\n<p><a name="preventing-task-overlaps"></a></p>\n\n          <p><a name="preventing-task-overlaps"></a></p>\n          <h3>\n            <a href="#preventing-task-overlaps">\n              Preventing Task Overlaps\n            </a>\n          </h3><p>By default, scheduled tasks will be run even if the previous instance of the task is still running. To prevent this, you may use the <code>withoutOverlapping</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$schedule</span>-&gt;command(<span class="hljs-string">\'emails:send\'</span>)-&gt;withoutOverlapping();</code></pre>\n  <p>In this example, the <code>emails:send</code> <router-link to="/docs/{{version}}/artisan">Artisan command</router-link> will be run every minute if it is not already running. The <code>withoutOverlapping</code> method is especially useful if you have tasks that vary drastically in their execution time, preventing you from predicting exactly how long a given task will take.</p>\n<p>If needed, you may specify how many minutes must pass before the &quot;without overlapping&quot; lock expires. By default, the lock will expire after 24 hours:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$schedule</span>-&gt;command(<span class="hljs-string">\'emails:send\'</span>)-&gt;withoutOverlapping(<span class="hljs-number">10</span>);</code></pre>\n  <p><a name="running-tasks-on-one-server"></a></p>\n\n          <p><a name="running-tasks-on-one-server"></a></p>\n          <h3>\n            <a href="#running-tasks-on-one-server">\n              Running Tasks On One Server\n            </a>\n          </h3><blockquote>\n<p>{note} To utilize this feature, your application must be using the <code>memcached</code> or <code>redis</code> cache driver as your application&#39;s default cache driver. In addition, all servers must be communicating with the same central cache server.</p>\n</blockquote>\n<p>If your application is running on multiple servers, you may limit a scheduled job to only execute on a single server. For instance, assume you have a scheduled task that generates a new report every Friday night. If the task scheduler is running on three worker servers, the scheduled task will run on all three servers and generate the report three times. Not good!</p>\n<p>To indicate that the task should run on only one server, use the <code>onOneServer</code> method when defining the scheduled task. The first server to obtain the task will secure an atomic lock on the job to prevent other servers from running the same task at the same time:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$schedule-&gt;command<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'report:generate\'</span>)</span>\n                -&gt;</span>fridays<span class="hljs-function"><span class="hljs-params">()</span>\n                -&gt;</span>at<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'17:00\'</span>)</span>\n                -&gt;</span>onOneServer();</code></pre>\n  <p><a name="background-tasks"></a></p>\n\n          <p><a name="background-tasks"></a></p>\n          <h3>\n            <a href="#background-tasks">\n              Background Tasks\n            </a>\n          </h3><p>By default, multiple commands scheduled at the same time will execute sequentially. If you have long-running commands, this may cause subsequent commands to start much later than anticipated. If you would like to run commands in the background so that they may all run simultaneously, you may use the <code>runInBackground</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$schedule-&gt;command<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'analytics:report\'</span>)</span>\n         -&gt;</span>daily<span class="hljs-function"><span class="hljs-params">()</span>\n         -&gt;</span>runInBackground();</code></pre>\n  <blockquote>\n<p>{note} The <code>runInBackground</code> method may only be used when scheduling tasks via the <code>command</code> and <code>exec</code> methods.</p>\n</blockquote>\n<p><a name="maintenance-mode"></a></p>\n\n          <p><a name="maintenance-mode"></a></p>\n          <h3>\n            <a href="#maintenance-mode">\n              Maintenance Mode\n            </a>\n          </h3><p>Laravel&#39;s scheduled tasks will not run when Laravel is in <router-link to="/docs/{{version}}/configuration#maintenance-mode">maintenance mode</router-link>, since we don&#39;t want your tasks to interfere with any unfinished maintenance you may be performing on your server. However, if you would like to force a task to run even in maintenance mode, you may use the <code>evenInMaintenanceMode</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$schedule</span>-&gt;command(<span class="hljs-string">\'emails:send\'</span>)-&gt;evenInMaintenanceMode();</code></pre>\n  <p><a name="task-output"></a></p>\n\n          <p><a name="task-output"></a></p>\n          <h2>\n            <a href="#task-output">\n              Task Output\n            </a>\n          </h2><p>The Laravel scheduler provides several convenient methods for working with the output generated by scheduled tasks. First, using the <code>sendOutputTo</code> method, you may send the output to a file for later inspection:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$schedule-&gt;command<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'emails:send\'</span>)</span>\n         -&gt;</span>daily<span class="hljs-function"><span class="hljs-params">()</span>\n         -&gt;</span>sendOutputTo($filePath);</code></pre>\n  <p>If you would like to append the output to a given file, you may use the <code>appendOutputTo</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$schedule-&gt;command<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'emails:send\'</span>)</span>\n         -&gt;</span>daily<span class="hljs-function"><span class="hljs-params">()</span>\n         -&gt;</span>appendOutputTo($filePath);</code></pre>\n  <p>Using the <code>emailOutputTo</code> method, you may e-mail the output to an e-mail address of your choice. Before e-mailing the output of a task, you should configure Laravel&#39;s <router-link to="/docs/{{version}}/mail">e-mail services</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$schedule-&gt;command<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'foo\'</span>)</span>\n         -&gt;</span>daily<span class="hljs-function"><span class="hljs-params">()</span>\n         -&gt;</span>sendOutputTo<span class="hljs-function"><span class="hljs-params">($filePath)</span>\n         -&gt;</span>emailOutputTo(<span class="hljs-string">\'foo@example.com\'</span>);</code></pre>\n  <p>If you only want to e-mail the output if the command fails, use the <code>emailOutputOnFailure</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$schedule-&gt;command<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'foo\'</span>)</span>\n         -&gt;</span>daily<span class="hljs-function"><span class="hljs-params">()</span>\n         -&gt;</span>emailOutputOnFailure(<span class="hljs-string">\'foo@example.com\'</span>);</code></pre>\n  <blockquote>\n<p>{note} The <code>emailOutputTo</code>, <code>emailOutputOnFailure</code>, <code>sendOutputTo</code>, and <code>appendOutputTo</code> methods are exclusive to the <code>command</code> and <code>exec</code> methods.</p>\n</blockquote>\n<p><a name="task-hooks"></a></p>\n\n          <p><a name="task-hooks"></a></p>\n          <h2>\n            <a href="#task-hooks">\n              Task Hooks\n            </a>\n          </h2><p>Using the <code>before</code> and <code>after</code> methods, you may specify code to be executed before and after the scheduled task is complete:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$schedule-&gt;command(<span class="hljs-string">\'emails:send\'</span>)\n         -&gt;daily()\n         -&gt;before(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n             <span class="hljs-comment">// Task is about to start...</span>\n         })\n         -&gt;after(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n             <span class="hljs-comment">// Task is complete...</span>\n         });</code></pre>\n  <p>The <code>onSuccess</code> and <code>onFailure</code> methods allow you to specify code to be executed if the scheduled task succeeds or fails:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$schedule-&gt;command(<span class="hljs-string">\'emails:send\'</span>)\n         -&gt;daily()\n         -&gt;onSuccess(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n             <span class="hljs-comment">// The task succeeded...</span>\n         })\n         -&gt;onFailure(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n             <span class="hljs-comment">// The task failed...</span>\n         });</code></pre>\n  \n          <p><a name="pinging-urls"></a></p>\n          <h4>\n            <a href="#pinging-urls">\n              Pinging URLs\n            </a>\n          </h4><p>Using the <code>pingBefore</code> and <code>thenPing</code> methods, the scheduler can automatically ping a given URL before or after a task is complete. This method is useful for notifying an external service, such as <router-link to="https://envoyer.io">Laravel Envoyer</router-link>, that your scheduled task is commencing or has finished execution:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$schedule-&gt;command<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'emails:send\'</span>)</span>\n         -&gt;</span>daily<span class="hljs-function"><span class="hljs-params">()</span>\n         -&gt;</span>pingBefore<span class="hljs-function"><span class="hljs-params">($url)</span>\n         -&gt;</span>thenPing($url);</code></pre>\n  <p>The <code>pingBeforeIf</code> and <code>thenPingIf</code> methods may be used to ping a given URL only if the given condition is <code>true</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$schedule</span>-&gt;command(<span class="hljs-string">\'emails:send\'</span>)\n         -&gt;daily()\n         -&gt;pingBeforeIf(<span class="hljs-variable">$condition</span>, <span class="hljs-variable">$url</span>)\n         -&gt;thenPingIf(<span class="hljs-variable">$condition</span>, <span class="hljs-variable">$url</span>);</code></pre>\n  <p>The <code>pingOnSuccess</code> and <code>pingOnFailure</code> methods may be used to ping a given URL only if the task succeeds or fails:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$schedule-&gt;command<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'emails:send\'</span>)</span>\n         -&gt;</span>daily<span class="hljs-function"><span class="hljs-params">()</span>\n         -&gt;</span>pingOnSuccess<span class="hljs-function"><span class="hljs-params">($successUrl)</span>\n         -&gt;</span>pingOnFailure($failureUrl);</code></pre>\n  <p>All of the ping methods require the Guzzle HTTP library. You can add Guzzle to your project using the Composer package manager:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">composer</span> <span class="hljs-meta">require</span> guzzlehttp/guzzle</code></pre>\n  '},"70e9":function(s,e,a){},"768d":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="blade-templates"></a></p>\n          <h1>\n            <a href="#blade-templates">\n              Blade Templates\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#displaying-data">Displaying Data</a><ul>\n<li><a href="#blade-and-javascript-frameworks">Blade &amp; JavaScript Frameworks</a></li>\n</ul>\n</li>\n<li><a href="#control-structures">Control Structures</a><ul>\n<li><a href="#if-statements">If Statements</a></li>\n<li><a href="#switch-statements">Switch Statements</a></li>\n<li><a href="#loops">Loops</a></li>\n<li><a href="#the-loop-variable">The Loop Variable</a></li>\n<li><a href="#comments">Comments</a></li>\n<li><a href="#php">PHP</a></li>\n</ul>\n</li>\n<li><a href="#extending-blade">Extending Blade</a><ul>\n<li><a href="#custom-if-statements">Custom If Statements</a></li>\n</ul>\n</li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Blade is the simple, yet powerful templating engine provided with Laravel. Unlike other popular PHP templating engines, Blade does not restrict you from using plain PHP code in your views. In fact, all Blade views are compiled into plain PHP code and cached until they are modified, meaning Blade adds essentially zero overhead to your application. Blade view files use the <code>.blade.php</code> file extension and are typically stored in the <code>resources/views</code> directory.</p>\n<p><a name="displaying-data"></a></p>\n\n          <p><a name="displaying-data"></a></p>\n          <h2>\n            <a href="#displaying-data">\n              Displaying Data\n            </a>\n          </h2><p>You may display data passed to your Blade views by wrapping the variable in curly braces. For example, given the following route:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIElsbHVtaW5hdGVcXEh0dHBcXFJlcXVlc3Q7XG5cbmNsYXNzIFRpbmtlcndlbGxDb250cm9sbGVyXG57XG4gICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KFJlcXVlc3QgJHJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuIHZpZXcoJ19fdGlua2VyX186OnRpbmtlcndlbGwnLCBbJ25hbWUnID0+ICdTYW1hbnRoYSddKTtcbiAgICB9XG59XG4iLCJ2aWV3Q29kZSI6IkhlbGxvLCB7eyAkbmFtZSB9fS4iLCJoYXNoIjoiYmxhZGUtZGlzcGxheWluZy1kYXRhIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'greeting\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> view(<span class="hljs-string">\'welcome\'</span>, [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Samantha\'</span>]);\n});</code></pre>\n  <p>You may display the contents of the <code>name</code> variable like so:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Hello, {{ $<span class="hljs-built_in">name</span> }}.</code></pre>\n  <p>You are not limited to displaying the contents of the variables passed to the view. You may also echo the results of any PHP function. In fact, you can put any PHP code you wish inside of a Blade echo statement:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIElsbHVtaW5hdGVcXEh0dHBcXFJlcXVlc3Q7XG5cbmNsYXNzIFRpbmtlcndlbGxDb250cm9sbGVyXG57XG4gICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KFJlcXVlc3QgJHJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuIHZpZXcoJ19fdGlua2VyX186OnRpbmtlcndlbGwnKTtcbiAgICB9XG59XG4iLCJ2aWV3Q29kZSI6IlRoZSBjdXJyZW50IFVOSVggdGltZXN0YW1wIGlzIHt7IHRpbWUoKSB9fS4iLCJoYXNoIjoiYmxhZGUtZGlzcGxheWluZy1kYXRhIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">The current UNIX timestamp <span class="hljs-keyword">is</span> {{ <span class="hljs-built_in">time</span>() }}.</code></pre>\n  \n          <p><a name="displaying-unescaped-data"></a></p>\n          <h4>\n            <a href="#displaying-unescaped-data">\n              Displaying Unescaped Data\n            </a>\n          </h4><p>By default, Blade <code>{{ }}</code> statements are automatically sent through PHP&#39;s <code>htmlspecialchars</code> function to prevent XSS attacks. If you do not want your data to be escaped, you may use the following syntax:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIElsbHVtaW5hdGVcXEh0dHBcXFJlcXVlc3Q7XG5cbmNsYXNzIFRpbmtlcndlbGxDb250cm9sbGVyXG57XG4gICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KFJlcXVlc3QgJHJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuIHZpZXcoJ19fdGlua2VyX186OnRpbmtlcndlbGwnLCBbJ25hbWUnID0+ICdVbmVzY2FwZWQnXSk7XG4gICAgfVxufVxuIiwidmlld0NvZGUiOiJIZWxsbywgeyEhICRuYW1lICEhfS4iLCJoYXNoIjoiYmxhZGUtZGlzcGxheWluZy11bmVzY2FwZWQtZGF0YSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">Hello, {!! $name !!}.</code></pre>\n  <blockquote>\n<p>{note} Be very careful when echoing content that is supplied by users of your application. Always use the escaped, double curly brace syntax to prevent XSS attacks when displaying user supplied data.</p>\n</blockquote>\n\n          <p><a name="rendering-json"></a></p>\n          <h4>\n            <a href="#rendering-json">\n              Rendering JSON\n            </a>\n          </h4><p>Sometimes you may pass an array to your view with the intention of rendering it as JSON in order to initialize a JavaScript variable. For example:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n    <span class="hljs-keyword">var</span> app = <span class="xml"><span class="php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> json_encode($array); <span class="hljs-meta">?&gt;</span></span>;\n</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre>\n  <p>However, instead of manually calling <code>json_encode</code>, you may use the <code>@json</code> Blade directive. The <code>@json</code> directive accepts the same arguments as PHP&#39;s <code>json_encode</code> function:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIElsbHVtaW5hdGVcXEh0dHBcXFJlcXVlc3Q7XG5cbmNsYXNzIFRpbmtlcndlbGxDb250cm9sbGVyXG57XG4gICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KFJlcXVlc3QgJHJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuIHZpZXcoJ19fdGlua2VyX186OnRpbmtlcndlbGwnLCBbXG4gICAgICAgICAgICAnYXJyYXknID0+IFtcbiAgICAgICAgICAgICAgICAnZGF0YScgPT4gJ2dvZXMgaGVyZScsXG4gICAgICAgICAgICAgICAgJ3N0YXR1cycgPT4gJ2pzb24gZW5jb2RlZCcsXG4gICAgICAgICAgICBdXG4gICAgICAgIF0pO1xuICAgIH1cbn1cbiIsInZpZXdDb2RlIjoiPHByZT5cbiAgdmFyIGFwcCA9IEBqc29uKCRhcnJheSwgSlNPTl9QUkVUVFlfUFJJTlQpO1xuPC9wcmU+IiwiaGFzaCI6ImJsYWRlLXJlbmRlcmluZy1qc29uIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">&lt;script&gt;\n    <span class="hljs-keyword">var</span> app = <span class="hljs-meta">@json</span>($<span class="hljs-keyword">array</span>);\n\n    <span class="hljs-keyword">var</span> app = <span class="hljs-meta">@json</span>($<span class="hljs-keyword">array</span>, JSON_PRETTY_PRINT);\n&lt;/script&gt;</code></pre>\n  <blockquote>\n<p>{note} You should only use the <code>@json</code> directive to render existing variables as JSON. The Blade templating is based on regular expressions and attempts to pass a complex expression to the directive may cause unexpected failures.</p>\n</blockquote>\n<p>The <code>@json</code> directive is also useful for seeding Vue components or <code>data-*</code> attributes:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">&lt;example-component <span class="hljs-symbol">:some-prop=<span class="hljs-string">\'@json($array)\'</span>&gt;&lt;/example-component&gt;</span></code></pre>\n  <blockquote>\n<p>{note} Using <code>@json</code> in element attributes requires that it be surrounded by single quotes.</p>\n</blockquote>\n\n          <p><a name="html-entity-encoding"></a></p>\n          <h4>\n            <a href="#html-entity-encoding">\n              HTML Entity Encoding\n            </a>\n          </h4><p>By default, Blade (and the Laravel <code>e</code> helper) will double encode HTML entities. If you would like to disable double encoding, call the <code>Blade::withoutDoubleEncoding</code> method from the <code>boot</code> method of your <code>AppServiceProvider</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Providers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Blade</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">ServiceProvider</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Bootstrap any application services.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n    </span>{\n        Blade::withoutDoubleEncoding();\n    }\n}</span></code></pre>\n  <p><a name="blade-and-javascript-frameworks"></a></p>\n\n          <p><a name="blade-amp-javascript-frameworks"></a></p>\n          <h3>\n            <a href="#blade-amp-javascript-frameworks">\n              Blade &amp; JavaScript Frameworks\n            </a>\n          </h3><p>Since many JavaScript frameworks also use &quot;curly&quot; braces to indicate a given expression should be displayed in the browser, you may use the <code>@</code> symbol to inform the Blade rendering engine an expression should remain untouched. For example:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIElsbHVtaW5hdGVcXEh0dHBcXFJlcXVlc3Q7XG5cbmNsYXNzIFRpbmtlcndlbGxDb250cm9sbGVyXG57XG4gICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KFJlcXVlc3QgJHJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuIHZpZXcoJ19fdGlua2VyX186OnRpbmtlcndlbGwnKTtcbiAgICB9XG59XG4iLCJ2aWV3Q29kZSI6IjxoMT5MYXJhdmVsPC9oMT5cblxuSGVsbG8sIEB7eyBuYW1lIH19LiIsImhhc2giOiJibGFkZS1ibGFkZS1hbmRhbXA7LWphdmFzY3JpcHQtZnJhbWV3b3JrcyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Laravel<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n\nHello, @</span><span class="hljs-template-variable">{{ name }}</span><span class="xml">.</span></code></pre>\n  <p>In this example, the <code>@</code> symbol will be removed by Blade; however, <code>{{ name }}</code> expression will remain untouched by the Blade engine, allowing it to instead be rendered by your JavaScript framework.</p>\n\n          <p><a name="the-code-verbatim-code-directive"></a></p>\n          <h4>\n            <a href="#the-code-verbatim-code-directive">\n              The <code>@verbatim</code> Directive\n            </a>\n          </h4><p>If you are displaying JavaScript variables in a large portion of your template, you may wrap the HTML in the <code>@verbatim</code> directive so that you do not have to prefix each Blade echo statement with an <code>@</code> symbol:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIElsbHVtaW5hdGVcXEh0dHBcXFJlcXVlc3Q7XG5cbmNsYXNzIFRpbmtlcndlbGxDb250cm9sbGVyXG57XG4gICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KFJlcXVlc3QgJHJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuIHZpZXcoJ19fdGlua2VyX186OnRpbmtlcndlbGwnKTtcbiAgICB9XG59XG4iLCJ2aWV3Q29kZSI6IkB2ZXJiYXRpbVxuICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cbiAgICAgICAgSGVsbG8sIHt7IG5hbWUgfX0uXG4gICAgPC9kaXY+XG5AZW5kdmVyYmF0aW0iLCJoYXNoIjoiYmxhZGUtdGhlLXZlcmJhdGltLWRpcmVjdGl2ZSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">@verbatim\n    &lt;div <span class="hljs-keyword">class</span>="<span class="hljs-symbol">container</span>"&gt;\n        <span class="hljs-symbol">Hello, </span>{{ name }}.\n    &lt;/div&gt;\n@endverbatim</code></pre>\n  <p><a name="control-structures"></a></p>\n\n          <p><a name="control-structures"></a></p>\n          <h2>\n            <a href="#control-structures">\n              Control Structures\n            </a>\n          </h2><p>In addition to template inheritance and displaying data, Blade also provides convenient shortcuts for common PHP control structures, such as conditional statements and loops. These shortcuts provide a very clean, terse way of working with PHP control structures, while also remaining familiar to their PHP counterparts.</p>\n<p><a name="if-statements"></a></p>\n\n          <p><a name="if-statements"></a></p>\n          <h3>\n            <a href="#if-statements">\n              If Statements\n            </a>\n          </h3><p>You may construct <code>if</code> statements using the <code>@if</code>, <code>@elseif</code>, <code>@else</code>, and <code>@endif</code> directives. These directives function identically to their PHP counterparts:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIElsbHVtaW5hdGVcXEh0dHBcXFJlcXVlc3Q7XG5cbmNsYXNzIFRpbmtlcndlbGxDb250cm9sbGVyXG57XG4gICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KFJlcXVlc3QgJHJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuIHZpZXcoJ19fdGlua2VyX186OnRpbmtlcndlbGwnLCBbXG4gICAgICAgICAgICAncmVjb3JkcycgPT4gWzEsXSAvLyA8LS0gY2hhbmdlIG1lXG4gICAgICAgIF0pO1xuICAgIH1cbn1cbiIsInZpZXdDb2RlIjoiQGlmIChjb3VudCgkcmVjb3JkcykgPT09IDEpXG4gICAgSSBoYXZlIG9uZSByZWNvcmQhXG5AZWxzZWlmIChjb3VudCgkcmVjb3JkcykgPiAxKVxuICAgIEkgaGF2ZSBtdWx0aXBsZSByZWNvcmRzIVxuQGVsc2VcbiAgICBJIGRvbid0IGhhdmUgYW55IHJlY29yZHMhXG5AZW5kaWYiLCJoYXNoIjoiYmxhZGUtaWYtc3RhdGVtZW50cyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@if</span> (count($records) === <span class="hljs-number">1</span>)\n    I have one record!\n<span class="hljs-variable">@elseif</span> (count($records) &gt; <span class="hljs-number">1</span>)\n    I have multiple records!\n<span class="hljs-variable">@else</span>\n    I don\'t have any records!\n<span class="hljs-variable">@endif</span></code></pre>\n  <p>For convenience, Blade also provides an <code>@unless</code> directive:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIElsbHVtaW5hdGVcXEh0dHBcXFJlcXVlc3Q7XG5cbmNsYXNzIFRpbmtlcndlbGxDb250cm9sbGVyXG57XG4gICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KFJlcXVlc3QgJHJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuIHZpZXcoJ19fdGlua2VyX186OnRpbmtlcndlbGwnKTtcbiAgICB9XG59XG4iLCJ2aWV3Q29kZSI6IkB1bmxlc3MgKEF1dGg6OmNoZWNrKCkpXG4gICAgWW91IGFyZSBub3Qgc2lnbmVkIGluLlxuQGVuZHVubGVzcyIsImhhc2giOiJibGFkZS1pZi1zdGF0ZW1lbnRzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@unless</span> (<span class="hljs-attribute">Auth</span>::check())\n    You are not signed in.\n<span class="hljs-variable">@endunless</span></code></pre>\n  <p>In addition to the conditional directives already discussed, the <code>@isset</code> and <code>@empty</code> directives may be used as convenient shortcuts for their respective PHP functions:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIElsbHVtaW5hdGVcXEh0dHBcXFJlcXVlc3Q7XG5cbmNsYXNzIFRpbmtlcndlbGxDb250cm9sbGVyXG57XG4gICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KFJlcXVlc3QgJHJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuIHZpZXcoJ19fdGlua2VyX186OnRpbmtlcndlbGwnLCBbXG4gICAgICAgICAgICAncmVjb3JkcycgPT4gdHJ1ZSxcbiAgICAgICAgXSk7XG4gICAgfVxufVxuIiwidmlld0NvZGUiOiJAaXNzZXQoJHJlY29yZHMpXG4gICAgUmVjb3JkcyBpcyBkZWZpbmVkIGFuZCBpcyBub3QgbnVsbFxuQGVuZGlzc2V0IiwiaGFzaCI6ImJsYWRlLWlmLXN0YXRlbWVudHMifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@isset</span>($records)\n    <span class="hljs-comment">// $records is defined and is not null...</span>\n<span class="hljs-variable">@endisset</span></code></pre>\n  <a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIElsbHVtaW5hdGVcXEh0dHBcXFJlcXVlc3Q7XG5cbmNsYXNzIFRpbmtlcndlbGxDb250cm9sbGVyXG57XG4gICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KFJlcXVlc3QgJHJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuIHZpZXcoJ19fdGlua2VyX186OnRpbmtlcndlbGwnLCBbXG4gICAgICAgICAgICAncmVjb3JkcycgPT4gW10sXG4gICAgICAgIF0pO1xuICAgIH1cbn1cbiIsInZpZXdDb2RlIjoiQGVtcHR5KCRyZWNvcmRzKVxuICAgICRyZWNvcmRzIGlzIFwiZW1wdHlcIi4uLlxuQGVuZGVtcHR5IiwiaGFzaCI6ImJsYWRlLWlmLXN0YXRlbWVudHMifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@empty</span>($records)\n    <span class="hljs-comment">// $records is "empty"...</span>\n<span class="hljs-variable">@endempty</span></code></pre>\n  \n          <p><a name="authentication-directives"></a></p>\n          <h4>\n            <a href="#authentication-directives">\n              Authentication Directives\n            </a>\n          </h4><p>The <code>@auth</code> and <code>@guest</code> directives may be used to quickly determine if the current user is authenticated or is a guest:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIElsbHVtaW5hdGVcXEh0dHBcXFJlcXVlc3Q7XG5cbmNsYXNzIFRpbmtlcndlbGxDb250cm9sbGVyXG57XG4gICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KFJlcXVlc3QgJHJlcXVlc3QpIHtcbiAgICAgICAgLy8gU3RvcmUgYW5kIGxvZ2luIGEgdXNlclxuICAgICAgICAkdXNlciA9IFVzZXI6OmNyZWF0ZShbXG4gICAgICAgICAgJ25hbWUnID0+ICdNYXJjZWwnLFxuICAgICAgICAgICdlbWFpbCcgPT4gJ21hcmNlbEBiZXlvbmRjby5kZScsXG4gICAgICAgICAgJ3Bhc3N3b3JkJyA9PiAndGVzdCcsXG4gICAgICAgIF0pO1xuXG4gICAgICAgIC8vIENvbW1lbnQgdGhpcyBvdXQgdG8gdHJpZ2dlciB0aGUgQGd1ZXN0IGRpcmVjdGl2ZVxuICAgICAgICBBdXRoOjpsb2dpbigkdXNlcik7XG5cbiAgICAgICAgcmV0dXJuIHZpZXcoJ19fdGlua2VyX186OnRpbmtlcndlbGwnKTtcbiAgICB9XG59XG4iLCJ2aWV3Q29kZSI6IkBhdXRoXG4gICAgVGhlIHVzZXIgaXMgYXV0aGVudGljYXRlZC4uLlxuQGVuZGF1dGhcblxuQGd1ZXN0XG4gICAgVGhlIHVzZXIgaXMgbm90IGF1dGhlbnRpY2F0ZWQuLi5cbkBlbmRndWVzdCIsImhhc2giOiJibGFkZS1hdXRoZW50aWNhdGlvbi1kaXJlY3RpdmVzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@auth</span>\n    <span class="hljs-comment">// The user is authenticated...</span>\n<span class="hljs-variable">@endauth</span>\n\n<span class="hljs-variable">@guest</span>\n    <span class="hljs-comment">// The user is not authenticated...</span>\n<span class="hljs-variable">@endguest</span></code></pre>\n  <p>If needed, you may specify the <router-link to="/docs/authentication">authentication guard</router-link> that should be checked when using the <code>@auth</code> and <code>@guest</code> directives:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@auth</span>(<span class="hljs-string">\'admin\'</span>)\n    <span class="hljs-comment">// The user is authenticated...</span>\n<span class="hljs-variable">@endauth</span>\n\n<span class="hljs-variable">@guest</span>(<span class="hljs-string">\'admin\'</span>)\n    <span class="hljs-comment">// The user is not authenticated...</span>\n<span class="hljs-variable">@endguest</span></code></pre>\n  <p><a name="switch-statements"></a></p>\n\n          <p><a name="switch-statements"></a></p>\n          <h3>\n            <a href="#switch-statements">\n              Switch Statements\n            </a>\n          </h3><p>Switch statements can be constructed using the <code>@switch</code>, <code>@case</code>, <code>@break</code>, <code>@default</code> and <code>@endswitch</code> directives:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIElsbHVtaW5hdGVcXEh0dHBcXFJlcXVlc3Q7XG5cbmNsYXNzIFRpbmtlcndlbGxDb250cm9sbGVyXG57XG4gICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KFJlcXVlc3QgJHJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuIHZpZXcoJ19fdGlua2VyX186OnRpbmtlcndlbGwnLCBbXG4gICAgICAgICAgICAnaScgPT4gMSAvLyA8LS0gQ2hhbmdlIG1lIHRvIHRyaWdnZXIgb3RoZXIgY2FzZXNcbiAgICAgICAgXSk7XG4gICAgfVxufVxuIiwidmlld0NvZGUiOiJAc3dpdGNoKCRpKVxuICAgIEBjYXNlKDEpXG4gICAgICAgIEZpcnN0IGNhc2UuLi5cbiAgICAgICAgQGJyZWFrXG5cbiAgICBAY2FzZSgyKVxuICAgICAgICBTZWNvbmQgY2FzZS4uLlxuICAgICAgICBAYnJlYWtcblxuICAgIEBkZWZhdWx0XG4gICAgICAgIERlZmF1bHQgY2FzZS4uLlxuQGVuZHN3aXRjaCIsImhhc2giOiJibGFkZS1zd2l0Y2gtc3RhdGVtZW50cyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@switch</span>($i)\n    <span class="hljs-variable">@case</span>(<span class="hljs-number">1</span>)\n        First case...\n        <span class="hljs-variable">@break</span>\n\n    <span class="hljs-variable">@case</span>(<span class="hljs-number">2</span>)\n        Second case...\n        <span class="hljs-variable">@break</span>\n\n    <span class="hljs-variable">@default</span>\n        Default case...\n<span class="hljs-variable">@endswitch</span></code></pre>\n  <p><a name="loops"></a></p>\n\n          <p><a name="loops"></a></p>\n          <h3>\n            <a href="#loops">\n              Loops\n            </a>\n          </h3><p>In addition to conditional statements, Blade provides simple directives for working with PHP&#39;s loop structures. Again, each of these directives functions identically to their PHP counterparts:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIElsbHVtaW5hdGVcXEh0dHBcXFJlcXVlc3Q7XG5cbmNsYXNzIFRpbmtlcndlbGxDb250cm9sbGVyXG57XG4gICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KFJlcXVlc3QgJHJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuIHZpZXcoJ19fdGlua2VyX186OnRpbmtlcndlbGwnKTtcbiAgICB9XG59XG4iLCJ2aWV3Q29kZSI6IkBmb3IgKCRpID0gMDsgJGkgPCAxMDsgJGkrKylcbiAgICBUaGUgY3VycmVudCB2YWx1ZSBpcyB7eyAkaSB9fTxicj5cbkBlbmRmb3IiLCJoYXNoIjoiYmxhZGUtbG9vcHMifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">@<span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">10</span>; <span class="hljs-variable">$i</span>++)\n    The current <span class="hljs-keyword">value</span> <span class="hljs-literal">is</span> {{ <span class="hljs-variable">$i</span> }}\n@endfor</code></pre>\n  <a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIElsbHVtaW5hdGVcXEh0dHBcXFJlcXVlc3Q7XG5cbmNsYXNzIFRpbmtlcndlbGxDb250cm9sbGVyXG57XG4gICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KFJlcXVlc3QgJHJlcXVlc3QpIHtcbiAgICAgICAgLy8gSW5zZXJ0IHR3byB1c2Vyc1xuICAgICAgICBVc2VyOjpjcmVhdGUoW1xuICAgICAgICAgICduYW1lJyA9PiAnTWFyY2VsJyxcbiAgICAgICAgICAnZW1haWwnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAgICAgICAgICdwYXNzd29yZCcgPT4gJ3Rlc3QnLFxuICAgICAgICBdKTtcblxuICAgICAgICBVc2VyOjpjcmVhdGUoW1xuICAgICAgICAgICduYW1lJyA9PiAnU2ViYXN0aWFuJyxcbiAgICAgICAgICAnZW1haWwnID0+ICdzZWJhc3RpYW5AYmV5b25kY28uZGUnLFxuICAgICAgICAgICdwYXNzd29yZCcgPT4gJ3Rlc3QnLFxuICAgICAgICBdKTtcblxuICAgICAgICByZXR1cm4gdmlldygnX190aW5rZXJfXzo6dGlua2Vyd2VsbCcsIFtcbiAgICAgICAgICAgICd1c2VycycgPT4gVXNlcjo6YWxsKClcbiAgICAgICAgXSk7XG4gICAgfVxufVxuIiwidmlld0NvZGUiOiJAZm9yZWFjaCAoJHVzZXJzIGFzICR1c2VyKVxuICAgIDxwPlRoaXMgaXMgdXNlciB7eyAkdXNlci0+aWQgfX08L3A+XG5AZW5kZm9yZWFjaCIsImhhc2giOiJibGFkZS1sb29wcyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">@<span class="hljs-keyword">foreach</span> ($users <span class="hljs-keyword">as</span> $user)\n    &lt;p&gt;This is user {{ $user-&gt;id }}&lt;/p&gt;\n@<span class="hljs-keyword">endforeach</span></code></pre>\n  <a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIElsbHVtaW5hdGVcXEh0dHBcXFJlcXVlc3Q7XG5cbmNsYXNzIFRpbmtlcndlbGxDb250cm9sbGVyXG57XG4gICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KFJlcXVlc3QgJHJlcXVlc3QpIHtcbiAgICAgICAgLy8gSW5zZXJ0IHR3byB1c2Vyc1xuICAgICAgICBVc2VyOjpjcmVhdGUoW1xuICAgICAgICAgICduYW1lJyA9PiAnTWFyY2VsJyxcbiAgICAgICAgICAnZW1haWwnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAgICAgICAgICdwYXNzd29yZCcgPT4gJ3Rlc3QnLFxuICAgICAgICBdKTtcblxuICAgICAgICBVc2VyOjpjcmVhdGUoW1xuICAgICAgICAgICduYW1lJyA9PiAnU2ViYXN0aWFuJyxcbiAgICAgICAgICAnZW1haWwnID0+ICdzZWJhc3RpYW5AYmV5b25kY28uZGUnLFxuICAgICAgICAgICdwYXNzd29yZCcgPT4gJ3Rlc3QnLFxuICAgICAgICBdKTtcblxuICAgICAgICByZXR1cm4gdmlldygnX190aW5rZXJfXzo6dGlua2Vyd2VsbCcsIFtcbiAgICAgICAgICAgICd1c2VycycgPT4gVXNlcjo6YWxsKClcbiAgICAgICAgXSk7XG4gICAgfVxufVxuIiwidmlld0NvZGUiOiJAZm9yZWxzZSAoJHVzZXJzIGFzICR1c2VyKVxuICAgIDxsaT57eyAkdXNlci0+bmFtZSB9fTwvbGk+XG5AZW1wdHlcbiAgICA8cD5ObyB1c2VyczwvcD5cbkBlbmRmb3JlbHNlIiwiaGFzaCI6ImJsYWRlLWxvb3BzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">@forelse (<span class="hljs-variable">$users</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$user</span>)\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="xquery">{{ <span class="hljs-variable">$user-</span><span class="hljs-built_in">&gt;name</span> }</span><span class="xml">}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span>\n<span class="hljs-built_in">@empty</span>\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>No users<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>\n@endforelse</code></pre>\n  <p>When using loops you may also end the loop or skip the current iteration:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIElsbHVtaW5hdGVcXEh0dHBcXFJlcXVlc3Q7XG5cbmNsYXNzIFRpbmtlcndlbGxDb250cm9sbGVyXG57XG4gICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KFJlcXVlc3QgJHJlcXVlc3QpIHtcbiAgICAgICAgLy8gSW5zZXJ0IHR3byB1c2Vyc1xuICAgICAgICBVc2VyOjpjcmVhdGUoW1xuICAgICAgICAgICduYW1lJyA9PiAnTWFyY2VsJyxcbiAgICAgICAgICAnZW1haWwnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAgICAgICAgICdwYXNzd29yZCcgPT4gJ3Rlc3QnLFxuICAgICAgICBdKTtcblxuICAgICAgICBVc2VyOjpjcmVhdGUoW1xuICAgICAgICAgICduYW1lJyA9PiAnU2ViYXN0aWFuJyxcbiAgICAgICAgICAnZW1haWwnID0+ICdzZWJhc3RpYW5AYmV5b25kY28uZGUnLFxuICAgICAgICAgICdwYXNzd29yZCcgPT4gJ3Rlc3QnLFxuICAgICAgICBdKTtcblxuICAgICAgICByZXR1cm4gdmlldygnX190aW5rZXJfXzo6dGlua2Vyd2VsbCcsIFtcbiAgICAgICAgICAgICd1c2VycycgPT4gVXNlcjo6YWxsKClcbiAgICAgICAgXSk7XG4gICAgfVxufVxuIiwidmlld0NvZGUiOiJAZm9yZWFjaCAoJHVzZXJzIGFzICR1c2VyKVxuICAgIEBpZiAoJHVzZXItPmlkID09IDEpXG4gICAgICAgIEBjb250aW51ZVxuICAgIEBlbmRpZlxuXG4gICAgPGxpPnt7ICR1c2VyLT5uYW1lIH19PC9saT5cbkBlbmRmb3JlYWNoIiwiaGFzaCI6ImJsYWRlLWxvb3BzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">@<span class="hljs-keyword">foreach</span> ($users <span class="hljs-keyword">as</span> $user)\n    @<span class="hljs-keyword">if</span> ($user-&gt;type == <span class="hljs-number">1</span>)\n        @<span class="hljs-keyword">continue</span>\n    @<span class="hljs-keyword">endif</span>\n\n    &lt;li&gt;{{ $user-&gt;name }}&lt;/li&gt;\n\n    @<span class="hljs-keyword">if</span> ($user-&gt;number == <span class="hljs-number">5</span>)\n        @<span class="hljs-keyword">break</span>\n    @<span class="hljs-keyword">endif</span>\n@<span class="hljs-keyword">endforeach</span></code></pre>\n  <p>You may also include the condition with the directive declaration in one line:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIElsbHVtaW5hdGVcXEh0dHBcXFJlcXVlc3Q7XG5cbmNsYXNzIFRpbmtlcndlbGxDb250cm9sbGVyXG57XG4gICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KFJlcXVlc3QgJHJlcXVlc3QpIHtcbiAgICAgICAgLy8gSW5zZXJ0IHR3byB1c2Vyc1xuICAgICAgICBVc2VyOjpjcmVhdGUoW1xuICAgICAgICAgICduYW1lJyA9PiAnTWFyY2VsJyxcbiAgICAgICAgICAnZW1haWwnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAgICAgICAgICdwYXNzd29yZCcgPT4gJ3Rlc3QnLFxuICAgICAgICBdKTtcblxuICAgICAgICBVc2VyOjpjcmVhdGUoW1xuICAgICAgICAgICduYW1lJyA9PiAnU2ViYXN0aWFuJyxcbiAgICAgICAgICAnZW1haWwnID0+ICdzZWJhc3RpYW5AYmV5b25kY28uZGUnLFxuICAgICAgICAgICdwYXNzd29yZCcgPT4gJ3Rlc3QnLFxuICAgICAgICBdKTtcblxuICAgICAgICByZXR1cm4gdmlldygnX190aW5rZXJfXzo6dGlua2Vyd2VsbCcsIFtcbiAgICAgICAgICAgICd1c2VycycgPT4gVXNlcjo6YWxsKClcbiAgICAgICAgXSk7XG4gICAgfVxufVxuIiwidmlld0NvZGUiOiJAZm9yZWFjaCAoJHVzZXJzIGFzICR1c2VyKVxuICAgIEBjb250aW51ZSgkdXNlci0+aWQgPT0gMSlcblxuICAgIDxsaT57eyAkdXNlci0+bmFtZSB9fTwvbGk+XG5AZW5kZm9yZWFjaCIsImhhc2giOiJibGFkZS1sb29wcyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">@<span class="hljs-keyword">foreach</span> ($users <span class="hljs-keyword">as</span> $user)\n    @<span class="hljs-keyword">continue</span>($user-&gt;type == <span class="hljs-number">1</span>)\n\n    &lt;li&gt;{{ $user-&gt;name }}&lt;/li&gt;\n\n    @<span class="hljs-keyword">break</span>($user-&gt;number == <span class="hljs-number">5</span>)\n@<span class="hljs-keyword">endforeach</span></code></pre>\n  <p><a name="the-loop-variable"></a></p>\n\n          <p><a name="the-loop-variable"></a></p>\n          <h3>\n            <a href="#the-loop-variable">\n              The Loop Variable\n            </a>\n          </h3><p>When looping, a <code>$loop</code> variable will be available inside of your loop. This variable provides access to some useful bits of information such as the current loop index and whether this is the first or last iteration through the loop:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIElsbHVtaW5hdGVcXEh0dHBcXFJlcXVlc3Q7XG5cbmNsYXNzIFRpbmtlcndlbGxDb250cm9sbGVyXG57XG4gICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KFJlcXVlc3QgJHJlcXVlc3QpIHtcbiAgICAgICAgLy8gSW5zZXJ0IHR3byB1c2Vyc1xuICAgICAgICBVc2VyOjpjcmVhdGUoW1xuICAgICAgICAgICduYW1lJyA9PiAnTWFyY2VsJyxcbiAgICAgICAgICAnZW1haWwnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAgICAgICAgICdwYXNzd29yZCcgPT4gJ3Rlc3QnLFxuICAgICAgICBdKTtcblxuICAgICAgICBVc2VyOjpjcmVhdGUoW1xuICAgICAgICAgICduYW1lJyA9PiAnSnVsaWEnLFxuICAgICAgICAgICdlbWFpbCcgPT4gJ2p1bGlhQGJleW9uZGNvLmRlJyxcbiAgICAgICAgICAncGFzc3dvcmQnID0+ICd0ZXN0JyxcbiAgICAgICAgXSk7XG5cbiAgICAgICAgVXNlcjo6Y3JlYXRlKFtcbiAgICAgICAgICAnbmFtZScgPT4gJ1NlYmFzdGlhbicsXG4gICAgICAgICAgJ2VtYWlsJyA9PiAnc2ViYXN0aWFuQGJleW9uZGNvLmRlJyxcbiAgICAgICAgICAncGFzc3dvcmQnID0+ICd0ZXN0JyxcbiAgICAgICAgXSk7XG5cbiAgICAgICAgcmV0dXJuIHZpZXcoJ19fdGlua2VyX186OnRpbmtlcndlbGwnLCBbXG4gICAgICAgICAgICAndXNlcnMnID0+IFVzZXI6OmFsbCgpXG4gICAgICAgIF0pO1xuICAgIH1cbn1cbiIsInZpZXdDb2RlIjoiQGZvcmVhY2ggKCR1c2VycyBhcyAkdXNlcilcbiAgICBAaWYgKCRsb29wLT5maXJzdClcbiAgICAgICAgVGhpcyBpcyB0aGUgZmlyc3QgaXRlcmF0aW9uLlxuICAgIEBlbmRpZlxuXG4gICAgQGlmICgkbG9vcC0+bGFzdClcbiAgICAgICAgVGhpcyBpcyB0aGUgbGFzdCBpdGVyYXRpb24uXG4gICAgQGVuZGlmXG5cbiAgICA8cD5UaGlzIGlzIHVzZXIge3sgJHVzZXItPmlkIH19PC9wPlxuQGVuZGZvcmVhY2giLCJoYXNoIjoiYmxhZGUtdGhlLWxvb3AtdmFyaWFibGUifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">@<span class="hljs-keyword">foreach</span> ($users <span class="hljs-keyword">as</span> $user)\n    @<span class="hljs-keyword">if</span> ($loop-&gt;first)\n        This is the first iteration.\n    @<span class="hljs-keyword">endif</span>\n\n    @<span class="hljs-keyword">if</span> ($loop-&gt;last)\n        This is the last iteration.\n    @<span class="hljs-keyword">endif</span>\n\n    &lt;p&gt;This is user {{ $user-&gt;id }}&lt;/p&gt;\n@<span class="hljs-keyword">endforeach</span></code></pre>\n  <p>If you are in a nested loop, you may access the parent loop&#39;s <code>$loop</code> variable via the <code>parent</code> property:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@foreach</span> ($users as $user)\n    <span class="hljs-variable">@foreach</span> ($user-&gt;posts as $post)\n        <span class="hljs-variable">@if</span> ($loop-&gt;parent-&gt;first)\n            This is first iteration of the parent loop.\n        <span class="hljs-variable">@endif</span>\n    <span class="hljs-variable">@endforeach</span>\n<span class="hljs-variable">@endforeach</span></code></pre>\n  <p>The <code>$loop</code> variable also contains a variety of other useful properties:</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>$loop-&gt;index</code></td>\n<td>The index of the current loop iteration (starts at 0).</td>\n</tr>\n<tr>\n<td><code>$loop-&gt;iteration</code></td>\n<td>The current loop iteration (starts at 1).</td>\n</tr>\n<tr>\n<td><code>$loop-&gt;remaining</code></td>\n<td>The iterations remaining in the loop.</td>\n</tr>\n<tr>\n<td><code>$loop-&gt;count</code></td>\n<td>The total number of items in the array being iterated.</td>\n</tr>\n<tr>\n<td><code>$loop-&gt;first</code></td>\n<td>Whether this is the first iteration through the loop.</td>\n</tr>\n<tr>\n<td><code>$loop-&gt;last</code></td>\n<td>Whether this is the last iteration through the loop.</td>\n</tr>\n<tr>\n<td><code>$loop-&gt;even</code></td>\n<td>Whether this is an even iteration through the loop.</td>\n</tr>\n<tr>\n<td><code>$loop-&gt;odd</code></td>\n<td>Whether this is an odd iteration through the loop.</td>\n</tr>\n<tr>\n<td><code>$loop-&gt;depth</code></td>\n<td>The nesting level of the current loop.</td>\n</tr>\n<tr>\n<td><code>$loop-&gt;parent</code></td>\n<td>When in a nested loop, the parent&#39;s loop variable.</td>\n</tr>\n</tbody></table>\n<p><a name="comments"></a></p>\n\n          <p><a name="comments"></a></p>\n          <h3>\n            <a href="#comments">\n              Comments\n            </a>\n          </h3><p>Blade also allows you to define comments in your views. However, unlike HTML comments, Blade comments are not included in the HTML returned by your application:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">{{<span class="hljs-comment">-- This comment will not be present in the rendered HTML --}}</span></code></pre>\n  <p><a name="php"></a></p>\n\n          <p><a name="php"></a></p>\n          <h3>\n            <a href="#php">\n              PHP\n            </a>\n          </h3><p>In some situations, it&#39;s useful to embed PHP code into your views. You can use the Blade <code>@php</code> directive to execute a block of plain PHP within your template:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIElsbHVtaW5hdGVcXEh0dHBcXFJlcXVlc3Q7XG5cbmNsYXNzIFRpbmtlcndlbGxDb250cm9sbGVyXG57XG4gICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KFJlcXVlc3QgJHJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuIHZpZXcoJ19fdGlua2VyX186OnRpbmtlcndlbGwnKTtcbiAgICB9XG59XG4iLCJ2aWV3Q29kZSI6IkBwaHBcbiAgICBlY2hvIHRpbWUoKTtcbkBlbmRwaHAiLCJoYXNoIjoiYmxhZGUtcGhwIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@php</span>\n    <span class="hljs-comment">//</span>\n<span class="hljs-variable">@endphp</span></code></pre>\n  <p><a name="extending-blade"></a></p>\n\n          <p><a name="extending-blade"></a></p>\n          <h2>\n            <a href="#extending-blade">\n              Extending Blade\n            </a>\n          </h2><p>Blade allows you to define your own custom directives using the <code>directive</code> method. When the Blade compiler encounters the custom directive, it will call the provided callback with the expression that the directive contains.</p>\n<p>The following example creates a <code>@datetime($var)</code> directive which formats a given <code>$var</code>, which should be an instance of <code>DateTime</code>:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIElsbHVtaW5hdGVcXEh0dHBcXFJlcXVlc3Q7XG51c2UgSWxsdW1pbmF0ZVxcU3VwcG9ydFxcRmFjYWRlc1xcQmxhZGU7XG51c2UgSWxsdW1pbmF0ZVxcU3VwcG9ydFxcU2VydmljZVByb3ZpZGVyO1xuXG5jbGFzcyBCbGFkZVNlcnZpY2VQcm92aWRlciBleHRlbmRzIFNlcnZpY2VQcm92aWRlclxue1xuICBwdWJsaWMgZnVuY3Rpb24gYm9vdCgpXG4gIHtcbiAgICBCbGFkZTo6ZGlyZWN0aXZlKCdkYXRldGltZScsIGZ1bmN0aW9uICgkZXhwcmVzc2lvbikge1xuICAgICAgICByZXR1cm4gXCI8P3BocCBlY2hvICgkZXhwcmVzc2lvbiktPmZvcm1hdCgnbS9kL1kgSDppJyk7ID8+XCI7XG4gICAgfSk7XG4gIH1cbn1cblxuQXBwOjpyZWdpc3RlcihCbGFkZVNlcnZpY2VQcm92aWRlcjo6Y2xhc3MpO1xuXG5jbGFzcyBUaW5rZXJ3ZWxsQ29udHJvbGxlclxue1xuICAgIHB1YmxpYyBmdW5jdGlvbiBpbmRleChSZXF1ZXN0ICRyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybiB2aWV3KCdfX3Rpbmtlcl9fOjp0aW5rZXJ3ZWxsJywgW1xuICAgICAgICAgICAgJ3ZhcicgPT4gbm93KClcbiAgICAgICAgXSk7XG4gICAgfVxufVxuIiwidmlld0NvZGUiOiJAZGF0ZXRpbWUoJHZhcikiLCJoYXNoIjoiYmxhZGUtZXh0ZW5kaW5nLWJsYWRlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Providers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Blade</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">ServiceProvider</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Register any application services.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-comment">//</span>\n    }\n\n    <span class="hljs-comment">/**\n     * Bootstrap any application services.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n    </span>{\n        Blade::directive(<span class="hljs-string">\'datetime\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($expression)</span> </span>{\n            <span class="hljs-keyword">return</span> <span class="hljs-string">"&lt;?php echo ($expression)-&gt;format(\'m/d/Y H:i\'); ?&gt;"</span>;\n        });\n    }\n}</span></code></pre>\n  <p>As you can see, we will chain the <code>format</code> method onto whatever expression is passed into the directive. So, in this example, the final PHP generated by this directive will be:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> ($var)-&gt;format(<span class="hljs-string">\'m/d/Y H:i\'</span>); <span class="hljs-meta">?&gt;</span></span></code></pre>\n  <p><a name="custom-if-statements"></a></p>\n\n          <p><a name="custom-if-statements"></a></p>\n          <h3>\n            <a href="#custom-if-statements">\n              Custom If Statements\n            </a>\n          </h3><p>Programming a custom directive is sometimes more complex than necessary when defining simple, custom conditional statements. For that reason, Blade provides a <code>Blade::if</code> method which allows you to quickly define custom conditional directives using Closures. For example, let&#39;s define a custom conditional that checks the current application environment. We may do this in the <code>boot</code> method of our <code>AppServiceProvider</code>:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIElsbHVtaW5hdGVcXEh0dHBcXFJlcXVlc3Q7XG51c2UgSWxsdW1pbmF0ZVxcU3VwcG9ydFxcRmFjYWRlc1xcQmxhZGU7XG51c2UgSWxsdW1pbmF0ZVxcU3VwcG9ydFxcU2VydmljZVByb3ZpZGVyO1xuXG5jbGFzcyBCbGFkZVNlcnZpY2VQcm92aWRlciBleHRlbmRzIFNlcnZpY2VQcm92aWRlclxue1xuICBwdWJsaWMgZnVuY3Rpb24gYm9vdCgpXG4gIHtcbiAgICBCbGFkZTo6aWYoJ2VudicsIGZ1bmN0aW9uICgkZW52aXJvbm1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGFwcCgpLT5lbnZpcm9ubWVudCgkZW52aXJvbm1lbnQpO1xuICAgIH0pO1xuICB9XG59XG5cbkFwcDo6cmVnaXN0ZXIoQmxhZGVTZXJ2aWNlUHJvdmlkZXI6OmNsYXNzKTtcblxuY2xhc3MgVGlua2Vyd2VsbENvbnRyb2xsZXJcbntcbiAgICBwdWJsaWMgZnVuY3Rpb24gaW5kZXgoUmVxdWVzdCAkcmVxdWVzdCkge1xuICAgICAgICByZXR1cm4gdmlldygnX190aW5rZXJfXzo6dGlua2Vyd2VsbCcpO1xuICAgIH1cbn1cbiIsInZpZXdDb2RlIjoiQGVudignbG9jYWwnKVxuICAgIFRoZSBhcHBsaWNhdGlvbiBpcyBpbiB0aGUgbG9jYWwgZW52aXJvbm1lbnQuLi5cbkBlbHNlZW52KCd0ZXN0aW5nJylcbiAgICBUaGUgYXBwbGljYXRpb24gaXMgaW4gdGhlIHRlc3RpbmcgZW52aXJvbm1lbnQuLi5cbkBlbHNlXG4gICAgVGhlIGFwcGxpY2F0aW9uIGlzIG5vdCBpbiB0aGUgbG9jYWwgb3IgdGVzdGluZyBlbnZpcm9ubWVudC4uLlxuQGVuZGVudlxuXG5AdW5sZXNzZW52KCdwcm9kdWN0aW9uJylcbiAgICBUaGUgYXBwbGljYXRpb24gaXMgbm90IGluIHRoZSBwcm9kdWN0aW9uIGVudmlyb25tZW50Li4uXG5AZW5kZW52IiwiaGFzaCI6ImJsYWRlLWN1c3RvbS1pZi1zdGF0ZW1lbnRzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Blade</span>;\n\n<span class="hljs-comment">/**\n * Bootstrap any application services.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n</span>{\n    Blade::if(<span class="hljs-string">\'env\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($environment)</span> </span>{\n        <span class="hljs-keyword">return</span> app()-&gt;environment($environment);\n    });\n}</code></pre>\n  <p>Once the custom conditional has been defined, we can easily use it on our templates:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@env</span>(<span class="hljs-string">\'local\'</span>)\n    <span class="hljs-comment">// The application is in the local environment...</span>\n<span class="hljs-variable">@elseenv</span>(<span class="hljs-string">\'testing\'</span>)\n    <span class="hljs-comment">// The application is in the testing environment...</span>\n<span class="hljs-variable">@else</span>\n    <span class="hljs-comment">// The application is not in the local or testing environment...</span>\n<span class="hljs-variable">@endenv</span>\n\n<span class="hljs-variable">@unlessenv</span>(<span class="hljs-string">\'production\'</span>)\n    <span class="hljs-comment">// The application is not in the production environment...</span>\n<span class="hljs-variable">@endenv</span></code></pre>\n  '},"76bb":function(s,e,a){"use strict";var n=a("1160"),t=a.n(n);t.a},7741:function(s,e,a){},7834:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="localization"></a></p>\n          <h1>\n            <a href="#localization">\n              Localization\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a><ul>\n<li><a href="#configuring-the-locale">Configuring The Locale</a></li>\n</ul>\n</li>\n<li><a href="#defining-translation-strings">Defining Translation Strings</a><ul>\n<li><a href="#using-short-keys">Using Short Keys</a></li>\n<li><a href="#using-translation-strings-as-keys">Using Translation Strings As Keys</a></li>\n</ul>\n</li>\n<li><a href="#retrieving-translation-strings">Retrieving Translation Strings</a><ul>\n<li><a href="#replacing-parameters-in-translation-strings">Replacing Parameters In Translation Strings</a></li>\n<li><a href="#pluralization">Pluralization</a></li>\n</ul>\n</li>\n<li><a href="#overriding-package-language-files">Overriding Package Language Files</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Laravel&#39;s localization features provide a convenient way to retrieve strings in various languages, allowing you to easily support multiple languages within your application. Language strings are stored in files within the <code>resources/lang</code> directory. Within this directory there should be a subdirectory for each language supported by the application:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">/resources</span>\n    <span class="hljs-string">/lang</span>\n        <span class="hljs-string">/en</span>\n            messages.php\n        <span class="hljs-string">/es</span>\n            messages.php</code></pre>\n  <p>All language files return an array of keyed strings. For example:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">return</span> [\n    <span class="hljs-string">\'welcome\'</span> =&gt; <span class="hljs-string">\'Welcome to our application\'</span>\n];</span></code></pre>\n  <blockquote>\n<p>{note} For languages that differ by territory, you should name the language directories according to the ISO 15897. For example, &quot;en_GB&quot; should be used for British English rather than &quot;en-gb&quot;.</p>\n</blockquote>\n<p><a name="configuring-the-locale"></a></p>\n\n          <p><a name="configuring-the-locale"></a></p>\n          <h3>\n            <a href="#configuring-the-locale">\n              Configuring The Locale\n            </a>\n          </h3><p>The default language for your application is stored in the <code>config/app.php</code> configuration file. You may modify this value to suit the needs of your application. You may also change the active language at runtime using the <code>setLocale</code> method on the <code>App</code> facade:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'welcome/{locale}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($locale)</span> </span>{\n    App::setLocale($locale);\n\n    <span class="hljs-comment">//</span>\n});</code></pre>\n  <p>You may configure a &quot;fallback language&quot;, which will be used when the active language does not contain a given translation string. Like the default language, the fallback language is also configured in the <code>config/app.php</code> configuration file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'fallback_locale\'</span> =&gt; <span class="hljs-string">\'en\'</span>,</code></pre>\n  \n          <p><a name="determining-the-current-locale"></a></p>\n          <h4>\n            <a href="#determining-the-current-locale">\n              Determining The Current Locale\n            </a>\n          </h4><p>You may use the <code>getLocale</code> and <code>isLocale</code> methods on the <code>App</code> facade to determine the current locale or check if the locale is a given value:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$locale = App::getLocale();\n\n<span class="hljs-keyword">if</span> (App::isLocale(<span class="hljs-string">\'en\'</span>)) {\n    <span class="hljs-regexp">//</span>\n}</code></pre>\n  <p><a name="defining-translation-strings"></a></p>\n\n          <p><a name="defining-translation-strings"></a></p>\n          <h2>\n            <a href="#defining-translation-strings">\n              Defining Translation Strings\n            </a>\n          </h2><p><a name="using-short-keys"></a></p>\n\n          <p><a name="using-short-keys"></a></p>\n          <h3>\n            <a href="#using-short-keys">\n              Using Short Keys\n            </a>\n          </h3><p>Typically, translation strings are stored in files within the <code>resources/lang</code> directory. Within this directory there should be a subdirectory for each language supported by the application:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">/resources</span>\n    <span class="hljs-string">/lang</span>\n        <span class="hljs-string">/en</span>\n            messages.php\n        <span class="hljs-string">/es</span>\n            messages.php</code></pre>\n  <p>All language files return an array of keyed strings. For example:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-comment">// resources/lang/en/messages.php</span>\n\n<span class="hljs-keyword">return</span> [\n    <span class="hljs-string">\'welcome\'</span> =&gt; <span class="hljs-string">\'Welcome to our application\'</span>\n];</span></code></pre>\n  <p><a name="using-translation-strings-as-keys"></a></p>\n\n          <p><a name="using-translation-strings-as-keys"></a></p>\n          <h3>\n            <a href="#using-translation-strings-as-keys">\n              Using Translation Strings As Keys\n            </a>\n          </h3><p>For applications with heavy translation requirements, defining every string with a &quot;short key&quot; can become quickly confusing when referencing them in your views. For this reason, Laravel also provides support for defining translation strings using the &quot;default&quot; translation of the string as the key.</p>\n<p>Translation files that use translation strings as keys are stored as JSON files in the <code>resources/lang</code> directory. For example, if your application has a Spanish translation, you should create a <code>resources/lang/es.json</code> file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">{\n    <span class="hljs-attr">"I love programming."</span>: <span class="hljs-string">"Me encanta programar."</span>\n}</code></pre>\n  <p><a name="retrieving-translation-strings"></a></p>\n\n          <p><a name="retrieving-translation-strings"></a></p>\n          <h2>\n            <a href="#retrieving-translation-strings">\n              Retrieving Translation Strings\n            </a>\n          </h2><p>You may retrieve lines from language files using the <code>__</code> helper function. The <code>__</code> method accepts the file and key of the translation string as its first argument. For example, let&#39;s retrieve the <code>welcome</code> translation string from the <code>resources/lang/messages.php</code> language file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">echo <span class="hljs-constructor">__(\'<span class="hljs-params">messages</span>.<span class="hljs-params">welcome</span>\')</span>;\n\necho <span class="hljs-constructor">__(\'I <span class="hljs-params">love</span> <span class="hljs-params">programming</span>.\')</span>;</code></pre>\n  <p>If you are using the <router-link to="/docs/{{version}}/blade">Blade templating engine</router-link>, you may use the <code>{{ }}</code> syntax to echo the translation string or use the <code>@lang</code> directive:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">{{ __(<span class="hljs-string">\'messages.welcome\'</span>) }}\n\n<span class="hljs-meta">@lang(<span class="hljs-meta-string">\'messages.welcome\'</span>)</span></code></pre>\n  <p>If the specified translation string does not exist, the <code>__</code> function will return the translation string key. So, using the example above, the <code>__</code> function would return <code>messages.welcome</code> if the translation string does not exist.</p>\n<blockquote>\n<p>{note} The <code>@lang</code> directive does not escape any output. You are <strong>fully responsible</strong> for escaping your own output when using this directive.</p>\n</blockquote>\n<p><a name="replacing-parameters-in-translation-strings"></a></p>\n\n          <p><a name="replacing-parameters-in-translation-strings"></a></p>\n          <h3>\n            <a href="#replacing-parameters-in-translation-strings">\n              Replacing Parameters In Translation Strings\n            </a>\n          </h3><p>If you wish, you may define placeholders in your translation strings. All placeholders are prefixed with a <code>:</code>. For example, you may define a welcome message with a placeholder name:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'welcome\'</span> =&gt; <span class="hljs-symbol">\'Welcome</span>, :name\',</code></pre>\n  <p>To replace the placeholders when retrieving a translation string, pass an array of replacements as the second argument to the <code>__</code> function:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">echo</span> __(<span class="hljs-string">\'messages.welcome\'</span>, [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'dayle\'</span>]);</code></pre>\n  <p>If your placeholder contains all capital letters, or only has its first letter capitalized, the translated value will be capitalized accordingly:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'welcome\'</span> =&gt; <span class="hljs-string">\'Welcome, :NAME\'</span>, <span class="hljs-comment">// Welcome, DAYLE</span>\n<span class="hljs-string">\'goodbye\'</span> =&gt; <span class="hljs-string">\'Goodbye, :Name\'</span>, <span class="hljs-comment">// Goodbye, Dayle</span></code></pre>\n  <p><a name="pluralization"></a></p>\n\n          <p><a name="pluralization"></a></p>\n          <h3>\n            <a href="#pluralization">\n              Pluralization\n            </a>\n          </h3><p>Pluralization is a complex problem, as different languages have a variety of complex rules for pluralization. By using a &quot;pipe&quot; character, you may distinguish singular and plural forms of a string:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'apples\'</span> =&gt; <span class="hljs-symbol">\'There</span> is one apple|<span class="hljs-type">There</span> are many apples\',</code></pre>\n  <p>You may even create more complex pluralization rules which specify translation strings for multiple number ranges:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">\'apples\' =&gt; \'{0} There <span class="hljs-keyword">are</span> none|<span class="hljs-comment">[1,19]</span> There <span class="hljs-keyword">are</span> some|<span class="hljs-comment">[20,*]</span> There <span class="hljs-keyword">are</span> many\',</code></pre>\n  <p>After defining a translation string that has pluralization options, you may use the <code>trans_choice</code> function to retrieve the line for a given &quot;count&quot;. In this example, since the count is greater than one, the plural form of the translation string is returned:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">echo trans<span class="hljs-constructor">_choice(\'<span class="hljs-params">messages</span>.<span class="hljs-params">apples</span>\', 10)</span>;</code></pre>\n  <p>You may also define placeholder attributes in pluralization strings. These placeholders may be replaced by passing an array as the third argument to the <code>trans_choice</code> function:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'minutes_ago\'</span> =&gt; <span class="hljs-string">\'{1} :value minute ago|[2,*] :value minutes ago\'</span>,\n\n<span class="hljs-keyword">echo</span> trans_choice(<span class="hljs-string">\'time.minutes_ago\'</span>, <span class="hljs-number">5</span>, [<span class="hljs-string">\'value\'</span> =&gt; <span class="hljs-number">5</span>]);</code></pre>\n  <p>If you would like to display the integer value that was passed to the <code>trans_choice</code> function, you may use the <code>:count</code> placeholder:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">\'apples\' =&gt; \'{0} There <span class="hljs-keyword">are</span> none|{1} There <span class="hljs-keyword">is</span> one|<span class="hljs-comment">[2,*]</span> There <span class="hljs-keyword">are</span> :count\',</code></pre>\n  <p><a name="overriding-package-language-files"></a></p>\n\n          <p><a name="overriding-package-language-files"></a></p>\n          <h2>\n            <a href="#overriding-package-language-files">\n              Overriding Package Language Files\n            </a>\n          </h2><p>Some packages may ship with their own language files. Instead of changing the package&#39;s core files to tweak these lines, you may override them by placing files in the <code>resources/lang/vendor/{package}/{locale}</code> directory.</p>\n<p>So, for example, if you need to override the English translation strings in <code>messages.php</code> for a package named <code>skyrim/hearthfire</code>, you should place a language file at: <code>resources/lang/vendor/hearthfire/en/messages.php</code>. Within this file, you should only define the translation strings you wish to override. Any translation strings you don&#39;t override will still be loaded from the package&#39;s original language files.</p>\n'},"78c4":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="directory-structure"></a></p>\n          <h1>\n            <a href="#directory-structure">\n              Directory Structure\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#the-root-directory">The Root Directory</a><ul>\n<li><a href="#the-root-app-directory">The <code>app</code> Directory</a></li>\n<li><a href="#the-bootstrap-directory">The <code>bootstrap</code> Directory</a></li>\n<li><a href="#the-config-directory">The <code>config</code> Directory</a></li>\n<li><a href="#the-database-directory">The <code>database</code> Directory</a></li>\n<li><a href="#the-public-directory">The <code>public</code> Directory</a></li>\n<li><a href="#the-resources-directory">The <code>resources</code> Directory</a></li>\n<li><a href="#the-routes-directory">The <code>routes</code> Directory</a></li>\n<li><a href="#the-storage-directory">The <code>storage</code> Directory</a></li>\n<li><a href="#the-tests-directory">The <code>tests</code> Directory</a></li>\n<li><a href="#the-vendor-directory">The <code>vendor</code> Directory</a></li>\n</ul>\n</li>\n<li><a href="#the-app-directory">The App Directory</a><ul>\n<li><a href="#the-broadcasting-directory">The <code>Broadcasting</code> Directory</a></li>\n<li><a href="#the-console-directory">The <code>Console</code> Directory</a></li>\n<li><a href="#the-events-directory">The <code>Events</code> Directory</a></li>\n<li><a href="#the-exceptions-directory">The <code>Exceptions</code> Directory</a></li>\n<li><a href="#the-http-directory">The <code>Http</code> Directory</a></li>\n<li><a href="#the-jobs-directory">The <code>Jobs</code> Directory</a></li>\n<li><a href="#the-listeners-directory">The <code>Listeners</code> Directory</a></li>\n<li><a href="#the-mail-directory">The <code>Mail</code> Directory</a></li>\n<li><a href="#the-notifications-directory">The <code>Notifications</code> Directory</a></li>\n<li><a href="#the-policies-directory">The <code>Policies</code> Directory</a></li>\n<li><a href="#the-providers-directory">The <code>Providers</code> Directory</a></li>\n<li><a href="#the-rules-directory">The <code>Rules</code> Directory</a></li>\n</ul>\n</li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>The default Laravel application structure is intended to provide a great starting point for both large and small applications. But you are free to organize your application however you like. Laravel imposes almost no restrictions on where any given class is located - as long as Composer can autoload the class.</p>\n\n          <p><a name="where-is-the-models-directory-"></a></p>\n          <h4>\n            <a href="#where-is-the-models-directory-">\n              Where Is The Models Directory?\n            </a>\n          </h4><p>When getting started with Laravel, many developers are confused by the lack of a <code>models</code> directory. However, the lack of such a directory is intentional. We find the word &quot;models&quot; ambiguous since it means many different things to many different people. Some developers refer to an application&#39;s &quot;model&quot; as the totality of all of its business logic, while others refer to &quot;models&quot; as classes that interact with a relational database.</p>\n<p>For this reason, we choose to place Eloquent models in the <code>app</code> directory by default, and allow the developer to place them somewhere else if they choose.</p>\n<p><a name="the-root-directory"></a></p>\n\n          <p><a name="the-root-directory"></a></p>\n          <h2>\n            <a href="#the-root-directory">\n              The Root Directory\n            </a>\n          </h2><p><a name="the-root-app-directory"></a></p>\n\n          <p><a name="the-app-directory"></a></p>\n          <h4>\n            <a href="#the-app-directory">\n              The App Directory\n            </a>\n          </h4><p>The <code>app</code> directory contains the core code of your application. We&#39;ll explore this directory in more detail soon; however, almost all of the classes in your application will be in this directory.</p>\n<p><a name="the-bootstrap-directory"></a></p>\n\n          <p><a name="the-bootstrap-directory"></a></p>\n          <h4>\n            <a href="#the-bootstrap-directory">\n              The Bootstrap Directory\n            </a>\n          </h4><p>The <code>bootstrap</code> directory contains the <code>app.php</code> file which bootstraps the framework. This directory also houses a <code>cache</code> directory which contains framework generated files for performance optimization such as the route and services cache files.</p>\n<p><a name="the-config-directory"></a></p>\n\n          <p><a name="the-config-directory"></a></p>\n          <h4>\n            <a href="#the-config-directory">\n              The Config Directory\n            </a>\n          </h4><p>The <code>config</code> directory, as the name implies, contains all of your application&#39;s configuration files. It&#39;s a great idea to read through all of these files and familiarize yourself with all of the options available to you.</p>\n<p><a name="the-database-directory"></a></p>\n\n          <p><a name="the-database-directory"></a></p>\n          <h4>\n            <a href="#the-database-directory">\n              The Database Directory\n            </a>\n          </h4><p>The <code>database</code> directory contains your database migrations, model factories, and seeds. If you wish, you may also use this directory to hold an SQLite database.</p>\n<p><a name="the-public-directory"></a></p>\n\n          <p><a name="the-public-directory"></a></p>\n          <h4>\n            <a href="#the-public-directory">\n              The Public Directory\n            </a>\n          </h4><p>The <code>public</code> directory contains the <code>index.php</code> file, which is the entry point for all requests entering your application and configures autoloading. This directory also houses your assets such as images, JavaScript, and CSS.</p>\n<p><a name="the-resources-directory"></a></p>\n\n          <p><a name="the-resources-directory"></a></p>\n          <h4>\n            <a href="#the-resources-directory">\n              The Resources Directory\n            </a>\n          </h4><p>The <code>resources</code> directory contains your views as well as your raw, un-compiled assets such as LESS, SASS, or JavaScript. This directory also houses all of your language files.</p>\n<p><a name="the-routes-directory"></a></p>\n\n          <p><a name="the-routes-directory"></a></p>\n          <h4>\n            <a href="#the-routes-directory">\n              The Routes Directory\n            </a>\n          </h4><p>The <code>routes</code> directory contains all of the route definitions for your application. By default, several route files are included with Laravel: <code>web.php</code>, <code>api.php</code>, <code>console.php</code> and <code>channels.php</code>.</p>\n<p>The <code>web.php</code> file contains routes that the <code>RouteServiceProvider</code> places in the <code>web</code> middleware group, which provides session state, CSRF protection, and cookie encryption. If your application does not offer a stateless, RESTful API, all of your routes will most likely be defined in the <code>web.php</code> file.</p>\n<p>The <code>api.php</code> file contains routes that the <code>RouteServiceProvider</code> places in the <code>api</code> middleware group, which provides rate limiting. These routes are intended to be stateless, so requests entering the application through these routes are intended to be authenticated via tokens and will not have access to session state.</p>\n<p>The <code>console.php</code> file is where you may define all of your Closure based console commands. Each Closure is bound to a command instance allowing a simple approach to interacting with each command&#39;s IO methods. Even though this file does not define HTTP routes, it defines console based entry points (routes) into your application.</p>\n<p>The <code>channels.php</code> file is where you may register all of the event broadcasting channels that your application supports.</p>\n<p><a name="the-storage-directory"></a></p>\n\n          <p><a name="the-storage-directory"></a></p>\n          <h4>\n            <a href="#the-storage-directory">\n              The Storage Directory\n            </a>\n          </h4><p>The <code>storage</code> directory contains your compiled Blade templates, file based sessions, file caches, and other files generated by the framework. This directory is segregated into <code>app</code>, <code>framework</code>, and <code>logs</code> directories. The <code>app</code> directory may be used to store any files generated by your application. The <code>framework</code> directory is used to store framework generated files and caches. Finally, the <code>logs</code> directory contains your application&#39;s log files.</p>\n<p>The <code>storage/app/public</code> directory may be used to store user-generated files, such as profile avatars, that should be publicly accessible. You should create a symbolic link at <code>public/storage</code> which points to this directory. You may create the link using the <code>php artisan storage:link</code> command.</p>\n<p><a name="the-tests-directory"></a></p>\n\n          <p><a name="the-tests-directory"></a></p>\n          <h4>\n            <a href="#the-tests-directory">\n              The Tests Directory\n            </a>\n          </h4><p>The <code>tests</code> directory contains your automated tests. An example <router-link to="https://phpunit.de/">PHPUnit</router-link> test is provided out of the box. Each test class should be suffixed with the word <code>Test</code>. You may run your tests using the <code>phpunit</code> or <code>php vendor/bin/phpunit</code> commands.</p>\n<p><a name="the-vendor-directory"></a></p>\n\n          <p><a name="the-vendor-directory"></a></p>\n          <h4>\n            <a href="#the-vendor-directory">\n              The Vendor Directory\n            </a>\n          </h4><p>The <code>vendor</code> directory contains your <router-link to="https://getcomposer.org">Composer</router-link> dependencies.</p>\n<p><a name="the-app-directory"></a></p>\n\n          <p><a name="the-app-directory"></a></p>\n          <h2>\n            <a href="#the-app-directory">\n              The App Directory\n            </a>\n          </h2><p>The majority of your application is housed in the <code>app</code> directory. By default, this directory is namespaced under <code>App</code> and is autoloaded by Composer using the <router-link to="https://www.php-fig.org/psr/psr-4/">PSR-4 autoloading standard</router-link>.</p>\n<p>The <code>app</code> directory contains a variety of additional directories such as <code>Console</code>, <code>Http</code>, and <code>Providers</code>. Think of the <code>Console</code> and <code>Http</code> directories as providing an API into the core of your application. The HTTP protocol and CLI are both mechanisms to interact with your application, but do not actually contain application logic. In other words, they are two ways of issuing commands to your application. The <code>Console</code> directory contains all of your Artisan commands, while the <code>Http</code> directory contains your controllers, middleware, and requests.</p>\n<p>A variety of other directories will be generated inside the <code>app</code> directory as you use the <code>make</code> Artisan commands to generate classes. So, for example, the <code>app/Jobs</code> directory will not exist until you execute the <code>make:job</code> Artisan command to generate a job class.</p>\n<blockquote>\n<p>{tip} Many of the classes in the <code>app</code> directory can be generated by Artisan via commands. To review the available commands, run the <code>php artisan list make</code> command in your terminal.</p>\n</blockquote>\n<p><a name="the-broadcasting-directory"></a></p>\n\n          <p><a name="the-broadcasting-directory"></a></p>\n          <h4>\n            <a href="#the-broadcasting-directory">\n              The Broadcasting Directory\n            </a>\n          </h4><p>The <code>Broadcasting</code> directory contains all of the broadcast channel classes for your application. These classes are generated using the <code>make:channel</code> command. This directory does not exist by default, but will be created for you when you create your first channel. To learn more about channels, check out the documentation on <router-link to="/docs/{{version}}/broadcasting">event broadcasting</router-link>.</p>\n<p><a name="the-console-directory"></a></p>\n\n          <p><a name="the-console-directory"></a></p>\n          <h4>\n            <a href="#the-console-directory">\n              The Console Directory\n            </a>\n          </h4><p>The <code>Console</code> directory contains all of the custom Artisan commands for your application. These commands may be generated using the <code>make:command</code> command. This directory also houses your console kernel, which is where your custom Artisan commands are registered and your <router-link to="/docs/{{version}}/scheduling">scheduled tasks</router-link> are defined.</p>\n<p><a name="the-events-directory"></a></p>\n\n          <p><a name="the-events-directory"></a></p>\n          <h4>\n            <a href="#the-events-directory">\n              The Events Directory\n            </a>\n          </h4><p>This directory does not exist by default, but will be created for you by the <code>event:generate</code> and <code>make:event</code> Artisan commands. The <code>Events</code> directory houses <router-link to="/docs/{{version}}/events">event classes</router-link>. Events may be used to alert other parts of your application that a given action has occurred, providing a great deal of flexibility and decoupling.</p>\n<p><a name="the-exceptions-directory"></a></p>\n\n          <p><a name="the-exceptions-directory"></a></p>\n          <h4>\n            <a href="#the-exceptions-directory">\n              The Exceptions Directory\n            </a>\n          </h4><p>The <code>Exceptions</code> directory contains your application&#39;s exception handler and is also a good place to place any exceptions thrown by your application. If you would like to customize how your exceptions are logged or rendered, you should modify the <code>Handler</code> class in this directory.</p>\n<p><a name="the-http-directory"></a></p>\n\n          <p><a name="the-http-directory"></a></p>\n          <h4>\n            <a href="#the-http-directory">\n              The Http Directory\n            </a>\n          </h4><p>The <code>Http</code> directory contains your controllers, middleware, and form requests. Almost all of the logic to handle requests entering your application will be placed in this directory.</p>\n<p><a name="the-jobs-directory"></a></p>\n\n          <p><a name="the-jobs-directory"></a></p>\n          <h4>\n            <a href="#the-jobs-directory">\n              The Jobs Directory\n            </a>\n          </h4><p>This directory does not exist by default, but will be created for you if you execute the <code>make:job</code> Artisan command. The <code>Jobs</code> directory houses the <router-link to="/docs/{{version}}/queues">queueable jobs</router-link> for your application. Jobs may be queued by your application or run synchronously within the current request lifecycle. Jobs that run synchronously during the current request are sometimes referred to as &quot;commands&quot; since they are an implementation of the <router-link to="https://en.wikipedia.org/wiki/Command_pattern">command pattern</router-link>.</p>\n<p><a name="the-listeners-directory"></a></p>\n\n          <p><a name="the-listeners-directory"></a></p>\n          <h4>\n            <a href="#the-listeners-directory">\n              The Listeners Directory\n            </a>\n          </h4><p>This directory does not exist by default, but will be created for you if you execute the <code>event:generate</code> or <code>make:listener</code> Artisan commands. The <code>Listeners</code> directory contains the classes that handle your <router-link to="/docs/{{version}}/events">events</router-link>. Event listeners receive an event instance and perform logic in response to the event being fired. For example, a <code>UserRegistered</code> event might be handled by a <code>SendWelcomeEmail</code> listener.</p>\n<p><a name="the-mail-directory"></a></p>\n\n          <p><a name="the-mail-directory"></a></p>\n          <h4>\n            <a href="#the-mail-directory">\n              The Mail Directory\n            </a>\n          </h4><p>This directory does not exist by default, but will be created for you if you execute the <code>make:mail</code> Artisan command. The <code>Mail</code> directory contains all of your classes that represent emails sent by your application. Mail objects allow you to encapsulate all of the logic of building an email in a single, simple class that may be sent using the <code>Mail::send</code> method.</p>\n<p><a name="the-notifications-directory"></a></p>\n\n          <p><a name="the-notifications-directory"></a></p>\n          <h4>\n            <a href="#the-notifications-directory">\n              The Notifications Directory\n            </a>\n          </h4><p>This directory does not exist by default, but will be created for you if you execute the <code>make:notification</code> Artisan command. The <code>Notifications</code> directory contains all of the &quot;transactional&quot; notifications that are sent by your application, such as simple notifications about events that happen within your application. Laravel&#39;s notification features abstracts sending notifications over a variety of drivers such as email, Slack, SMS, or stored in a database.</p>\n<p><a name="the-policies-directory"></a></p>\n\n          <p><a name="the-policies-directory"></a></p>\n          <h4>\n            <a href="#the-policies-directory">\n              The Policies Directory\n            </a>\n          </h4><p>This directory does not exist by default, but will be created for you if you execute the <code>make:policy</code> Artisan command. The <code>Policies</code> directory contains the authorization policy classes for your application. Policies are used to determine if a user can perform a given action against a resource. For more information, check out the <router-link to="/docs/{{version}}/authorization">authorization documentation</router-link>.</p>\n<p><a name="the-providers-directory"></a></p>\n\n          <p><a name="the-providers-directory"></a></p>\n          <h4>\n            <a href="#the-providers-directory">\n              The Providers Directory\n            </a>\n          </h4><p>The <code>Providers</code> directory contains all of the <router-link to="/docs/{{version}}/providers">service providers</router-link> for your application. Service providers bootstrap your application by binding services in the service container, registering events, or performing any other tasks to prepare your application for incoming requests.</p>\n<p>In a fresh Laravel application, this directory will already contain several providers. You are free to add your own providers to this directory as needed.</p>\n<p><a name="the-rules-directory"></a></p>\n\n          <p><a name="the-rules-directory"></a></p>\n          <h4>\n            <a href="#the-rules-directory">\n              The Rules Directory\n            </a>\n          </h4><p>This directory does not exist by default, but will be created for you if you execute the <code>make:rule</code> Artisan command. The <code>Rules</code> directory contains the custom validation rule objects for your application. Rules are used to encapsulate complicated validation logic in a simple object. For more information, check out the <router-link to="/docs/{{version}}/validation">validation documentation</router-link>.</p>\n'},7997:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="http-redirects"></a></p>\n          <h1>\n            <a href="#http-redirects">\n              HTTP Redirects\n            </a>\n          </h1><ul>\n<li><a href="#creating-redirects">Creating Redirects</a></li>\n<li><a href="#redirecting-named-routes">Redirecting To Named Routes</a></li>\n<li><a href="#redirecting-controller-actions">Redirecting To Controller Actions</a></li>\n<li><a href="#redirecting-with-flashed-session-data">Redirecting With Flashed Session Data</a></li>\n</ul>\n<p><a name="creating-redirects"></a></p>\n\n          <p><a name="creating-redirects"></a></p>\n          <h2>\n            <a href="#creating-redirects">\n              Creating Redirects\n            </a>\n          </h2><p>Redirect responses are instances of the <code>Illuminate\\Http\\RedirectResponse</code> class, and contain the proper headers needed to redirect the user to another URL. There are several ways to generate a <code>RedirectResponse</code> instance. The simplest method is to use the global <code>redirect</code> helper:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::<span class="hljs-keyword">get</span>(<span class="hljs-string">\'dashboard\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">\'home/dashboard\'</span>);\n});</code></pre>\n  <p>Sometimes you may wish to redirect the user to their previous location, such as when a submitted form is invalid. You may do so by using the global <code>back</code> helper function. Since this feature utilizes the <router-link to="/docs/{{version}}/session">session</router-link>, make sure the route calling the <code>back</code> function is using the <code>web</code> middleware group or has all of the session middleware applied:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::post(<span class="hljs-string">\'user/profile\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">// Validate the request...</span>\n\n    <span class="hljs-keyword">return</span> back()-&gt;withInput();\n});</code></pre>\n  <p><a name="redirecting-named-routes"></a></p>\n\n          <p><a name="redirecting-to-named-routes"></a></p>\n          <h2>\n            <a href="#redirecting-to-named-routes">\n              Redirecting To Named Routes\n            </a>\n          </h2><p>When you call the <code>redirect</code> helper with no parameters, an instance of <code>Illuminate\\Routing\\Redirector</code> is returned, allowing you to call any method on the <code>Redirector</code> instance. For example, to generate a <code>RedirectResponse</code> to a named route, you may use the <code>route</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> redirect<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>route(<span class="hljs-string">\'login\'</span>);</code></pre>\n  <p>If your route has parameters, you may pass them as the second argument to the <code>route</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// For a route with the following URI: profile/{id}</span>\n\n<span class="hljs-keyword">return</span> redirect()-&gt;route(<span class="hljs-string">\'profile\'</span>, [<span class="hljs-string">\'id\'</span> =&gt; <span class="hljs-number">1</span>]);</code></pre>\n  \n          <p><a name="populating-parameters-via-eloquent-models"></a></p>\n          <h4>\n            <a href="#populating-parameters-via-eloquent-models">\n              Populating Parameters Via Eloquent Models\n            </a>\n          </h4><p>If you are redirecting to a route with an &quot;ID&quot; parameter that is being populated from an Eloquent model, you may pass the model itself. The ID will be extracted automatically:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// For a route with the following URI: profile/{id}</span>\n\n<span class="hljs-keyword">return</span> redirect()-&gt;route(<span class="hljs-string">\'profile\'</span>, [$user]);</code></pre>\n  <p>If you would like to customize the value that is placed in the route parameter, you should override the <code>getRouteKey</code> method on your Eloquent model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the value of the model\'s route key.\n *\n * <span class="hljs-doctag">@return</span> mixed\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRouteKey</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;slug;\n}</code></pre>\n  <p><a name="redirecting-controller-actions"></a></p>\n\n          <p><a name="redirecting-to-controller-actions"></a></p>\n          <h2>\n            <a href="#redirecting-to-controller-actions">\n              Redirecting To Controller Actions\n            </a>\n          </h2><p>You may also generate redirects to <router-link to="/docs/{{version}}/controllers">controller actions</router-link>. To do so, pass the controller and action name to the <code>action</code> method. Remember, you do not need to specify the full namespace to the controller since Laravel&#39;s <code>RouteServiceProvider</code> will automatically set the base controller namespace:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> redirect<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>action(<span class="hljs-string">\'HomeController@index\'</span>);</code></pre>\n  <p>If your controller route requires parameters, you may pass them as the second argument to the <code>action</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> redirect<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>action(\n    <span class="hljs-string">\'UserController@profile\'</span>, [<span class="hljs-string">\'id\'</span> =&gt; <span class="hljs-number">1</span>]\n);</code></pre>\n  <p><a name="redirecting-with-flashed-session-data"></a></p>\n\n          <p><a name="redirecting-with-flashed-session-data"></a></p>\n          <h2>\n            <a href="#redirecting-with-flashed-session-data">\n              Redirecting With Flashed Session Data\n            </a>\n          </h2><p>Redirecting to a new URL and <router-link to="/docs/{{version}}/session#flash-data">flashing data to the session</router-link> are usually done at the same time. Typically, this is done after successfully performing an action when you flash a success message to the session. For convenience, you may create a <code>RedirectResponse</code> instance and flash data to the session in a single, fluent method chain:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::post(<span class="hljs-string">\'user/profile\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">// Update the user\'s profile...</span>\n\n    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">\'dashboard\'</span>)-&gt;with(<span class="hljs-string">\'status\'</span>, <span class="hljs-string">\'Profile updated!\'</span>);\n});</code></pre>\n  <p>After the user is redirected, you may display the flashed message from the <router-link to="/docs/{{version}}/session">session</router-link>. For example, using <router-link to="/docs/{{version}}/blade">Blade syntax</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">@<span class="hljs-keyword">if</span> (session(<span class="hljs-string">\'status\'</span>))\n    &lt;<span class="hljs-keyword">div</span> <span class="hljs-class"><span class="hljs-keyword">class</span>="<span class="hljs-title">alert</span> <span class="hljs-title">alert</span>-<span class="hljs-title">success</span>"&gt;\n        </span>{{ session(<span class="hljs-string">\'status\'</span>) }}\n    &lt;/<span class="hljs-keyword">div</span>&gt;\n@endif</code></pre>\n  '},"7a78":function(s,e,a){"use strict";a.r(e);a("ac6a"),a("8615"),a("96cf");var n=a("3b8d"),t=(a("a481"),a("bc3a")),l=a.n(t),o=a("cbde");vue.$emit("php.loaded"),vue.$on("php.run.tinkerwell",Object(n["a"])(regeneratorRuntime.mark((function s(){var e,a,n;return regeneratorRuntime.wrap((function(s){while(1)switch(s.prev=s.next){case 0:return e="https://".concat(vue.$store.state.Code.iframeId,".").concat(vue.$store.state.Code.deployment,".laravelplayground.com/laravel-playground"),s.prev=1,s.next=4,o["a"].storeFiles(Object.values(vue.$store.state.Code.files),vue.$store.state.Code.fileId);case 4:return a=s.sent,vue.$store.dispatch("setFileId",a.uuid),s.next=8,l.a.post(e+"/preload",{laravel_playground_file_id:vue.$store.state.Code.fileId},{withCredentials:!0});case 8:s.next=12;break;case 10:s.prev=10,s.t0=s["catch"](1);case 12:n="",vue.$store.dispatch("setOutput",n),vue.$store.dispatch("isRunning",!1),vue.$emit("php.print","/");case 16:case"end":return s.stop()}}),s,null,[[1,10]])}))))},"7bfe":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="laravel-dusk"></a></p>\n          <h1>\n            <a href="#laravel-dusk">\n              Laravel Dusk\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#installation">Installation</a><ul>\n<li><a href="#managing-chromedriver-installations">Managing ChromeDriver Installations</a></li>\n<li><a href="#using-other-browsers">Using Other Browsers</a></li>\n</ul>\n</li>\n<li><a href="#getting-started">Getting Started</a><ul>\n<li><a href="#generating-tests">Generating Tests</a></li>\n<li><a href="#running-tests">Running Tests</a></li>\n<li><a href="#environment-handling">Environment Handling</a></li>\n<li><a href="#creating-browsers">Creating Browsers</a></li>\n<li><a href="#browser-macros">Browser Macros</a></li>\n<li><a href="#authentication">Authentication</a></li>\n<li><a href="#migrations">Database Migrations</a></li>\n</ul>\n</li>\n<li><a href="#interacting-with-elements">Interacting With Elements</a><ul>\n<li><a href="#dusk-selectors">Dusk Selectors</a></li>\n<li><a href="#clicking-links">Clicking Links</a></li>\n<li><a href="#text-values-and-attributes">Text, Values, &amp; Attributes</a></li>\n<li><a href="#using-forms">Using Forms</a></li>\n<li><a href="#attaching-files">Attaching Files</a></li>\n<li><a href="#using-the-keyboard">Using The Keyboard</a></li>\n<li><a href="#using-the-mouse">Using The Mouse</a></li>\n<li><a href="#javascript-dialogs">JavaScript Dialogs</a></li>\n<li><a href="#scoping-selectors">Scoping Selectors</a></li>\n<li><a href="#waiting-for-elements">Waiting For Elements</a></li>\n<li><a href="#making-vue-assertions">Making Vue Assertions</a></li>\n</ul>\n</li>\n<li><a href="#available-assertions">Available Assertions</a></li>\n<li><a href="#pages">Pages</a><ul>\n<li><a href="#generating-pages">Generating Pages</a></li>\n<li><a href="#configuring-pages">Configuring Pages</a></li>\n<li><a href="#navigating-to-pages">Navigating To Pages</a></li>\n<li><a href="#shorthand-selectors">Shorthand Selectors</a></li>\n<li><a href="#page-methods">Page Methods</a></li>\n</ul>\n</li>\n<li><a href="#components">Components</a><ul>\n<li><a href="#generating-components">Generating Components</a></li>\n<li><a href="#using-components">Using Components</a></li>\n</ul>\n</li>\n<li><a href="#continuous-integration">Continuous Integration</a><ul>\n<li><a href="#running-tests-on-circle-ci">CircleCI</a></li>\n<li><a href="#running-tests-on-codeship">Codeship</a></li>\n<li><a href="#running-tests-on-heroku-ci">Heroku CI</a></li>\n<li><a href="#running-tests-on-travis-ci">Travis CI</a></li>\n<li><a href="#running-tests-on-github-actions">GitHub Actions</a></li>\n</ul>\n</li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Laravel Dusk provides an expressive, easy-to-use browser automation and testing API. By default, Dusk does not require you to install JDK or Selenium on your machine. Instead, Dusk uses a standalone <router-link to="https://sites.google.com/a/chromium.org/chromedriver/home">ChromeDriver</router-link> installation. However, you are free to utilize any other Selenium compatible driver you wish.</p>\n<p><a name="installation"></a></p>\n\n          <p><a name="installation"></a></p>\n          <h2>\n            <a href="#installation">\n              Installation\n            </a>\n          </h2><p>To get started, you should add the <code>laravel/dusk</code> Composer dependency to your project:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">composer <span class="hljs-built_in">require</span> <span class="hljs-comment">--dev laravel/dusk</span></code></pre>\n  <blockquote>\n<p>{note} If you are manually registering Dusk&#39;s service provider, you should <strong>never</strong> register it in your production environment, as doing so could lead to arbitrary users being able to authenticate with your application.</p>\n</blockquote>\n<p>After installing the Dusk package, run the <code>dusk:install</code> Artisan command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan dusk:<span class="hljs-keyword">install</span></code></pre>\n  <p>A <code>Browser</code> directory will be created within your <code>tests</code> directory and will contain an example test. Next, set the <code>APP_URL</code> environment variable in your <code>.env</code> file. This value should match the URL you use to access your application in a browser.</p>\n<p>To run your tests, use the <code>dusk</code> Artisan command. The <code>dusk</code> command accepts any argument that is also accepted by the <code>phpunit</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">php artisan dusk</span></code></pre>\n  <p>If you had test failures the last time you ran the <code>dusk</code> command, you may save time by re-running the failing tests first using the <code>dusk:fails</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">dusk</span><span class="hljs-selector-pseudo">:fails</span></code></pre>\n  <p><a name="managing-chromedriver-installations"></a></p>\n\n          <p><a name="managing-chromedriver-installations"></a></p>\n          <h3>\n            <a href="#managing-chromedriver-installations">\n              Managing ChromeDriver Installations\n            </a>\n          </h3><p>If you would like to install a different version of ChromeDriver than what is included with Laravel Dusk, you may use the <code>dusk:chrome-driver</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment"># Install the latest version of ChromeDriver for your OS...</span>\n<span class="hljs-attr">php</span> <span class="hljs-string">artisan dusk:chrome-driver</span>\n<span class="hljs-comment">\n# Install a given version of ChromeDriver for your OS...</span>\n<span class="hljs-attr">php</span> <span class="hljs-string">artisan dusk:chrome-driver 74</span>\n<span class="hljs-comment">\n# Install a given version of ChromeDriver for all supported OSs...</span>\n<span class="hljs-attr">php</span> <span class="hljs-string">artisan dusk:chrome-driver --all</span></code></pre>\n  <blockquote>\n<p>{note} Dusk requires the <code>chromedriver</code> binaries to be executable. If you&#39;re having problems running Dusk, you should ensure the binaries are executable using the following command: <code>chmod -R 0755 vendor/laravel/dusk/bin/</code>.</p>\n</blockquote>\n<p><a name="using-other-browsers"></a></p>\n\n          <p><a name="using-other-browsers"></a></p>\n          <h3>\n            <a href="#using-other-browsers">\n              Using Other Browsers\n            </a>\n          </h3><p>By default, Dusk uses Google Chrome and a standalone <router-link to="https://sites.google.com/a/chromium.org/chromedriver/home">ChromeDriver</router-link> installation to run your browser tests. However, you may start your own Selenium server and run your tests against any browser you wish.</p>\n<p>To get started, open your <code>tests/DuskTestCase.php</code> file, which is the base Dusk test case for your application. Within this file, you can remove the call to the <code>startChromeDriver</code> method. This will stop Dusk from automatically starting the ChromeDriver:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Prepare for Dusk test execution.\n *\n * <span class="hljs-doctag">@beforeClass</span>\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">prepare</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-comment">// static::startChromeDriver();</span>\n}</code></pre>\n  <p>Next, you may modify the <code>driver</code> method to connect to the URL and port of your choice. In addition, you may modify the &quot;desired capabilities&quot; that should be passed to the WebDriver:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Create the RemoteWebDriver instance.\n *\n * <span class="hljs-doctag">@return</span> \\Facebook\\WebDriver\\Remote\\RemoteWebDriver\n */</span>\n<span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">driver</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> RemoteWebDriver::create(\n        <span class="hljs-string">\'http://localhost:4444/wd/hub\'</span>, DesiredCapabilities::phantomjs()\n    );\n}</code></pre>\n  <p><a name="getting-started"></a></p>\n\n          <p><a name="getting-started"></a></p>\n          <h2>\n            <a href="#getting-started">\n              Getting Started\n            </a>\n          </h2><p><a name="generating-tests"></a></p>\n\n          <p><a name="generating-tests"></a></p>\n          <h3>\n            <a href="#generating-tests">\n              Generating Tests\n            </a>\n          </h3><p>To generate a Dusk test, use the <code>dusk:make</code> Artisan command. The generated test will be placed in the <code>tests/Browser</code> directory:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">dusk</span><span class="hljs-selector-pseudo">:make</span> <span class="hljs-selector-tag">LoginTest</span></code></pre>\n  <p><a name="running-tests"></a></p>\n\n          <p><a name="running-tests"></a></p>\n          <h3>\n            <a href="#running-tests">\n              Running Tests\n            </a>\n          </h3><p>To run your browser tests, use the <code>dusk</code> Artisan command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">php artisan dusk</span></code></pre>\n  <p>If you had test failures the last time you ran the <code>dusk</code> command, you may save time by re-running the failing tests first using the <code>dusk:fails</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">dusk</span><span class="hljs-selector-pseudo">:fails</span></code></pre>\n  <p>The <code>dusk</code> command accepts any argument that is normally accepted by the PHPUnit test runner, allowing you to only run the tests for a given <router-link to="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.group">group</router-link>, etc:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan dusk <span class="hljs-attribute">--group</span>=foo</code></pre>\n  \n          <p><a name="manually-starting-chromedriver"></a></p>\n          <h4>\n            <a href="#manually-starting-chromedriver">\n              Manually Starting ChromeDriver\n            </a>\n          </h4><p>By default, Dusk will automatically attempt to start ChromeDriver. If this does not work for your particular system, you may manually start ChromeDriver before running the <code>dusk</code> command. If you choose to start ChromeDriver manually, you should comment out the following line of your <code>tests/DuskTestCase.php</code> file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Prepare for Dusk test execution.\n *\n * <span class="hljs-doctag">@beforeClass</span>\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">prepare</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-comment">// static::startChromeDriver();</span>\n}</code></pre>\n  <p>In addition, if you start ChromeDriver on a port other than 9515, you should modify the <code>driver</code> method of the same class:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Create the RemoteWebDriver instance.\n *\n * <span class="hljs-doctag">@return</span> \\Facebook\\WebDriver\\Remote\\RemoteWebDriver\n */</span>\n<span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">driver</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> RemoteWebDriver::create(\n        <span class="hljs-string">\'http://localhost:9515\'</span>, DesiredCapabilities::chrome()\n    );\n}</code></pre>\n  <p><a name="environment-handling"></a></p>\n\n          <p><a name="environment-handling"></a></p>\n          <h3>\n            <a href="#environment-handling">\n              Environment Handling\n            </a>\n          </h3><p>To force Dusk to use its own environment file when running tests, create a <code>.env.dusk.{environment}</code> file in the root of your project. For example, if you will be initiating the <code>dusk</code> command from your <code>local</code> environment, you should create a <code>.env.dusk.local</code> file.</p>\n<p>When running tests, Dusk will back-up your <code>.env</code> file and rename your Dusk environment to <code>.env</code>. Once the tests have completed, your <code>.env</code> file will be restored.</p>\n<p><a name="creating-browsers"></a></p>\n\n          <p><a name="creating-browsers"></a></p>\n          <h3>\n            <a href="#creating-browsers">\n              Creating Browsers\n            </a>\n          </h3><p>To get started, let&#39;s write a test that verifies we can log into our application. After generating a test, we can modify it to navigate to the login page, enter some credentials, and click the &quot;Login&quot; button. To create a browser instance, call the <code>browse</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">Browser</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">DatabaseMigrations</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Dusk</span>\\<span class="hljs-title">Chrome</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">DuskTestCase</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExampleTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DuskTestCase</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">DatabaseMigrations</span>;\n\n    <span class="hljs-comment">/**\n     * A basic browser test example.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testBasicExample</span><span class="hljs-params">()</span>\n    </span>{\n        $user = factory(User::class)-&gt;create([\n            <span class="hljs-string">\'email\'</span> =&gt; <span class="hljs-string">\'taylor@laravel.com\'</span>,\n        ]);\n\n        <span class="hljs-keyword">$this</span>-&gt;browse(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($browser)</span> <span class="hljs-title">use</span> <span class="hljs-params">($user)</span> </span>{\n            $browser-&gt;visit(<span class="hljs-string">\'/login\'</span>)\n                    -&gt;type(<span class="hljs-string">\'email\'</span>, $user-&gt;email)\n                    -&gt;type(<span class="hljs-string">\'password\'</span>, <span class="hljs-string">\'password\'</span>)\n                    -&gt;press(<span class="hljs-string">\'Login\'</span>)\n                    -&gt;assertPathIs(<span class="hljs-string">\'/home\'</span>);\n        });\n    }\n}</span></code></pre>\n  <p>As you can see in the example above, the <code>browse</code> method accepts a callback. A browser instance will automatically be passed to this callback by Dusk and is the main object used to interact with and make assertions against your application.</p>\n\n          <p><a name="creating-multiple-browsers"></a></p>\n          <h4>\n            <a href="#creating-multiple-browsers">\n              Creating Multiple Browsers\n            </a>\n          </h4><p>Sometimes you may need multiple browsers in order to properly carry out a test. For example, multiple browsers may be needed to test a chat screen that interacts with websockets. To create multiple browsers, &quot;ask&quot; for more than one browser in the signature of the callback given to the <code>browse</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-keyword">this</span>-&gt;browse(<span class="hljs-keyword">function</span> ($first, $second) {\n    $first-&gt;loginAs<span class="hljs-function"><span class="hljs-params">(User::find(<span class="hljs-number">1</span>))</span>\n          -&gt;</span>visit<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'/home\'</span>)</span>\n          -&gt;</span>waitForText(<span class="hljs-string">\'Message\'</span>);\n\n    $second-&gt;loginAs<span class="hljs-function"><span class="hljs-params">(User::find(<span class="hljs-number">2</span>))</span>\n           -&gt;</span>visit<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'/home\'</span>)</span>\n           -&gt;</span>waitForText<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'Message\'</span>)</span>\n           -&gt;</span>type<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'message\'</span>, <span class="hljs-string">\'Hey Taylor\'</span>)</span>\n           -&gt;</span>press(<span class="hljs-string">\'Send\'</span>);\n\n    $first-&gt;waitForText<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'Hey Taylor\'</span>)</span>\n          -&gt;</span>assertSee(<span class="hljs-string">\'Jeffrey Way\'</span>);\n});</code></pre>\n  \n          <p><a name="resizing-browser-windows"></a></p>\n          <h4>\n            <a href="#resizing-browser-windows">\n              Resizing Browser Windows\n            </a>\n          </h4><p>You may use the <code>resize</code> method to adjust the size of the browser window:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$browser-&gt;resize(<span class="hljs-number">1920</span>, <span class="hljs-number">1080</span>);</code></pre>\n  <p>The <code>maximize</code> method may be used to maximize the browser window:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;maximize();</code></pre>\n  <p><a name="browser-macros"></a></p>\n\n          <p><a name="browser-macros"></a></p>\n          <h3>\n            <a href="#browser-macros">\n              Browser Macros\n            </a>\n          </h3><p>If you would like to define a custom browser method that you can re-use in a variety of your tests, you may use the <code>macro</code> method on the <code>Browser</code> class. Typically, you should call this method from a <router-link to="/docs/{{version}}/providers">service provider&#39;s</router-link> <code>boot</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Providers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">ServiceProvider</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Dusk</span>\\<span class="hljs-title">Browser</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DuskServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Register the Dusk\'s browser macros.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n    </span>{\n        Browser::macro(<span class="hljs-string">\'scrollToElement\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($element = null)</span> </span>{\n            <span class="hljs-keyword">$this</span>-&gt;script(<span class="hljs-string">"$(\'html, body\').animate({ scrollTop: $(\'$element\').offset().top }, 0);"</span>);\n\n            <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;\n        });\n    }\n}</span></code></pre>\n  <p>The <code>macro</code> function accepts a name as its first argument, and a Closure as its second. The macro&#39;s Closure will be executed when calling the macro as a method on a <code>Browser</code> implementation:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">$this</span>-&gt;browse(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($browser)</span> <span class="hljs-title">use</span> <span class="hljs-params">($user)</span> </span>{\n    $browser-&gt;visit(<span class="hljs-string">\'/pay\'</span>)\n            -&gt;scrollToElement(<span class="hljs-string">\'#credit-card-details\'</span>)\n            -&gt;assertSee(<span class="hljs-string">\'Enter Credit Card Details\'</span>);\n});</code></pre>\n  <p><a name="authentication"></a></p>\n\n          <p><a name="authentication"></a></p>\n          <h3>\n            <a href="#authentication">\n              Authentication\n            </a>\n          </h3><p>Often, you will be testing pages that require authentication. You can use Dusk&#39;s <code>loginAs</code> method in order to avoid interacting with the login screen during every test. The <code>loginAs</code> method accepts a user ID or user model instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">$this</span>-&gt;browse(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($first, $second)</span> </span>{\n    $first-&gt;loginAs(User::find(<span class="hljs-number">1</span>))\n          -&gt;visit(<span class="hljs-string">\'/home\'</span>);\n});</code></pre>\n  <blockquote>\n<p>{note} After using the <code>loginAs</code> method, the user session will be maintained for all tests within the file.</p>\n</blockquote>\n<p><a name="migrations"></a></p>\n\n          <p><a name="database-migrations"></a></p>\n          <h3>\n            <a href="#database-migrations">\n              Database Migrations\n            </a>\n          </h3><p>When your test requires migrations, like the authentication example above, you should never use the <code>RefreshDatabase</code> trait. The <code>RefreshDatabase</code> trait leverages database transactions which will not be applicable across HTTP requests. Instead, use the <code>DatabaseMigrations</code> trait:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">Browser</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">DatabaseMigrations</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Dusk</span>\\<span class="hljs-title">Chrome</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">DuskTestCase</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExampleTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DuskTestCase</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">DatabaseMigrations</span>;\n}</span></code></pre>\n  <p><a name="interacting-with-elements"></a></p>\n\n          <p><a name="interacting-with-elements"></a></p>\n          <h2>\n            <a href="#interacting-with-elements">\n              Interacting With Elements\n            </a>\n          </h2><p><a name="dusk-selectors"></a></p>\n\n          <p><a name="dusk-selectors"></a></p>\n          <h3>\n            <a href="#dusk-selectors">\n              Dusk Selectors\n            </a>\n          </h3><p>Choosing good CSS selectors for interacting with elements is one of the hardest parts of writing Dusk tests. Over time, frontend changes can cause CSS selectors like the following to break your tests:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// HTML...</span>\n\n&lt;<span class="hljs-keyword">button</span>&gt;Login&lt;/<span class="hljs-keyword">button</span>&gt;\n\n<span class="hljs-comment">// Test...</span>\n\n$browser-&gt;click(<span class="hljs-string">\'.login-page .container div &gt; button\'</span>)<span class="hljs-comment">;</span></code></pre>\n  <p>Dusk selectors allow you to focus on writing effective tests rather than remembering CSS selectors. To define a selector, add a <code>dusk</code> attribute to your HTML element. Then, prefix the selector with <code>@</code> to manipulate the attached element within a Dusk test:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// HTML...</span>\n\n&lt;<span class="hljs-keyword">button</span> dusk=<span class="hljs-string">"login-button"</span>&gt;Login&lt;/<span class="hljs-keyword">button</span>&gt;\n\n<span class="hljs-comment">// Test...</span>\n\n$browser-&gt;click(<span class="hljs-string">\'@login-button\'</span>)<span class="hljs-comment">;</span></code></pre>\n  <p><a name="clicking-links"></a></p>\n\n          <p><a name="clicking-links"></a></p>\n          <h3>\n            <a href="#clicking-links">\n              Clicking Links\n            </a>\n          </h3><p>To click a link, you may use the <code>clickLink</code> method on the browser instance. The <code>clickLink</code> method will click the link that has the given display text:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;clickLink(<span class="hljs-variable">$linkText</span>);</code></pre>\n  <blockquote>\n<p>{note} This method interacts with jQuery. If jQuery is not available on the page, Dusk will automatically inject it into the page so it is available for the test&#39;s duration.</p>\n</blockquote>\n<p><a name="text-values-and-attributes"></a></p>\n\n          <p><a name="text-values-amp-attributes"></a></p>\n          <h3>\n            <a href="#text-values-amp-attributes">\n              Text, Values, &amp; Attributes\n            </a>\n          </h3>\n          <p><a name="retrieving-amp-setting-values"></a></p>\n          <h4>\n            <a href="#retrieving-amp-setting-values">\n              Retrieving &amp; Setting Values\n            </a>\n          </h4><p>Dusk provides several methods for interacting with the current display text, value, and attributes of elements on the page. For example, to get the &quot;value&quot; of an element that matches a given selector, use the <code>value</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Retrieve the value...</span>\n$value = $browser-&gt;value(<span class="hljs-string">\'selector\'</span>);\n\n<span class="hljs-comment">// Set the value...</span>\n$browser-&gt;value(<span class="hljs-string">\'selector\'</span>, <span class="hljs-string">\'value\'</span>);</code></pre>\n  \n          <p><a name="retrieving-text"></a></p>\n          <h4>\n            <a href="#retrieving-text">\n              Retrieving Text\n            </a>\n          </h4><p>The <code>text</code> method may be used to retrieve the display text of an element that matches the given selector:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$text</span> = <span class="hljs-variable">$browser</span>-&gt;text(<span class="hljs-string">\'selector\'</span>);</code></pre>\n  \n          <p><a name="retrieving-attributes"></a></p>\n          <h4>\n            <a href="#retrieving-attributes">\n              Retrieving Attributes\n            </a>\n          </h4><p>Finally, the <code>attribute</code> method may be used to retrieve an attribute of an element matching the given selector:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$attribute</span> = <span class="hljs-variable">$browser</span>-&gt;attribute(<span class="hljs-string">\'selector\'</span>, <span class="hljs-string">\'value\'</span>);</code></pre>\n  <p><a name="using-forms"></a></p>\n\n          <p><a name="using-forms"></a></p>\n          <h3>\n            <a href="#using-forms">\n              Using Forms\n            </a>\n          </h3>\n          <p><a name="typing-values"></a></p>\n          <h4>\n            <a href="#typing-values">\n              Typing Values\n            </a>\n          </h4><p>Dusk provides a variety of methods for interacting with forms and input elements. First, let&#39;s take a look at an example of typing text into an input field:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$browser-&gt;<span class="hljs-keyword">type</span>(<span class="hljs-symbol">\'email\'</span>, <span class="hljs-symbol">\'taylor</span>@laravel.com\');</code></pre>\n  <p>Note that, although the method accepts one if necessary, we are not required to pass a CSS selector into the <code>type</code> method. If a CSS selector is not provided, Dusk will search for an input field with the given <code>name</code> attribute. Finally, Dusk will attempt to find a <code>textarea</code> with the given <code>name</code> attribute.</p>\n<p>To append text to a field without clearing its content, you may use the <code>append</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;type(<span class="hljs-string">\'tags\'</span>, <span class="hljs-string">\'foo\'</span>)\n        -&gt;append(<span class="hljs-string">\'tags\'</span>, <span class="hljs-string">\', bar, baz\'</span>);</code></pre>\n  <p>You may clear the value of an input using the <code>clear</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;clear(<span class="hljs-string">\'email\'</span>);</code></pre>\n  \n          <p><a name="dropdowns"></a></p>\n          <h4>\n            <a href="#dropdowns">\n              Dropdowns\n            </a>\n          </h4><p>To select a value in a dropdown selection box, you may use the <code>select</code> method. Like the <code>type</code> method, the <code>select</code> method does not require a full CSS selector. When passing a value to the <code>select</code> method, you should pass the underlying option value instead of the display text:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$browser-&gt;<span class="hljs-keyword">select</span>(<span class="hljs-string">\'size\'</span>, <span class="hljs-string">\'Large\'</span>)<span class="hljs-comment">;</span></code></pre>\n  <p>You may select a random option by omitting the second parameter:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$browser-&gt;<span class="hljs-keyword">select</span>(<span class="hljs-string">\'size\'</span>)<span class="hljs-comment">;</span></code></pre>\n  \n          <p><a name="checkboxes"></a></p>\n          <h4>\n            <a href="#checkboxes">\n              Checkboxes\n            </a>\n          </h4><p>To &quot;check&quot; a checkbox field, you may use the <code>check</code> method. Like many other input related methods, a full CSS selector is not required. If an exact selector match can&#39;t be found, Dusk will search for a checkbox with a matching <code>name</code> attribute:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;check(<span class="hljs-string">\'terms\'</span>);\n\n<span class="hljs-variable">$browser</span>-&gt;uncheck(<span class="hljs-string">\'terms\'</span>);</code></pre>\n  \n          <p><a name="radio-buttons"></a></p>\n          <h4>\n            <a href="#radio-buttons">\n              Radio Buttons\n            </a>\n          </h4><p>To &quot;select&quot; a radio button option, you may use the <code>radio</code> method. Like many other input related methods, a full CSS selector is not required. If an exact selector match can&#39;t be found, Dusk will search for a radio with matching <code>name</code> and <code>value</code> attributes:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;radio(<span class="hljs-string">\'version\'</span>, <span class="hljs-string">\'php7\'</span>);</code></pre>\n  <p><a name="attaching-files"></a></p>\n\n          <p><a name="attaching-files"></a></p>\n          <h3>\n            <a href="#attaching-files">\n              Attaching Files\n            </a>\n          </h3><p>The <code>attach</code> method may be used to attach a file to a <code>file</code> input element. Like many other input related methods, a full CSS selector is not required. If an exact selector match can&#39;t be found, Dusk will search for a file input with matching <code>name</code> attribute:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$browser-&gt;attach(<span class="hljs-string">\'photo\'</span>, <span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">\'/photos/me.png\'</span>);</code></pre>\n  <blockquote>\n<p>{note} The attach function requires the <code>Zip</code> PHP extension to be installed and enabled on your server.</p>\n</blockquote>\n<p><a name="using-the-keyboard"></a></p>\n\n          <p><a name="using-the-keyboard"></a></p>\n          <h3>\n            <a href="#using-the-keyboard">\n              Using The Keyboard\n            </a>\n          </h3><p>The <code>keys</code> method allows you to provide more complex input sequences to a given element than normally allowed by the <code>type</code> method. For example, you may hold modifier keys entering values. In this example, the <code>shift</code> key will be held while <code>taylor</code> is entered into the element matching the given selector. After <code>taylor</code> is typed, <code>otwell</code> will be typed without any modifier keys:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;keys(<span class="hljs-string">\'selector\'</span>, [<span class="hljs-string">\'{shift}\'</span>, <span class="hljs-string">\'taylor\'</span>], <span class="hljs-string">\'otwell\'</span>);</code></pre>\n  <p>You may even send a &quot;hot key&quot; to the primary CSS selector that contains your application:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;keys(<span class="hljs-string">\'.app\'</span>, [<span class="hljs-string">\'{command}\'</span>, <span class="hljs-string">\'j\'</span>]);</code></pre>\n  <blockquote>\n<p>{tip} All modifier keys are wrapped in <code>{}</code> characters, and match the constants defined in the <code>Facebook\\WebDriver\\WebDriverKeys</code> class, which can be <router-link to="https://github.com/facebook/php-webdriver/blob/community/lib/WebDriverKeys.php">found on GitHub</router-link>.</p>\n</blockquote>\n<p><a name="using-the-mouse"></a></p>\n\n          <p><a name="using-the-mouse"></a></p>\n          <h3>\n            <a href="#using-the-mouse">\n              Using The Mouse\n            </a>\n          </h3>\n          <p><a name="clicking-on-elements"></a></p>\n          <h4>\n            <a href="#clicking-on-elements">\n              Clicking On Elements\n            </a>\n          </h4><p>The <code>click</code> method may be used to &quot;click&quot; on an element matching the given selector:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;click(<span class="hljs-string">\'.selector\'</span>);</code></pre>\n  \n          <p><a name="mouseover"></a></p>\n          <h4>\n            <a href="#mouseover">\n              Mouseover\n            </a>\n          </h4><p>The <code>mouseover</code> method may be used when you need to move the mouse over an element matching the given selector:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;mouseover(<span class="hljs-string">\'.selector\'</span>);</code></pre>\n  \n          <p><a name="drag-amp-drop"></a></p>\n          <h4>\n            <a href="#drag-amp-drop">\n              Drag &amp; Drop\n            </a>\n          </h4><p>The <code>drag</code> method may be used to drag an element matching the given selector to another element:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;drag(<span class="hljs-string">\'.from-selector\'</span>, <span class="hljs-string">\'.to-selector\'</span>);</code></pre>\n  <p>Or, you may drag an element in a single direction:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;dragLeft(<span class="hljs-string">\'.selector\'</span>, <span class="hljs-number">10</span>);\n<span class="hljs-variable">$browser</span>-&gt;dragRight(<span class="hljs-string">\'.selector\'</span>, <span class="hljs-number">10</span>);\n<span class="hljs-variable">$browser</span>-&gt;dragUp(<span class="hljs-string">\'.selector\'</span>, <span class="hljs-number">10</span>);\n<span class="hljs-variable">$browser</span>-&gt;dragDown(<span class="hljs-string">\'.selector\'</span>, <span class="hljs-number">10</span>);</code></pre>\n  <p><a name="javascript-dialogs"></a></p>\n\n          <p><a name="javascript-dialogs"></a></p>\n          <h3>\n            <a href="#javascript-dialogs">\n              JavaScript Dialogs\n            </a>\n          </h3><p>Dusk provides various methods to interact with JavaScript Dialogs:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Wait for a dialog to appear:</span>\n$browser-&gt;waitForDialog($seconds = <span class="hljs-keyword">null</span>);\n\n<span class="hljs-comment">// Assert that a dialog has been displayed and that its message matches the given value:</span>\n$browser-&gt;assertDialogOpened(<span class="hljs-string">\'value\'</span>);\n\n<span class="hljs-comment">// Type the given value in an open JavaScript prompt dialog:</span>\n$browser-&gt;typeInDialog(<span class="hljs-string">\'Hello World\'</span>);</code></pre>\n  <p>To close an opened JavaScript Dialog, clicking the OK button:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;acceptDialog();</code></pre>\n  <p>To close an opened JavaScript Dialog, clicking the Cancel button (for a confirmation dialog only):</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;dismissDialog();</code></pre>\n  <p><a name="scoping-selectors"></a></p>\n\n          <p><a name="scoping-selectors"></a></p>\n          <h3>\n            <a href="#scoping-selectors">\n              Scoping Selectors\n            </a>\n          </h3><p>Sometimes you may wish to perform several operations while scoping all of the operations within a given selector. For example, you may wish to assert that some text exists only within a table and then click a button within that table. You may use the <code>with</code> method to accomplish this. All operations performed within the callback given to the <code>with</code> method will be scoped to the original selector:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$browser-&gt;with(<span class="hljs-string">\'.table\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($table)</span> </span>{\n    $table-&gt;assertSee(<span class="hljs-string">\'Hello World\'</span>)\n          -&gt;clickLink(<span class="hljs-string">\'Delete\'</span>);\n});</code></pre>\n  <p><a name="waiting-for-elements"></a></p>\n\n          <p><a name="waiting-for-elements"></a></p>\n          <h3>\n            <a href="#waiting-for-elements">\n              Waiting For Elements\n            </a>\n          </h3><p>When testing applications that use JavaScript extensively, it often becomes necessary to &quot;wait&quot; for certain elements or data to be available before proceeding with a test. Dusk makes this a cinch. Using a variety of methods, you may wait for elements to be visible on the page or even wait until a given JavaScript expression evaluates to <code>true</code>.</p>\n\n          <p><a name="waiting"></a></p>\n          <h4>\n            <a href="#waiting">\n              Waiting\n            </a>\n          </h4><p>If you need to pause the test for a given number of milliseconds, use the <code>pause</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;pause(<span class="hljs-number">1000</span>);</code></pre>\n  \n          <p><a name="waiting-for-selectors"></a></p>\n          <h4>\n            <a href="#waiting-for-selectors">\n              Waiting For Selectors\n            </a>\n          </h4><p>The <code>waitFor</code> method may be used to pause the execution of the test until the element matching the given CSS selector is displayed on the page. By default, this will pause the test for a maximum of five seconds before throwing an exception. If necessary, you may pass a custom timeout threshold as the second argument to the method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Wait a maximum of five seconds for the selector...</span>\n$browser-&gt;waitFor(<span class="hljs-string">\'.selector\'</span>);\n\n<span class="hljs-comment">// Wait a maximum of one second for the selector...</span>\n$browser-&gt;waitFor(<span class="hljs-string">\'.selector\'</span>, <span class="hljs-number">1</span>);</code></pre>\n  <p>You may also wait until the given selector is missing from the page:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;waitUntilMissing(<span class="hljs-string">\'.selector\'</span>);\n\n<span class="hljs-variable">$browser</span>-&gt;waitUntilMissing(<span class="hljs-string">\'.selector\'</span>, <span class="hljs-number">1</span>);</code></pre>\n  \n          <p><a name="scoping-selectors-when-available"></a></p>\n          <h4>\n            <a href="#scoping-selectors-when-available">\n              Scoping Selectors When Available\n            </a>\n          </h4><p>Occasionally, you may wish to wait for a given selector and then interact with the element matching the selector. For example, you may wish to wait until a modal window is available and then press the &quot;OK&quot; button within the modal. The <code>whenAvailable</code> method may be used in this case. All element operations performed within the given callback will be scoped to the original selector:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$browser-&gt;whenAvailable(<span class="hljs-string">\'.modal\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($modal)</span> </span>{\n    $modal-&gt;assertSee(<span class="hljs-string">\'Hello World\'</span>)\n          -&gt;press(<span class="hljs-string">\'OK\'</span>);\n});</code></pre>\n  \n          <p><a name="waiting-for-text"></a></p>\n          <h4>\n            <a href="#waiting-for-text">\n              Waiting For Text\n            </a>\n          </h4><p>The <code>waitForText</code> method may be used to wait until the given text is displayed on the page:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Wait a maximum of five seconds for the text...</span>\n$browser-&gt;waitForText(<span class="hljs-string">\'Hello World\'</span>);\n\n<span class="hljs-comment">// Wait a maximum of one second for the text...</span>\n$browser-&gt;waitForText(<span class="hljs-string">\'Hello World\'</span>, <span class="hljs-number">1</span>);</code></pre>\n  \n          <p><a name="waiting-for-links"></a></p>\n          <h4>\n            <a href="#waiting-for-links">\n              Waiting For Links\n            </a>\n          </h4><p>The <code>waitForLink</code> method may be used to wait until the given link text is displayed on the page:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Wait a maximum of five seconds for the link...</span>\n$browser-&gt;waitForLink(<span class="hljs-string">\'Create\'</span>);\n\n<span class="hljs-comment">// Wait a maximum of one second for the link...</span>\n$browser-&gt;waitForLink(<span class="hljs-string">\'Create\'</span>, <span class="hljs-number">1</span>);</code></pre>\n  \n          <p><a name="waiting-on-the-page-location"></a></p>\n          <h4>\n            <a href="#waiting-on-the-page-location">\n              Waiting On The Page Location\n            </a>\n          </h4><p>When making a path assertion such as <code>$browser-&gt;assertPathIs(&#39;/home&#39;)</code>, the assertion can fail if <code>window.location.pathname</code> is being updated asynchronously. You may use the <code>waitForLocation</code> method to wait for the location to be a given value:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;waitForLocation(<span class="hljs-string">\'/secret\'</span>);</code></pre>\n  <p>You may also wait for a named route&#39;s location:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;waitForRoute(<span class="hljs-variable">$routeName</span>, <span class="hljs-variable">$parameters</span>);</code></pre>\n  \n          <p><a name="waiting-for-page-reloads"></a></p>\n          <h4>\n            <a href="#waiting-for-page-reloads">\n              Waiting for Page Reloads\n            </a>\n          </h4><p>If you need to make assertions after a page has been reloaded, use the <code>waitForReload</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$browser-&gt;click<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'.some-action\'</span>)</span>\n        -&gt;</span>waitForReload<span class="hljs-function"><span class="hljs-params">()</span>\n        -&gt;</span>assertSee(<span class="hljs-string">\'something\'</span>);</code></pre>\n  \n          <p><a name="waiting-on-javascript-expressions"></a></p>\n          <h4>\n            <a href="#waiting-on-javascript-expressions">\n              Waiting On JavaScript Expressions\n            </a>\n          </h4><p>Sometimes you may wish to pause the execution of a test until a given JavaScript expression evaluates to <code>true</code>. You may easily accomplish this using the <code>waitUntil</code> method. When passing an expression to this method, you do not need to include the <code>return</code> keyword or an ending semi-colon:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Wait a maximum of five seconds for the expression to be true...</span>\n$browser-&gt;wait<span class="hljs-constructor">Until(\'App.<span class="hljs-params">dataLoaded</span>\')</span>;\n\n$browser-&gt;wait<span class="hljs-constructor">Until(\'App.<span class="hljs-params">data</span>.<span class="hljs-params">servers</span>.<span class="hljs-params">length</span> &gt; 0\')</span>;\n\n<span class="hljs-comment">// Wait a maximum of one second for the expression to be true...</span>\n$browser-&gt;wait<span class="hljs-constructor">Until(\'App.<span class="hljs-params">data</span>.<span class="hljs-params">servers</span>.<span class="hljs-params">length</span> &gt; 0\', 1)</span>;</code></pre>\n  \n          <p><a name="waiting-on-vue-expressions"></a></p>\n          <h4>\n            <a href="#waiting-on-vue-expressions">\n              Waiting On Vue Expressions\n            </a>\n          </h4><p>The following methods may be used to wait until a given Vue component attribute has a given value:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Wait until the component attribute contains the given value...</span>\n$browser-&gt;waitUntilVue(<span class="hljs-string">\'user.name\'</span>, <span class="hljs-string">\'Taylor\'</span>, <span class="hljs-string">\'@user\'</span>);\n\n<span class="hljs-comment">// Wait until the component attribute doesn\'t contain the given value...</span>\n$browser-&gt;waitUntilVueIsNot(<span class="hljs-string">\'user.name\'</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">\'@user\'</span>);</code></pre>\n  \n          <p><a name="waiting-with-a-callback"></a></p>\n          <h4>\n            <a href="#waiting-with-a-callback">\n              Waiting With A Callback\n            </a>\n          </h4><p>Many of the &quot;wait&quot; methods in Dusk rely on the underlying <code>waitUsing</code> method. You may use this method directly to wait for a given callback to return <code>true</code>. The <code>waitUsing</code> method accepts the maximum number of seconds to wait, the interval at which the Closure should be evaluated, the Closure, and an optional failure message:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$browser-&gt;waitUsing(<span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> <span class="hljs-title">use</span> <span class="hljs-params">($something)</span> </span>{\n    <span class="hljs-keyword">return</span> $something-&gt;isReady();\n}, <span class="hljs-string">"Something wasn\'t ready in time."</span>);</code></pre>\n  <p><a name="making-vue-assertions"></a></p>\n\n          <p><a name="making-vue-assertions"></a></p>\n          <h3>\n            <a href="#making-vue-assertions">\n              Making Vue Assertions\n            </a>\n          </h3><p>Dusk even allows you to make assertions on the state of <router-link to="https://vuejs.org">Vue</router-link> component data. For example, imagine your application contains the following Vue component:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// HTML...</span>\n\n&lt;profile dusk=<span class="hljs-string">"profile-component"</span>&gt;<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span></span>\n\n<span class="hljs-comment">// Component Definition...</span>\n\nVue.component(<span class="hljs-string">\'profile\'</span>, {\n    <span class="hljs-attr">template</span>: <span class="hljs-string">\'&lt;div&gt;{{ user.name }}&lt;/div&gt;\'</span>,\n\n    <span class="hljs-attr">data</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n        <span class="hljs-keyword">return</span> {\n            <span class="hljs-attr">user</span>: {\n              <span class="hljs-attr">name</span>: <span class="hljs-string">\'Taylor\'</span>\n            }\n        };\n    }\n});</code></pre>\n  <p>You may assert on the state of the Vue component like so:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * A basic Vue test example.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testVue</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;browse(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Browser $browser)</span> </span>{\n        $browser-&gt;visit(<span class="hljs-string">\'/\'</span>)\n                -&gt;assertVue(<span class="hljs-string">\'user.name\'</span>, <span class="hljs-string">\'Taylor\'</span>, <span class="hljs-string">\'@profile-component\'</span>);\n    });\n}</code></pre>\n  <p><a name="available-assertions"></a></p>\n\n          <p><a name="available-assertions"></a></p>\n          <h2>\n            <a href="#available-assertions">\n              Available Assertions\n            </a>\n          </h2><p>Dusk provides a variety of assertions that you may make against your application. All of the available assertions are documented in the list below:</p>\n<style>\n    .collection-method-list > p {\n        column-count: 3; -moz-column-count: 3; -webkit-column-count: 3;\n        column-gap: 2em; -moz-column-gap: 2em; -webkit-column-gap: 2em;\n    }\n\n    .collection-method-list a {\n        display: block;\n    }\n</style>\n\n<div class="collection-method-list" markdown="1">\n[assertTitle](#assert-title)\n[assertTitleContains](#assert-title-contains)\n[assertUrlIs](#assert-url-is)\n[assertSchemeIs](#assert-scheme-is)\n[assertSchemeIsNot](#assert-scheme-is-not)\n[assertHostIs](#assert-host-is)\n[assertHostIsNot](#assert-host-is-not)\n[assertPortIs](#assert-port-is)\n[assertPortIsNot](#assert-port-is-not)\n[assertPathBeginsWith](#assert-path-begins-with)\n[assertPathIs](#assert-path-is)\n[assertPathIsNot](#assert-path-is-not)\n[assertRouteIs](#assert-route-is)\n[assertQueryStringHas](#assert-query-string-has)\n[assertQueryStringMissing](#assert-query-string-missing)\n[assertFragmentIs](#assert-fragment-is)\n[assertFragmentBeginsWith](#assert-fragment-begins-with)\n[assertFragmentIsNot](#assert-fragment-is-not)\n[assertHasCookie](#assert-has-cookie)\n[assertCookieMissing](#assert-cookie-missing)\n[assertCookieValue](#assert-cookie-value)\n[assertPlainCookieValue](#assert-plain-cookie-value)\n[assertSee](#assert-see)\n[assertDontSee](#assert-dont-see)\n[assertSeeIn](#assert-see-in)\n[assertDontSeeIn](#assert-dont-see-in)\n[assertSourceHas](#assert-source-has)\n[assertSourceMissing](#assert-source-missing)\n[assertSeeLink](#assert-see-link)\n[assertDontSeeLink](#assert-dont-see-link)\n[assertInputValue](#assert-input-value)\n[assertInputValueIsNot](#assert-input-value-is-not)\n[assertChecked](#assert-checked)\n[assertNotChecked](#assert-not-checked)\n[assertRadioSelected](#assert-radio-selected)\n[assertRadioNotSelected](#assert-radio-not-selected)\n[assertSelected](#assert-selected)\n[assertNotSelected](#assert-not-selected)\n[assertSelectHasOptions](#assert-select-has-options)\n[assertSelectMissingOptions](#assert-select-missing-options)\n[assertSelectHasOption](#assert-select-has-option)\n[assertValue](#assert-value)\n[assertVisible](#assert-visible)\n[assertPresent](#assert-present)\n[assertMissing](#assert-missing)\n[assertDialogOpened](#assert-dialog-opened)\n[assertEnabled](#assert-enabled)\n[assertDisabled](#assert-disabled)\n[assertButtonEnabled](#assert-button-enabled)\n[assertButtonDisabled](#assert-button-disabled)\n[assertFocused](#assert-focused)\n[assertNotFocused](#assert-not-focused)\n[assertVue](#assert-vue)\n[assertVueIsNot](#assert-vue-is-not)\n[assertVueContains](#assert-vue-contains)\n[assertVueDoesNotContain](#assert-vue-does-not-contain)\n</div>\n\n<p><a name="assert-title"></a></p>\n\n          <p><a name="asserttitle"></a></p>\n          <h4>\n            <a href="#asserttitle">\n              assertTitle\n            </a>\n          </h4><p>Assert that the page title matches the given text:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertTitle(<span class="hljs-variable">$title</span>);</code></pre>\n  <p><a name="assert-title-contains"></a></p>\n\n          <p><a name="asserttitlecontains"></a></p>\n          <h4>\n            <a href="#asserttitlecontains">\n              assertTitleContains\n            </a>\n          </h4><p>Assert that the page title contains the given text:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertTitleContains(<span class="hljs-variable">$title</span>);</code></pre>\n  <p><a name="assert-url-is"></a></p>\n\n          <p><a name="asserturlis"></a></p>\n          <h4>\n            <a href="#asserturlis">\n              assertUrlIs\n            </a>\n          </h4><p>Assert that the current URL (without the query string) matches the given string:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertUrlIs(<span class="hljs-variable">$url</span>);</code></pre>\n  <p><a name="assert-scheme-is"></a></p>\n\n          <p><a name="assertschemeis"></a></p>\n          <h4>\n            <a href="#assertschemeis">\n              assertSchemeIs\n            </a>\n          </h4><p>Assert that the current URL scheme matches the given scheme:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertSchemeIs(<span class="hljs-variable">$scheme</span>);</code></pre>\n  <p><a name="assert-scheme-is-not"></a></p>\n\n          <p><a name="assertschemeisnot"></a></p>\n          <h4>\n            <a href="#assertschemeisnot">\n              assertSchemeIsNot\n            </a>\n          </h4><p>Assert that the current URL scheme does not match the given scheme:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertSchemeIsNot(<span class="hljs-variable">$scheme</span>);</code></pre>\n  <p><a name="assert-host-is"></a></p>\n\n          <p><a name="asserthostis"></a></p>\n          <h4>\n            <a href="#asserthostis">\n              assertHostIs\n            </a>\n          </h4><p>Assert that the current URL host matches the given host:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertHostIs(<span class="hljs-variable">$host</span>);</code></pre>\n  <p><a name="assert-host-is-not"></a></p>\n\n          <p><a name="asserthostisnot"></a></p>\n          <h4>\n            <a href="#asserthostisnot">\n              assertHostIsNot\n            </a>\n          </h4><p>Assert that the current URL host does not match the given host:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertHostIsNot(<span class="hljs-variable">$host</span>);</code></pre>\n  <p><a name="assert-port-is"></a></p>\n\n          <p><a name="assertportis"></a></p>\n          <h4>\n            <a href="#assertportis">\n              assertPortIs\n            </a>\n          </h4><p>Assert that the current URL port matches the given port:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertPortIs(<span class="hljs-variable">$port</span>);</code></pre>\n  <p><a name="assert-port-is-not"></a></p>\n\n          <p><a name="assertportisnot"></a></p>\n          <h4>\n            <a href="#assertportisnot">\n              assertPortIsNot\n            </a>\n          </h4><p>Assert that the current URL port does not match the given port:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertPortIsNot(<span class="hljs-variable">$port</span>);</code></pre>\n  <p><a name="assert-path-begins-with"></a></p>\n\n          <p><a name="assertpathbeginswith"></a></p>\n          <h4>\n            <a href="#assertpathbeginswith">\n              assertPathBeginsWith\n            </a>\n          </h4><p>Assert that the current URL path begins with the given path:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertPathBeginsWith(<span class="hljs-variable">$path</span>);</code></pre>\n  <p><a name="assert-path-is"></a></p>\n\n          <p><a name="assertpathis"></a></p>\n          <h4>\n            <a href="#assertpathis">\n              assertPathIs\n            </a>\n          </h4><p>Assert that the current path matches the given path:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertPathIs(<span class="hljs-string">\'/home\'</span>);</code></pre>\n  <p><a name="assert-path-is-not"></a></p>\n\n          <p><a name="assertpathisnot"></a></p>\n          <h4>\n            <a href="#assertpathisnot">\n              assertPathIsNot\n            </a>\n          </h4><p>Assert that the current path does not match the given path:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertPathIsNot(<span class="hljs-string">\'/home\'</span>);</code></pre>\n  <p><a name="assert-route-is"></a></p>\n\n          <p><a name="assertrouteis"></a></p>\n          <h4>\n            <a href="#assertrouteis">\n              assertRouteIs\n            </a>\n          </h4><p>Assert that the current URL matches the given named route&#39;s URL:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertRouteIs(<span class="hljs-variable">$name</span>, <span class="hljs-variable">$parameters</span>);</code></pre>\n  <p><a name="assert-query-string-has"></a></p>\n\n          <p><a name="assertquerystringhas"></a></p>\n          <h4>\n            <a href="#assertquerystringhas">\n              assertQueryStringHas\n            </a>\n          </h4><p>Assert that the given query string parameter is present:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertQueryStringHas(<span class="hljs-variable">$name</span>);</code></pre>\n  <p>Assert that the given query string parameter is present and has a given value:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertQueryStringHas(<span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span>);</code></pre>\n  <p><a name="assert-query-string-missing"></a></p>\n\n          <p><a name="assertquerystringmissing"></a></p>\n          <h4>\n            <a href="#assertquerystringmissing">\n              assertQueryStringMissing\n            </a>\n          </h4><p>Assert that the given query string parameter is missing:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertQueryStringMissing(<span class="hljs-variable">$name</span>);</code></pre>\n  <p><a name="assert-fragment-is"></a></p>\n\n          <p><a name="assertfragmentis"></a></p>\n          <h4>\n            <a href="#assertfragmentis">\n              assertFragmentIs\n            </a>\n          </h4><p>Assert that the current fragment matches the given fragment:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertFragmentIs(\'<span class="hljs-built_in">anchor</span>\');</code></pre>\n  <p><a name="assert-fragment-begins-with"></a></p>\n\n          <p><a name="assertfragmentbeginswith"></a></p>\n          <h4>\n            <a href="#assertfragmentbeginswith">\n              assertFragmentBeginsWith\n            </a>\n          </h4><p>Assert that the current fragment begins with the given fragment:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertFragmentBeginsWith(\'<span class="hljs-built_in">anchor</span>\');</code></pre>\n  <p><a name="assert-fragment-is-not"></a></p>\n\n          <p><a name="assertfragmentisnot"></a></p>\n          <h4>\n            <a href="#assertfragmentisnot">\n              assertFragmentIsNot\n            </a>\n          </h4><p>Assert that the current fragment does not match the given fragment:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertFragmentIsNot(\'<span class="hljs-built_in">anchor</span>\');</code></pre>\n  <p><a name="assert-has-cookie"></a></p>\n\n          <p><a name="asserthascookie"></a></p>\n          <h4>\n            <a href="#asserthascookie">\n              assertHasCookie\n            </a>\n          </h4><p>Assert that the given cookie is present:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertHasCookie(<span class="hljs-variable">$name</span>);</code></pre>\n  <p><a name="assert-cookie-missing"></a></p>\n\n          <p><a name="assertcookiemissing"></a></p>\n          <h4>\n            <a href="#assertcookiemissing">\n              assertCookieMissing\n            </a>\n          </h4><p>Assert that the given cookie is not present:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertCookieMissing(<span class="hljs-variable">$name</span>);</code></pre>\n  <p><a name="assert-cookie-value"></a></p>\n\n          <p><a name="assertcookievalue"></a></p>\n          <h4>\n            <a href="#assertcookievalue">\n              assertCookieValue\n            </a>\n          </h4><p>Assert that a cookie has a given value:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertCookieValue(<span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span>);</code></pre>\n  <p><a name="assert-plain-cookie-value"></a></p>\n\n          <p><a name="assertplaincookievalue"></a></p>\n          <h4>\n            <a href="#assertplaincookievalue">\n              assertPlainCookieValue\n            </a>\n          </h4><p>Assert that an unencrypted cookie has a given value:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertPlainCookieValue(<span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span>);</code></pre>\n  <p><a name="assert-see"></a></p>\n\n          <p><a name="assertsee"></a></p>\n          <h4>\n            <a href="#assertsee">\n              assertSee\n            </a>\n          </h4><p>Assert that the given text is present on the page:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertSee(<span class="hljs-variable">$text</span>);</code></pre>\n  <p><a name="assert-dont-see"></a></p>\n\n          <p><a name="assertdontsee"></a></p>\n          <h4>\n            <a href="#assertdontsee">\n              assertDontSee\n            </a>\n          </h4><p>Assert that the given text is not present on the page:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertDontSee(<span class="hljs-variable">$text</span>);</code></pre>\n  <p><a name="assert-see-in"></a></p>\n\n          <p><a name="assertseein"></a></p>\n          <h4>\n            <a href="#assertseein">\n              assertSeeIn\n            </a>\n          </h4><p>Assert that the given text is present within the selector:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertSeeIn(<span class="hljs-variable">$selector</span>, <span class="hljs-variable">$text</span>);</code></pre>\n  <p><a name="assert-dont-see-in"></a></p>\n\n          <p><a name="assertdontseein"></a></p>\n          <h4>\n            <a href="#assertdontseein">\n              assertDontSeeIn\n            </a>\n          </h4><p>Assert that the given text is not present within the selector:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertDontSeeIn(<span class="hljs-variable">$selector</span>, <span class="hljs-variable">$text</span>);</code></pre>\n  <p><a name="assert-source-has"></a></p>\n\n          <p><a name="assertsourcehas"></a></p>\n          <h4>\n            <a href="#assertsourcehas">\n              assertSourceHas\n            </a>\n          </h4><p>Assert that the given source code is present on the page:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertSourceHas(<span class="hljs-variable">$code</span>);</code></pre>\n  <p><a name="assert-source-missing"></a></p>\n\n          <p><a name="assertsourcemissing"></a></p>\n          <h4>\n            <a href="#assertsourcemissing">\n              assertSourceMissing\n            </a>\n          </h4><p>Assert that the given source code is not present on the page:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertSourceMissing(<span class="hljs-variable">$code</span>);</code></pre>\n  <p><a name="assert-see-link"></a></p>\n\n          <p><a name="assertseelink"></a></p>\n          <h4>\n            <a href="#assertseelink">\n              assertSeeLink\n            </a>\n          </h4><p>Assert that the given link is present on the page:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertSeeLink(<span class="hljs-variable">$linkText</span>);</code></pre>\n  <p><a name="assert-dont-see-link"></a></p>\n\n          <p><a name="assertdontseelink"></a></p>\n          <h4>\n            <a href="#assertdontseelink">\n              assertDontSeeLink\n            </a>\n          </h4><p>Assert that the given link is not present on the page:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertDontSeeLink(<span class="hljs-variable">$linkText</span>);</code></pre>\n  <p><a name="assert-input-value"></a></p>\n\n          <p><a name="assertinputvalue"></a></p>\n          <h4>\n            <a href="#assertinputvalue">\n              assertInputValue\n            </a>\n          </h4><p>Assert that the given input field has the given value:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertInputValue(<span class="hljs-variable">$field</span>, <span class="hljs-variable">$value</span>);</code></pre>\n  <p><a name="assert-input-value-is-not"></a></p>\n\n          <p><a name="assertinputvalueisnot"></a></p>\n          <h4>\n            <a href="#assertinputvalueisnot">\n              assertInputValueIsNot\n            </a>\n          </h4><p>Assert that the given input field does not have the given value:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertInputValueIsNot(<span class="hljs-variable">$field</span>, <span class="hljs-variable">$value</span>);</code></pre>\n  <p><a name="assert-checked"></a></p>\n\n          <p><a name="assertchecked"></a></p>\n          <h4>\n            <a href="#assertchecked">\n              assertChecked\n            </a>\n          </h4><p>Assert that the given checkbox is checked:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertChecked(<span class="hljs-variable">$field</span>);</code></pre>\n  <p><a name="assert-not-checked"></a></p>\n\n          <p><a name="assertnotchecked"></a></p>\n          <h4>\n            <a href="#assertnotchecked">\n              assertNotChecked\n            </a>\n          </h4><p>Assert that the given checkbox is not checked:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertNotChecked(<span class="hljs-variable">$field</span>);</code></pre>\n  <p><a name="assert-radio-selected"></a></p>\n\n          <p><a name="assertradioselected"></a></p>\n          <h4>\n            <a href="#assertradioselected">\n              assertRadioSelected\n            </a>\n          </h4><p>Assert that the given radio field is selected:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertRadioSelected(<span class="hljs-variable">$field</span>, <span class="hljs-variable">$value</span>);</code></pre>\n  <p><a name="assert-radio-not-selected"></a></p>\n\n          <p><a name="assertradionotselected"></a></p>\n          <h4>\n            <a href="#assertradionotselected">\n              assertRadioNotSelected\n            </a>\n          </h4><p>Assert that the given radio field is not selected:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertRadioNotSelected(<span class="hljs-variable">$field</span>, <span class="hljs-variable">$value</span>);</code></pre>\n  <p><a name="assert-selected"></a></p>\n\n          <p><a name="assertselected"></a></p>\n          <h4>\n            <a href="#assertselected">\n              assertSelected\n            </a>\n          </h4><p>Assert that the given dropdown has the given value selected:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertSelected(<span class="hljs-variable">$field</span>, <span class="hljs-variable">$value</span>);</code></pre>\n  <p><a name="assert-not-selected"></a></p>\n\n          <p><a name="assertnotselected"></a></p>\n          <h4>\n            <a href="#assertnotselected">\n              assertNotSelected\n            </a>\n          </h4><p>Assert that the given dropdown does not have the given value selected:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertNotSelected(<span class="hljs-variable">$field</span>, <span class="hljs-variable">$value</span>);</code></pre>\n  <p><a name="assert-select-has-options"></a></p>\n\n          <p><a name="assertselecthasoptions"></a></p>\n          <h4>\n            <a href="#assertselecthasoptions">\n              assertSelectHasOptions\n            </a>\n          </h4><p>Assert that the given array of values are available to be selected:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertSelectHasOptions(<span class="hljs-variable">$field</span>, <span class="hljs-variable">$values</span>);</code></pre>\n  <p><a name="assert-select-missing-options"></a></p>\n\n          <p><a name="assertselectmissingoptions"></a></p>\n          <h4>\n            <a href="#assertselectmissingoptions">\n              assertSelectMissingOptions\n            </a>\n          </h4><p>Assert that the given array of values are not available to be selected:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertSelectMissingOptions(<span class="hljs-variable">$field</span>, <span class="hljs-variable">$values</span>);</code></pre>\n  <p><a name="assert-select-has-option"></a></p>\n\n          <p><a name="assertselecthasoption"></a></p>\n          <h4>\n            <a href="#assertselecthasoption">\n              assertSelectHasOption\n            </a>\n          </h4><p>Assert that the given value is available to be selected on the given field:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertSelectHasOption(<span class="hljs-variable">$field</span>, <span class="hljs-variable">$value</span>);</code></pre>\n  <p><a name="assert-value"></a></p>\n\n          <p><a name="assertvalue"></a></p>\n          <h4>\n            <a href="#assertvalue">\n              assertValue\n            </a>\n          </h4><p>Assert that the element matching the given selector has the given value:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertValue(<span class="hljs-variable">$selector</span>, <span class="hljs-variable">$value</span>);</code></pre>\n  <p><a name="assert-visible"></a></p>\n\n          <p><a name="assertvisible"></a></p>\n          <h4>\n            <a href="#assertvisible">\n              assertVisible\n            </a>\n          </h4><p>Assert that the element matching the given selector is visible:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertVisible(<span class="hljs-variable">$selector</span>);</code></pre>\n  <p><a name="assert-present"></a></p>\n\n          <p><a name="assertpresent"></a></p>\n          <h4>\n            <a href="#assertpresent">\n              assertPresent\n            </a>\n          </h4><p>Assert that the element matching the given selector is present:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertPresent(<span class="hljs-variable">$selector</span>);</code></pre>\n  <p><a name="assert-missing"></a></p>\n\n          <p><a name="assertmissing"></a></p>\n          <h4>\n            <a href="#assertmissing">\n              assertMissing\n            </a>\n          </h4><p>Assert that the element matching the given selector is not visible:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertMissing(<span class="hljs-variable">$selector</span>);</code></pre>\n  <p><a name="assert-dialog-opened"></a></p>\n\n          <p><a name="assertdialogopened"></a></p>\n          <h4>\n            <a href="#assertdialogopened">\n              assertDialogOpened\n            </a>\n          </h4><p>Assert that a JavaScript dialog with the given message has been opened:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertDialogOpened(<span class="hljs-variable">$message</span>);</code></pre>\n  <p><a name="assert-enabled"></a></p>\n\n          <p><a name="assertenabled"></a></p>\n          <h4>\n            <a href="#assertenabled">\n              assertEnabled\n            </a>\n          </h4><p>Assert that the given field is enabled:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertEnabled(<span class="hljs-variable">$field</span>);</code></pre>\n  <p><a name="assert-disabled"></a></p>\n\n          <p><a name="assertdisabled"></a></p>\n          <h4>\n            <a href="#assertdisabled">\n              assertDisabled\n            </a>\n          </h4><p>Assert that the given field is disabled:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertDisabled(<span class="hljs-variable">$field</span>);</code></pre>\n  <p><a name="assert-button-enabled"></a></p>\n\n          <p><a name="assertbuttonenabled"></a></p>\n          <h4>\n            <a href="#assertbuttonenabled">\n              assertButtonEnabled\n            </a>\n          </h4><p>Assert that the given button is enabled:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertButtonEnabled(<span class="hljs-variable">$button</span>);</code></pre>\n  <p><a name="assert-button-disabled"></a></p>\n\n          <p><a name="assertbuttondisabled"></a></p>\n          <h4>\n            <a href="#assertbuttondisabled">\n              assertButtonDisabled\n            </a>\n          </h4><p>Assert that the given button is disabled:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertButtonDisabled(<span class="hljs-variable">$button</span>);</code></pre>\n  <p><a name="assert-focused"></a></p>\n\n          <p><a name="assertfocused"></a></p>\n          <h4>\n            <a href="#assertfocused">\n              assertFocused\n            </a>\n          </h4><p>Assert that the given field is focused:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertFocused(<span class="hljs-variable">$field</span>);</code></pre>\n  <p><a name="assert-not-focused"></a></p>\n\n          <p><a name="assertnotfocused"></a></p>\n          <h4>\n            <a href="#assertnotfocused">\n              assertNotFocused\n            </a>\n          </h4><p>Assert that the given field is not focused:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;assertNotFocused(<span class="hljs-variable">$field</span>);</code></pre>\n  <p><a name="assert-vue"></a></p>\n\n          <p><a name="assertvue"></a></p>\n          <h4>\n            <a href="#assertvue">\n              assertVue\n            </a>\n          </h4><p>Assert that a given Vue component data property matches the given value:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$browser-&gt;assertVue($property, $value, $componentSelector = <span class="hljs-keyword">null</span>);</code></pre>\n  <p><a name="assert-vue-is-not"></a></p>\n\n          <p><a name="assertvueisnot"></a></p>\n          <h4>\n            <a href="#assertvueisnot">\n              assertVueIsNot\n            </a>\n          </h4><p>Assert that a given Vue component data property does not match the given value:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$browser-&gt;assertVueIsNot($property, $value, $componentSelector = <span class="hljs-keyword">null</span>);</code></pre>\n  <p><a name="assert-vue-contains"></a></p>\n\n          <p><a name="assertvuecontains"></a></p>\n          <h4>\n            <a href="#assertvuecontains">\n              assertVueContains\n            </a>\n          </h4><p>Assert that a given Vue component data property is an array and contains the given value:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$browser-&gt;assertVueContains($property, $value, $componentSelector = <span class="hljs-keyword">null</span>);</code></pre>\n  <p><a name="assert-vue-does-not-contain"></a></p>\n\n          <p><a name="assertvuedoesnotcontain"></a></p>\n          <h4>\n            <a href="#assertvuedoesnotcontain">\n              assertVueDoesNotContain\n            </a>\n          </h4><p>Assert that a given Vue component data property is an array and does not contain the given value:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$browser-&gt;assertVueDoesNotContain($property, $value, $componentSelector = <span class="hljs-keyword">null</span>);</code></pre>\n  <p><a name="pages"></a></p>\n\n          <p><a name="pages"></a></p>\n          <h2>\n            <a href="#pages">\n              Pages\n            </a>\n          </h2><p>Sometimes, tests require several complicated actions to be performed in sequence. This can make your tests harder to read and understand. Pages allow you to define expressive actions that may then be performed on a given page using a single method. Pages also allow you to define short-cuts to common selectors for your application or a single page.</p>\n<p><a name="generating-pages"></a></p>\n\n          <p><a name="generating-pages"></a></p>\n          <h3>\n            <a href="#generating-pages">\n              Generating Pages\n            </a>\n          </h3><p>To generate a page object, use the <code>dusk:page</code> Artisan command. All page objects will be placed in the <code>tests/Browser/Pages</code> directory:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">dusk</span><span class="hljs-selector-pseudo">:page</span> <span class="hljs-selector-tag">Login</span></code></pre>\n  <p><a name="configuring-pages"></a></p>\n\n          <p><a name="configuring-pages"></a></p>\n          <h3>\n            <a href="#configuring-pages">\n              Configuring Pages\n            </a>\n          </h3><p>By default, pages have three methods: <code>url</code>, <code>assert</code>, and <code>elements</code>. We will discuss the <code>url</code> and <code>assert</code> methods now. The <code>elements</code> method will be <a href="#shorthand-selectors">discussed in more detail below</a>.</p>\n\n          <p><a name="the-code-url-code-method"></a></p>\n          <h4>\n            <a href="#the-code-url-code-method">\n              The <code>url</code> Method\n            </a>\n          </h4><p>The <code>url</code> method should return the path of the URL that represents the page. Dusk will use this URL when navigating to the page in the browser:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the URL for the page.\n *\n * <span class="hljs-doctag">@return</span> string\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">url</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-string">\'/login\'</span>;\n}</code></pre>\n  \n          <p><a name="the-code-assert-code-method"></a></p>\n          <h4>\n            <a href="#the-code-assert-code-method">\n              The <code>assert</code> Method\n            </a>\n          </h4><p>The <code>assert</code> method may make any assertions necessary to verify that the browser is actually on the given page. Completing this method is not necessary; however, you are free to make these assertions if you wish. These assertions will be run automatically when navigating to the page:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Assert that the browser is on the page.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">assert</span><span class="hljs-params">(Browser $browser)</span>\n</span>{\n    $browser-&gt;assertPathIs(<span class="hljs-keyword">$this</span>-&gt;url());\n}</code></pre>\n  <p><a name="navigating-to-pages"></a></p>\n\n          <p><a name="navigating-to-pages"></a></p>\n          <h3>\n            <a href="#navigating-to-pages">\n              Navigating To Pages\n            </a>\n          </h3><p>Once a page has been configured, you may navigate to it using the <code>visit</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">Browser</span>\\<span class="hljs-title">Pages</span>\\<span class="hljs-title">Login</span>;\n\n$browser-&gt;visit(<span class="hljs-keyword">new</span> Login);</code></pre>\n  <p>Sometimes you may already be on a given page and need to &quot;load&quot; the page&#39;s selectors and methods into the current test context. This is common when pressing a button and being redirected to a given page without explicitly navigating to it. In this situation, you may use the <code>on</code> method to load the page:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">use Tests<span class="hljs-string">\\Browser\\Pages\\CreatePlaylist;</span>\n\n$browser-&gt;visit<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'/dashboard\'</span>)</span>\n        -&gt;</span>clickLink<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'Create Playlist\'</span>)</span>\n        -&gt;</span><span class="hljs-literal">on</span><span class="hljs-function"><span class="hljs-params">(<span class="hljs-keyword">new</span> CreatePlaylist)</span>\n        -&gt;</span>assertSee(<span class="hljs-string">\'@create\'</span>);</code></pre>\n  <p><a name="shorthand-selectors"></a></p>\n\n          <p><a name="shorthand-selectors"></a></p>\n          <h3>\n            <a href="#shorthand-selectors">\n              Shorthand Selectors\n            </a>\n          </h3><p>The <code>elements</code> method of pages allows you to define quick, easy-to-remember shortcuts for any CSS selector on your page. For example, let&#39;s define a shortcut for the &quot;email&quot; input field of the application&#39;s login page:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the element shortcuts for the page.\n *\n * <span class="hljs-doctag">@return</span> array\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">elements</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> [\n        <span class="hljs-string">\'@email\'</span> =&gt; <span class="hljs-string">\'input[name=email]\'</span>,\n    ];\n}</code></pre>\n  <p>Now, you may use this shorthand selector anywhere you would use a full CSS selector:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$browser</span>-&gt;<span class="hljs-built_in">type</span>(<span class="hljs-string">\'@email\'</span>, <span class="hljs-string">\'taylor@laravel.com\'</span>);</code></pre>\n  \n          <p><a name="global-shorthand-selectors"></a></p>\n          <h4>\n            <a href="#global-shorthand-selectors">\n              Global Shorthand Selectors\n            </a>\n          </h4><p>After installing Dusk, a base <code>Page</code> class will be placed in your <code>tests/Browser/Pages</code> directory. This class contains a <code>siteElements</code> method which may be used to define global shorthand selectors that should be available on every page throughout your application:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the global element shortcuts for the site.\n *\n * <span class="hljs-doctag">@return</span> array\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">siteElements</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> [\n        <span class="hljs-string">\'@element\'</span> =&gt; <span class="hljs-string">\'#selector\'</span>,\n    ];\n}</code></pre>\n  <p><a name="page-methods"></a></p>\n\n          <p><a name="page-methods"></a></p>\n          <h3>\n            <a href="#page-methods">\n              Page Methods\n            </a>\n          </h3><p>In addition to the default methods defined on pages, you may define additional methods which may be used throughout your tests. For example, let&#39;s imagine we are building a music management application. A common action for one page of the application might be to create a playlist. Instead of re-writing the logic to create a playlist in each test, you may define a <code>createPlaylist</code> method on a page class:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">Browser</span>\\<span class="hljs-title">Pages</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Dusk</span>\\<span class="hljs-title">Browser</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dashboard</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Page</span>\n</span>{\n    <span class="hljs-comment">// Other page methods...</span>\n\n    <span class="hljs-comment">/**\n     * Create a new playlist.\n     *\n     * <span class="hljs-doctag">@param</span>  \\Laravel\\Dusk\\Browser  $browser\n     * <span class="hljs-doctag">@param</span>  string  $name\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createPlaylist</span><span class="hljs-params">(Browser $browser, $name)</span>\n    </span>{\n        $browser-&gt;type(<span class="hljs-string">\'name\'</span>, $name)\n                -&gt;check(<span class="hljs-string">\'share\'</span>)\n                -&gt;press(<span class="hljs-string">\'Create Playlist\'</span>);\n    }\n}</span></code></pre>\n  <p>Once the method has been defined, you may use it within any test that utilizes the page. The browser instance will automatically be passed to the page method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">use Tests<span class="hljs-string">\\Browser\\Pages\\Dashboard;</span>\n\n$browser-&gt;visit<span class="hljs-function"><span class="hljs-params">(<span class="hljs-keyword">new</span> Dashboard)</span>\n        -&gt;</span>createPlaylist<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'My Playlist\'</span>)</span>\n        -&gt;</span>assertSee(<span class="hljs-string">\'My Playlist\'</span>);</code></pre>\n  <p><a name="components"></a></p>\n\n          <p><a name="components"></a></p>\n          <h2>\n            <a href="#components">\n              Components\n            </a>\n          </h2><p>Components are similar to Dusk’s “page objects”, but are intended for pieces of UI and functionality that are re-used throughout your application, such as a navigation bar or notification window. As such, components are not bound to specific URLs.</p>\n<p><a name="generating-components"></a></p>\n\n          <p><a name="generating-components"></a></p>\n          <h3>\n            <a href="#generating-components">\n              Generating Components\n            </a>\n          </h3><p>To generate a component, use the <code>dusk:component</code> Artisan command. New components are placed in the <code>test/Browser/Components</code> directory:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">dusk</span><span class="hljs-selector-pseudo">:component</span> <span class="hljs-selector-tag">DatePicker</span></code></pre>\n  <p>As shown above, a &quot;date picker&quot; is an example of a component that might exist throughout your application on a variety of pages. It can become cumbersome to manually write the browser automation logic to select a date in dozens of tests throughout your test suite. Instead, we can define a Dusk component to represent the date picker, allowing us to encapsulate that logic within the component:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">Browser</span>\\<span class="hljs-title">Components</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Dusk</span>\\<span class="hljs-title">Browser</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Dusk</span>\\<span class="hljs-title">Component</span> <span class="hljs-title">as</span> <span class="hljs-title">BaseComponent</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DatePicker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseComponent</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Get the root selector for the component.\n     *\n     * <span class="hljs-doctag">@return</span> string\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">selector</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-string">\'.date-picker\'</span>;\n    }\n\n    <span class="hljs-comment">/**\n     * Assert that the browser page contains the component.\n     *\n     * <span class="hljs-doctag">@param</span>  Browser  $browser\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">assert</span><span class="hljs-params">(Browser $browser)</span>\n    </span>{\n        $browser-&gt;assertVisible(<span class="hljs-keyword">$this</span>-&gt;selector());\n    }\n\n    <span class="hljs-comment">/**\n     * Get the element shortcuts for the component.\n     *\n     * <span class="hljs-doctag">@return</span> array\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">elements</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> [\n            <span class="hljs-string">\'@date-field\'</span> =&gt; <span class="hljs-string">\'input.datepicker-input\'</span>,\n            <span class="hljs-string">\'@year-list\'</span> =&gt; <span class="hljs-string">\'div &gt; div.datepicker-years\'</span>,\n            <span class="hljs-string">\'@month-list\'</span> =&gt; <span class="hljs-string">\'div &gt; div.datepicker-months\'</span>,\n            <span class="hljs-string">\'@day-list\'</span> =&gt; <span class="hljs-string">\'div &gt; div.datepicker-days\'</span>,\n        ];\n    }\n\n    <span class="hljs-comment">/**\n     * Select the given date.\n     *\n     * <span class="hljs-doctag">@param</span>  \\Laravel\\Dusk\\Browser  $browser\n     * <span class="hljs-doctag">@param</span>  int  $year\n     * <span class="hljs-doctag">@param</span>  int  $month\n     * <span class="hljs-doctag">@param</span>  int  $day\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">selectDate</span><span class="hljs-params">($browser, $year, $month, $day)</span>\n    </span>{\n        $browser-&gt;click(<span class="hljs-string">\'@date-field\'</span>)\n                -&gt;within(<span class="hljs-string">\'@year-list\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($browser)</span> <span class="hljs-title">use</span> <span class="hljs-params">($year)</span> </span>{\n                    $browser-&gt;click($year);\n                });\n                -&gt;within(<span class="hljs-string">\'@month-list\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($browser)</span> <span class="hljs-title">use</span> <span class="hljs-params">($month)</span> </span>{\n                    $browser-&gt;click($month);\n                })\n                -&gt;within(<span class="hljs-string">\'@day-list\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($browser)</span> <span class="hljs-title">use</span> <span class="hljs-params">($day)</span> </span>{\n                    $browser-&gt;click($day);\n                });\n    }\n}</span></code></pre>\n  <p><a name="using-components"></a></p>\n\n          <p><a name="using-components"></a></p>\n          <h3>\n            <a href="#using-components">\n              Using Components\n            </a>\n          </h3><p>Once the component has been defined, we can easily select a date within the date picker from any test. And, if the logic necessary to select a date changes, we only need to update the component:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">Browser</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">DatabaseMigrations</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Dusk</span>\\<span class="hljs-title">Browser</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">Browser</span>\\<span class="hljs-title">Components</span>\\<span class="hljs-title">DatePicker</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">DuskTestCase</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExampleTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DuskTestCase</span>\n</span>{\n    <span class="hljs-comment">/**\n     * A basic component test example.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testBasicExample</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">$this</span>-&gt;browse(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Browser $browser)</span> </span>{\n            $browser-&gt;visit(<span class="hljs-string">\'/\'</span>)\n                    -&gt;within(<span class="hljs-keyword">new</span> DatePicker, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($browser)</span> </span>{\n                        $browser-&gt;selectDate(<span class="hljs-number">2019</span>, <span class="hljs-number">1</span>, <span class="hljs-number">30</span>);\n                    })\n                    -&gt;assertSee(<span class="hljs-string">\'January\'</span>);\n        });\n    }\n}</span></code></pre>\n  <p><a name="continuous-integration"></a></p>\n\n          <p><a name="continuous-integration"></a></p>\n          <h2>\n            <a href="#continuous-integration">\n              Continuous Integration\n            </a>\n          </h2><blockquote>\n<p>{note} Before adding a continous integration configuration file, ensure that your <code>.env.testing</code> file contains an <code>APP_URL</code> entry with a value of <code>http://127.0.0.1:8000</code>.</p>\n</blockquote>\n<p><a name="running-tests-on-circle-ci"></a></p>\n\n          <p><a name="circleci"></a></p>\n          <h3>\n            <a href="#circleci">\n              CircleCI\n            </a>\n          </h3><p>If you are using CircleCI to run your Dusk tests, you may use this configuration file as a starting point. Like TravisCI, we will use the <code>php artisan serve</code> command to launch PHP&#39;s built-in web server:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attr">version:</span> <span class="hljs-number">2</span>\n<span class="hljs-attr">jobs:</span>\n<span class="hljs-attr">    build:</span>\n<span class="hljs-attr">        steps:</span>\n<span class="hljs-attr">            - run:</span> <span class="hljs-string">sudo</span> <span class="hljs-string">apt-get</span> <span class="hljs-string">install</span> <span class="hljs-bullet">-y</span> <span class="hljs-string">libsqlite3-dev</span>\n<span class="hljs-attr">            - run:</span> <span class="hljs-string">cp</span> <span class="hljs-string">.env.testing</span> <span class="hljs-string">.env</span>\n<span class="hljs-attr">            - run:</span> <span class="hljs-string">composer</span> <span class="hljs-string">install</span> <span class="hljs-bullet">-n</span> <span class="hljs-bullet">--ignore-platform-reqs</span>\n<span class="hljs-attr">            - run:</span> <span class="hljs-string">php</span> <span class="hljs-string">artisan</span> <span class="hljs-attr">key:generate</span>\n<span class="hljs-attr">            - run:</span> <span class="hljs-string">php</span> <span class="hljs-string">artisan</span> <span class="hljs-attr">dusk:chrome-driver</span>\n<span class="hljs-attr">            - run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span>\n<span class="hljs-attr">            - run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">production</span>\n<span class="hljs-attr">            - run:</span> <span class="hljs-string">vendor/bin/phpunit</span>\n\n<span class="hljs-attr">            - run:</span>\n<span class="hljs-attr">                name:</span> <span class="hljs-string">Start</span> <span class="hljs-string">Chrome</span> <span class="hljs-string">Driver</span>\n<span class="hljs-attr">                command:</span> <span class="hljs-string">./vendor/laravel/dusk/bin/chromedriver-linux</span>\n<span class="hljs-attr">                background:</span> <span class="hljs-literal">true</span>\n\n<span class="hljs-attr">            - run:</span>\n<span class="hljs-attr">                name:</span> <span class="hljs-string">Run</span> <span class="hljs-string">Laravel</span> <span class="hljs-string">Server</span>\n<span class="hljs-attr">                command:</span> <span class="hljs-string">php</span> <span class="hljs-string">artisan</span> <span class="hljs-string">serve</span>\n<span class="hljs-attr">                background:</span> <span class="hljs-literal">true</span>\n\n<span class="hljs-attr">            - run:</span>\n<span class="hljs-attr">                name:</span> <span class="hljs-string">Run</span> <span class="hljs-string">Laravel</span> <span class="hljs-string">Dusk</span> <span class="hljs-string">Tests</span>\n<span class="hljs-attr">                command:</span> <span class="hljs-string">php</span> <span class="hljs-string">artisan</span> <span class="hljs-string">dusk</span>\n\n<span class="hljs-attr">            - store_artifacts:</span>\n<span class="hljs-attr">                path:</span> <span class="hljs-string">tests/Browser/screenshots</span></code></pre>\n  <p><a name="running-tests-on-codeship"></a></p>\n\n          <p><a name="codeship"></a></p>\n          <h3>\n            <a href="#codeship">\n              Codeship\n            </a>\n          </h3><p>To run Dusk tests on <router-link to="https://codeship.com">Codeship</router-link>, add the following commands to your Codeship project. These commands are just a starting point and you are free to add additional commands as needed:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">phpenv local <span class="hljs-number">7.2</span>\ncp <span class="hljs-selector-class">.env</span><span class="hljs-selector-class">.testing</span> <span class="hljs-selector-class">.env</span>\nmkdir -<span class="hljs-selector-tag">p</span> ./bootstrap/cache\ncomposer install --no-interaction --prefer-dist\nphp artisan key:generate\nphp artisan dusk:chrome-driver\nnohup bash -c <span class="hljs-string">"php artisan serve 2&gt;&amp;1 &amp;"</span> &amp;&amp; sleep <span class="hljs-number">5</span>\nphp artisan dusk</code></pre>\n  <p><a name="running-tests-on-heroku-ci"></a></p>\n\n          <p><a name="heroku-ci"></a></p>\n          <h3>\n            <a href="#heroku-ci">\n              Heroku CI\n            </a>\n          </h3><p>To run Dusk tests on <router-link to="https://www.heroku.com/continuous-integration">Heroku CI</router-link>, add the following Google Chrome buildpack and scripts to your Heroku <code>app.json</code> file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">{\n  <span class="hljs-attr">"environments"</span>: {\n    <span class="hljs-attr">"test"</span>: {\n      <span class="hljs-attr">"buildpacks"</span>: [\n        { <span class="hljs-attr">"url"</span>: <span class="hljs-string">"heroku/php"</span> },\n        { <span class="hljs-attr">"url"</span>: <span class="hljs-string">"https://github.com/heroku/heroku-buildpack-google-chrome"</span> }\n      ],\n      <span class="hljs-attr">"scripts"</span>: {\n        <span class="hljs-attr">"test-setup"</span>: <span class="hljs-string">"cp .env.testing .env"</span>,\n        <span class="hljs-attr">"test"</span>: <span class="hljs-string">"nohup bash -c \'./vendor/laravel/dusk/bin/chromedriver-linux &gt; /dev/null 2&gt;&amp;1 &amp;\' &amp;&amp; nohup bash -c \'php artisan serve &gt; /dev/null 2&gt;&amp;1 &amp;\' &amp;&amp; php artisan dusk"</span>\n      }\n    }\n  }\n}</code></pre>\n  <p><a name="running-tests-on-travis-ci"></a></p>\n\n          <p><a name="travis-ci"></a></p>\n          <h3>\n            <a href="#travis-ci">\n              Travis CI\n            </a>\n          </h3><p>To run your Dusk tests on <router-link to="https://travis-ci.org">Travis CI</router-link>, use the following <code>.travis.yml</code> configuration. Since Travis CI is not a graphical environment, we will need to take some extra steps in order to launch a Chrome browser. In addition, we will use <code>php artisan serve</code> to launch PHP&#39;s built-in web server:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">language</span>: php\n\n<span class="jboss-cli">php:\n  - 7.3\n\naddons:\n  chrome: stable\n\ninstall:\n  - cp <span class="hljs-string">.env.testing</span> <span class="hljs-string">.env</span>\n  - travis_retry composer install <span class="hljs-params">--no-interaction</span> <span class="hljs-params">--prefer-dist</span> <span class="hljs-params">--no-suggest</span>\n  - php artisan key<span class="hljs-function">:generate</span>\n  - php artisan dusk<span class="hljs-function">:chrome-driver</span>\n\nbefore_script:\n  - google-chrome-stable <span class="hljs-params">--headless</span> <span class="hljs-params">--disable-gpu</span> <span class="hljs-params">--remote-debugging-port=9222</span> http:<span class="hljs-string">//localhost</span> &amp;\n  - php artisan serve &amp;\n\nscript:\n  - php artisan dusk</span></code></pre>\n  <p><a name="running-tests-on-github-actions"></a></p>\n\n          <p><a name="github-actions"></a></p>\n          <h3>\n            <a href="#github-actions">\n              GitHub Actions\n            </a>\n          </h3><p>If you are using <router-link to="https://github.com/features/actions">Github Actions</router-link> to run your Dusk tests, you may use this configuration file as a starting point. Like TravisCI, we will use the <code>php artisan serve</code> command to launch PHP&#39;s built-in web server:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">name: CI\non: [push]\njobs:\n\n  dusk-php:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - name: Prepare The Environment\n        run: cp .env.example .env\n      - name: Create Database\n        run: mysql <span class="hljs-attribute">--user</span>=<span class="hljs-string">"root"</span> <span class="hljs-attribute">--password</span>=<span class="hljs-string">"root"</span> -e <span class="hljs-string">"CREATE DATABASE my-database character set UTF8mb4 collate utf8mb4_bin;"</span>\n      - name: Install Composer Dependencies\n        run: composer install --no-progress --no-suggest --prefer-dist --optimize-autoloader\n      - name: Generate Application Key\n        run: php artisan key:generate\n      - name:<span class="hljs-built_in"> Upgrade </span>Chrome Driver\n        run: php artisan dusk:chrome-driver\n      - name: Start Chrome Driver\n        run: ./vendor/laravel/dusk/bin/chromedriver-linux &gt; /dev/<span class="hljs-literal">null</span> 2&gt;&amp;1 &amp;\n      - name: <span class="hljs-builtin-name">Run</span> Laravel<span class="hljs-built_in"> Server\n</span>        run: php artisan serve &gt; /dev/<span class="hljs-literal">null</span> 2&gt;&amp;1 &amp;\n      - name: <span class="hljs-builtin-name">Run</span> Dusk Tests\n        run: php artisan dusk</code></pre>\n  '},"7c5b":function(s,e,a){"use strict";var n=a("7f8d"),t=a.n(n);t.a},"7f04":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="configuration"></a></p>\n          <h1>\n            <a href="#configuration">\n              Configuration\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#environment-configuration">Environment Configuration</a><ul>\n<li><a href="#environment-variable-types">Environment Variable Types</a></li>\n<li><a href="#retrieving-environment-configuration">Retrieving Environment Configuration</a></li>\n<li><a href="#determining-the-current-environment">Determining The Current Environment</a></li>\n<li><a href="#hiding-environment-variables-from-debug">Hiding Environment Variables From Debug Pages</a></li>\n</ul>\n</li>\n<li><a href="#accessing-configuration-values">Accessing Configuration Values</a></li>\n<li><a href="#configuration-caching">Configuration Caching</a></li>\n<li><a href="#maintenance-mode">Maintenance Mode</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>All of the configuration files for the Laravel framework are stored in the <code>config</code> directory. Each option is documented, so feel free to look through the files and get familiar with the options available to you.</p>\n<p><a name="environment-configuration"></a></p>\n\n          <p><a name="environment-configuration"></a></p>\n          <h2>\n            <a href="#environment-configuration">\n              Environment Configuration\n            </a>\n          </h2><p>It is often helpful to have different configuration values based on the environment where the application is running. For example, you may wish to use a different cache driver locally than you do on your production server.</p>\n<p>To make this a cinch, Laravel utilizes the <router-link to="https://github.com/vlucas/phpdotenv">DotEnv</router-link> PHP library by Vance Lucas. In a fresh Laravel installation, the root directory of your application will contain a <code>.env.example</code> file. If you install Laravel via Composer, this file will automatically be renamed to <code>.env</code>. Otherwise, you should rename the file manually.</p>\n<p>Your <code>.env</code> file should not be committed to your application&#39;s source control, since each developer / server using your application could require a different environment configuration. Furthermore, this would be a security risk in the event an intruder gains access to your source control repository, since any sensitive credentials would get exposed.</p>\n<p>If you are developing with a team, you may wish to continue including a <code>.env.example</code> file with your application. By putting placeholder values in the example configuration file, other developers on your team can clearly see which environment variables are needed to run your application. You may also create a <code>.env.testing</code> file. This file will override the <code>.env</code> file when running PHPUnit tests or executing Artisan commands with the <code>--env=testing</code> option.</p>\n<blockquote>\n<p>{tip} Any variable in your <code>.env</code> file can be overridden by external environment variables such as server-level or system-level environment variables.</p>\n</blockquote>\n<p><a name="environment-variable-types"></a></p>\n\n          <p><a name="environment-variable-types"></a></p>\n          <h3>\n            <a href="#environment-variable-types">\n              Environment Variable Types\n            </a>\n          </h3><p>All variables in your <code>.env</code> files are parsed as strings, so some reserved values have been created to allow you to return a wider range of types from the <code>env()</code> function:</p>\n<table>\n<thead>\n<tr>\n<th><code>.env</code> Value</th>\n<th><code>env()</code> Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>true</td>\n<td>(bool) true</td>\n</tr>\n<tr>\n<td>(true)</td>\n<td>(bool) true</td>\n</tr>\n<tr>\n<td>false</td>\n<td>(bool) false</td>\n</tr>\n<tr>\n<td>(false)</td>\n<td>(bool) false</td>\n</tr>\n<tr>\n<td>empty</td>\n<td>(string) &#39;&#39;</td>\n</tr>\n<tr>\n<td>(empty)</td>\n<td>(string) &#39;&#39;</td>\n</tr>\n<tr>\n<td>null</td>\n<td>(null) null</td>\n</tr>\n<tr>\n<td>(null)</td>\n<td>(null) null</td>\n</tr>\n</tbody></table>\n<p>If you need to define an environment variable with a value that contains spaces, you may do so by enclosing the value in double quotes.</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attr">APP_NAME</span>=<span class="hljs-string">"My Application"</span></code></pre>\n  <p><a name="retrieving-environment-configuration"></a></p>\n\n          <p><a name="retrieving-environment-configuration"></a></p>\n          <h3>\n            <a href="#retrieving-environment-configuration">\n              Retrieving Environment Configuration\n            </a>\n          </h3><p>All of the variables listed in this file will be loaded into the <code>$_ENV</code> PHP super-global when your application receives a request. However, you may use the <code>env</code> helper to retrieve values from these variables in your configuration files. In fact, if you review the Laravel configuration files, you will notice several of the options already using this helper:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'debug\'</span> =&gt; env(<span class="hljs-string">\'APP_DEBUG\'</span>, <span class="hljs-keyword">false</span>),</code></pre>\n  <p>The second value passed to the <code>env</code> function is the &quot;default value&quot;. This value will be used if no environment variable exists for the given key.</p>\n<p><a name="determining-the-current-environment"></a></p>\n\n          <p><a name="determining-the-current-environment"></a></p>\n          <h3>\n            <a href="#determining-the-current-environment">\n              Determining The Current Environment\n            </a>\n          </h3><p>The current application environment is determined via the <code>APP_ENV</code> variable from your <code>.env</code> file. You may access this value via the <code>environment</code> method on the <code>App</code> <router-link to="/docs/{{version}}/facades">facade</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$environment</span> = App::environment();</code></pre>\n  <p>You may also pass arguments to the <code>environment</code> method to check if the environment matches a given value. The method will return <code>true</code> if the environment matches any of the given values:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> (App::environment(<span class="hljs-string">\'local\'</span>)) {\n    <span class="hljs-comment">// The environment is local</span>\n}\n\n<span class="hljs-keyword">if</span> (App::environment([<span class="hljs-string">\'local\'</span>, <span class="hljs-string">\'staging\'</span>])) {\n    <span class="hljs-comment">// The environment is either local OR staging...</span>\n}</code></pre>\n  <blockquote>\n<p>{tip} The current application environment detection can be overridden by a server-level <code>APP_ENV</code> environment variable. This can be useful when you need to share the same application for different environment configurations, so you can set up a given host to match a given environment in your server&#39;s configurations.</p>\n</blockquote>\n<p><a name="hiding-environment-variables-from-debug"></a></p>\n\n          <p><a name="hiding-environment-variables-from-debug-pages"></a></p>\n          <h3>\n            <a href="#hiding-environment-variables-from-debug-pages">\n              Hiding Environment Variables From Debug Pages\n            </a>\n          </h3><p>When an exception is uncaught and the <code>APP_DEBUG</code> environment variable is <code>true</code>, the debug page will show all environment variables and their contents. In some cases you may want to obscure certain variables. You may do this by updating the <code>debug_blacklist</code> option in your <code>config/app.php</code> configuration file.</p>\n<p>Some variables are available in both the environment variables and the server / request data. Therefore, you may need to blacklist them for both <code>$_ENV</code> and <code>$_SERVER</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> [\n\n    <span class="hljs-comment">// ...</span>\n\n    <span class="hljs-string">\'debug_blacklist\'</span> =&gt; [\n        <span class="hljs-string">\'_ENV\'</span> =&gt; [\n            <span class="hljs-string">\'APP_KEY\'</span>,\n            <span class="hljs-string">\'DB_PASSWORD\'</span>,\n        ],\n\n        <span class="hljs-string">\'_SERVER\'</span> =&gt; [\n            <span class="hljs-string">\'APP_KEY\'</span>,\n            <span class="hljs-string">\'DB_PASSWORD\'</span>,\n        ],\n\n        <span class="hljs-string">\'_POST\'</span> =&gt; [\n            <span class="hljs-string">\'password\'</span>,\n        ],\n    ],\n];</code></pre>\n  <p><a name="accessing-configuration-values"></a></p>\n\n          <p><a name="accessing-configuration-values"></a></p>\n          <h2>\n            <a href="#accessing-configuration-values">\n              Accessing Configuration Values\n            </a>\n          </h2><p>You may easily access your configuration values using the global <code>config</code> helper function from anywhere in your application. The configuration values may be accessed using &quot;dot&quot; syntax, which includes the name of the file and option you wish to access. A default value may also be specified and will be returned if the configuration option does not exist:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">$value</span> = config(<span class="hljs-string">\'app.timezone\'</span>);</code></pre>\n  <p>To set configuration values at runtime, pass an array to the <code>config</code> helper:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">config([<span class="hljs-symbol">\'app</span>.timezone\' =&gt; <span class="hljs-symbol">\'America</span>/<span class="hljs-type">Chicago\'</span>]);</code></pre>\n  <p><a name="configuration-caching"></a></p>\n\n          <p><a name="configuration-caching"></a></p>\n          <h2>\n            <a href="#configuration-caching">\n              Configuration Caching\n            </a>\n          </h2><p>To give your application a speed boost, you should cache all of your configuration files into a single file using the <code>config:cache</code> Artisan command. This will combine all of the configuration options for your application into a single file which will be loaded quickly by the framework.</p>\n<p>You should typically run the <code>php artisan config:cache</code> command as part of your production deployment routine. The command should not be run during local development as configuration options will frequently need to be changed during the course of your application&#39;s development.</p>\n<blockquote>\n<p>{note} If you execute the <code>config:cache</code> command during your deployment process, you should be sure that you are only calling the <code>env</code> function from within your configuration files. Once the configuration has been cached, the <code>.env</code> file will not be loaded and all calls to the <code>env</code> function will return <code>null</code>.</p>\n</blockquote>\n<p><a name="maintenance-mode"></a></p>\n\n          <p><a name="maintenance-mode"></a></p>\n          <h2>\n            <a href="#maintenance-mode">\n              Maintenance Mode\n            </a>\n          </h2><p>When your application is in maintenance mode, a custom view will be displayed for all requests into your application. This makes it easy to &quot;disable&quot; your application while it is updating or when you are performing maintenance. A maintenance mode check is included in the default middleware stack for your application. If the application is in maintenance mode, a <code>MaintenanceModeException</code> will be thrown with a status code of 503.</p>\n<p>To enable maintenance mode, execute the <code>down</code> Artisan command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">php artisan down</span></code></pre>\n  <p>You may also provide <code>message</code> and <code>retry</code> options to the <code>down</code> command. The <code>message</code> value may be used to display or log a custom message, while the <code>retry</code> value will be set as the <code>Retry-After</code> HTTP header&#39;s value:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan down <span class="hljs-attribute">--message</span>=<span class="hljs-string">"Upgrading Database"</span> <span class="hljs-attribute">--retry</span>=60</code></pre>\n  <p>Even while in maintenance mode, specific IP addresses or networks may be allowed to access the application using the command&#39;s <code>allow</code> option:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan down --allow=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> --allow=<span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>/<span class="hljs-number">16</span></code></pre>\n  <p>To disable maintenance mode, use the <code>up</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">php artisan up</span></code></pre>\n  <blockquote>\n<p>{tip} You may customize the default maintenance mode template by defining your own template at <code>resources/views/errors/503.blade.php</code>.</p>\n</blockquote>\n\n          <p><a name="maintenance-mode-amp-queues"></a></p>\n          <h4>\n            <a href="#maintenance-mode-amp-queues">\n              Maintenance Mode &amp; Queues\n            </a>\n          </h4><p>While your application is in maintenance mode, no <router-link to="/docs/{{version}}/queues">queued jobs</router-link> will be handled. The jobs will continue to be handled as normal once the application is out of maintenance mode.</p>\n\n          <p><a name="alternatives-to-maintenance-mode"></a></p>\n          <h4>\n            <a href="#alternatives-to-maintenance-mode">\n              Alternatives To Maintenance Mode\n            </a>\n          </h4><p>Since maintenance mode requires your application to have several seconds of downtime, consider alternatives like <router-link to="https://envoyer.io">Envoyer</router-link> to accomplish zero-downtime deployment with Laravel.</p>\n'},"7f8d":function(s,e,a){},8362:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="http-tests"></a></p>\n          <h1>\n            <a href="#http-tests">\n              HTTP Tests\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a><ul>\n<li><a href="#customizing-request-headers">Customizing Request Headers</a></li>\n<li><a href="#debugging-responses">Debugging Responses</a></li>\n</ul>\n</li>\n<li><a href="#session-and-authentication">Session / Authentication</a></li>\n<li><a href="#testing-json-apis">Testing JSON APIs</a></li>\n<li><a href="#testing-file-uploads">Testing File Uploads</a></li>\n<li><a href="#available-assertions">Available Assertions</a><ul>\n<li><a href="#response-assertions">Response Assertions</a></li>\n<li><a href="#authentication-assertions">Authentication Assertions</a></li>\n</ul>\n</li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Laravel provides a very fluent API for making HTTP requests to your application and examining the output. For example, take a look at the test defined below:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">Feature</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">RefreshDatabase</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">WithoutMiddleware</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">TestCase</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExampleTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span>\n</span>{\n    <span class="hljs-comment">/**\n     * A basic test example.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testBasicTest</span><span class="hljs-params">()</span>\n    </span>{\n        $response = <span class="hljs-keyword">$this</span>-&gt;get(<span class="hljs-string">\'/\'</span>);\n\n        $response-&gt;assertStatus(<span class="hljs-number">200</span>);\n    }\n}</span></code></pre>\n  <p>The <code>get</code> method makes a <code>GET</code> request into the application, while the <code>assertStatus</code> method asserts that the returned response should have the given HTTP status code. In addition to this simple assertion, Laravel also contains a variety of assertions for inspecting the response headers, content, JSON structure, and more.</p>\n<p><a name="customizing-request-headers"></a></p>\n\n          <p><a name="customizing-request-headers"></a></p>\n          <h3>\n            <a href="#customizing-request-headers">\n              Customizing Request Headers\n            </a>\n          </h3><p>You may use the <code>withHeaders</code> method to customize the request&#39;s headers before it is sent to the application. This allows you to add any custom headers you would like to the request:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExampleTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span>\n</span>{\n    <span class="hljs-comment">/**\n     * A basic functional test example.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testBasicExample</span><span class="hljs-params">()</span>\n    </span>{\n        $response = <span class="hljs-keyword">$this</span>-&gt;withHeaders([\n            <span class="hljs-string">\'X-Header\'</span> =&gt; <span class="hljs-string">\'Value\'</span>,\n        ])-&gt;json(<span class="hljs-string">\'POST\'</span>, <span class="hljs-string">\'/user\'</span>, [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Sally\'</span>]);\n\n        $response\n            -&gt;assertStatus(<span class="hljs-number">201</span>)\n            -&gt;assertJson([\n                <span class="hljs-string">\'created\'</span> =&gt; <span class="hljs-keyword">true</span>,\n            ]);\n    }\n}</span></code></pre>\n  <blockquote>\n<p>{tip} The CSRF middleware is automatically disabled when running tests.</p>\n</blockquote>\n<p><a name="debugging-responses"></a></p>\n\n          <p><a name="debugging-responses"></a></p>\n          <h3>\n            <a href="#debugging-responses">\n              Debugging Responses\n            </a>\n          </h3><p>After making a test request to your application, the <code>dump</code> and <code>dumpHeaders</code> methods may be used to examine and debug the response contents:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">Feature</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">RefreshDatabase</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">WithoutMiddleware</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">TestCase</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExampleTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span>\n</span>{\n    <span class="hljs-comment">/**\n     * A basic test example.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testBasicTest</span><span class="hljs-params">()</span>\n    </span>{\n        $response = <span class="hljs-keyword">$this</span>-&gt;get(<span class="hljs-string">\'/\'</span>);\n\n        $response-&gt;dumpHeaders();\n\n        $response-&gt;dump();\n    }\n}</span></code></pre>\n  <p><a name="session-and-authentication"></a></p>\n\n          <p><a name="session-authentication"></a></p>\n          <h2>\n            <a href="#session-authentication">\n              Session / Authentication\n            </a>\n          </h2><p>Laravel provides several helpers for working with the session during HTTP testing. First, you may set the session data to a given array using the <code>withSession</code> method. This is useful for loading the session with data before issuing a request to your application:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExampleTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span>\n</span>{\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testApplication</span><span class="hljs-params">()</span>\n    </span>{\n        $response = <span class="hljs-keyword">$this</span>-&gt;withSession([<span class="hljs-string">\'foo\'</span> =&gt; <span class="hljs-string">\'bar\'</span>])\n                         -&gt;get(<span class="hljs-string">\'/\'</span>);\n    }\n}</span></code></pre>\n  <p>One common use of the session is for maintaining state for the authenticated user. The <code>actingAs</code> helper method provides a simple way to authenticate a given user as the current user. For example, we may use a <router-link to="/docs/{{version}}/database-testing#writing-factories">model factory</router-link> to generate and authenticate a user:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExampleTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span>\n</span>{\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testApplication</span><span class="hljs-params">()</span>\n    </span>{\n        $user = factory(User::class)-&gt;create();\n\n        $response = <span class="hljs-keyword">$this</span>-&gt;actingAs($user)\n                         -&gt;withSession([<span class="hljs-string">\'foo\'</span> =&gt; <span class="hljs-string">\'bar\'</span>])\n                         -&gt;get(<span class="hljs-string">\'/\'</span>);\n    }\n}</span></code></pre>\n  <p>You may also specify which guard should be used to authenticate the given user by passing the guard name as the second argument to the <code>actingAs</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$this</span>-&gt;actingAs(<span class="hljs-variable">$user</span>, <span class="hljs-string">\'api\'</span>)</code></pre>\n  <p><a name="testing-json-apis"></a></p>\n\n          <p><a name="testing-json-apis"></a></p>\n          <h2>\n            <a href="#testing-json-apis">\n              Testing JSON APIs\n            </a>\n          </h2><p>Laravel also provides several helpers for testing JSON APIs and their responses. For example, the <code>json</code>, <code>getJson</code>, <code>postJson</code>, <code>putJson</code>, <code>patchJson</code>, <code>deleteJson</code>, and <code>optionsJson</code> methods may be used to issue JSON requests with various HTTP verbs. You may also easily pass data and headers to these methods. To get started, let&#39;s write a test to make a <code>POST</code> request to <code>/user</code> and assert that the expected data was returned:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExampleTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span>\n</span>{\n    <span class="hljs-comment">/**\n     * A basic functional test example.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testBasicExample</span><span class="hljs-params">()</span>\n    </span>{\n        $response = <span class="hljs-keyword">$this</span>-&gt;postJson(<span class="hljs-string">\'/user\'</span>, [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Sally\'</span>]);\n\n        $response\n            -&gt;assertStatus(<span class="hljs-number">201</span>)\n            -&gt;assertJson([\n                <span class="hljs-string">\'created\'</span> =&gt; <span class="hljs-keyword">true</span>,\n            ]);\n    }\n}</span></code></pre>\n  <blockquote>\n<p>{tip} The <code>assertJson</code> method converts the response to an array and utilizes <code>PHPUnit::assertArraySubset</code> to verify that the given array exists within the JSON response returned by the application. So, if there are other properties in the JSON response, this test will still pass as long as the given fragment is present.</p>\n</blockquote>\n<p><a name="verifying-exact-match"></a></p>\n\n          <p><a name="verifying-an-exact-json-match"></a></p>\n          <h3>\n            <a href="#verifying-an-exact-json-match">\n              Verifying An Exact JSON Match\n            </a>\n          </h3><p>If you would like to verify that the given array is an <strong>exact</strong> match for the JSON returned by the application, you should use the <code>assertExactJson</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExampleTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span>\n</span>{\n    <span class="hljs-comment">/**\n     * A basic functional test example.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testBasicExample</span><span class="hljs-params">()</span>\n    </span>{\n        $response = <span class="hljs-keyword">$this</span>-&gt;json(<span class="hljs-string">\'POST\'</span>, <span class="hljs-string">\'/user\'</span>, [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Sally\'</span>]);\n\n        $response\n            -&gt;assertStatus(<span class="hljs-number">201</span>)\n            -&gt;assertExactJson([\n                <span class="hljs-string">\'created\'</span> =&gt; <span class="hljs-keyword">true</span>,\n            ]);\n    }\n}</span></code></pre>\n  <p><a name="verifying-json-paths"></a></p>\n\n          <p><a name="verifying-json-paths"></a></p>\n          <h3>\n            <a href="#verifying-json-paths">\n              Verifying JSON Paths\n            </a>\n          </h3><p>If you would like to verify that the JSON response contains some given data at a specified path, you should use the <code>assertJsonPath</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExampleTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span>\n</span>{\n    <span class="hljs-comment">/**\n     * A basic functional test example.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testBasicExample</span><span class="hljs-params">()</span>\n    </span>{\n        $response = <span class="hljs-keyword">$this</span>-&gt;json(<span class="hljs-string">\'POST\'</span>, <span class="hljs-string">\'/user\'</span>, [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Sally\'</span>]);\n\n        $response\n            -&gt;assertStatus(<span class="hljs-number">201</span>)\n            -&gt;assertJsonPath(<span class="hljs-string">\'team.owner.name\'</span>, <span class="hljs-string">\'foo\'</span>)\n    }\n}</span></code></pre>\n  <p><a name="testing-file-uploads"></a></p>\n\n          <p><a name="testing-file-uploads"></a></p>\n          <h2>\n            <a href="#testing-file-uploads">\n              Testing File Uploads\n            </a>\n          </h2><p>The <code>Illuminate\\Http\\UploadedFile</code> class provides a <code>fake</code> method which may be used to generate dummy files or images for testing. This, combined with the <code>Storage</code> facade&#39;s <code>fake</code> method greatly simplifies the testing of file uploads. For example, you may combine these two features to easily test an avatar upload form:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">Feature</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">RefreshDatabase</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Testing</span>\\<span class="hljs-title">WithoutMiddleware</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">UploadedFile</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Storage</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">TestCase</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExampleTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span>\n</span>{\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testAvatarUpload</span><span class="hljs-params">()</span>\n    </span>{\n        Storage::fake(<span class="hljs-string">\'avatars\'</span>);\n\n        $file = UploadedFile::fake()-&gt;image(<span class="hljs-string">\'avatar.jpg\'</span>);\n\n        $response = <span class="hljs-keyword">$this</span>-&gt;json(<span class="hljs-string">\'POST\'</span>, <span class="hljs-string">\'/avatar\'</span>, [\n            <span class="hljs-string">\'avatar\'</span> =&gt; $file,\n        ]);\n\n        <span class="hljs-comment">// Assert the file was stored...</span>\n        Storage::disk(<span class="hljs-string">\'avatars\'</span>)-&gt;assertExists($file-&gt;hashName());\n\n        <span class="hljs-comment">// Assert a file does not exist...</span>\n        Storage::disk(<span class="hljs-string">\'avatars\'</span>)-&gt;assertMissing(<span class="hljs-string">\'missing.jpg\'</span>);\n    }\n}</span></code></pre>\n  \n          <p><a name="fake-file-customization"></a></p>\n          <h4>\n            <a href="#fake-file-customization">\n              Fake File Customization\n            </a>\n          </h4><p>When creating files using the <code>fake</code> method, you may specify the width, height, and size of the image in order to better test your validation rules:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">UploadedFile::fake<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>image<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'avatar.jpg\'</span>, $width, $height)</span>-&gt;</span>size(<span class="hljs-number">100</span>);</code></pre>\n  <p>In addition to creating images, you may create files of any other type using the <code>create</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">UploadedFile::fake()-&gt;create(<span class="hljs-string">\'document.pdf\'</span>, <span class="hljs-variable">$sizeInKilobytes</span>);</code></pre>\n  <p><a name="available-assertions"></a></p>\n\n          <p><a name="available-assertions"></a></p>\n          <h2>\n            <a href="#available-assertions">\n              Available Assertions\n            </a>\n          </h2><p><a name="response-assertions"></a></p>\n\n          <p><a name="response-assertions"></a></p>\n          <h3>\n            <a href="#response-assertions">\n              Response Assertions\n            </a>\n          </h3><p>Laravel provides a variety of custom assertion methods for your <router-link to="https://phpunit.de/">PHPUnit</router-link> tests. These assertions may be accessed on the response that is returned from the <code>json</code>, <code>get</code>, <code>post</code>, <code>put</code>, and <code>delete</code> test methods:</p>\n<style>\n    .collection-method-list > p {\n        column-count: 2; -moz-column-count: 2; -webkit-column-count: 2;\n        column-gap: 2em; -moz-column-gap: 2em; -webkit-column-gap: 2em;\n    }\n\n    .collection-method-list a {\n        display: block;\n    }\n</style>\n\n<div class="collection-method-list" markdown="1">\n\n<p><a href="#assert-cookie">assertCookie</a>\n<a href="#assert-cookie-expired">assertCookieExpired</a>\n<a href="#assert-cookie-not-expired">assertCookieNotExpired</a>\n<a href="#assert-cookie-missing">assertCookieMissing</a>\n<a href="#assert-created">assertCreated</a>\n<a href="#assert-dont-see">assertDontSee</a>\n<a href="#assert-dont-see-text">assertDontSeeText</a>\n<a href="#assert-exact-json">assertExactJson</a>\n<a href="#assert-forbidden">assertForbidden</a>\n<a href="#assert-header">assertHeader</a>\n<a href="#assert-header-missing">assertHeaderMissing</a>\n<a href="#assert-json">assertJson</a>\n<a href="#assert-json-count">assertJsonCount</a>\n<a href="#assert-json-fragment">assertJsonFragment</a>\n<a href="#assert-json-missing">assertJsonMissing</a>\n<a href="#assert-json-missing-exact">assertJsonMissingExact</a>\n<a href="#assert-json-missing-validation-errors">assertJsonMissingValidationErrors</a>\n<a href="#assert-json-path">assertJsonPath</a>\n<a href="#assert-json-structure">assertJsonStructure</a>\n<a href="#assert-json-validation-errors">assertJsonValidationErrors</a>\n<a href="#assert-location">assertLocation</a>\n<a href="#assert-no-content">assertNoContent</a>\n<a href="#assert-not-found">assertNotFound</a>\n<a href="#assert-ok">assertOk</a>\n<a href="#assert-plain-cookie">assertPlainCookie</a>\n<a href="#assert-redirect">assertRedirect</a>\n<a href="#assert-see">assertSee</a>\n<a href="#assert-see-in-order">assertSeeInOrder</a>\n<a href="#assert-see-text">assertSeeText</a>\n<a href="#assert-see-text-in-order">assertSeeTextInOrder</a>\n<a href="#assert-session-has">assertSessionHas</a>\n<a href="#assert-session-has-input">assertSessionHasInput</a>\n<a href="#assert-session-has-all">assertSessionHasAll</a>\n<a href="#assert-session-has-errors">assertSessionHasErrors</a>\n<a href="#assert-session-has-errors-in">assertSessionHasErrorsIn</a>\n<a href="#assert-session-has-no-errors">assertSessionHasNoErrors</a>\n<a href="#assert-session-doesnt-have-errors">assertSessionDoesntHaveErrors</a>\n<a href="#assert-session-missing">assertSessionMissing</a>\n<a href="#assert-status">assertStatus</a>\n<a href="#assert-successful">assertSuccessful</a>\n<a href="#assert-unauthorized">assertUnauthorized</a>\n<a href="#assert-view-has">assertViewHas</a>\n<a href="#assert-view-has-all">assertViewHasAll</a>\n<a href="#assert-view-is">assertViewIs</a>\n<a href="#assert-view-missing">assertViewMissing</a></p>\n</div>\n\n<p><a name="assert-cookie"></a></p>\n\n          <p><a name="assertcookie"></a></p>\n          <h4>\n            <a href="#assertcookie">\n              assertCookie\n            </a>\n          </h4><p>Assert that the response contains the given cookie:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response-&gt;assertCookie($cookieName, $value = <span class="hljs-keyword">null</span>);</code></pre>\n  <p><a name="assert-cookie-expired"></a></p>\n\n          <p><a name="assertcookieexpired"></a></p>\n          <h4>\n            <a href="#assertcookieexpired">\n              assertCookieExpired\n            </a>\n          </h4><p>Assert that the response contains the given cookie and it is expired:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$response</span>-&gt;assertCookieExpired(<span class="hljs-variable">$cookieName</span>);</code></pre>\n  <p><a name="assert-cookie-not-expired"></a></p>\n\n          <p><a name="assertcookienotexpired"></a></p>\n          <h4>\n            <a href="#assertcookienotexpired">\n              assertCookieNotExpired\n            </a>\n          </h4><p>Assert that the response contains the given cookie and it is not expired:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$response</span>-&gt;assertCookieNotExpired(<span class="hljs-variable">$cookieName</span>);</code></pre>\n  <p><a name="assert-cookie-missing"></a></p>\n\n          <p><a name="assertcookiemissing"></a></p>\n          <h4>\n            <a href="#assertcookiemissing">\n              assertCookieMissing\n            </a>\n          </h4><p>Assert that the response does not contains the given cookie:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$response</span>-&gt;assertCookieMissing(<span class="hljs-variable">$cookieName</span>);</code></pre>\n  <p><a name="assert-created"></a></p>\n\n          <p><a name="assertcreated"></a></p>\n          <h4>\n            <a href="#assertcreated">\n              assertCreated\n            </a>\n          </h4><p>Assert that the response has a 201 status code:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$response</span>-&gt;assertCreated();</code></pre>\n  <p><a name="assert-dont-see"></a></p>\n\n          <p><a name="assertdontsee"></a></p>\n          <h4>\n            <a href="#assertdontsee">\n              assertDontSee\n            </a>\n          </h4><p>Assert that the given string is not contained within the response:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$response</span>-&gt;assertDontSee(<span class="hljs-variable">$value</span>);</code></pre>\n  <p><a name="assert-dont-see-text"></a></p>\n\n          <p><a name="assertdontseetext"></a></p>\n          <h4>\n            <a href="#assertdontseetext">\n              assertDontSeeText\n            </a>\n          </h4><p>Assert that the given string is not contained within the response text:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$response</span>-&gt;assertDontSeeText(<span class="hljs-variable">$value</span>);</code></pre>\n  <p><a name="assert-exact-json"></a></p>\n\n          <p><a name="assertexactjson"></a></p>\n          <h4>\n            <a href="#assertexactjson">\n              assertExactJson\n            </a>\n          </h4><p>Assert that the response contains an exact match of the given JSON data:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response-&gt;assertExactJson(<span class="hljs-keyword">array</span> $data);</code></pre>\n  <p><a name="assert-forbidden"></a></p>\n\n          <p><a name="assertforbidden"></a></p>\n          <h4>\n            <a href="#assertforbidden">\n              assertForbidden\n            </a>\n          </h4><p>Assert that the response has a forbidden status code:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$response</span>-&gt;assertForbidden();</code></pre>\n  <p><a name="assert-header"></a></p>\n\n          <p><a name="assertheader"></a></p>\n          <h4>\n            <a href="#assertheader">\n              assertHeader\n            </a>\n          </h4><p>Assert that the given header is present on the response:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response-&gt;assertHeader($headerName, $value = <span class="hljs-keyword">null</span>);</code></pre>\n  <p><a name="assert-header-missing"></a></p>\n\n          <p><a name="assertheadermissing"></a></p>\n          <h4>\n            <a href="#assertheadermissing">\n              assertHeaderMissing\n            </a>\n          </h4><p>Assert that the given header is not present on the response:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$response</span>-&gt;assertHeaderMissing(<span class="hljs-variable">$headerName</span>);</code></pre>\n  <p><a name="assert-json"></a></p>\n\n          <p><a name="assertjson"></a></p>\n          <h4>\n            <a href="#assertjson">\n              assertJson\n            </a>\n          </h4><p>Assert that the response contains the given JSON data:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response-&gt;assertJson(<span class="hljs-keyword">array</span> $data, $strict = <span class="hljs-keyword">false</span>);</code></pre>\n  <p><a name="assert-json-count"></a></p>\n\n          <p><a name="assertjsoncount"></a></p>\n          <h4>\n            <a href="#assertjsoncount">\n              assertJsonCount\n            </a>\n          </h4><p>Assert that the response JSON has an array with the expected number of items at the given key:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response-&gt;assertJsonCount($count, $key = <span class="hljs-keyword">null</span>);</code></pre>\n  <p><a name="assert-json-fragment"></a></p>\n\n          <p><a name="assertjsonfragment"></a></p>\n          <h4>\n            <a href="#assertjsonfragment">\n              assertJsonFragment\n            </a>\n          </h4><p>Assert that the response contains the given JSON fragment:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response-&gt;assertJsonFragment(<span class="hljs-keyword">array</span> $data);</code></pre>\n  <p><a name="assert-json-missing"></a></p>\n\n          <p><a name="assertjsonmissing"></a></p>\n          <h4>\n            <a href="#assertjsonmissing">\n              assertJsonMissing\n            </a>\n          </h4><p>Assert that the response does not contain the given JSON fragment:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response-&gt;assertJsonMissing(<span class="hljs-keyword">array</span> $data);</code></pre>\n  <p><a name="assert-json-missing-exact"></a></p>\n\n          <p><a name="assertjsonmissingexact"></a></p>\n          <h4>\n            <a href="#assertjsonmissingexact">\n              assertJsonMissingExact\n            </a>\n          </h4><p>Assert that the response does not contain the exact JSON fragment:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response-&gt;assertJsonMissingExact(<span class="hljs-keyword">array</span> $data);</code></pre>\n  <p><a name="assert-json-missing-validation-errors"></a></p>\n\n          <p><a name="assertjsonmissingvalidationerrors"></a></p>\n          <h4>\n            <a href="#assertjsonmissingvalidationerrors">\n              assertJsonMissingValidationErrors\n            </a>\n          </h4><p>Assert that the response has no JSON validation errors for the given keys:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$response</span>-&gt;assertJsonMissingValidationErrors(<span class="hljs-variable">$keys</span>);</code></pre>\n  <p><a name="assert-json-path"></a></p>\n\n          <p><a name="assertjsonpath"></a></p>\n          <h4>\n            <a href="#assertjsonpath">\n              assertJsonPath\n            </a>\n          </h4><p>Assert that the response contains the given data at the specified path:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response-&gt;assertJsonPath($path,<span class="hljs-built_in"> array </span>$data, $strict = false);</code></pre>\n  <p><a name="assert-json-structure"></a></p>\n\n          <p><a name="assertjsonstructure"></a></p>\n          <h4>\n            <a href="#assertjsonstructure">\n              assertJsonStructure\n            </a>\n          </h4><p>Assert that the response has a given JSON structure:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response-&gt;assertJsonStructure(<span class="hljs-keyword">array</span> $structure);</code></pre>\n  <p><a name="assert-json-validation-errors"></a></p>\n\n          <p><a name="assertjsonvalidationerrors"></a></p>\n          <h4>\n            <a href="#assertjsonvalidationerrors">\n              assertJsonValidationErrors\n            </a>\n          </h4><p>Assert that the response has the given JSON validation errors:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response-&gt;assertJsonValidationErrors(<span class="hljs-keyword">array</span> $data);</code></pre>\n  <p><a name="assert-location"></a></p>\n\n          <p><a name="assertlocation"></a></p>\n          <h4>\n            <a href="#assertlocation">\n              assertLocation\n            </a>\n          </h4><p>Assert that the response has the given URI value in the <code>Location</code> header:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$response</span>-&gt;assertLocation(<span class="hljs-variable">$uri</span>);</code></pre>\n  <p><a name="assert-no-content"></a></p>\n\n          <p><a name="assertnocontent"></a></p>\n          <h4>\n            <a href="#assertnocontent">\n              assertNoContent\n            </a>\n          </h4><p>Assert that the response has the given status code and no content.</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$response</span>-&gt;assertNoContent(<span class="hljs-variable">$status</span> = <span class="hljs-number">204</span>);</code></pre>\n  <p><a name="assert-not-found"></a></p>\n\n          <p><a name="assertnotfound"></a></p>\n          <h4>\n            <a href="#assertnotfound">\n              assertNotFound\n            </a>\n          </h4><p>Assert that the response has a not found status code:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$response</span>-&gt;assertNotFound();</code></pre>\n  <p><a name="assert-ok"></a></p>\n\n          <p><a name="assertok"></a></p>\n          <h4>\n            <a href="#assertok">\n              assertOk\n            </a>\n          </h4><p>Assert that the response has a 200 status code:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$response</span>-&gt;assertOk();</code></pre>\n  <p><a name="assert-plain-cookie"></a></p>\n\n          <p><a name="assertplaincookie"></a></p>\n          <h4>\n            <a href="#assertplaincookie">\n              assertPlainCookie\n            </a>\n          </h4><p>Assert that the response contains the given cookie (unencrypted):</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response-&gt;assertPlainCookie($cookieName, $value = <span class="hljs-keyword">null</span>);</code></pre>\n  <p><a name="assert-redirect"></a></p>\n\n          <p><a name="assertredirect"></a></p>\n          <h4>\n            <a href="#assertredirect">\n              assertRedirect\n            </a>\n          </h4><p>Assert that the response is a redirect to a given URI:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$response</span>-&gt;assertRedirect(<span class="hljs-variable">$uri</span>);</code></pre>\n  <p><a name="assert-see"></a></p>\n\n          <p><a name="assertsee"></a></p>\n          <h4>\n            <a href="#assertsee">\n              assertSee\n            </a>\n          </h4><p>Assert that the given string is contained within the response:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$response</span>-&gt;assertSee(<span class="hljs-variable">$value</span>);</code></pre>\n  <p><a name="assert-see-in-order"></a></p>\n\n          <p><a name="assertseeinorder"></a></p>\n          <h4>\n            <a href="#assertseeinorder">\n              assertSeeInOrder\n            </a>\n          </h4><p>Assert that the given strings are contained in order within the response:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response-&gt;assertSeeInOrder(<span class="hljs-keyword">array</span> $values);</code></pre>\n  <p><a name="assert-see-text"></a></p>\n\n          <p><a name="assertseetext"></a></p>\n          <h4>\n            <a href="#assertseetext">\n              assertSeeText\n            </a>\n          </h4><p>Assert that the given string is contained within the response text:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$response</span>-&gt;assertSeeText(<span class="hljs-variable">$value</span>);</code></pre>\n  <p><a name="assert-see-text-in-order"></a></p>\n\n          <p><a name="assertseetextinorder"></a></p>\n          <h4>\n            <a href="#assertseetextinorder">\n              assertSeeTextInOrder\n            </a>\n          </h4><p>Assert that the given strings are contained in order within the response text:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response-&gt;assertSeeTextInOrder(<span class="hljs-keyword">array</span> $values);</code></pre>\n  <p><a name="assert-session-has"></a></p>\n\n          <p><a name="assertsessionhas"></a></p>\n          <h4>\n            <a href="#assertsessionhas">\n              assertSessionHas\n            </a>\n          </h4><p>Assert that the session contains the given piece of data:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response-&gt;assertSessionHas($key, $value = <span class="hljs-keyword">null</span>);</code></pre>\n  <p><a name="assert-session-has-input"></a></p>\n\n          <p><a name="assertsessionhasinput"></a></p>\n          <h4>\n            <a href="#assertsessionhasinput">\n              assertSessionHasInput\n            </a>\n          </h4><p>Assert that the session has a given value in the flashed input array:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response-&gt;assertSessionHasInput($key, $value = <span class="hljs-keyword">null</span>);</code></pre>\n  <p><a name="assert-session-has-all"></a></p>\n\n          <p><a name="assertsessionhasall"></a></p>\n          <h4>\n            <a href="#assertsessionhasall">\n              assertSessionHasAll\n            </a>\n          </h4><p>Assert that the session has a given list of values:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response-&gt;assertSessionHasAll(<span class="hljs-keyword">array</span> $data);</code></pre>\n  <p><a name="assert-session-has-errors"></a></p>\n\n          <p><a name="assertsessionhaserrors"></a></p>\n          <h4>\n            <a href="#assertsessionhaserrors">\n              assertSessionHasErrors\n            </a>\n          </h4><p>Assert that the session contains an error for the given <code>$keys</code>. If <code>$keys</code> is an associative array, assert that the session contains a specific error message (value) for each field (key):</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response-&gt;assertSessionHasErrors(<span class="hljs-keyword">array</span> $keys, $format = <span class="hljs-keyword">null</span>, $errorBag = <span class="hljs-string">\'default\'</span>);</code></pre>\n  <p><a name="assert-session-has-errors-in"></a></p>\n\n          <p><a name="assertsessionhaserrorsin"></a></p>\n          <h4>\n            <a href="#assertsessionhaserrorsin">\n              assertSessionHasErrorsIn\n            </a>\n          </h4><p>Assert that the session contains an error for the given <code>$keys</code>, within a specific error bag. If <code>$keys</code> is an associative array, assert that the session contains a specific error message (value) for each field (key), within the error bag:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response-&gt;assertSessionHasErrorsIn($errorBag, $keys = [], $format = <span class="hljs-keyword">null</span>);</code></pre>\n  <p><a name="assert-session-has-no-errors"></a></p>\n\n          <p><a name="assertsessionhasnoerrors"></a></p>\n          <h4>\n            <a href="#assertsessionhasnoerrors">\n              assertSessionHasNoErrors\n            </a>\n          </h4><p>Assert that the session has no errors:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$response</span>-&gt;assertSessionHasNoErrors();</code></pre>\n  <p><a name="assert-session-doesnt-have-errors"></a></p>\n\n          <p><a name="assertsessiondoesnthaveerrors"></a></p>\n          <h4>\n            <a href="#assertsessiondoesnthaveerrors">\n              assertSessionDoesntHaveErrors\n            </a>\n          </h4><p>Assert that the session has no errors for the given keys:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response-&gt;assertSessionDoesntHaveErrors($keys = [], $format = <span class="hljs-keyword">null</span>, $errorBag = <span class="hljs-string">\'default\'</span>);</code></pre>\n  <p><a name="assert-session-missing"></a></p>\n\n          <p><a name="assertsessionmissing"></a></p>\n          <h4>\n            <a href="#assertsessionmissing">\n              assertSessionMissing\n            </a>\n          </h4><p>Assert that the session does not contain the given key:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$response</span>-&gt;assertSessionMissing(<span class="hljs-variable">$key</span>);</code></pre>\n  <p><a name="assert-status"></a></p>\n\n          <p><a name="assertstatus"></a></p>\n          <h4>\n            <a href="#assertstatus">\n              assertStatus\n            </a>\n          </h4><p>Assert that the response has a given code:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$response</span>-&gt;assertStatus(<span class="hljs-variable">$code</span>);</code></pre>\n  <p><a name="assert-successful"></a></p>\n\n          <p><a name="assertsuccessful"></a></p>\n          <h4>\n            <a href="#assertsuccessful">\n              assertSuccessful\n            </a>\n          </h4><p>Assert that the response has a successful (&gt;= 200 and &lt; 300) status code:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$response</span>-&gt;assertSuccessful();</code></pre>\n  <p><a name="assert-unauthorized"></a></p>\n\n          <p><a name="assertunauthorized"></a></p>\n          <h4>\n            <a href="#assertunauthorized">\n              assertUnauthorized\n            </a>\n          </h4><p>Assert that the response has an unauthorized (401) status code:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$response</span>-&gt;assertUnauthorized();</code></pre>\n  <p><a name="assert-view-has"></a></p>\n\n          <p><a name="assertviewhas"></a></p>\n          <h4>\n            <a href="#assertviewhas">\n              assertViewHas\n            </a>\n          </h4><p>Assert that the response view was given a piece of data:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response-&gt;assertViewHas($key, $value = <span class="hljs-keyword">null</span>);</code></pre>\n  <p><a name="assert-view-has-all"></a></p>\n\n          <p><a name="assertviewhasall"></a></p>\n          <h4>\n            <a href="#assertviewhasall">\n              assertViewHasAll\n            </a>\n          </h4><p>Assert that the response view has a given list of data:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response-&gt;assertViewHasAll(<span class="hljs-keyword">array</span> $data);</code></pre>\n  <p><a name="assert-view-is"></a></p>\n\n          <p><a name="assertviewis"></a></p>\n          <h4>\n            <a href="#assertviewis">\n              assertViewIs\n            </a>\n          </h4><p>Assert that the given view was returned by the route:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$response</span>-&gt;assertViewIs(<span class="hljs-variable">$value</span>);</code></pre>\n  <p><a name="assert-view-missing"></a></p>\n\n          <p><a name="assertviewmissing"></a></p>\n          <h4>\n            <a href="#assertviewmissing">\n              assertViewMissing\n            </a>\n          </h4><p>Assert that the response view is missing a piece of bound data:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$response</span>-&gt;assertViewMissing(<span class="hljs-variable">$key</span>);</code></pre>\n  <p><a name="authentication-assertions"></a></p>\n\n          <p><a name="authentication-assertions"></a></p>\n          <h3>\n            <a href="#authentication-assertions">\n              Authentication Assertions\n            </a>\n          </h3><p>Laravel also provides a variety of authentication related assertions for your <router-link to="https://phpunit.de/">PHPUnit</router-link> tests:</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>$this-&gt;assertAuthenticated($guard = null);</code></td>\n<td>Assert that the user is authenticated.</td>\n</tr>\n<tr>\n<td><code>$this-&gt;assertGuest($guard = null);</code></td>\n<td>Assert that the user is not authenticated.</td>\n</tr>\n<tr>\n<td><code>$this-&gt;assertAuthenticatedAs($user, $guard = null);</code></td>\n<td>Assert that the given user is authenticated.</td>\n</tr>\n<tr>\n<td><code>$this-&gt;assertCredentials(array $credentials, $guard = null);</code></td>\n<td>Assert that the given credentials are valid.</td>\n</tr>\n<tr>\n<td><code>$this-&gt;assertInvalidCredentials(array $credentials, $guard = null);</code></td>\n<td>Assert that the given credentials are invalid.</td>\n</tr>\n</tbody></table>\n'},8672:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="compiling-assets-mix-"></a></p>\n          <h1>\n            <a href="#compiling-assets-mix-">\n              Compiling Assets (Mix)\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#installation">Installation &amp; Setup</a></li>\n<li><a href="#running-mix">Running Mix</a></li>\n<li><a href="#working-with-stylesheets">Working With Stylesheets</a><ul>\n<li><a href="#less">Less</a></li>\n<li><a href="#sass">Sass</a></li>\n<li><a href="#stylus">Stylus</a></li>\n<li><a href="#postcss">PostCSS</a></li>\n<li><a href="#plain-css">Plain CSS</a></li>\n<li><a href="#url-processing">URL Processing</a></li>\n<li><a href="#css-source-maps">Source Maps</a></li>\n</ul>\n</li>\n<li><a href="#working-with-scripts">Working With JavaScript</a><ul>\n<li><a href="#vendor-extraction">Vendor Extraction</a></li>\n<li><a href="#react">React</a></li>\n<li><a href="#vanilla-js">Vanilla JS</a></li>\n<li><a href="#custom-webpack-configuration">Custom Webpack Configuration</a></li>\n</ul>\n</li>\n<li><a href="#copying-files-and-directories">Copying Files &amp; Directories</a></li>\n<li><a href="#versioning-and-cache-busting">Versioning / Cache Busting</a></li>\n<li><a href="#browsersync-reloading">Browsersync Reloading</a></li>\n<li><a href="#environment-variables">Environment Variables</a></li>\n<li><a href="#notifications">Notifications</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p><router-link to="https://github.com/JeffreyWay/laravel-mix">Laravel Mix</router-link> provides a fluent API for defining Webpack build steps for your Laravel application using several common CSS and JavaScript pre-processors. Through simple method chaining, you can fluently define your asset pipeline. For example:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">mix.js(<span class="hljs-symbol">\'resources</span>/js/app.js\', <span class="hljs-symbol">\'public</span>/js\')\n    .sass(<span class="hljs-symbol">\'resources</span>/sass/app.scss\', <span class="hljs-symbol">\'public</span>/css\');</code></pre>\n  <p>If you&#39;ve ever been confused and overwhelmed about getting started with Webpack and asset compilation, you will love Laravel Mix. However, you are not required to use it while developing your application; you are free to use any asset pipeline tool you wish, or even none at all.</p>\n<p><a name="installation"></a></p>\n\n          <p><a name="installation-amp-setup"></a></p>\n          <h2>\n            <a href="#installation-amp-setup">\n              Installation &amp; Setup\n            </a>\n          </h2>\n          <p><a name="installing-node"></a></p>\n          <h4>\n            <a href="#installing-node">\n              Installing Node\n            </a>\n          </h4><p>Before triggering Mix, you must first ensure that Node.js and NPM are installed on your machine.</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span>\nnpm -v</code></pre>\n  <p>By default, Laravel Homestead includes everything you need; however, if you aren&#39;t using Vagrant, then you can easily install the latest version of Node and NPM using simple graphical installers from <router-link to="https://nodejs.org/en/download/">their download page</router-link>.</p>\n\n          <p><a name="laravel-mix"></a></p>\n          <h4>\n            <a href="#laravel-mix">\n              Laravel Mix\n            </a>\n          </h4><p>The only remaining step is to install Laravel Mix. Within a fresh installation of Laravel, you&#39;ll find a <code>package.json</code> file in the root of your directory structure. The default <code>package.json</code> file includes everything you need to get started. Think of this like your <code>composer.json</code> file, except it defines Node dependencies instead of PHP. You may install the dependencies it references by running:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">npm <span class="hljs-keyword">install</span></code></pre>\n  <p><a name="running-mix"></a></p>\n\n          <p><a name="running-mix"></a></p>\n          <h2>\n            <a href="#running-mix">\n              Running Mix\n            </a>\n          </h2><p>Mix is a configuration layer on top of <router-link to="https://webpack.js.org">Webpack</router-link>, so to run your Mix tasks you only need to execute one of the NPM scripts that is included with the default Laravel <code>package.json</code> file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">// <span class="hljs-keyword">Run</span><span class="bash"> all Mix tasks...</span>\nnpm <span class="hljs-keyword">run</span><span class="bash"> dev</span>\n\n// <span class="hljs-keyword">Run</span><span class="bash"> all Mix tasks and minify output...</span>\nnpm <span class="hljs-keyword">run</span><span class="bash"> production</span></code></pre>\n  \n          <p><a name="watching-assets-for-changes"></a></p>\n          <h4>\n            <a href="#watching-assets-for-changes">\n              Watching Assets For Changes\n            </a>\n          </h4><p>The <code>npm run watch</code> command will continue running in your terminal and watch all relevant files for changes. Webpack will then automatically recompile your assets when it detects a change:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">npm <span class="hljs-keyword">run</span><span class="bash"> watch</span></code></pre>\n  <p>You may find that in certain environments Webpack isn&#39;t updating when your files change. If this is the case on your system, consider using the <code>watch-poll</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">npm <span class="hljs-keyword">run</span><span class="bash"> watch-poll</span></code></pre>\n  <p><a name="working-with-stylesheets"></a></p>\n\n          <p><a name="working-with-stylesheets"></a></p>\n          <h2>\n            <a href="#working-with-stylesheets">\n              Working With Stylesheets\n            </a>\n          </h2><p>The <code>webpack.mix.js</code> file is your entry point for all asset compilation. Think of it as a light configuration wrapper around Webpack. Mix tasks can be chained together to define exactly how your assets should be compiled.</p>\n<p><a name="less"></a></p>\n\n          <p><a name="less"></a></p>\n          <h3>\n            <a href="#less">\n              Less\n            </a>\n          </h3><p>The <code>less</code> method may be used to compile <router-link to="http://lesscss.org/">Less</router-link> into CSS. Let&#39;s compile our primary <code>app.less</code> file to <code>public/css/app.css</code>.</p>\n\n    <pre class="language-php" v-pre><code class="language-php">mix.less(<span class="hljs-symbol">\'resources</span>/less/app.less\', <span class="hljs-symbol">\'public</span>/css\');</code></pre>\n  <p>Multiple calls to the <code>less</code> method may be used to compile multiple files:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">mix.less(<span class="hljs-symbol">\'resources</span>/less/app.less\', <span class="hljs-symbol">\'public</span>/css\')\n    .less(<span class="hljs-symbol">\'resources</span>/less/admin.less\', <span class="hljs-symbol">\'public</span>/css\');</code></pre>\n  <p>If you wish to customize the file name of the compiled CSS, you may pass a full file path as the second argument to the <code>less</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">mix.less(<span class="hljs-symbol">\'resources</span>/less/app.less\', <span class="hljs-symbol">\'public</span>/stylesheets/styles.css\');</code></pre>\n  <p>If you need to override the <router-link to="https://github.com/webpack-contrib/less-loader#options">underlying Less plug-in options</router-link>, you may pass an object as the third argument to <code>mix.less()</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">mix.less(<span class="hljs-symbol">\'resources</span>/less/app.less\', <span class="hljs-symbol">\'public</span>/css\', {\n    strictMath: <span class="hljs-literal">true</span>\n});</code></pre>\n  <p><a name="sass"></a></p>\n\n          <p><a name="sass"></a></p>\n          <h3>\n            <a href="#sass">\n              Sass\n            </a>\n          </h3><p>The <code>sass</code> method allows you to compile <router-link to="https://sass-lang.com/">Sass</router-link> into CSS. You may use the method like so:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">mix.sass(<span class="hljs-symbol">\'resources</span>/sass/app.scss\', <span class="hljs-symbol">\'public</span>/css\');</code></pre>\n  <p>Again, like the <code>less</code> method, you may compile multiple Sass files into their own respective CSS files and even customize the output directory of the resulting CSS:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">mix.sass(<span class="hljs-symbol">\'resources</span>/sass/app.sass\', <span class="hljs-symbol">\'public</span>/css\')\n    .sass(<span class="hljs-symbol">\'resources</span>/sass/admin.sass\', <span class="hljs-symbol">\'public</span>/css/admin\');</code></pre>\n  <p>Additional <router-link to="https://github.com/sass/node-sass#options">Node-Sass plug-in options</router-link> may be provided as the third argument:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">mix.sass(<span class="hljs-symbol">\'resources</span>/sass/app.sass\', <span class="hljs-symbol">\'public</span>/css\', {\n    precision: <span class="hljs-number">5</span>\n});</code></pre>\n  <p><a name="stylus"></a></p>\n\n          <p><a name="stylus"></a></p>\n          <h3>\n            <a href="#stylus">\n              Stylus\n            </a>\n          </h3><p>Similar to Less and Sass, the <code>stylus</code> method allows you to compile <router-link to="http://stylus-lang.com/">Stylus</router-link> into CSS:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">mix.stylus(<span class="hljs-symbol">\'resources</span>/stylus/app.styl\', <span class="hljs-symbol">\'public</span>/css\');</code></pre>\n  <p>You may also install additional Stylus plug-ins, such as <router-link to="https://github.com/jescalan/rupture">Rupture</router-link>. First, install the plug-in in question through NPM (<code>npm install rupture</code>) and then require it in your call to <code>mix.stylus()</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">mix.stylus(<span class="hljs-string">\'resources/stylus/app.styl\'</span>, <span class="hljs-string">\'public/css\'</span>, {\n    <span class="hljs-keyword">use</span>: [\n        <span class="hljs-keyword">require</span>(<span class="hljs-string">\'rupture\'</span>)()\n    ]\n});</code></pre>\n  <p><a name="postcss"></a></p>\n\n          <p><a name="postcss"></a></p>\n          <h3>\n            <a href="#postcss">\n              PostCSS\n            </a>\n          </h3><p><router-link to="https://postcss.org/">PostCSS</router-link>, a powerful tool for transforming your CSS, is included with Laravel Mix out of the box. By default, Mix leverages the popular <router-link to="https://github.com/postcss/autoprefixer">Autoprefixer</router-link> plug-in to automatically apply all necessary CSS3 vendor prefixes. However, you&#39;re free to add any additional plug-ins that are appropriate for your application. First, install the desired plug-in through NPM and then reference it in your <code>webpack.mix.js</code> file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">mix.sass(<span class="hljs-symbol">\'resources</span>/sass/app.scss\', <span class="hljs-symbol">\'public</span>/css\')\n    .options({\n        postCss: [\n            require(<span class="hljs-symbol">\'postcss</span>-css-variables\')<span class="hljs-literal">()</span>\n        ]\n    });</code></pre>\n  <p><a name="plain-css"></a></p>\n\n          <p><a name="plain-css"></a></p>\n          <h3>\n            <a href="#plain-css">\n              Plain CSS\n            </a>\n          </h3><p>If you would just like to concatenate some plain CSS stylesheets into a single file, you may use the <code>styles</code> method.</p>\n\n    <pre class="language-php" v-pre><code class="language-php">mix.styles([\n    <span class="hljs-symbol">\'public</span>/css/vendor/normalize.css\',\n    <span class="hljs-symbol">\'public</span>/css/vendor/videojs.css\'\n], <span class="hljs-symbol">\'public</span>/css/all.css\');</code></pre>\n  <p><a name="url-processing"></a></p>\n\n          <p><a name="url-processing"></a></p>\n          <h3>\n            <a href="#url-processing">\n              URL Processing\n            </a>\n          </h3><p>Because Laravel Mix is built on top of Webpack, it&#39;s important to understand a few Webpack concepts. For CSS compilation, Webpack will rewrite and optimize any <code>url()</code> calls within your stylesheets. While this might initially sound strange, it&#39;s an incredibly powerful piece of functionality. Imagine that we want to compile Sass that includes a relative URL to an image:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-class">.example</span> {\n    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">\'../images/example.png\'</span>);\n}</code></pre>\n  <blockquote>\n<p>{note} Absolute paths for any given <code>url()</code> will be excluded from URL-rewriting. For example, <code>url(&#39;/images/thing.png&#39;)</code> or <code>url(&#39;http://example.com/images/thing.png&#39;)</code> won&#39;t be modified.</p>\n</blockquote>\n<p>By default, Laravel Mix and Webpack will find <code>example.png</code>, copy it to your <code>public/images</code> folder, and then rewrite the <code>url()</code> within your generated stylesheet. As such, your compiled CSS will be:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-class">.example</span> {\n    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(/images/example.png?d41d8cd98f00b204e9800998ecf8427e);\n}</code></pre>\n  <p>As useful as this feature may be, it&#39;s possible that your existing folder structure is already configured in a way you like. If this is the case, you may disable <code>url()</code> rewriting like so:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">mix.sass(<span class="hljs-symbol">\'resources</span>/app/app.scss\', <span class="hljs-symbol">\'public</span>/css\')\n    .options({\n        processCssUrls: <span class="hljs-literal">false</span>\n    });</code></pre>\n  <p>With this addition to your <code>webpack.mix.js</code> file, Mix will no longer match any <code>url()</code> or copy assets to your public directory. In other words, the compiled CSS will look just like how you originally typed it:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-class">.example</span> {\n    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">"../images/thing.png"</span>);\n}</code></pre>\n  <p><a name="css-source-maps"></a></p>\n\n          <p><a name="source-maps"></a></p>\n          <h3>\n            <a href="#source-maps">\n              Source Maps\n            </a>\n          </h3><p>Though disabled by default, source maps may be activated by calling the <code>mix.sourceMaps()</code> method in your <code>webpack.mix.js</code> file. Though it comes with a compile/performance cost, this will provide extra debugging information to your browser&#39;s developer tools when using compiled assets.</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">mix</span><span class="hljs-selector-class">.js</span>(<span class="hljs-string">\'resources/js/app.js\'</span>, <span class="hljs-string">\'public/js\'</span>)\n    <span class="hljs-selector-class">.sourceMaps</span>();</code></pre>\n  \n          <p><a name="style-of-source-mapping"></a></p>\n          <h4>\n            <a href="#style-of-source-mapping">\n              Style Of Source Mapping\n            </a>\n          </h4><p>Webpack offers a variety of <router-link to="https://webpack.js.org/configuration/devtool/#devtool">source mapping styles</router-link>. By default, Mix&#39;s source mapping style is set to <code>eval-source-map</code>, which provides a fast rebuild time. If you want to change the mapping style, you may do so using the <code>sourceMaps</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">let</span> productionSourceMaps = <span class="hljs-literal">false</span>;\n\nmix.js(<span class="hljs-symbol">\'resources</span>/js/app.js\', <span class="hljs-symbol">\'public</span>/js\')\n    .sourceMaps(productionSourceMaps, <span class="hljs-symbol">\'source</span>-map\');</code></pre>\n  <p><a name="working-with-scripts"></a></p>\n\n          <p><a name="working-with-javascript"></a></p>\n          <h2>\n            <a href="#working-with-javascript">\n              Working With JavaScript\n            </a>\n          </h2><p>Mix provides several features to help you work with your JavaScript files, such as compiling ECMAScript 2015, module bundling, minification, and concatenating plain JavaScript files. Even better, this all works seamlessly, without requiring an ounce of custom configuration:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">mix.js(<span class="hljs-symbol">\'resources</span>/js/app.js\', <span class="hljs-symbol">\'public</span>/js\');</code></pre>\n  <p>With this single line of code, you may now take advantage of:</p>\n<div class="content-list" markdown="1">\n- ES2015 syntax.\n- Modules\n- Compilation of `.vue` files.\n- Minification for production environments.\n</div>\n\n<p><a name="vendor-extraction"></a></p>\n\n          <p><a name="vendor-extraction"></a></p>\n          <h3>\n            <a href="#vendor-extraction">\n              Vendor Extraction\n            </a>\n          </h3><p>One potential downside to bundling all application-specific JavaScript with your vendor libraries is that it makes long-term caching more difficult. For example, a single update to your application code will force the browser to re-download all of your vendor libraries even if they haven&#39;t changed.</p>\n<p>If you intend to make frequent updates to your application&#39;s JavaScript, you should consider extracting all of your vendor libraries into their own file. This way, a change to your application code will not affect the caching of your large <code>vendor.js</code> file. Mix&#39;s <code>extract</code> method makes this a breeze:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">mix</span><span class="hljs-selector-class">.js</span>(<span class="hljs-string">\'resources/js/app.js\'</span>, <span class="hljs-string">\'public/js\'</span>)\n    <span class="hljs-selector-class">.extract</span>([<span class="hljs-string">\'vue\'</span>])</code></pre>\n  <p>The <code>extract</code> method accepts an array of all libraries or modules that you wish to extract into a <code>vendor.js</code> file. Using the above snippet as an example, Mix will generate the following files:</p>\n<div class="content-list" markdown="1">\n- `public/js/manifest.js`: *The Webpack manifest runtime*\n- `public/js/vendor.js`: *Your vendor libraries*\n- `public/js/app.js`: *Your application code*\n</div>\n\n<p>To avoid JavaScript errors, be sure to load these files in the proper order:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js/manifest.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js/vendor.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js/app.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre>\n  <p><a name="react"></a></p>\n\n          <p><a name="react"></a></p>\n          <h3>\n            <a href="#react">\n              React\n            </a>\n          </h3><p>Mix can automatically install the Babel plug-ins necessary for React support. To get started, replace your <code>mix.js()</code> call with <code>mix.react()</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">mix.react(<span class="hljs-symbol">\'resources</span>/js/app.jsx\', <span class="hljs-symbol">\'public</span>/js\');</code></pre>\n  <p>Behind the scenes, Mix will download and include the appropriate <code>babel-preset-react</code> Babel plug-in.</p>\n<p><a name="vanilla-js"></a></p>\n\n          <p><a name="vanilla-js"></a></p>\n          <h3>\n            <a href="#vanilla-js">\n              Vanilla JS\n            </a>\n          </h3><p>Similar to combining stylesheets with <code>mix.styles()</code>, you may also combine and minify any number of JavaScript files with the <code>scripts()</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">mix.scripts([\n    <span class="hljs-symbol">\'public</span>/js/admin.js\',\n    <span class="hljs-symbol">\'public</span>/js/dashboard.js\'\n], <span class="hljs-symbol">\'public</span>/js/all.js\');</code></pre>\n  <p>This option is particularly useful for legacy projects where you don&#39;t require Webpack compilation for your JavaScript.</p>\n<blockquote>\n<p>{tip} A slight variation of <code>mix.scripts()</code> is <code>mix.babel()</code>. Its method signature is identical to <code>scripts</code>; however, the concatenated file will receive Babel compilation, which translates any ES2015 code to vanilla JavaScript that all browsers will understand.</p>\n</blockquote>\n<p><a name="custom-webpack-configuration"></a></p>\n\n          <p><a name="custom-webpack-configuration"></a></p>\n          <h3>\n            <a href="#custom-webpack-configuration">\n              Custom Webpack Configuration\n            </a>\n          </h3><p>Behind the scenes, Laravel Mix references a pre-configured <code>webpack.config.js</code> file to get you up and running as quickly as possible. Occasionally, you may need to manually modify this file. You might have a special loader or plug-in that needs to be referenced, or maybe you prefer to use Stylus instead of Sass. In such instances, you have two choices:</p>\n\n          <p><a name="merging-custom-configuration"></a></p>\n          <h4>\n            <a href="#merging-custom-configuration">\n              Merging Custom Configuration\n            </a>\n          </h4><p>Mix provides a useful <code>webpackConfig</code> method that allows you to merge any short Webpack configuration overrides. This is a particularly appealing choice, as it doesn&#39;t require you to copy and maintain your own copy of the <code>webpack.config.js</code> file. The <code>webpackConfig</code> method accepts an object, which should contain any <router-link to="https://webpack.js.org/configuration/">Webpack-specific configuration</router-link> that you wish to apply.</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">mix</span><span class="hljs-selector-class">.webpackConfig</span>({\n    <span class="hljs-attribute">resolve</span>: {\n        modules: [\n            path.<span class="hljs-built_in">resolve</span>(__dirname, <span class="hljs-string">\'vendor/laravel/spark/resources/assets/js\'</span>)\n        ]\n    }\n});</code></pre>\n  \n          <p><a name="custom-configuration-files"></a></p>\n          <h4>\n            <a href="#custom-configuration-files">\n              Custom Configuration Files\n            </a>\n          </h4><p>If you would like to completely customize your Webpack configuration, copy the <code>node_modules/laravel-mix/setup/webpack.config.js</code> file to your project&#39;s root directory. Next, point all of the <code>--config</code> references in your <code>package.json</code> file to the newly copied configuration file. If you choose to take this approach to customization, any future upstream updates to Mix&#39;s <code>webpack.config.js</code> must be manually merged into your customized file.</p>\n<p><a name="copying-files-and-directories"></a></p>\n\n          <p><a name="copying-files-amp-directories"></a></p>\n          <h2>\n            <a href="#copying-files-amp-directories">\n              Copying Files &amp; Directories\n            </a>\n          </h2><p>The <code>copy</code> method may be used to copy files and directories to new locations. This can be useful when a particular asset within your <code>node_modules</code> directory needs to be relocated to your <code>public</code> folder.</p>\n\n    <pre class="language-php" v-pre><code class="language-php">mix.copy(<span class="hljs-symbol">\'node_modules</span>/foo/bar.css\', <span class="hljs-symbol">\'public</span>/css/bar.css\');</code></pre>\n  <p>When copying a directory, the <code>copy</code> method will flatten the directory&#39;s structure. To maintain the directory&#39;s original structure, you should use the <code>copyDirectory</code> method instead:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">mix.copy<span class="hljs-constructor">Directory(\'<span class="hljs-params">resources</span><span class="hljs-operator">/</span><span class="hljs-params">img</span>\', \'<span class="hljs-params">public</span><span class="hljs-operator">/</span><span class="hljs-params">img</span>\')</span>;</code></pre>\n  <p><a name="versioning-and-cache-busting"></a></p>\n\n          <p><a name="versioning-cache-busting"></a></p>\n          <h2>\n            <a href="#versioning-cache-busting">\n              Versioning / Cache Busting\n            </a>\n          </h2><p>Many developers suffix their compiled assets with a timestamp or unique token to force browsers to load the fresh assets instead of serving stale copies of the code. Mix can handle this for you using the <code>version</code> method.</p>\n<p>The <code>version</code> method will automatically append a unique hash to the filenames of all compiled files, allowing for more convenient cache busting:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">mix</span><span class="hljs-selector-class">.js</span>(<span class="hljs-string">\'resources/js/app.js\'</span>, <span class="hljs-string">\'public/js\'</span>)\n    <span class="hljs-selector-class">.version</span>();</code></pre>\n  <p>After generating the versioned file, you won&#39;t know the exact file name. So, you should use Laravel&#39;s global <code>mix</code> function within your <router-link to="/docs/{{version}}/views">views</router-link> to load the appropriately hashed asset. The <code>mix</code> function will automatically determine the current name of the hashed file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ mix(\'/js/app.js\') }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></code></pre>\n  <p>Because versioned files are usually unnecessary in development, you may instruct the versioning process to only run during <code>npm run production</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">mix</span><span class="hljs-selector-class">.js</span>(<span class="hljs-string">\'resources/js/app.js\'</span>, <span class="hljs-string">\'public/js\'</span>);\n\n<span class="hljs-selector-tag">if</span> (mix.inProduction()) {\n    <span class="hljs-selector-tag">mix</span><span class="hljs-selector-class">.version</span>();\n}</code></pre>\n  <p><a name="browsersync-reloading"></a></p>\n\n          <p><a name="browsersync-reloading"></a></p>\n          <h2>\n            <a href="#browsersync-reloading">\n              Browsersync Reloading\n            </a>\n          </h2><p><router-link to="https://browsersync.io/">BrowserSync</router-link> can automatically monitor your files for changes, and inject your changes into the browser without requiring a manual refresh. You may enable support by calling the <code>mix.browserSync()</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">mix.browserSync(<span class="hljs-string">\'my-domain.test\'</span>);\n\n<span class="hljs-regexp">//</span> Or...\n\n<span class="hljs-regexp">//</span> https:<span class="hljs-regexp">//</span>browsersync.io<span class="hljs-regexp">/docs/</span>options\nmix.browserSync({\n    proxy: <span class="hljs-string">\'my-domain.test\'</span>\n});</code></pre>\n  <p>You may pass either a string (proxy) or object (BrowserSync settings) to this method. Next, start Webpack&#39;s dev server using the <code>npm run watch</code> command. Now, when you modify a script or PHP file, watch as the browser instantly refreshes the page to reflect your changes.</p>\n<p><a name="environment-variables"></a></p>\n\n          <p><a name="environment-variables"></a></p>\n          <h2>\n            <a href="#environment-variables">\n              Environment Variables\n            </a>\n          </h2><p>You may inject environment variables into Mix by prefixing a key in your <code>.env</code> file with <code>MIX_</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">MIX_SENTRY_DSN_PUBLIC=<span class="hljs-string">http:</span><span class="hljs-comment">//example.com</span></code></pre>\n  <p>After the variable has been defined in your <code>.env</code> file, you may access via the <code>process.env</code> object. If the value changes while you are running a <code>watch</code> task, you will need to restart the task:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">process<span class="hljs-selector-class">.env</span><span class="hljs-selector-class">.MIX_SENTRY_DSN_PUBLIC</span></code></pre>\n  <p><a name="notifications"></a></p>\n\n          <p><a name="notifications"></a></p>\n          <h2>\n            <a href="#notifications">\n              Notifications\n            </a>\n          </h2><p>When available, Mix will automatically display OS notifications for each bundle. This will give you instant feedback, as to whether the compilation was successful or not. However, there may be instances when you&#39;d prefer to disable these notifications. One such example might be triggering Mix on your production server. Notifications may be deactivated, via the <code>disableNotifications</code> method.</p>\n\n    <pre class="language-php" v-pre><code class="language-php">mix.disableNotifications()<span class="hljs-comment">;</span></code></pre>\n  '},8708:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="middleware"></a></p>\n          <h1>\n            <a href="#middleware">\n              Middleware\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#defining-middleware">Defining Middleware</a></li>\n<li><a href="#registering-middleware">Registering Middleware</a><ul>\n<li><a href="#global-middleware">Global Middleware</a></li>\n<li><a href="#assigning-middleware-to-routes">Assigning Middleware To Routes</a></li>\n<li><a href="#middleware-groups">Middleware Groups</a></li>\n<li><a href="#sorting-middleware">Sorting Middleware</a></li>\n</ul>\n</li>\n<li><a href="#middleware-parameters">Middleware Parameters</a></li>\n<li><a href="#terminable-middleware">Terminable Middleware</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Middleware provide a convenient mechanism for filtering HTTP requests entering your application. For example, Laravel includes a middleware that verifies the user of your application is authenticated. If the user is not authenticated, the middleware will redirect the user to the login screen. However, if the user is authenticated, the middleware will allow the request to proceed further into the application.</p>\n<p>Additional middleware can be written to perform a variety of tasks besides authentication. A CORS middleware might be responsible for adding the proper headers to all responses leaving your application. A logging middleware might log all incoming requests to your application.</p>\n<p>There are several middleware included in the Laravel framework, including middleware for authentication and CSRF protection. All of these middleware are located in the <code>app/Http/Middleware</code> directory.</p>\n<p><a name="defining-middleware"></a></p>\n\n          <p><a name="defining-middleware"></a></p>\n          <h2>\n            <a href="#defining-middleware">\n              Defining Middleware\n            </a>\n          </h2><p>To create a new middleware, use the <code>make:middleware</code> Artisan command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">make</span><span class="hljs-selector-pseudo">:middleware</span> <span class="hljs-selector-tag">CheckAge</span></code></pre>\n  <p>This command will place a new <code>CheckAge</code> class within your <code>app/Http/Middleware</code> directory. In this middleware, we will only allow access to the route if the supplied <code>age</code> is greater than 200. Otherwise, we will redirect the users back to the <code>home</code> URI:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Middleware</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Closure</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CheckAge</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Handle an incoming request.\n     *\n     * <span class="hljs-doctag">@param</span>  \\Illuminate\\Http\\Request  $request\n     * <span class="hljs-doctag">@param</span>  \\Closure  $next\n     * <span class="hljs-doctag">@return</span> mixed\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">($request, Closure $next)</span>\n    </span>{\n        <span class="hljs-keyword">if</span> ($request-&gt;age &lt;= <span class="hljs-number">200</span>) {\n            <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">\'home\'</span>);\n        }\n\n        <span class="hljs-keyword">return</span> $next($request);\n    }\n}</span></code></pre>\n  <p>As you can see, if the given <code>age</code> is less than or equal to <code>200</code>, the middleware will return an HTTP redirect to the client; otherwise, the request will be passed further into the application. To pass the request deeper into the application (allowing the middleware to &quot;pass&quot;), call the <code>$next</code> callback with the <code>$request</code>.</p>\n<p>It&#39;s best to envision middleware as a series of &quot;layers&quot; HTTP requests must pass through before they hit your application. Each layer can examine the request and even reject it entirely.</p>\n<blockquote>\n<p>{tip} All middleware are resolved via the <router-link to="/docs/{{version}}/container">service container</router-link>, so you may type-hint any dependencies you need within a middleware&#39;s constructor.</p>\n</blockquote>\n\n          <p><a name="before-amp-after-middleware"></a></p>\n          <h3>\n            <a href="#before-amp-after-middleware">\n              Before &amp; After Middleware\n            </a>\n          </h3><p>Whether a middleware runs before or after a request depends on the middleware itself. For example, the following middleware would perform some task <strong>before</strong> the request is handled by the application:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Middleware</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Closure</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BeforeMiddleware</span>\n</span>{\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">($request, Closure $next)</span>\n    </span>{\n        <span class="hljs-comment">// Perform action</span>\n\n        <span class="hljs-keyword">return</span> $next($request);\n    }\n}</span></code></pre>\n  <p>However, this middleware would perform its task <strong>after</strong> the request is handled by the application:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Middleware</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Closure</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AfterMiddleware</span>\n</span>{\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">($request, Closure $next)</span>\n    </span>{\n        $response = $next($request);\n\n        <span class="hljs-comment">// Perform action</span>\n\n        <span class="hljs-keyword">return</span> $response;\n    }\n}</span></code></pre>\n  <p><a name="registering-middleware"></a></p>\n\n          <p><a name="registering-middleware"></a></p>\n          <h2>\n            <a href="#registering-middleware">\n              Registering Middleware\n            </a>\n          </h2><p><a name="global-middleware"></a></p>\n\n          <p><a name="global-middleware"></a></p>\n          <h3>\n            <a href="#global-middleware">\n              Global Middleware\n            </a>\n          </h3><p>If you want a middleware to run during every HTTP request to your application, list the middleware class in the <code>$middleware</code> property of your <code>app/Http/Kernel.php</code> class.</p>\n<p><a name="assigning-middleware-to-routes"></a></p>\n\n          <p><a name="assigning-middleware-to-routes"></a></p>\n          <h3>\n            <a href="#assigning-middleware-to-routes">\n              Assigning Middleware To Routes\n            </a>\n          </h3><p>If you would like to assign middleware to specific routes, you should first assign the middleware a key in your <code>app/Http/Kernel.php</code> file. By default, the <code>$routeMiddleware</code> property of this class contains entries for the middleware included with Laravel. To add your own, append it to this list and assign it a key of your choosing:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">// Within App\\Http\\Kernel Class...\n\nprotected $routeMiddleware = [\n    <span class="hljs-string">\'auth\'</span> =&gt; \\App\\Http\\Middleware\\Authenticate::<span class="hljs-class"><span class="hljs-keyword">class</span>,</span>\n    <span class="hljs-string">\'auth.basic\'</span> =&gt; \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::<span class="hljs-class"><span class="hljs-keyword">class</span>,</span>\n    <span class="hljs-string">\'bindings\'</span> =&gt; \\Illuminate\\Routing\\Middleware\\SubstituteBindings::<span class="hljs-class"><span class="hljs-keyword">class</span>,</span>\n    <span class="hljs-string">\'cache.headers\'</span> =&gt; \\Illuminate\\Http\\Middleware\\SetCacheHeaders::<span class="hljs-class"><span class="hljs-keyword">class</span>,</span>\n    <span class="hljs-string">\'can\'</span> =&gt; \\Illuminate\\Auth\\Middleware\\Authorize::<span class="hljs-class"><span class="hljs-keyword">class</span>,</span>\n    <span class="hljs-string">\'guest\'</span> =&gt; \\App\\Http\\Middleware\\RedirectIfAuthenticated::<span class="hljs-class"><span class="hljs-keyword">class</span>,</span>\n    <span class="hljs-string">\'signed\'</span> =&gt; \\Illuminate\\Routing\\Middleware\\ValidateSignature::<span class="hljs-class"><span class="hljs-keyword">class</span>,</span>\n    <span class="hljs-string">\'throttle\'</span> =&gt; \\Illuminate\\Routing\\Middleware\\ThrottleRequests::<span class="hljs-class"><span class="hljs-keyword">class</span>,</span>\n    <span class="hljs-string">\'verified\'</span> =&gt; \\Illuminate\\Auth\\Middleware\\EnsureEmailIsVerified::<span class="hljs-class"><span class="hljs-keyword">class</span>,</span>\n];</code></pre>\n  <p>Once the middleware has been defined in the HTTP kernel, you may use the <code>middleware</code> method to assign middleware to a route:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'admin/profile\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">//</span>\n})-&gt;middleware(<span class="hljs-string">\'auth\'</span>);</code></pre>\n  <p>You may also assign multiple middleware to the route:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'/\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">//</span>\n})-&gt;middleware(<span class="hljs-string">\'first\'</span>, <span class="hljs-string">\'second\'</span>);</code></pre>\n  <p>When assigning middleware, you may also pass the fully qualified class name:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Middleware</span>\\<span class="hljs-title">CheckAge</span>;\n\nRoute::get(<span class="hljs-string">\'admin/profile\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">//</span>\n})-&gt;middleware(CheckAge::class);</code></pre>\n  <p><a name="middleware-groups"></a></p>\n\n          <p><a name="middleware-groups"></a></p>\n          <h3>\n            <a href="#middleware-groups">\n              Middleware Groups\n            </a>\n          </h3><p>Sometimes you may want to group several middleware under a single key to make them easier to assign to routes. You may do this using the <code>$middlewareGroups</code> property of your HTTP kernel.</p>\n<p>Out of the box, Laravel comes with <code>web</code> and <code>api</code> middleware groups that contain common middleware you may want to apply to your web UI and API routes:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">/**\n * The application\'s route middleware groups.\n *\n * @var array\n */\nprotected <span class="hljs-formula">$middlewareGroups = [\n    \'web\' =&gt; [\n        <span class="hljs-tag">\\<span class="hljs-name">App</span></span><span class="hljs-tag">\\<span class="hljs-name">Http</span></span><span class="hljs-tag">\\<span class="hljs-name">Middleware</span></span><span class="hljs-tag">\\<span class="hljs-name">EncryptCookies</span></span>::class,\n        <span class="hljs-tag">\\<span class="hljs-name">Illuminate</span></span><span class="hljs-tag">\\<span class="hljs-name">Cookie</span></span><span class="hljs-tag">\\<span class="hljs-name">Middleware</span></span><span class="hljs-tag">\\<span class="hljs-name">AddQueuedCookiesToResponse</span></span>::class,\n        <span class="hljs-tag">\\<span class="hljs-name">Illuminate</span></span><span class="hljs-tag">\\<span class="hljs-name">Session</span></span><span class="hljs-tag">\\<span class="hljs-name">Middleware</span></span><span class="hljs-tag">\\<span class="hljs-name">StartSession</span></span>::class,\n        <span class="hljs-tag">\\<span class="hljs-name">Illuminate</span></span><span class="hljs-tag">\\<span class="hljs-name">View</span></span><span class="hljs-tag">\\<span class="hljs-name">Middleware</span></span><span class="hljs-tag">\\<span class="hljs-name">ShareErrorsFromSession</span></span>::class,\n        <span class="hljs-tag">\\<span class="hljs-name">App</span></span><span class="hljs-tag">\\<span class="hljs-name">Http</span></span><span class="hljs-tag">\\<span class="hljs-name">Middleware</span></span><span class="hljs-tag">\\<span class="hljs-name">VerifyCsrfToken</span></span>::class,\n        <span class="hljs-tag">\\<span class="hljs-name">Illuminate</span></span><span class="hljs-tag">\\<span class="hljs-name">Routing</span></span><span class="hljs-tag">\\<span class="hljs-name">Middleware</span></span><span class="hljs-tag">\\<span class="hljs-name">SubstituteBindings</span></span>::class,\n    ],\n\n    \'api\' =&gt; [\n        \'throttle:60,1\',\n        \'auth:api\',\n    ],\n];</span></code></pre>\n  <p>Middleware groups may be assigned to routes and controller actions using the same syntax as individual middleware. Again, middleware groups make it more convenient to assign many middleware to a route at once:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'/\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">//</span>\n})-&gt;middleware(<span class="hljs-string">\'web\'</span>);\n\nRoute::group([<span class="hljs-string">\'middleware\'</span> =&gt; [<span class="hljs-string">\'web\'</span>]], <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">//</span>\n});\n\nRoute::middleware([<span class="hljs-string">\'web\'</span>, <span class="hljs-string">\'subscribed\'</span>])-&gt;group(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">//</span>\n});</code></pre>\n  <blockquote>\n<p>{tip} Out of the box, the <code>web</code> middleware group is automatically applied to your <code>routes/web.php</code> file by the <code>RouteServiceProvider</code>.</p>\n</blockquote>\n<p><a name="sorting-middleware"></a></p>\n\n          <p><a name="sorting-middleware"></a></p>\n          <h3>\n            <a href="#sorting-middleware">\n              Sorting Middleware\n            </a>\n          </h3><p>Rarely, you may need your middleware to execute in a specific order but not have control over their order when they are assigned to the route. In this case, you may specify your middleware priority using the <code>$middlewarePriority</code> property of your <code>app/Http/Kernel.php</code> file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">/**\n * The priority-sorted list of middleware.\n *\n * This forces non-global middleware to always be in the given order.\n *\n * @var array\n */\nprotected <span class="hljs-formula">$middlewarePriority = [\n    <span class="hljs-tag">\\<span class="hljs-name">Illuminate</span></span><span class="hljs-tag">\\<span class="hljs-name">Session</span></span><span class="hljs-tag">\\<span class="hljs-name">Middleware</span></span><span class="hljs-tag">\\<span class="hljs-name">StartSession</span></span>::class,\n    <span class="hljs-tag">\\<span class="hljs-name">Illuminate</span></span><span class="hljs-tag">\\<span class="hljs-name">View</span></span><span class="hljs-tag">\\<span class="hljs-name">Middleware</span></span><span class="hljs-tag">\\<span class="hljs-name">ShareErrorsFromSession</span></span>::class,\n    <span class="hljs-tag">\\<span class="hljs-name">App</span></span><span class="hljs-tag">\\<span class="hljs-name">Http</span></span><span class="hljs-tag">\\<span class="hljs-name">Middleware</span></span><span class="hljs-tag">\\<span class="hljs-name">Authenticate</span></span>::class,\n    <span class="hljs-tag">\\<span class="hljs-name">Illuminate</span></span><span class="hljs-tag">\\<span class="hljs-name">Session</span></span><span class="hljs-tag">\\<span class="hljs-name">Middleware</span></span><span class="hljs-tag">\\<span class="hljs-name">AuthenticateSession</span></span>::class,\n    <span class="hljs-tag">\\<span class="hljs-name">Illuminate</span></span><span class="hljs-tag">\\<span class="hljs-name">Routing</span></span><span class="hljs-tag">\\<span class="hljs-name">Middleware</span></span><span class="hljs-tag">\\<span class="hljs-name">SubstituteBindings</span></span>::class,\n    <span class="hljs-tag">\\<span class="hljs-name">Illuminate</span></span><span class="hljs-tag">\\<span class="hljs-name">Auth</span></span><span class="hljs-tag">\\<span class="hljs-name">Middleware</span></span><span class="hljs-tag">\\<span class="hljs-name">Authorize</span></span>::class,\n];</span></code></pre>\n  <p><a name="middleware-parameters"></a></p>\n\n          <p><a name="middleware-parameters"></a></p>\n          <h2>\n            <a href="#middleware-parameters">\n              Middleware Parameters\n            </a>\n          </h2><p>Middleware can also receive additional parameters. For example, if your application needs to verify that the authenticated user has a given &quot;role&quot; before performing a given action, you could create a <code>CheckRole</code> middleware that receives a role name as an additional argument.</p>\n<p>Additional middleware parameters will be passed to the middleware after the <code>$next</code> argument:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Middleware</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Closure</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CheckRole</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Handle the incoming request.\n     *\n     * <span class="hljs-doctag">@param</span>  \\Illuminate\\Http\\Request  $request\n     * <span class="hljs-doctag">@param</span>  \\Closure  $next\n     * <span class="hljs-doctag">@param</span>  string  $role\n     * <span class="hljs-doctag">@return</span> mixed\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">($request, Closure $next, $role)</span>\n    </span>{\n        <span class="hljs-keyword">if</span> (! $request-&gt;user()-&gt;hasRole($role)) {\n            <span class="hljs-comment">// Redirect...</span>\n        }\n\n        <span class="hljs-keyword">return</span> $next($request);\n    }\n\n}</span></code></pre>\n  <p>Middleware parameters may be specified when defining the route by separating the middleware name and parameters with a <code>:</code>. Multiple parameters should be delimited by commas:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::put(<span class="hljs-string">\'post/{id}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($id)</span> </span>{\n    <span class="hljs-comment">//</span>\n})-&gt;middleware(<span class="hljs-string">\'role:editor\'</span>);</code></pre>\n  <p><a name="terminable-middleware"></a></p>\n\n          <p><a name="terminable-middleware"></a></p>\n          <h2>\n            <a href="#terminable-middleware">\n              Terminable Middleware\n            </a>\n          </h2><p>Sometimes a middleware may need to do some work after the HTTP response has been sent to the browser. If you define a <code>terminate</code> method on your middleware and your web server is using FastCGI, the <code>terminate</code> method will automatically be called after the response is sent to the browser:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Session</span>\\<span class="hljs-title">Middleware</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Closure</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StartSession</span>\n</span>{\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">($request, Closure $next)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> $next($request);\n    }\n\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">terminate</span><span class="hljs-params">($request, $response)</span>\n    </span>{\n        <span class="hljs-comment">// Store the session data...</span>\n    }\n}</span></code></pre>\n  <p>The <code>terminate</code> method should receive both the request and the response. Once you have defined a terminable middleware, you should add it to the list of route or global middleware in the <code>app/Http/Kernel.php</code> file.</p>\n<p>When calling the <code>terminate</code> method on your middleware, Laravel will resolve a fresh instance of the middleware from the <router-link to="/docs/{{version}}/container">service container</router-link>. If you would like to use the same middleware instance when the <code>handle</code> and <code>terminate</code> methods are called, register the middleware with the container using the container&#39;s <code>singleton</code> method. Typically this should be done in the <code>register</code> method of your <code>AppServiceProvider.php</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Middleware</span>\\<span class="hljs-title">TerminableMiddleware</span>;\n\n<span class="hljs-comment">/**\n * Register any application services.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;app-&gt;singleton(TerminableMiddleware::class);\n}</code></pre>\n  '},"992f":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="eloquent-relationships"></a></p>\n          <h1>\n            <a href="#eloquent-relationships">\n              Eloquent: Relationships\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#defining-relationships">Defining Relationships</a><ul>\n<li><a href="#one-to-one">One To One</a></li>\n<li><a href="#one-to-many">One To Many</a></li>\n<li><a href="#one-to-many-inverse">One To Many (Inverse)</a></li>\n<li><a href="#many-to-many">Many To Many</a></li>\n<li><a href="#defining-custom-intermediate-table-models">Defining Custom Intermediate Table Models</a></li>\n<li><a href="#has-one-through">Has One Through</a></li>\n<li><a href="#has-many-through">Has Many Through</a></li>\n</ul>\n</li>\n<li><a href="#polymorphic-relationships">Polymorphic Relationships</a><ul>\n<li><a href="#one-to-one-polymorphic-relations">One To One</a></li>\n<li><a href="#one-to-many-polymorphic-relations">One To Many</a></li>\n<li><a href="#many-to-many-polymorphic-relations">Many To Many</a></li>\n<li><a href="#custom-polymorphic-types">Custom Polymorphic Types</a></li>\n</ul>\n</li>\n<li><a href="#querying-relations">Querying Relations</a><ul>\n<li><a href="#relationship-methods-vs-dynamic-properties">Relationship Methods Vs. Dynamic Properties</a></li>\n<li><a href="#querying-relationship-existence">Querying Relationship Existence</a></li>\n<li><a href="#querying-relationship-absence">Querying Relationship Absence</a></li>\n<li><a href="#querying-polymorphic-relationships">Querying Polymorphic Relationships</a></li>\n<li><a href="#counting-related-models">Counting Related Models</a></li>\n</ul>\n</li>\n<li><a href="#eager-loading">Eager Loading</a><ul>\n<li><a href="#constraining-eager-loads">Constraining Eager Loads</a></li>\n<li><a href="#lazy-eager-loading">Lazy Eager Loading</a></li>\n</ul>\n</li>\n<li><a href="#inserting-and-updating-related-models">Inserting &amp; Updating Related Models</a><ul>\n<li><a href="#the-save-method">The <code>save</code> Method</a></li>\n<li><a href="#the-create-method">The <code>create</code> Method</a></li>\n<li><a href="#updating-belongs-to-relationships">Belongs To Relationships</a></li>\n<li><a href="#updating-many-to-many-relationships">Many To Many Relationships</a></li>\n</ul>\n</li>\n<li><a href="#touching-parent-timestamps">Touching Parent Timestamps</a></li>\n</ul>\n<p><a name="defining-relationships"></a></p>\n\n          <p><a name="defining-relationships"></a></p>\n          <h2>\n            <a href="#defining-relationships">\n              Defining Relationships\n            </a>\n          </h2><p>Eloquent relationships are defined as methods on your Eloquent model classes. Since, like Eloquent models themselves, relationships also serve as powerful <router-link to="/docs/queries">query builders</router-link>, defining relationships as methods provides powerful method chaining and querying capabilities. For example, we may chain additional constraints on this <code>posts</code> relationship:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user-&gt;posts<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>where<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'active\'</span>, <span class="hljs-number">1</span>)</span>-&gt;</span>get();</code></pre>\n  <p>But, before diving too deep into using relationships, let&#39;s learn how to define each type.</p>\n<p><a name="one-to-one"></a></p>\n\n          <p><a name="one-to-one"></a></p>\n          <h3>\n            <a href="#one-to-one">\n              One To One\n            </a>\n          </h3><p>A one-to-one relationship is a very basic relation. For example, a <code>User</code> model might be associated with one <code>Phone</code>. To define this relationship, we place a <code>phone</code> method on the <code>User</code> model. The <code>phone</code> method should call the <code>hasOne</code> method and return its result:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2d1ZXN0cycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ25hbWUnKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5TY2hlbWE6OmNyZWF0ZSgncGhvbmVzJywgZnVuY3Rpb24gKCR0YWJsZSkge1xuICAgICR0YWJsZS0+YmlnSW5jcmVtZW50cygnaWQnKTtcbiAgICAkdGFibGUtPmludGVnZXIoJ2d1ZXN0X2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ251bWJlcicpO1xuICAgICR0YWJsZS0+dGltZXN0YW1wcygpO1xufSk7XG5cbmNsYXNzIFBob25lIGV4dGVuZHMgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxNb2RlbCBcbntcbiAgICBwcm90ZWN0ZWQgJGZpbGxhYmxlID0gWydudW1iZXInLCAnZ3Vlc3RfaWQnXTtcbn1cblxuY2xhc3MgR3Vlc3QgZXh0ZW5kcyBJbGx1bWluYXRlXFxEYXRhYmFzZVxcRWxvcXVlbnRcXE1vZGVsIFxue1xuICAgIHByb3RlY3RlZCAkZmlsbGFibGUgPSBbJ25hbWUnXTtcblxuICAgIHB1YmxpYyBmdW5jdGlvbiBwaG9uZSgpXG4gICAge1xuICAgICAgICByZXR1cm4gJHRoaXMtPmhhc09uZSgnUGhvbmUnKTtcbiAgICB9XG59XG5cbiRndWVzdCA9IEd1ZXN0OjpjcmVhdGUoWyduYW1lJyA9PiAnUGF1bCddKTtcblxuJHBob25lID0gUGhvbmU6OmNyZWF0ZShbJ251bWJlcicgPT4gJzEyMzQ1Njc4OTAnLCAnZ3Vlc3RfaWQnID0+ICRndWVzdC0+aWRdKTtcblxuR3Vlc3Q6OmZpbmQoMSktPnBob25lO1xuIiwiaGFzaCI6ImVsb3F1ZW50LXJlbGF0aW9uc2hpcHMtb25lLXRvLW9uZSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Get the phone record associated with the user.\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">phone</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;hasOne(<span class="hljs-string">\'App\\Phone\'</span>);\n    }\n}</span></code></pre>\n  <p>The first argument passed to the <code>hasOne</code> method is the name of the related model. Once the relationship is defined, we may retrieve the related record using Eloquent&#39;s dynamic properties. Dynamic properties allow you to access relationship methods as if they were properties defined on the model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$phone</span> = User::find(<span class="hljs-number">1</span>)-&gt;phone;</code></pre>\n  <p>Eloquent determines the foreign key of the relationship based on the model name. In this case, the <code>Phone</code> model is automatically assumed to have a <code>user_id</code> foreign key. If you wish to override this convention, you may pass a second argument to the <code>hasOne</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> $<span class="hljs-keyword">this</span>-&gt;hasOne(<span class="hljs-string">\'App\\Phone\'</span>, <span class="hljs-string">\'foreign_key\'</span>);</code></pre>\n  <p>Additionally, Eloquent assumes that the foreign key should have a value matching the <code>id</code> (or the custom <code>$primaryKey</code>) column of the parent. In other words, Eloquent will look for the value of the user&#39;s <code>id</code> column in the <code>user_id</code> column of the <code>Phone</code> record. If you would like the relationship to use a value other than <code>id</code>, you may pass a third argument to the <code>hasOne</code> method specifying your custom key:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> $<span class="hljs-keyword">this</span>-&gt;hasOne(<span class="hljs-string">\'App\\Phone\'</span>, <span class="hljs-string">\'foreign_key\'</span>, <span class="hljs-string">\'local_key\'</span>);</code></pre>\n  \n          <p><a name="defining-the-inverse-of-the-relationship"></a></p>\n          <h4>\n            <a href="#defining-the-inverse-of-the-relationship">\n              Defining The Inverse Of The Relationship\n            </a>\n          </h4><p>So, we can access the <code>Phone</code> model from our <code>User</code>. Now, let&#39;s define a relationship on the <code>Phone</code> model that will let us access the <code>User</code> that owns the phone. We can define the inverse of a <code>hasOne</code> relationship using the <code>belongsTo</code> method:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2d1ZXN0cycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ25hbWUnKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5TY2hlbWE6OmNyZWF0ZSgncGhvbmVzJywgZnVuY3Rpb24gKCR0YWJsZSkge1xuICAgICR0YWJsZS0+YmlnSW5jcmVtZW50cygnaWQnKTtcbiAgICAkdGFibGUtPmludGVnZXIoJ2d1ZXN0X2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ251bWJlcicpO1xuICAgICR0YWJsZS0+dGltZXN0YW1wcygpO1xufSk7XG5cbmNsYXNzIFBob25lIGV4dGVuZHMgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxNb2RlbCBcbntcbiAgICBwcm90ZWN0ZWQgJGZpbGxhYmxlID0gWydudW1iZXInLCAnZ3Vlc3RfaWQnXTtcblxuICAgIHB1YmxpYyBmdW5jdGlvbiBndWVzdCgpXG4gICAge1xuICAgICAgICByZXR1cm4gJHRoaXMtPmJlbG9uZ3NUbygnR3Vlc3QnKTtcbiAgICB9XG59XG5cbmNsYXNzIEd1ZXN0IGV4dGVuZHMgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxNb2RlbCBcbntcbiAgICBwcm90ZWN0ZWQgJGZpbGxhYmxlID0gWyduYW1lJ107XG5cbiAgICBwdWJsaWMgZnVuY3Rpb24gcGhvbmUoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuICR0aGlzLT5oYXNPbmUoJ1Bob25lJyk7XG4gICAgfVxufVxuXG4kZ3Vlc3QgPSBHdWVzdDo6Y3JlYXRlKFsnbmFtZScgPT4gJ1BhdWwnXSk7XG5cbiRwaG9uZSA9IFBob25lOjpjcmVhdGUoWydudW1iZXInID0+ICcxMjM0NTY3ODkwJywgJ2d1ZXN0X2lkJyA9PiAkZ3Vlc3QtPmlkXSk7XG5cblBob25lOjpmaW5kKDEpLT5ndWVzdDtcbiIsImhhc2giOiJlbG9xdWVudC1yZWxhdGlvbnNoaXBzLWRlZmluaW5nLXRoZS1pbnZlcnNlLW9mLXRoZS1yZWxhdGlvbnNoaXAifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Get the user that owns the phone.\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">user</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;belongsTo(<span class="hljs-string">\'App\\User\'</span>);\n    }\n}</span></code></pre>\n  <p>In the example above, Eloquent will try to match the <code>user_id</code> from the <code>Phone</code> model to an <code>id</code> on the <code>User</code> model. Eloquent determines the default foreign key name by examining the name of the relationship method and suffixing the method name with <code>_id</code>. However, if the foreign key on the <code>Phone</code> model is not <code>user_id</code>, you may pass a custom key name as the second argument to the <code>belongsTo</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the user that owns the phone.\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">user</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;belongsTo(<span class="hljs-string">\'App\\User\'</span>, <span class="hljs-string">\'foreign_key\'</span>);\n}</code></pre>\n  <p>If your parent model does not use <code>id</code> as its primary key, or you wish to join the child model to a different column, you may pass a third argument to the <code>belongsTo</code> method specifying your parent table&#39;s custom key:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the user that owns the phone.\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">user</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;belongsTo(<span class="hljs-string">\'App\\User\'</span>, <span class="hljs-string">\'foreign_key\'</span>, <span class="hljs-string">\'other_key\'</span>);\n}</code></pre>\n  <p><a name="one-to-many"></a></p>\n\n          <p><a name="one-to-many"></a></p>\n          <h3>\n            <a href="#one-to-many">\n              One To Many\n            </a>\n          </h3><p>A one-to-many relationship is used to define relationships where a single model owns any amount of other models. For example, a blog post may have an infinite number of comments. Like all other Eloquent relationships, one-to-many relationships are defined by placing a function on your Eloquent model:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ3Bvc3RzJywgZnVuY3Rpb24gKCR0YWJsZSkge1xuICAgICR0YWJsZS0+YmlnSW5jcmVtZW50cygnaWQnKTtcbiAgICAkdGFibGUtPnN0cmluZygndGl0bGUnKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5TY2hlbWE6OmNyZWF0ZSgnY29tbWVudHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+aW50ZWdlcigncG9zdF9pZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCdjb21tZW50Jyk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuY2xhc3MgQ29tbWVudCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsnY29tbWVudCcsICdwb3N0X2lkJ107XG59XG5cbmNsYXNzIFBvc3QgZXh0ZW5kcyBJbGx1bWluYXRlXFxEYXRhYmFzZVxcRWxvcXVlbnRcXE1vZGVsIFxue1xuICAgIHByb3RlY3RlZCAkZmlsbGFibGUgPSBbJ3RpdGxlJ107XG5cbiAgICBwdWJsaWMgZnVuY3Rpb24gY29tbWVudHMoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuICR0aGlzLT5oYXNNYW55KCdDb21tZW50Jyk7XG4gICAgfVxufVxuXG4kcG9zdCA9IFBvc3Q6OmNyZWF0ZShbJ3RpdGxlJyA9PiAnVGlua2Vyd2VsbCBpcyBhd2Vzb21lJ10pO1xuXG5Db21tZW50OjpjcmVhdGUoWydwb3N0X2lkJyA9PiAkcG9zdC0+aWQsICdjb21tZW50JyA9PiAnWWVzISddKTtcbkNvbW1lbnQ6OmNyZWF0ZShbJ3Bvc3RfaWQnID0+ICRwb3N0LT5pZCwgJ2NvbW1lbnQnID0+ICdGb3Igc3VyZSEhJ10pO1xuXG5Qb3N0OjpmaW5kKDEpLT5jb21tZW50c1xuIiwiaGFzaCI6ImVsb3F1ZW50LXJlbGF0aW9uc2hpcHMtb25lLXRvLW1hbnkifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Get the comments for the blog post.\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">comments</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;hasMany(<span class="hljs-string">\'App\\Comment\'</span>);\n    }\n}</span></code></pre>\n  <p>Remember, Eloquent will automatically determine the proper foreign key column on the <code>Comment</code> model. By convention, Eloquent will take the &quot;snake case&quot; name of the owning model and suffix it with <code>_id</code>. So, for this example, Eloquent will assume the foreign key on the <code>Comment</code> model is <code>post_id</code>.</p>\n<p>Once the relationship has been defined, we can access the collection of comments by accessing the <code>comments</code> property. Remember, since Eloquent provides &quot;dynamic properties&quot;, we can access relationship methods as if they were defined as properties on the model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$comments = App\\Post::find(<span class="hljs-number">1</span>)-&gt;comments;\n\n<span class="hljs-keyword">foreach</span> ($comments <span class="hljs-keyword">as</span> $comment) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p>Since all relationships also serve as query builders, you can add further constraints to which comments are retrieved by calling the <code>comments</code> method and continuing to chain conditions onto the query:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$comment</span> = App\\Post::find(<span class="hljs-number">1</span>)-&gt;comments()-&gt;where(<span class="hljs-string">\'title\'</span>, <span class="hljs-string">\'foo\'</span>)-&gt;first();</code></pre>\n  <p>Like the <code>hasOne</code> method, you may also override the foreign and local keys by passing additional arguments to the <code>hasMany</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> $<span class="hljs-keyword">this</span>-&gt;hasMany(<span class="hljs-string">\'App\\Comment\'</span>, <span class="hljs-string">\'foreign_key\'</span>);\n\n<span class="hljs-keyword">return</span> $<span class="hljs-keyword">this</span>-&gt;hasMany(<span class="hljs-string">\'App\\Comment\'</span>, <span class="hljs-string">\'foreign_key\'</span>, <span class="hljs-string">\'local_key\'</span>);</code></pre>\n  <p><a name="one-to-many-inverse"></a></p>\n\n          <p><a name="one-to-many-inverse-"></a></p>\n          <h3>\n            <a href="#one-to-many-inverse-">\n              One To Many (Inverse)\n            </a>\n          </h3><p>Now that we can access all of a post&#39;s comments, let&#39;s define a relationship to allow a comment to access its parent post. To define the inverse of a <code>hasMany</code> relationship, define a relationship function on the child model which calls the <code>belongsTo</code> method:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ3Bvc3RzJywgZnVuY3Rpb24gKCR0YWJsZSkge1xuICAgICR0YWJsZS0+YmlnSW5jcmVtZW50cygnaWQnKTtcbiAgICAkdGFibGUtPnN0cmluZygndGl0bGUnKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5TY2hlbWE6OmNyZWF0ZSgnY29tbWVudHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+aW50ZWdlcigncG9zdF9pZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCdjb21tZW50Jyk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuY2xhc3MgQ29tbWVudCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsnY29tbWVudCcsICdwb3N0X2lkJ107XG5cbiAgICBwdWJsaWMgZnVuY3Rpb24gcG9zdCgpXG4gICAge1xuICAgICAgICByZXR1cm4gJHRoaXMtPmJlbG9uZ3NUbygnUG9zdCcpO1xuICAgIH1cbn1cblxuY2xhc3MgUG9zdCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsndGl0bGUnXTtcblxuICAgIHB1YmxpYyBmdW5jdGlvbiBjb21tZW50cygpXG4gICAge1xuICAgICAgICByZXR1cm4gJHRoaXMtPmhhc01hbnkoJ0NvbW1lbnQnKTtcbiAgICB9XG59XG5cbiRwb3N0ID0gUG9zdDo6Y3JlYXRlKFsndGl0bGUnID0+ICdUaW5rZXJ3ZWxsIGlzIGF3ZXNvbWUnXSk7XG5cbkNvbW1lbnQ6OmNyZWF0ZShbJ3Bvc3RfaWQnID0+ICRwb3N0LT5pZCwgJ2NvbW1lbnQnID0+ICdZZXMhJ10pO1xuQ29tbWVudDo6Y3JlYXRlKFsncG9zdF9pZCcgPT4gJHBvc3QtPmlkLCAnY29tbWVudCcgPT4gJ0ZvciBzdXJlISEnXSk7XG5cbkNvbW1lbnQ6OmZpbmQoMSktPnBvc3Q7XG4iLCJoYXNoIjoiZWxvcXVlbnQtcmVsYXRpb25zaGlwcy1vbmUtdG8tbWFueS1pbnZlcnNlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Comment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Get the post that owns the comment.\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">post</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;belongsTo(<span class="hljs-string">\'App\\Post\'</span>);\n    }\n}</span></code></pre>\n  <p>Once the relationship has been defined, we can retrieve the <code>Post</code> model for a <code>Comment</code> by accessing the <code>post</code> &quot;dynamic property&quot;:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$comment = App\\Comment::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-keyword">echo</span> $comment-&gt;post-&gt;title;</code></pre>\n  <p>In the example above, Eloquent will try to match the <code>post_id</code> from the <code>Comment</code> model to an <code>id</code> on the <code>Post</code> model. Eloquent determines the default foreign key name by examining the name of the relationship method and suffixing the method name with a <code>_</code> followed by the name of the primary key column. However, if the foreign key on the <code>Comment</code> model is not <code>post_id</code>, you may pass a custom key name as the second argument to the <code>belongsTo</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the post that owns the comment.\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">post</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;belongsTo(<span class="hljs-string">\'App\\Post\'</span>, <span class="hljs-string">\'foreign_key\'</span>);\n}</code></pre>\n  <p>If your parent model does not use <code>id</code> as its primary key, or you wish to join the child model to a different column, you may pass a third argument to the <code>belongsTo</code> method specifying your parent table&#39;s custom key:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the post that owns the comment.\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">post</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;belongsTo(<span class="hljs-string">\'App\\Post\'</span>, <span class="hljs-string">\'foreign_key\'</span>, <span class="hljs-string">\'other_key\'</span>);\n}</code></pre>\n  <p><a name="many-to-many"></a></p>\n\n          <p><a name="many-to-many"></a></p>\n          <h3>\n            <a href="#many-to-many">\n              Many To Many\n            </a>\n          </h3><p>Many-to-many relations are slightly more complicated than <code>hasOne</code> and <code>hasMany</code> relationships. An example of such a relationship is a user with many roles, where the roles are also shared by other users. For example, many users may have the role of &quot;Admin&quot;. To define this relationship, three database tables are needed: <code>users</code>, <code>roles</code>, and <code>role_user</code>. The <code>role_user</code> table is derived from the alphabetical order of the related model names, and contains the <code>user_id</code> and <code>role_id</code> columns.</p>\n<p>Many-to-many relationships are defined by writing a method that returns the result of the <code>belongsToMany</code> method. For example, let&#39;s define the <code>roles</code> method on our <code>User</code> model:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ3JvbGVzJywgZnVuY3Rpb24gKCR0YWJsZSkge1xuICAgICR0YWJsZS0+YmlnSW5jcmVtZW50cygnaWQnKTtcbiAgICAkdGFibGUtPnN0cmluZygnbmFtZScpO1xuICAgICR0YWJsZS0+dGltZXN0YW1wcygpO1xufSk7XG5cblNjaGVtYTo6Y3JlYXRlKCdndWVzdHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCduYW1lJyk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuU2NoZW1hOjpjcmVhdGUoJ2d1ZXN0X3JvbGUnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5pbnRlZ2VyKCdyb2xlX2lkJyk7XG4gICAgJHRhYmxlLT5pbnRlZ2VyKCdndWVzdF9pZCcpO1xufSk7XG5cbmNsYXNzIFJvbGUgZXh0ZW5kcyBJbGx1bWluYXRlXFxEYXRhYmFzZVxcRWxvcXVlbnRcXE1vZGVsIFxue1xuICAgIHByb3RlY3RlZCAkZmlsbGFibGUgPSBbJ25hbWUnXTtcbn1cblxuY2xhc3MgR3Vlc3QgZXh0ZW5kcyBJbGx1bWluYXRlXFxEYXRhYmFzZVxcRWxvcXVlbnRcXE1vZGVsIFxue1xuICAgIHByb3RlY3RlZCAkZmlsbGFibGUgPSBbJ25hbWUnXTtcblxuICAgIHB1YmxpYyBmdW5jdGlvbiByb2xlcygpXG4gICAge1xuICAgICAgICByZXR1cm4gJHRoaXMtPmJlbG9uZ3NUb01hbnkoJ1JvbGUnKTtcbiAgICB9XG59XG5cbiRyb2xlID0gUm9sZTo6Y3JlYXRlKFsnbmFtZScgPT4gJ3N1cHBvcnQnXSk7XG4kcm9sZTIgPSBSb2xlOjpjcmVhdGUoWyduYW1lJyA9PiAnYWRtaW4nXSk7XG5cbiRndWVzdCA9IEd1ZXN0OjpjcmVhdGUoWyduYW1lJyA9PiAnTWFyY2VsJ10pO1xuJGd1ZXN0LT5yb2xlcygpLT5hdHRhY2goWzEsMl0pO1xuXG4kZ3Vlc3QgPSBHdWVzdDo6ZmluZCgxKTtcblxuJGd1ZXN0LT5yb2xlcztcbiIsImhhc2giOiJlbG9xdWVudC1yZWxhdGlvbnNoaXBzLW1hbnktdG8tbWFueSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The roles that belong to the user.\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">roles</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;belongsToMany(<span class="hljs-string">\'App\\Role\'</span>);\n    }\n}</span></code></pre>\n  <p>Once the relationship is defined, you may access the user&#39;s roles using the <code>roles</code> dynamic property:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user = App\\User::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-keyword">foreach</span> ($user-&gt;roles <span class="hljs-keyword">as</span> $role) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p>Like all other relationship types, you may call the <code>roles</code> method to continue chaining query constraints onto the relationship:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-function"><span class="hljs-title">roles</span> = App\\User::find(1)-&gt;</span><span class="hljs-function"><span class="hljs-title">roles</span>()-&gt;</span><span class="hljs-function"><span class="hljs-title">orderBy</span>(\'<span class="hljs-keyword">name</span>\')-&gt;</span>get();</code></pre>\n  <p>As mentioned previously, to determine the table name of the relationship&#39;s joining table, Eloquent will join the two related model names in alphabetical order. However, you are free to override this convention. You may do so by passing a second argument to the <code>belongsToMany</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> $<span class="hljs-keyword">this</span>-&gt;belongsToMany(<span class="hljs-string">\'App\\Role\'</span>, <span class="hljs-string">\'role_user\'</span>);</code></pre>\n  <p>In addition to customizing the name of the joining table, you may also customize the column names of the keys on the table by passing additional arguments to the <code>belongsToMany</code> method. The third argument is the foreign key name of the model on which you are defining the relationship, while the fourth argument is the foreign key name of the model that you are joining to:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> $<span class="hljs-keyword">this</span>-&gt;belongsToMany(<span class="hljs-string">\'App\\Role\'</span>, <span class="hljs-string">\'role_user\'</span>, <span class="hljs-string">\'user_id\'</span>, <span class="hljs-string">\'role_id\'</span>);</code></pre>\n  \n          <p><a name="defining-the-inverse-of-the-relationship"></a></p>\n          <h4>\n            <a href="#defining-the-inverse-of-the-relationship">\n              Defining The Inverse Of The Relationship\n            </a>\n          </h4><p>To define the inverse of a many-to-many relationship, you place another call to <code>belongsToMany</code> on your related model. To continue our user roles example, let&#39;s define the <code>users</code> method on the <code>Role</code> model:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ3JvbGVzJywgZnVuY3Rpb24gKCR0YWJsZSkge1xuICAgICR0YWJsZS0+YmlnSW5jcmVtZW50cygnaWQnKTtcbiAgICAkdGFibGUtPnN0cmluZygnbmFtZScpO1xuICAgICR0YWJsZS0+dGltZXN0YW1wcygpO1xufSk7XG5cblNjaGVtYTo6Y3JlYXRlKCdndWVzdHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCduYW1lJyk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuU2NoZW1hOjpjcmVhdGUoJ2d1ZXN0X3JvbGUnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5pbnRlZ2VyKCdyb2xlX2lkJyk7XG4gICAgJHRhYmxlLT5pbnRlZ2VyKCdndWVzdF9pZCcpO1xufSk7XG5cbmNsYXNzIFJvbGUgZXh0ZW5kcyBJbGx1bWluYXRlXFxEYXRhYmFzZVxcRWxvcXVlbnRcXE1vZGVsIFxue1xuICAgIHByb3RlY3RlZCAkZmlsbGFibGUgPSBbJ25hbWUnXTtcblxuICAgIHB1YmxpYyBmdW5jdGlvbiB1c2VycygpXG4gICAge1xuICAgICAgICByZXR1cm4gJHRoaXMtPmJlbG9uZ3NUb01hbnkoJ0d1ZXN0Jyk7XG4gICAgfVxufVxuXG5jbGFzcyBHdWVzdCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsnbmFtZSddO1xuXG4gICAgcHVibGljIGZ1bmN0aW9uIHJvbGVzKClcbiAgICB7XG4gICAgICAgIHJldHVybiAkdGhpcy0+YmVsb25nc1RvTWFueSgnUm9sZScpO1xuICAgIH1cbn1cblxuJHJvbGUgPSBSb2xlOjpjcmVhdGUoWyduYW1lJyA9PiAnc3VwcG9ydCddKTtcbiRyb2xlMiA9IFJvbGU6OmNyZWF0ZShbJ25hbWUnID0+ICdhZG1pbiddKTtcblxuJGd1ZXN0ID0gR3Vlc3Q6OmNyZWF0ZShbJ25hbWUnID0+ICdNYXJjZWwnXSk7XG4kZ3Vlc3QtPnJvbGVzKCktPmF0dGFjaChbMSwyXSk7XG5cbiRyb2xlID0gUm9sZTo6ZmluZCgxKTtcblxuJHJvbGUtPnVzZXJzO1xuIiwiaGFzaCI6ImVsb3F1ZW50LXJlbGF0aW9uc2hpcHMtZGVmaW5pbmctdGhlLWludmVyc2Utb2YtdGhlLXJlbGF0aW9uc2hpcCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Role</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The users that belong to the role.\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">users</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;belongsToMany(<span class="hljs-string">\'App\\User\'</span>);\n    }\n}</span></code></pre>\n  <p>As you can see, the relationship is defined exactly the same as its <code>User</code> counterpart, with the exception of referencing the <code>App\\User</code> model. Since we&#39;re reusing the <code>belongsToMany</code> method, all of the usual table and key customization options are available when defining the inverse of many-to-many relationships.</p>\n\n          <p><a name="retrieving-intermediate-table-columns"></a></p>\n          <h4>\n            <a href="#retrieving-intermediate-table-columns">\n              Retrieving Intermediate Table Columns\n            </a>\n          </h4><p>As you have already learned, working with many-to-many relations requires the presence of an intermediate table. Eloquent provides some very helpful ways of interacting with this table. For example, let&#39;s assume our <code>User</code> object has many <code>Role</code> objects that it is related to. After accessing this relationship, we may access the intermediate table using the <code>pivot</code> attribute on the models:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user = App\\User::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-keyword">foreach</span> ($user-&gt;roles <span class="hljs-keyword">as</span> $role) {\n    <span class="hljs-keyword">echo</span> $role-&gt;pivot-&gt;created_at;\n}</code></pre>\n  <p>Notice that each <code>Role</code> model we retrieve is automatically assigned a <code>pivot</code> attribute. This attribute contains a model representing the intermediate table, and may be used like any other Eloquent model.</p>\n<p>By default, only the model keys will be present on the <code>pivot</code> object. If your pivot table contains extra attributes, you must specify them when defining the relationship:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> $<span class="hljs-keyword">this</span>-&gt;belongsToMany<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'App\\Role\'</span>)</span>-&gt;</span>withPivot(<span class="hljs-string">\'column1\'</span>, <span class="hljs-string">\'column2\'</span>);</code></pre>\n  <p>If you want your pivot table to have automatically maintained <code>created_at</code> and <code>updated_at</code> timestamps, use the <code>withTimestamps</code> method on the relationship definition:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> $<span class="hljs-keyword">this</span>-&gt;belongsToMany<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'App\\Role\'</span>)</span>-&gt;</span>withTimestamps();</code></pre>\n  \n          <p><a name="customizing-the-code-pivot-code-attribute-name"></a></p>\n          <h4>\n            <a href="#customizing-the-code-pivot-code-attribute-name">\n              Customizing The <code>pivot</code> Attribute Name\n            </a>\n          </h4><p>As noted earlier, attributes from the intermediate table may be accessed on models using the <code>pivot</code> attribute. However, you are free to customize the name of this attribute to better reflect its purpose within your application.</p>\n<p>For example, if your application contains users that may subscribe to podcasts, you probably have a many-to-many relationship between users and podcasts. If this is the case, you may wish to rename your intermediate table accessor to <code>subscription</code> instead of <code>pivot</code>. This can be done using the <code>as</code> method when defining the relationship:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> $<span class="hljs-keyword">this</span>-&gt;belongsToMany<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'App\\Podcast\'</span>)</span>\n                -&gt;</span>as<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'subscription\'</span>)</span>\n                -&gt;</span>withTimestamps();</code></pre>\n  <p>Once this is done, you may access the intermediate table data using the customized name:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = User::with(<span class="hljs-string">\'podcasts\'</span>)-&gt;get();\n\n<span class="hljs-keyword">foreach</span> ($users-&gt;flatMap-&gt;podcasts <span class="hljs-keyword">as</span> $podcast) {\n    <span class="hljs-keyword">echo</span> $podcast-&gt;subscription-&gt;created_at;\n}</code></pre>\n  \n          <p><a name="filtering-relationships-via-intermediate-table-columns"></a></p>\n          <h4>\n            <a href="#filtering-relationships-via-intermediate-table-columns">\n              Filtering Relationships Via Intermediate Table Columns\n            </a>\n          </h4><p>You can also filter the results returned by <code>belongsToMany</code> using the <code>wherePivot</code>, <code>wherePivotIn</code>, and <code>wherePivotNotIn</code> methods when defining the relationship:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> $<span class="hljs-keyword">this</span>-&gt;belongsToMany<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'App\\Role\'</span>)</span>-&gt;</span>wherePivot(<span class="hljs-string">\'approved\'</span>, <span class="hljs-number">1</span>);\n\n<span class="hljs-keyword">return</span> $<span class="hljs-keyword">this</span>-&gt;belongsToMany<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'App\\Role\'</span>)</span>-&gt;</span>wherePivotIn(<span class="hljs-string">\'priority\'</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]);\n\n<span class="hljs-keyword">return</span> $<span class="hljs-keyword">this</span>-&gt;belongsToMany<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'App\\Role\'</span>)</span>-&gt;</span>wherePivotNotIn(<span class="hljs-string">\'priority\'</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]);</code></pre>\n  <p><a name="defining-custom-intermediate-table-models"></a></p>\n\n          <p><a name="defining-custom-intermediate-table-models"></a></p>\n          <h3>\n            <a href="#defining-custom-intermediate-table-models">\n              Defining Custom Intermediate Table Models\n            </a>\n          </h3><p>If you would like to define a custom model to represent the intermediate table of your relationship, you may call the <code>using</code> method when defining the relationship. Custom many-to-many pivot models should extend the <code>Illuminate\\Database\\Eloquent\\Relations\\Pivot</code> class while custom polymorphic many-to-many pivot models should extend the <code>Illuminate\\Database\\Eloquent\\Relations\\MorphPivot</code> class. For example, we may define a <code>Role</code> which uses a custom <code>RoleUser</code> pivot model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Role</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The users that belong to the role.\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">users</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;belongsToMany(<span class="hljs-string">\'App\\User\'</span>)-&gt;using(<span class="hljs-string">\'App\\RoleUser\'</span>);\n    }\n}</span></code></pre>\n  <p>When defining the <code>RoleUser</code> model, we will extend the <code>Pivot</code> class:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">&lt;?php\n\nnamespace <span class="hljs-type">App</span>;\n\nuse <span class="hljs-type">Illuminate</span>\\<span class="hljs-type">Database</span>\\<span class="hljs-type">Eloquent</span>\\<span class="hljs-type">Relations</span>\\<span class="hljs-type">Pivot</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RoleUser</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Pivot</span></span>\n{\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p>You can combine <code>using</code> and <code>withPivot</code> in order to retrieve columns from the intermediate table. For example, you may retrieve the <code>created_by</code> and <code>updated_by</code> columns from the <code>RoleUser</code> pivot table by passing the column names to the <code>withPivot</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Role</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The users that belong to the role.\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">users</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;belongsToMany(<span class="hljs-string">\'App\\User\'</span>)\n                        -&gt;using(<span class="hljs-string">\'App\\RoleUser\'</span>)\n                        -&gt;withPivot([\n                            <span class="hljs-string">\'created_by\'</span>,\n                            <span class="hljs-string">\'updated_by\'</span>,\n                        ]);\n    }\n}</span></code></pre>\n  <blockquote>\n<p><strong>Note:</strong> Pivot models may not use the <code>SoftDeletes</code> trait. If you need to soft delete pivot records consider converting your pivot model to an actual Eloquent model.</p>\n</blockquote>\n\n          <p><a name="custom-pivot-models-and-incrementing-ids"></a></p>\n          <h4>\n            <a href="#custom-pivot-models-and-incrementing-ids">\n              Custom Pivot Models And Incrementing IDs\n            </a>\n          </h4><p>If you have defined a many-to-many relationship that uses a custom pivot model, and that pivot model has an auto-incrementing primary key, you should ensure your custom pivot model class defines an <code>incrementing</code> property that is set to <code>true</code>.</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Indicates if the IDs are auto-incrementing.\n *\n * <span class="hljs-doctag">@var</span> bool\n */</span>\n<span class="hljs-keyword">public</span> $incrementing = <span class="hljs-keyword">true</span>;</code></pre>\n  <p><a name="has-one-through"></a></p>\n\n          <p><a name="has-one-through"></a></p>\n          <h3>\n            <a href="#has-one-through">\n              Has One Through\n            </a>\n          </h3><p>The &quot;has-one-through&quot; relationship links models through a single intermediate relation.\nFor example, if each supplier has one user, and each user is associated with one user history record, then the supplier model may access the user&#39;s history <em>through</em> the user. Let&#39;s look at the database tables necessary to define this relationship:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">users\n    <span class="hljs-built_in">id</span> - <span class="hljs-built_in">integer</span>\n    supplier_id - <span class="hljs-built_in">integer</span>\n\nsuppliers\n    <span class="hljs-built_in">id</span> - <span class="hljs-built_in">integer</span>\n\nhistory\n    <span class="hljs-built_in">id</span> - <span class="hljs-built_in">integer</span>\n    user_id - <span class="hljs-built_in">integer</span></code></pre>\n  <p>Though the <code>history</code> table does not contain a <code>supplier_id</code> column, the <code>hasOneThrough</code> relation can provide access to the user&#39;s history to the supplier model. Now that we have examined the table structure for the relationship, let&#39;s define it on the <code>Supplier</code> model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Supplier</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Get the user\'s history.\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">userHistory</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;hasOneThrough(<span class="hljs-string">\'App\\History\'</span>, <span class="hljs-string">\'App\\User\'</span>);\n    }\n}</span></code></pre>\n  <p>The first argument passed to the <code>hasOneThrough</code> method is the name of the final model we wish to access, while the second argument is the name of the intermediate model.</p>\n<p>Typical Eloquent foreign key conventions will be used when performing the relationship&#39;s queries. If you would like to customize the keys of the relationship, you may pass them as the third and fourth arguments to the <code>hasOneThrough</code> method. The third argument is the name of the foreign key on the intermediate model. The fourth argument is the name of the foreign key on the final model. The fifth argument is the local key, while the sixth argument is the local key of the intermediate model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Supplier</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span>\n{\n    <span class="hljs-comment">/**\n     * Get the user\'s history.\n     */</span>\n    public function userHistory()\n    {\n        <span class="hljs-keyword">return</span> $<span class="hljs-keyword">this</span>-&gt;hasOneThrough(\n            <span class="hljs-symbol">\'App</span>\\<span class="hljs-type">History</span>\',\n            <span class="hljs-symbol">\'App</span>\\<span class="hljs-type">User</span>\',\n            <span class="hljs-symbol">\'supplier_i</span>d\', <span class="hljs-comment">// Foreign key on users table...</span>\n            <span class="hljs-symbol">\'user_i</span>d\', <span class="hljs-comment">// Foreign key on history table...</span>\n            <span class="hljs-symbol">\'i</span>d\', <span class="hljs-comment">// Local key on suppliers table...</span>\n            <span class="hljs-symbol">\'i</span>d\' <span class="hljs-comment">// Local key on users table...</span>\n        );\n    }\n}</code></pre>\n  <p><a name="has-many-through"></a></p>\n\n          <p><a name="has-many-through"></a></p>\n          <h3>\n            <a href="#has-many-through">\n              Has Many Through\n            </a>\n          </h3><p>The &quot;has-many-through&quot; relationship provides a convenient shortcut for accessing distant relations via an intermediate relation. For example, a <code>Country</code> model might have many <code>Post</code> models through an intermediate <code>User</code> model. In this example, you could easily gather all blog posts for a given country. Let&#39;s look at the tables required to define this relationship:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">countries\n    <span class="hljs-built_in">id</span> - <span class="hljs-built_in">integer</span>\n    <span class="hljs-built_in">name</span> - <span class="hljs-built_in">string</span>\n\nusers\n    <span class="hljs-built_in">id</span> - <span class="hljs-built_in">integer</span>\n    country_id - <span class="hljs-built_in">integer</span>\n    <span class="hljs-built_in">name</span> - <span class="hljs-built_in">string</span>\n\nposts\n    <span class="hljs-built_in">id</span> - <span class="hljs-built_in">integer</span>\n    user_id - <span class="hljs-built_in">integer</span>\n    title - <span class="hljs-built_in">string</span></code></pre>\n  <p>Though <code>posts</code> does not contain a <code>country_id</code> column, the <code>hasManyThrough</code> relation provides access to a country&#39;s posts via <code>$country-&gt;posts</code>. To perform this query, Eloquent inspects the <code>country_id</code> on the intermediate <code>users</code> table. After finding the matching user IDs, they are used to query the <code>posts</code> table.</p>\n<p>Now that we have examined the table structure for the relationship, let&#39;s define it on the <code>Country</code> model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Country</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Get all of the posts for the country.\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">posts</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;hasManyThrough(<span class="hljs-string">\'App\\Post\'</span>, <span class="hljs-string">\'App\\User\'</span>);\n    }\n}</span></code></pre>\n  <p>The first argument passed to the <code>hasManyThrough</code> method is the name of the final model we wish to access, while the second argument is the name of the intermediate model.</p>\n<p>Typical Eloquent foreign key conventions will be used when performing the relationship&#39;s queries. If you would like to customize the keys of the relationship, you may pass them as the third and fourth arguments to the <code>hasManyThrough</code> method. The third argument is the name of the foreign key on the intermediate model. The fourth argument is the name of the foreign key on the final model. The fifth argument is the local key, while the sixth argument is the local key of the intermediate model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Country</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span>\n{\n    public function posts()\n    {\n        <span class="hljs-keyword">return</span> $<span class="hljs-keyword">this</span>-&gt;hasManyThrough(\n            <span class="hljs-symbol">\'App</span>\\<span class="hljs-type">Post</span>\',\n            <span class="hljs-symbol">\'App</span>\\<span class="hljs-type">User</span>\',\n            <span class="hljs-symbol">\'country_i</span>d\', <span class="hljs-comment">// Foreign key on users table...</span>\n            <span class="hljs-symbol">\'user_i</span>d\', <span class="hljs-comment">// Foreign key on posts table...</span>\n            <span class="hljs-symbol">\'i</span>d\', <span class="hljs-comment">// Local key on countries table...</span>\n            <span class="hljs-symbol">\'i</span>d\' <span class="hljs-comment">// Local key on users table...</span>\n        );\n    }\n}</code></pre>\n  <p><a name="polymorphic-relationships"></a></p>\n\n          <p><a name="polymorphic-relationships"></a></p>\n          <h2>\n            <a href="#polymorphic-relationships">\n              Polymorphic Relationships\n            </a>\n          </h2><p>A polymorphic relationship allows the target model to belong to more than one type of model using a single association.</p>\n<p><a name="one-to-one-polymorphic-relations"></a></p>\n\n          <p><a name="one-to-one-polymorphic-"></a></p>\n          <h3>\n            <a href="#one-to-one-polymorphic-">\n              One To One (Polymorphic)\n            </a>\n          </h3>\n          <p><a name="table-structure"></a></p>\n          <h4>\n            <a href="#table-structure">\n              Table Structure\n            </a>\n          </h4><p>A one-to-one polymorphic relation is similar to a simple one-to-one relation; however, the target model can belong to more than one type of model on a single association. For example, a blog <code>Post</code> and a <code>User</code> may share a polymorphic relation to an <code>Image</code> model. Using a one-to-one polymorphic relation allows you to have a single list of unique images that are used for both blog posts and user accounts. First, let&#39;s examine the table structure:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">posts\n    <span class="hljs-built_in">id</span> - <span class="hljs-built_in">integer</span>\n    <span class="hljs-built_in">name</span> - <span class="hljs-built_in">string</span>\n\nusers\n    <span class="hljs-built_in">id</span> - <span class="hljs-built_in">integer</span>\n    <span class="hljs-built_in">name</span> - <span class="hljs-built_in">string</span>\n\nimages\n    <span class="hljs-built_in">id</span> - <span class="hljs-built_in">integer</span>\n    url - <span class="hljs-built_in">string</span>\n    imageable_id - <span class="hljs-built_in">integer</span>\n    imageable_type - <span class="hljs-built_in">string</span></code></pre>\n  <p>Take note of the <code>imageable_id</code> and <code>imageable_type</code> columns on the <code>images</code> table. The <code>imageable_id</code> column will contain the ID value of the post or user, while the <code>imageable_type</code> column will contain the class name of the parent model. The <code>imageable_type</code> column is used by Eloquent to determine which &quot;type&quot; of parent model to return when accessing the <code>imageable</code> relation.</p>\n\n          <p><a name="model-structure"></a></p>\n          <h4>\n            <a href="#model-structure">\n              Model Structure\n            </a>\n          </h4><p>Next, let&#39;s examine the model definitions needed to build this relationship:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2ltYWdlcycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ3VybCcpO1xuICAgICR0YWJsZS0+aW50ZWdlcignaW1hZ2VhYmxlX2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ2ltYWdlYWJsZV90eXBlJyk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuU2NoZW1hOjpjcmVhdGUoJ2d1ZXN0cycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ25hbWUnKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5TY2hlbWE6OmNyZWF0ZSgncG9zdHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCduYW1lJyk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuY2xhc3MgSW1hZ2UgZXh0ZW5kcyBJbGx1bWluYXRlXFxEYXRhYmFzZVxcRWxvcXVlbnRcXE1vZGVsIFxue1xuICAgIHByb3RlY3RlZCAkZmlsbGFibGUgPSBbJ3VybCddO1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBvd25pbmcgaW1hZ2VhYmxlIG1vZGVsLlxuICAgICAqL1xuICAgIHB1YmxpYyBmdW5jdGlvbiBpbWFnZWFibGUoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuICR0aGlzLT5tb3JwaFRvKCk7XG4gICAgfVxufVxuXG5jbGFzcyBQb3N0IGV4dGVuZHMgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxNb2RlbCBcbntcbiAgICBwcm90ZWN0ZWQgJGZpbGxhYmxlID0gWyduYW1lJ107XG5cbiAgICBwdWJsaWMgZnVuY3Rpb24gaW1hZ2UoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuICR0aGlzLT5tb3JwaE9uZSgnSW1hZ2UnLCAnaW1hZ2VhYmxlJyk7XG4gICAgfVxufVxuXG5jbGFzcyBHdWVzdCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsnbmFtZSddO1xuXG4gICAgcHVibGljIGZ1bmN0aW9uIGltYWdlKClcbiAgICB7XG4gICAgICAgIHJldHVybiAkdGhpcy0+bW9ycGhPbmUoJ0ltYWdlJywgJ2ltYWdlYWJsZScpO1xuICAgIH1cbn1cblxuJHBvc3QgPSBQb3N0OjpjcmVhdGUoWyduYW1lJyA9PiAnVGlua2Vyd2VsbCddKTtcbiRwb3N0LT5pbWFnZSgpLT5jcmVhdGUoWyd1cmwnID0+ICdodHRwczovL3VybC10by1teS1pbWFnZS5wbmcnXSk7XG5cbkltYWdlOjpmaW5kKDEpLT5pbWFnZWFibGU7XG4iLCJoYXNoIjoiZWxvcXVlbnQtcmVsYXRpb25zaGlwcy1tb2RlbC1zdHJ1Y3R1cmUifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">&lt;?php\n\nnamespace <span class="hljs-type">App</span>;\n\nuse <span class="hljs-type">Illuminate</span>\\<span class="hljs-type">Database</span>\\<span class="hljs-type">Eloquent</span>\\<span class="hljs-type">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Image</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span>\n{\n    <span class="hljs-comment">/**\n     * Get the owning imageable model.\n     */</span>\n    public function imageable()\n    {\n        <span class="hljs-keyword">return</span> $<span class="hljs-keyword">this</span>-&gt;morphTo();\n    }\n}\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span>\n{\n    <span class="hljs-comment">/**\n     * Get the post\'s image.\n     */</span>\n    public function image()\n    {\n        <span class="hljs-keyword">return</span> $<span class="hljs-keyword">this</span>-&gt;morphOne(<span class="hljs-symbol">\'App</span>\\<span class="hljs-type">Image</span>\', <span class="hljs-symbol">\'imageabl</span>e\');\n    }\n}\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span>\n{\n    <span class="hljs-comment">/**\n     * Get the user\'s image.\n     */</span>\n    public function image()\n    {\n        <span class="hljs-keyword">return</span> $<span class="hljs-keyword">this</span>-&gt;morphOne(<span class="hljs-symbol">\'App</span>\\<span class="hljs-type">Image</span>\', <span class="hljs-symbol">\'imageabl</span>e\');\n    }\n}</code></pre>\n  \n          <p><a name="retrieving-the-relationship"></a></p>\n          <h4>\n            <a href="#retrieving-the-relationship">\n              Retrieving The Relationship\n            </a>\n          </h4><p>Once your database table and models are defined, you may access the relationships via your models. For example, to retrieve the image for a post, we can use the <code>image</code> dynamic property:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$post</span> = App\\Post::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-variable">$image</span> = <span class="hljs-variable">$post</span>-&gt;image;</code></pre>\n  <p>You may also retrieve the parent from the polymorphic model by accessing the name of the method that performs the call to <code>morphTo</code>. In our case, that is the <code>imageable</code> method on the <code>Image</code> model. So, we will access that method as a dynamic property:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$image</span> = App\\Image::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-variable">$imageable</span> = <span class="hljs-variable">$image</span>-&gt;imageable;</code></pre>\n  <p>The <code>imageable</code> relation on the <code>Image</code> model will return either a <code>Post</code> or <code>User</code> instance, depending on which type of model owns the image.</p>\n<p><a name="one-to-many-polymorphic-relations"></a></p>\n\n          <p><a name="one-to-many-polymorphic-"></a></p>\n          <h3>\n            <a href="#one-to-many-polymorphic-">\n              One To Many (Polymorphic)\n            </a>\n          </h3>\n          <p><a name="table-structure"></a></p>\n          <h4>\n            <a href="#table-structure">\n              Table Structure\n            </a>\n          </h4><p>A one-to-many polymorphic relation is similar to a simple one-to-many relation; however, the target model can belong to more than one type of model on a single association. For example, imagine users of your application can &quot;comment&quot; on both posts and videos. Using polymorphic relationships, you may use a single <code>comments</code> table for both of these scenarios. First, let&#39;s examine the table structure required to build this relationship:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">posts\n    <span class="hljs-built_in">id</span> - <span class="hljs-built_in">integer</span>\n    title - <span class="hljs-built_in">string</span>\n    body - <span class="hljs-built_in">text</span>\n\nvideos\n    <span class="hljs-built_in">id</span> - <span class="hljs-built_in">integer</span>\n    title - <span class="hljs-built_in">string</span>\n    url - <span class="hljs-built_in">string</span>\n\ncomments\n    <span class="hljs-built_in">id</span> - <span class="hljs-built_in">integer</span>\n    body - <span class="hljs-built_in">text</span>\n    commentable_id - <span class="hljs-built_in">integer</span>\n    commentable_type - <span class="hljs-built_in">string</span></code></pre>\n  \n          <p><a name="model-structure"></a></p>\n          <h4>\n            <a href="#model-structure">\n              Model Structure\n            </a>\n          </h4><p>Next, let&#39;s examine the model definitions needed to build this relationship:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2NvbW1lbnRzJywgZnVuY3Rpb24gKCR0YWJsZSkge1xuICAgICR0YWJsZS0+YmlnSW5jcmVtZW50cygnaWQnKTtcbiAgICAkdGFibGUtPnN0cmluZygnYm9keScpO1xuICAgICR0YWJsZS0+aW50ZWdlcignY29tbWVudGFibGVfaWQnKTtcbiAgICAkdGFibGUtPnN0cmluZygnY29tbWVudGFibGVfdHlwZScpO1xuICAgICR0YWJsZS0+dGltZXN0YW1wcygpO1xufSk7XG5cblNjaGVtYTo6Y3JlYXRlKCd2aWRlb3MnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCd0aXRsZScpO1xuICAgICR0YWJsZS0+dGltZXN0YW1wcygpO1xufSk7XG5cblNjaGVtYTo6Y3JlYXRlKCdwb3N0cycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ3RpdGxlJyk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuY2xhc3MgQ29tbWVudCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsnYm9keSddO1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBvd25pbmcgaW1hZ2VhYmxlIG1vZGVsLlxuICAgICAqL1xuICAgIHB1YmxpYyBmdW5jdGlvbiBjb21tZW50YWJsZSgpXG4gICAge1xuICAgICAgICByZXR1cm4gJHRoaXMtPm1vcnBoVG8oKTtcbiAgICB9XG59XG5cbmNsYXNzIFBvc3QgZXh0ZW5kcyBJbGx1bWluYXRlXFxEYXRhYmFzZVxcRWxvcXVlbnRcXE1vZGVsIFxue1xuICAgIHByb3RlY3RlZCAkZmlsbGFibGUgPSBbJ3RpdGxlJ107XG5cbiAgICBwdWJsaWMgZnVuY3Rpb24gY29tbWVudHMoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuICR0aGlzLT5tb3JwaE1hbnkoJ0NvbW1lbnQnLCAnY29tbWVudGFibGUnKTtcbiAgICB9XG59XG5cbmNsYXNzIFZpZGVvIGV4dGVuZHMgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxNb2RlbCBcbntcbiAgICBwcm90ZWN0ZWQgJGZpbGxhYmxlID0gWyd0aXRsZSddO1xuXG4gICAgcHVibGljIGZ1bmN0aW9uIGNvbW1lbnRzKClcbiAgICB7XG4gICAgICAgIHJldHVybiAkdGhpcy0+bW9ycGhNYW55KCdDb21tZW50JywgJ2NvbW1lbnRhYmxlJyk7XG4gICAgfVxufVxuXG4kcG9zdCA9IFBvc3Q6OmNyZWF0ZShbJ3RpdGxlJyA9PiAnVGlua2Vyd2VsbCddKTtcbiRwb3N0LT5jb21tZW50cygpLT5jcmVhdGUoWydib2R5JyA9PiAnQ29tbWVudCAxJ10pO1xuJHBvc3QtPmNvbW1lbnRzKCktPmNyZWF0ZShbJ2JvZHknID0+ICdDb21tZW50IDInXSk7XG5cblBvc3Q6OmZpbmQoMSktPmNvbW1lbnRzO1xuIiwiaGFzaCI6ImVsb3F1ZW50LXJlbGF0aW9uc2hpcHMtbW9kZWwtc3RydWN0dXJlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">&lt;?php\n\nnamespace <span class="hljs-type">App</span>;\n\nuse <span class="hljs-type">Illuminate</span>\\<span class="hljs-type">Database</span>\\<span class="hljs-type">Eloquent</span>\\<span class="hljs-type">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Comment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span>\n{\n    <span class="hljs-comment">/**\n     * Get the owning commentable model.\n     */</span>\n    public function commentable()\n    {\n        <span class="hljs-keyword">return</span> $<span class="hljs-keyword">this</span>-&gt;morphTo();\n    }\n}\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span>\n{\n    <span class="hljs-comment">/**\n     * Get all of the post\'s comments.\n     */</span>\n    public function comments()\n    {\n        <span class="hljs-keyword">return</span> $<span class="hljs-keyword">this</span>-&gt;morphMany(<span class="hljs-symbol">\'App</span>\\<span class="hljs-type">Comment</span>\', <span class="hljs-symbol">\'commentabl</span>e\');\n    }\n}\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Video</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span>\n{\n    <span class="hljs-comment">/**\n     * Get all of the video\'s comments.\n     */</span>\n    public function comments()\n    {\n        <span class="hljs-keyword">return</span> $<span class="hljs-keyword">this</span>-&gt;morphMany(<span class="hljs-symbol">\'App</span>\\<span class="hljs-type">Comment</span>\', <span class="hljs-symbol">\'commentabl</span>e\');\n    }\n}</code></pre>\n  \n          <p><a name="retrieving-the-relationship"></a></p>\n          <h4>\n            <a href="#retrieving-the-relationship">\n              Retrieving The Relationship\n            </a>\n          </h4><p>Once your database table and models are defined, you may access the relationships via your models. For example, to access all of the comments for a post, we can use the <code>comments</code> dynamic property:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$post = App\\Post::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-keyword">foreach</span> ($post-&gt;comments <span class="hljs-keyword">as</span> $comment) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p>You may also retrieve the owner of a polymorphic relation from the polymorphic model by accessing the name of the method that performs the call to <code>morphTo</code>. In our case, that is the <code>commentable</code> method on the <code>Comment</code> model. So, we will access that method as a dynamic property:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$comment</span> = App\\Comment::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-variable">$commentable</span> = <span class="hljs-variable">$comment</span>-&gt;commentable;</code></pre>\n  <p>The <code>commentable</code> relation on the <code>Comment</code> model will return either a <code>Post</code> or <code>Video</code> instance, depending on which type of model owns the comment.</p>\n<p><a name="many-to-many-polymorphic-relations"></a></p>\n\n          <p><a name="many-to-many-polymorphic-"></a></p>\n          <h3>\n            <a href="#many-to-many-polymorphic-">\n              Many To Many (Polymorphic)\n            </a>\n          </h3>\n          <p><a name="table-structure"></a></p>\n          <h4>\n            <a href="#table-structure">\n              Table Structure\n            </a>\n          </h4><p>Many-to-many polymorphic relations are slightly more complicated than <code>morphOne</code> and <code>morphMany</code> relationships. For example, a blog <code>Post</code> and <code>Video</code> model could share a polymorphic relation to a <code>Tag</code> model. Using a many-to-many polymorphic relation allows you to have a single list of unique tags that are shared across blog posts and videos. First, let&#39;s examine the table structure:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">posts\n    <span class="hljs-built_in">id</span> - <span class="hljs-built_in">integer</span>\n    <span class="hljs-built_in">name</span> - <span class="hljs-built_in">string</span>\n\nvideos\n    <span class="hljs-built_in">id</span> - <span class="hljs-built_in">integer</span>\n    <span class="hljs-built_in">name</span> - <span class="hljs-built_in">string</span>\n\ntags\n    <span class="hljs-built_in">id</span> - <span class="hljs-built_in">integer</span>\n    <span class="hljs-built_in">name</span> - <span class="hljs-built_in">string</span>\n\ntaggables\n    tag_id - <span class="hljs-built_in">integer</span>\n    taggable_id - <span class="hljs-built_in">integer</span>\n    taggable_type - <span class="hljs-built_in">string</span></code></pre>\n  \n          <p><a name="model-structure"></a></p>\n          <h4>\n            <a href="#model-structure">\n              Model Structure\n            </a>\n          </h4><p>Next, we&#39;re ready to define the relationships on the model. The <code>Post</code> and <code>Video</code> models will both have a <code>tags</code> method that calls the <code>morphToMany</code> method on the base Eloquent class:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ3RhZ3MnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCduYW1lJyk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuU2NoZW1hOjpjcmVhdGUoJ3RhZ2dhYmxlcycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmludGVnZXIoJ3RhZ19pZCcpO1xuICAgICR0YWJsZS0+aW50ZWdlcigndGFnZ2FibGVfaWQnKTtcbiAgICAkdGFibGUtPnN0cmluZygndGFnZ2FibGVfdHlwZScpO1xufSk7XG5cblNjaGVtYTo6Y3JlYXRlKCd2aWRlb3MnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCd0aXRsZScpO1xuICAgICR0YWJsZS0+dGltZXN0YW1wcygpO1xufSk7XG5cblNjaGVtYTo6Y3JlYXRlKCdwb3N0cycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ3RpdGxlJyk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuY2xhc3MgVGFnIGV4dGVuZHMgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxNb2RlbCBcbntcbiAgICBwcm90ZWN0ZWQgJGZpbGxhYmxlID0gWyduYW1lJ107XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIG9mIHRoZSBwb3N0cyB0aGF0IGFyZSBhc3NpZ25lZCB0aGlzIHRhZy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZnVuY3Rpb24gcG9zdHMoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuICR0aGlzLT5tb3JwaGVkQnlNYW55KCdQb3N0JywgJ3RhZ2dhYmxlJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBvZiB0aGUgdmlkZW9zIHRoYXQgYXJlIGFzc2lnbmVkIHRoaXMgdGFnLlxuICAgICAqL1xuICAgIHB1YmxpYyBmdW5jdGlvbiB2aWRlb3MoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuICR0aGlzLT5tb3JwaGVkQnlNYW55KCdWaWRlbycsICd0YWdnYWJsZScpO1xuICAgIH1cbn1cblxuY2xhc3MgUG9zdCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsndGl0bGUnXTtcblxuICAgIHB1YmxpYyBmdW5jdGlvbiB0YWdzKClcbiAgICB7XG4gICAgICAgIHJldHVybiAkdGhpcy0+bW9ycGhUb01hbnkoJ1RhZycsICd0YWdnYWJsZScpO1xuICAgIH1cbn1cblxuY2xhc3MgVmlkZW8gZXh0ZW5kcyBJbGx1bWluYXRlXFxEYXRhYmFzZVxcRWxvcXVlbnRcXE1vZGVsIFxue1xuICAgIHByb3RlY3RlZCAkZmlsbGFibGUgPSBbJ3RpdGxlJ107XG5cbiAgICBwdWJsaWMgZnVuY3Rpb24gdGFncygpXG4gICAge1xuICAgICAgICByZXR1cm4gJHRoaXMtPm1vcnBoVG9NYW55KCdUYWcnLCAndGFnZ2FibGUnKTtcbiAgICB9XG59XG5cbiRwb3N0ID0gUG9zdDo6Y3JlYXRlKFsndGl0bGUnID0+ICdUaW5rZXJ3ZWxsJ10pO1xuJHBvc3QtPnRhZ3MoKS0+Y3JlYXRlKFsnbmFtZScgPT4gJ1BIUCddKTtcbiRwb3N0LT50YWdzKCktPmNyZWF0ZShbJ25hbWUnID0+ICdMYXJhdmVsJ10pO1xuXG5Qb3N0OjpmaW5kKDEpLT50YWdzO1xuIiwiaGFzaCI6ImVsb3F1ZW50LXJlbGF0aW9uc2hpcHMtbW9kZWwtc3RydWN0dXJlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Get all of the tags for the post.\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tags</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;morphToMany(<span class="hljs-string">\'App\\Tag\'</span>, <span class="hljs-string">\'taggable\'</span>);\n    }\n}</span></code></pre>\n  \n          <p><a name="defining-the-inverse-of-the-relationship"></a></p>\n          <h4>\n            <a href="#defining-the-inverse-of-the-relationship">\n              Defining The Inverse Of The Relationship\n            </a>\n          </h4><p>Next, on the <code>Tag</code> model, you should define a method for each of its related models. So, for this example, we will define a <code>posts</code> method and a <code>videos</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tag</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Get all of the posts that are assigned this tag.\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">posts</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;morphedByMany(<span class="hljs-string">\'App\\Post\'</span>, <span class="hljs-string">\'taggable\'</span>);\n    }\n\n    <span class="hljs-comment">/**\n     * Get all of the videos that are assigned this tag.\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">videos</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;morphedByMany(<span class="hljs-string">\'App\\Video\'</span>, <span class="hljs-string">\'taggable\'</span>);\n    }\n}</span></code></pre>\n  \n          <p><a name="retrieving-the-relationship"></a></p>\n          <h4>\n            <a href="#retrieving-the-relationship">\n              Retrieving The Relationship\n            </a>\n          </h4><p>Once your database table and models are defined, you may access the relationships via your models. For example, to access all of the tags for a post, you can use the <code>tags</code> dynamic property:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$post = App\\Post::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-keyword">foreach</span> ($post-&gt;tags <span class="hljs-keyword">as</span> $tag) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p>You may also retrieve the owner of a polymorphic relation from the polymorphic model by accessing the name of the method that performs the call to <code>morphedByMany</code>. In our case, that is the <code>posts</code> or <code>videos</code> methods on the <code>Tag</code> model. So, you will access those methods as dynamic properties:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$tag = App\\Tag::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-keyword">foreach</span> ($tag-&gt;videos <span class="hljs-keyword">as</span> $video) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p><a name="custom-polymorphic-types"></a></p>\n\n          <p><a name="custom-polymorphic-types"></a></p>\n          <h3>\n            <a href="#custom-polymorphic-types">\n              Custom Polymorphic Types\n            </a>\n          </h3><p>By default, Laravel will use the fully qualified class name to store the type of the related model. For instance, given the one-to-many example above where a <code>Comment</code> may belong to a <code>Post</code> or a <code>Video</code>, the default <code>commentable_type</code> would be either <code>App\\Post</code> or <code>App\\Video</code>, respectively. However, you may wish to decouple your database from your application&#39;s internal structure. In that case, you may define a &quot;morph map&quot; to instruct Eloquent to use a custom name for each model instead of the class name:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Relations</span>\\<span class="hljs-title">Relation</span>;\n\nRelation::morphMap([\n    <span class="hljs-string">\'posts\'</span> =&gt; <span class="hljs-string">\'App\\Post\'</span>,\n    <span class="hljs-string">\'videos\'</span> =&gt; <span class="hljs-string">\'App\\Video\'</span>,\n]);</code></pre>\n  <p>You may register the <code>morphMap</code> in the <code>boot</code> function of your <code>AppServiceProvider</code> or create a separate service provider if you wish.</p>\n<blockquote>\n<p>{note} When adding a &quot;morph map&quot; to your existing application, every morphable <code>*_type</code> column value in your database that still contains a fully-qualified class will need to be converted to its &quot;map&quot; name.</p>\n</blockquote>\n<p><a name="querying-relations"></a></p>\n\n          <p><a name="querying-relations"></a></p>\n          <h2>\n            <a href="#querying-relations">\n              Querying Relations\n            </a>\n          </h2><p>Since all types of Eloquent relationships are defined via methods, you may call those methods to obtain an instance of the relationship without actually executing the relationship queries. In addition, all types of Eloquent relationships also serve as <router-link to="/docs/queries">query builders</router-link>, allowing you to continue to chain constraints onto the relationship query before finally executing the SQL against your database.</p>\n<p>For example, imagine a blog system in which a <code>User</code> model has many associated <code>Post</code> models:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ3Bvc3RzJywgZnVuY3Rpb24gKCR0YWJsZSkge1xuICAgICR0YWJsZS0+YmlnSW5jcmVtZW50cygnaWQnKTtcbiAgICAkdGFibGUtPmludGVnZXIoJ2d1ZXN0X2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ3RpdGxlJyk7XG4gICAgJHRhYmxlLT5ib29sZWFuKCdhY3RpdmUnKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5TY2hlbWE6OmNyZWF0ZSgnZ3Vlc3RzJywgZnVuY3Rpb24gKCR0YWJsZSkge1xuICAgICR0YWJsZS0+YmlnSW5jcmVtZW50cygnaWQnKTtcbiAgICAkdGFibGUtPnN0cmluZygnbmFtZScpO1xuICAgICR0YWJsZS0+dGltZXN0YW1wcygpO1xufSk7XG5cbmNsYXNzIEd1ZXN0IGV4dGVuZHMgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxNb2RlbCBcbntcbiAgICBwcm90ZWN0ZWQgJGZpbGxhYmxlID0gWyduYW1lJ107XG5cbiAgICBwdWJsaWMgZnVuY3Rpb24gcG9zdHMoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuICR0aGlzLT5oYXNNYW55KCdQb3N0Jyk7XG4gICAgfVxufVxuXG5jbGFzcyBQb3N0IGV4dGVuZHMgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxNb2RlbCBcbntcbiAgICBwcm90ZWN0ZWQgJGZpbGxhYmxlID0gWyd0aXRsZScsICdhY3RpdmUnLCAnZ3Vlc3RfaWQnXTtcbn1cblxuR3Vlc3Q6OmNyZWF0ZShbJ25hbWUnID0+ICdNYXJjZWwnXSk7XG5cblBvc3Q6OmNyZWF0ZShbJ3RpdGxlJyA9PiAnUG9zdCAxJywgJ2d1ZXN0X2lkJyA9PiAxLCAnYWN0aXZlJyA9PiBmYWxzZV0pO1xuUG9zdDo6Y3JlYXRlKFsndGl0bGUnID0+ICdQb3N0IDInLCAnZ3Vlc3RfaWQnID0+IDEsICdhY3RpdmUnID0+IHRydWVdKTtcblBvc3Q6OmNyZWF0ZShbJ3RpdGxlJyA9PiAnUG9zdCAzJywgJ2d1ZXN0X2lkJyA9PiAxLCAnYWN0aXZlJyA9PiB0cnVlXSk7XG5cbiRndWVzdCA9IEd1ZXN0OjpmaW5kKDEpO1xuJGd1ZXN0LT5wb3N0cygpLT53aGVyZSgnYWN0aXZlJywgMSktPmdldCgpO1xuIiwiaGFzaCI6ImVsb3F1ZW50LXJlbGF0aW9uc2hpcHMtcXVlcnlpbmctcmVsYXRpb25zIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Get all of the posts for the user.\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">posts</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;hasMany(<span class="hljs-string">\'App\\Post\'</span>);\n    }\n}</span></code></pre>\n  <p>You may query the <code>posts</code> relationship and add additional constraints to the relationship like so:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user = App<span class="hljs-string">\\User::find(1);</span>\n\n$user-&gt;posts<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>where<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'active\'</span>, <span class="hljs-number">1</span>)</span>-&gt;</span>get();</code></pre>\n  <p>You are able to use any of the <router-link to="/docs/queries">query builder</router-link> methods on the relationship, so be sure to explore the query builder documentation to learn about all of the methods that are available to you.</p>\n\n          <p><a name="chaining-code-orwhere-code-clauses-after-relationships"></a></p>\n          <h4>\n            <a href="#chaining-code-orwhere-code-clauses-after-relationships">\n              Chaining <code>orWhere</code> Clauses After Relationships\n            </a>\n          </h4><p>As demonstrated in the example above, you are free to add additional constraints to relationships when querying them. However, use caution when chaining <code>orWhere</code> clauses onto a relationship, as the <code>orWhere</code> clauses will be logically grouped at the same level as the relationship constraint:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ3Bvc3RzJywgZnVuY3Rpb24gKCR0YWJsZSkge1xuICAgICR0YWJsZS0+YmlnSW5jcmVtZW50cygnaWQnKTtcbiAgICAkdGFibGUtPmludGVnZXIoJ2d1ZXN0X2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ3RpdGxlJyk7XG4gICAgJHRhYmxlLT5pbnRlZ2VyKCd2b3RlcycpO1xuICAgICR0YWJsZS0+Ym9vbGVhbignYWN0aXZlJyk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuU2NoZW1hOjpjcmVhdGUoJ2d1ZXN0cycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ25hbWUnKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5jbGFzcyBHdWVzdCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsnbmFtZSddO1xuXG4gICAgcHVibGljIGZ1bmN0aW9uIHBvc3RzKClcbiAgICB7XG4gICAgICAgIHJldHVybiAkdGhpcy0+aGFzTWFueSgnUG9zdCcpO1xuICAgIH1cbn1cblxuY2xhc3MgUG9zdCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsndGl0bGUnLCAnYWN0aXZlJywgJ2d1ZXN0X2lkJywgJ3ZvdGVzJ107XG59XG5cbkd1ZXN0OjpjcmVhdGUoWyduYW1lJyA9PiAnTWFyY2VsJ10pO1xuXG5Qb3N0OjpjcmVhdGUoWyd0aXRsZScgPT4gJ1Bvc3QgMScsICdndWVzdF9pZCcgPT4gMSwgJ3ZvdGVzJyA9PiAxMCwgJ2FjdGl2ZScgPT4gZmFsc2VdKTtcblBvc3Q6OmNyZWF0ZShbJ3RpdGxlJyA9PiAnUG9zdCAyJywgJ2d1ZXN0X2lkJyA9PiAxLCAndm90ZXMnID0+IDgwLCAnYWN0aXZlJyA9PiB0cnVlXSk7XG5Qb3N0OjpjcmVhdGUoWyd0aXRsZScgPT4gJ1Bvc3QgMycsICdndWVzdF9pZCcgPT4gMSwgJ3ZvdGVzJyA9PiAyNDAsICdhY3RpdmUnID0+IHRydWVdKTtcblxuJGd1ZXN0ID0gR3Vlc3Q6OmZpbmQoMSk7XG4kZ3Vlc3QtPnBvc3RzKClcbiAgICAgICAgLT53aGVyZSgnYWN0aXZlJywgMSlcbiAgICAgICAgLT5vcldoZXJlKCd2b3RlcycsICc+PScsIDEwMClcbiAgICAgICAgLT5nZXQoKTtcbiIsImhhc2giOiJlbG9xdWVudC1yZWxhdGlvbnNoaXBzLWNoYWluaW5nLW9yd2hlcmUtY2xhdXNlcy1hZnRlci1yZWxhdGlvbnNoaXBzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$user-&gt;posts<span class="hljs-function"><span class="hljs-params">()</span>\n        -&gt;</span>where<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'active\'</span>, <span class="hljs-number">1</span>)</span>\n        -&gt;</span>orWhere<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'votes\'</span>, <span class="hljs-string">\'&gt;=\'</span>, <span class="hljs-number">100</span>)</span>\n        -&gt;</span>get();\n\n<span class="hljs-regexp">// select * from posts\n//</span> where user_id = ? <span class="hljs-keyword">and</span> active = <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> votes &gt;= <span class="hljs-number">100</span></code></pre>\n  <p>In most situations, you likely intend to use <router-link to="/docs/queries#parameter-grouping">constraint groups</router-link> to logically group the conditional checks between parentheses:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ3Bvc3RzJywgZnVuY3Rpb24gKCR0YWJsZSkge1xuICAgICR0YWJsZS0+YmlnSW5jcmVtZW50cygnaWQnKTtcbiAgICAkdGFibGUtPmludGVnZXIoJ2d1ZXN0X2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ3RpdGxlJyk7XG4gICAgJHRhYmxlLT5pbnRlZ2VyKCd2b3RlcycpO1xuICAgICR0YWJsZS0+Ym9vbGVhbignYWN0aXZlJyk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuU2NoZW1hOjpjcmVhdGUoJ2d1ZXN0cycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ25hbWUnKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5jbGFzcyBHdWVzdCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsnbmFtZSddO1xuXG4gICAgcHVibGljIGZ1bmN0aW9uIHBvc3RzKClcbiAgICB7XG4gICAgICAgIHJldHVybiAkdGhpcy0+aGFzTWFueSgnUG9zdCcpO1xuICAgIH1cbn1cblxuY2xhc3MgUG9zdCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsndGl0bGUnLCAnYWN0aXZlJywgJ2d1ZXN0X2lkJywgJ3ZvdGVzJ107XG59XG5cbkd1ZXN0OjpjcmVhdGUoWyduYW1lJyA9PiAnTWFyY2VsJ10pO1xuXG5Qb3N0OjpjcmVhdGUoWyd0aXRsZScgPT4gJ1Bvc3QgMScsICdndWVzdF9pZCcgPT4gMSwgJ3ZvdGVzJyA9PiAxMCwgJ2FjdGl2ZScgPT4gZmFsc2VdKTtcblBvc3Q6OmNyZWF0ZShbJ3RpdGxlJyA9PiAnUG9zdCAyJywgJ2d1ZXN0X2lkJyA9PiAxLCAndm90ZXMnID0+IDgwLCAnYWN0aXZlJyA9PiB0cnVlXSk7XG5Qb3N0OjpjcmVhdGUoWyd0aXRsZScgPT4gJ1Bvc3QgMycsICdndWVzdF9pZCcgPT4gMSwgJ3ZvdGVzJyA9PiAyNDAsICdhY3RpdmUnID0+IHRydWVdKTtcblxuJGd1ZXN0ID0gR3Vlc3Q6OmZpbmQoMSk7XG4kZ3Vlc3QtPnBvc3RzKClcbiAgICAgICAgLT53aGVyZShmdW5jdGlvbiAoJHF1ZXJ5KSB7XG4gICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgnYWN0aXZlJywgMSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAtPm9yV2hlcmUoJ3ZvdGVzJywgJz49JywgMTAwKTtcbiAgICAgICAgfSlcbiAgICAgICAgLT5nZXQoKTtcbiIsImhhc2giOiJlbG9xdWVudC1yZWxhdGlvbnNoaXBzLWNoYWluaW5nLW9yd2hlcmUtY2xhdXNlcy1hZnRlci1yZWxhdGlvbnNoaXBzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Builder</span>;\n\n$user-&gt;posts()\n        -&gt;where(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Builder $query)</span> </span>{\n            <span class="hljs-keyword">return</span> $query-&gt;where(<span class="hljs-string">\'active\'</span>, <span class="hljs-number">1</span>)\n                         -&gt;orWhere(<span class="hljs-string">\'votes\'</span>, <span class="hljs-string">\'&gt;=\'</span>, <span class="hljs-number">100</span>);\n        })\n        -&gt;get();\n\n<span class="hljs-comment">// select * from posts</span>\n<span class="hljs-comment">// where user_id = ? and (active = 1 or votes &gt;= 100)</span></code></pre>\n  <p><a name="relationship-methods-vs-dynamic-properties"></a></p>\n\n          <p><a name="relationship-methods-vs-dynamic-properties"></a></p>\n          <h3>\n            <a href="#relationship-methods-vs-dynamic-properties">\n              Relationship Methods Vs. Dynamic Properties\n            </a>\n          </h3><p>If you do not need to add additional constraints to an Eloquent relationship query, you may access the relationship as if it were a property. For example, continuing to use our <code>User</code> and <code>Post</code> example models, we may access all of a user&#39;s posts like so:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ3Bvc3RzJywgZnVuY3Rpb24gKCR0YWJsZSkge1xuICAgICR0YWJsZS0+YmlnSW5jcmVtZW50cygnaWQnKTtcbiAgICAkdGFibGUtPmludGVnZXIoJ2d1ZXN0X2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ3RpdGxlJyk7XG4gICAgJHRhYmxlLT5pbnRlZ2VyKCd2b3RlcycpO1xuICAgICR0YWJsZS0+Ym9vbGVhbignYWN0aXZlJyk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuU2NoZW1hOjpjcmVhdGUoJ2d1ZXN0cycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ25hbWUnKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5jbGFzcyBHdWVzdCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsnbmFtZSddO1xuXG4gICAgcHVibGljIGZ1bmN0aW9uIHBvc3RzKClcbiAgICB7XG4gICAgICAgIHJldHVybiAkdGhpcy0+aGFzTWFueSgnUG9zdCcpO1xuICAgIH1cbn1cblxuY2xhc3MgUG9zdCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsndGl0bGUnLCAnYWN0aXZlJywgJ2d1ZXN0X2lkJywgJ3ZvdGVzJ107XG59XG5cbkd1ZXN0OjpjcmVhdGUoWyduYW1lJyA9PiAnTWFyY2VsJ10pO1xuXG5Qb3N0OjpjcmVhdGUoWyd0aXRsZScgPT4gJ1Bvc3QgMScsICdndWVzdF9pZCcgPT4gMSwgJ3ZvdGVzJyA9PiAxMCwgJ2FjdGl2ZScgPT4gZmFsc2VdKTtcblBvc3Q6OmNyZWF0ZShbJ3RpdGxlJyA9PiAnUG9zdCAyJywgJ2d1ZXN0X2lkJyA9PiAxLCAndm90ZXMnID0+IDgwLCAnYWN0aXZlJyA9PiB0cnVlXSk7XG5Qb3N0OjpjcmVhdGUoWyd0aXRsZScgPT4gJ1Bvc3QgMycsICdndWVzdF9pZCcgPT4gMSwgJ3ZvdGVzJyA9PiAyNDAsICdhY3RpdmUnID0+IHRydWVdKTtcblxuJGd1ZXN0ID0gR3Vlc3Q6OmZpbmQoMSk7XG4kZ3Vlc3QtPnBvc3RzO1xuIiwiaGFzaCI6ImVsb3F1ZW50LXJlbGF0aW9uc2hpcHMtcmVsYXRpb25zaGlwLW1ldGhvZHMtdnMtZHluYW1pYy1wcm9wZXJ0aWVzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$user = App\\User::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-keyword">foreach</span> ($user-&gt;posts <span class="hljs-keyword">as</span> $post) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p>Dynamic properties are &quot;lazy loading&quot;, meaning they will only load their relationship data when you actually access them. Because of this, developers often use <a href="#eager-loading">eager loading</a> to pre-load relationships they know will be accessed after loading the model. Eager loading provides a significant reduction in SQL queries that must be executed to load a model&#39;s relations.</p>\n<p><a name="querying-relationship-existence"></a></p>\n\n          <p><a name="querying-relationship-existence"></a></p>\n          <h3>\n            <a href="#querying-relationship-existence">\n              Querying Relationship Existence\n            </a>\n          </h3><p>When accessing the records for a model, you may wish to limit your results based on the existence of a relationship. For example, imagine you want to retrieve all blog posts that have at least one comment. To do so, you may pass the name of the relationship to the <code>has</code> and <code>orHas</code> methods:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ3Bvc3RzJywgZnVuY3Rpb24gKCR0YWJsZSkge1xuICAgICR0YWJsZS0+YmlnSW5jcmVtZW50cygnaWQnKTtcbiAgICAkdGFibGUtPnN0cmluZygndGl0bGUnKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5TY2hlbWE6OmNyZWF0ZSgnY29tbWVudHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+aW50ZWdlcigncG9zdF9pZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCdjb21tZW50Jyk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuY2xhc3MgQ29tbWVudCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsnY29tbWVudCcsICdwb3N0X2lkJ107XG59XG5cbmNsYXNzIFBvc3QgZXh0ZW5kcyBJbGx1bWluYXRlXFxEYXRhYmFzZVxcRWxvcXVlbnRcXE1vZGVsIFxue1xuICAgIHByb3RlY3RlZCAkZmlsbGFibGUgPSBbJ3RpdGxlJ107XG5cbiAgICBwdWJsaWMgZnVuY3Rpb24gY29tbWVudHMoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuICR0aGlzLT5oYXNNYW55KCdDb21tZW50Jyk7XG4gICAgfVxufVxuXG5Qb3N0OjpjcmVhdGUoWyd0aXRsZScgPT4gJ0kgaGF2ZSBubyBjb21tZW50cyddKTtcbiRwb3N0ID0gUG9zdDo6Y3JlYXRlKFsndGl0bGUnID0+ICdUaW5rZXJ3ZWxsIGlzIGF3ZXNvbWUnXSk7XG5cbkNvbW1lbnQ6OmNyZWF0ZShbJ3Bvc3RfaWQnID0+ICRwb3N0LT5pZCwgJ2NvbW1lbnQnID0+ICdZZXMhJ10pO1xuQ29tbWVudDo6Y3JlYXRlKFsncG9zdF9pZCcgPT4gJHBvc3QtPmlkLCAnY29tbWVudCcgPT4gJ0ZvciBzdXJlISEnXSk7XG5cblBvc3Q6OmhhcygnY29tbWVudHMnKS0+Z2V0KCk7XG4iLCJoYXNoIjoiZWxvcXVlbnQtcmVsYXRpb25zaGlwcy1xdWVyeWluZy1yZWxhdGlvbnNoaXAtZXhpc3RlbmNlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Retrieve all posts that have at least one comment...</span>\n$posts = App\\Post::has(<span class="hljs-string">\'comments\'</span>)-&gt;get();</code></pre>\n  <p>You may also specify an operator and count to further customize the query:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Retrieve all posts that have three or more comments...</span>\n$posts = App\\Post::has(<span class="hljs-string">\'comments\'</span>, <span class="hljs-string">\'&gt;=\'</span>, <span class="hljs-number">3</span>)-&gt;get();</code></pre>\n  <p>Nested <code>has</code> statements may also be constructed using &quot;dot&quot; notation. For example, you may retrieve all posts that have at least one comment and vote:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Retrieve posts that have at least one comment with votes...</span>\n$posts = App\\Post::has(<span class="hljs-string">\'comments.votes\'</span>)-&gt;get();</code></pre>\n  <p>If you need even more power, you may use the <code>whereHas</code> and <code>orWhereHas</code> methods to put &quot;where&quot; conditions on your <code>has</code> queries. These methods allow you to add customized constraints to a relationship constraint, such as checking the content of a comment:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ3Bvc3RzJywgZnVuY3Rpb24gKCR0YWJsZSkge1xuICAgICR0YWJsZS0+YmlnSW5jcmVtZW50cygnaWQnKTtcbiAgICAkdGFibGUtPnN0cmluZygndGl0bGUnKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5TY2hlbWE6OmNyZWF0ZSgnY29tbWVudHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+aW50ZWdlcigncG9zdF9pZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCdjb21tZW50Jyk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuY2xhc3MgQ29tbWVudCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsnY29tbWVudCcsICdwb3N0X2lkJ107XG59XG5cbmNsYXNzIFBvc3QgZXh0ZW5kcyBJbGx1bWluYXRlXFxEYXRhYmFzZVxcRWxvcXVlbnRcXE1vZGVsIFxue1xuICAgIHByb3RlY3RlZCAkZmlsbGFibGUgPSBbJ3RpdGxlJ107XG5cbiAgICBwdWJsaWMgZnVuY3Rpb24gY29tbWVudHMoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuICR0aGlzLT5oYXNNYW55KCdDb21tZW50Jyk7XG4gICAgfVxufVxuXG5Qb3N0OjpjcmVhdGUoWyd0aXRsZScgPT4gJ0kgaGF2ZSBubyBjb21tZW50cyddKTtcbiRwb3N0ID0gUG9zdDo6Y3JlYXRlKFsndGl0bGUnID0+ICdUaW5rZXJ3ZWxsIGlzIGF3ZXNvbWUnXSk7XG5cbkNvbW1lbnQ6OmNyZWF0ZShbJ3Bvc3RfaWQnID0+ICRwb3N0LT5pZCwgJ2NvbW1lbnQnID0+ICdZZXMhJ10pO1xuQ29tbWVudDo6Y3JlYXRlKFsncG9zdF9pZCcgPT4gJHBvc3QtPmlkLCAnY29tbWVudCcgPT4gJ0ZvciBzdXJlISEnXSk7XG5cblBvc3Q6OndoZXJlSGFzKCdjb21tZW50cycsIGZ1bmN0aW9uICgkcXVlcnkpIHtcbiAgICAkcXVlcnktPndoZXJlKCdjb21tZW50JywgJ2xpa2UnLCAnWWVzJScpO1xufSktPmdldCgpO1xuIiwiaGFzaCI6ImVsb3F1ZW50LXJlbGF0aW9uc2hpcHMtcXVlcnlpbmctcmVsYXRpb25zaGlwLWV4aXN0ZW5jZSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Builder</span>;\n\n<span class="hljs-comment">// Retrieve posts with at least one comment containing words like foo%...</span>\n$posts = App\\Post::whereHas(<span class="hljs-string">\'comments\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Builder $query)</span> </span>{\n    $query-&gt;where(<span class="hljs-string">\'content\'</span>, <span class="hljs-string">\'like\'</span>, <span class="hljs-string">\'foo%\'</span>);\n})-&gt;get();\n\n<span class="hljs-comment">// Retrieve posts with at least ten comments containing words like foo%...</span>\n$posts = App\\Post::whereHas(<span class="hljs-string">\'comments\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Builder $query)</span> </span>{\n    $query-&gt;where(<span class="hljs-string">\'content\'</span>, <span class="hljs-string">\'like\'</span>, <span class="hljs-string">\'foo%\'</span>);\n}, <span class="hljs-string">\'&gt;=\'</span>, <span class="hljs-number">10</span>)-&gt;get();</code></pre>\n  <p><a name="querying-relationship-absence"></a></p>\n\n          <p><a name="querying-relationship-absence"></a></p>\n          <h3>\n            <a href="#querying-relationship-absence">\n              Querying Relationship Absence\n            </a>\n          </h3><p>When accessing the records for a model, you may wish to limit your results based on the absence of a relationship. For example, imagine you want to retrieve all blog posts that <strong>don&#39;t</strong> have any comments. To do so, you may pass the name of the relationship to the <code>doesntHave</code> and <code>orDoesntHave</code> methods:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ3Bvc3RzJywgZnVuY3Rpb24gKCR0YWJsZSkge1xuICAgICR0YWJsZS0+YmlnSW5jcmVtZW50cygnaWQnKTtcbiAgICAkdGFibGUtPnN0cmluZygndGl0bGUnKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5TY2hlbWE6OmNyZWF0ZSgnY29tbWVudHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+aW50ZWdlcigncG9zdF9pZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCdjb21tZW50Jyk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuY2xhc3MgQ29tbWVudCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsnY29tbWVudCcsICdwb3N0X2lkJ107XG59XG5cbmNsYXNzIFBvc3QgZXh0ZW5kcyBJbGx1bWluYXRlXFxEYXRhYmFzZVxcRWxvcXVlbnRcXE1vZGVsIFxue1xuICAgIHByb3RlY3RlZCAkZmlsbGFibGUgPSBbJ3RpdGxlJ107XG5cbiAgICBwdWJsaWMgZnVuY3Rpb24gY29tbWVudHMoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuICR0aGlzLT5oYXNNYW55KCdDb21tZW50Jyk7XG4gICAgfVxufVxuXG5Qb3N0OjpjcmVhdGUoWyd0aXRsZScgPT4gJ0kgaGF2ZSBubyBjb21tZW50cyddKTtcbiRwb3N0ID0gUG9zdDo6Y3JlYXRlKFsndGl0bGUnID0+ICdUaW5rZXJ3ZWxsIGlzIGF3ZXNvbWUnXSk7XG5cbkNvbW1lbnQ6OmNyZWF0ZShbJ3Bvc3RfaWQnID0+ICRwb3N0LT5pZCwgJ2NvbW1lbnQnID0+ICdZZXMhJ10pO1xuQ29tbWVudDo6Y3JlYXRlKFsncG9zdF9pZCcgPT4gJHBvc3QtPmlkLCAnY29tbWVudCcgPT4gJ0ZvciBzdXJlISEnXSk7XG5cblBvc3Q6OmRvZXNudEhhdmUoJ2NvbW1lbnRzJyktPmdldCgpO1xuIiwiaGFzaCI6ImVsb3F1ZW50LXJlbGF0aW9uc2hpcHMtcXVlcnlpbmctcmVsYXRpb25zaGlwLWFic2VuY2UifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$posts</span> = App\\Post::doesntHave(<span class="hljs-string">\'comments\'</span>)-&gt;get();</code></pre>\n  <p>If you need even more power, you may use the <code>whereDoesntHave</code> and <code>orWhereDoesntHave</code> methods to put &quot;where&quot; conditions on your <code>doesntHave</code> queries. These methods allows you to add customized constraints to a relationship constraint, such as checking the content of a comment:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Builder</span>;\n\n$posts = App\\Post::whereDoesntHave(<span class="hljs-string">\'comments\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Builder $query)</span> </span>{\n    $query-&gt;where(<span class="hljs-string">\'content\'</span>, <span class="hljs-string">\'like\'</span>, <span class="hljs-string">\'foo%\'</span>);\n})-&gt;get();</code></pre>\n  <p>You may use &quot;dot&quot; notation to execute a query against a nested relationship. For example, the following query will retrieve all posts with comments from authors that are not banned:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Builder</span>;\n\n$posts = App\\Post::whereDoesntHave(<span class="hljs-string">\'comments.author\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Builder $query)</span> </span>{\n    $query-&gt;where(<span class="hljs-string">\'banned\'</span>, <span class="hljs-number">1</span>);\n})-&gt;get();</code></pre>\n  <p><a name="querying-polymorphic-relationships"></a></p>\n\n          <p><a name="querying-polymorphic-relationships"></a></p>\n          <h3>\n            <a href="#querying-polymorphic-relationships">\n              Querying Polymorphic Relationships\n            </a>\n          </h3><p>To query the existence of <code>MorphTo</code> relationships, you may use the <code>whereHasMorph</code> method and its corresponding methods:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2NvbW1lbnRzJywgZnVuY3Rpb24gKCR0YWJsZSkge1xuICAgICR0YWJsZS0+YmlnSW5jcmVtZW50cygnaWQnKTtcbiAgICAkdGFibGUtPnN0cmluZygnYm9keScpO1xuICAgICR0YWJsZS0+aW50ZWdlcignY29tbWVudGFibGVfaWQnKTtcbiAgICAkdGFibGUtPnN0cmluZygnY29tbWVudGFibGVfdHlwZScpO1xuICAgICR0YWJsZS0+dGltZXN0YW1wcygpO1xufSk7XG5cblNjaGVtYTo6Y3JlYXRlKCd2aWRlb3MnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCd0aXRsZScpO1xuICAgICR0YWJsZS0+dGltZXN0YW1wcygpO1xufSk7XG5cblNjaGVtYTo6Y3JlYXRlKCdwb3N0cycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ3RpdGxlJyk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuY2xhc3MgQ29tbWVudCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsnYm9keSddO1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBvd25pbmcgaW1hZ2VhYmxlIG1vZGVsLlxuICAgICAqL1xuICAgIHB1YmxpYyBmdW5jdGlvbiBjb21tZW50YWJsZSgpXG4gICAge1xuICAgICAgICByZXR1cm4gJHRoaXMtPm1vcnBoVG8oKTtcbiAgICB9XG59XG5cbmNsYXNzIFBvc3QgZXh0ZW5kcyBJbGx1bWluYXRlXFxEYXRhYmFzZVxcRWxvcXVlbnRcXE1vZGVsIFxue1xuICAgIHByb3RlY3RlZCAkZmlsbGFibGUgPSBbJ3RpdGxlJ107XG5cbiAgICBwdWJsaWMgZnVuY3Rpb24gY29tbWVudHMoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuICR0aGlzLT5tb3JwaE1hbnkoJ0NvbW1lbnQnLCAnY29tbWVudGFibGUnKTtcbiAgICB9XG59XG5cbmNsYXNzIFZpZGVvIGV4dGVuZHMgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxNb2RlbCBcbntcbiAgICBwcm90ZWN0ZWQgJGZpbGxhYmxlID0gWyd0aXRsZSddO1xuXG4gICAgcHVibGljIGZ1bmN0aW9uIGNvbW1lbnRzKClcbiAgICB7XG4gICAgICAgIHJldHVybiAkdGhpcy0+bW9ycGhNYW55KCdDb21tZW50JywgJ2NvbW1lbnRhYmxlJyk7XG4gICAgfVxufVxuXG4kcG9zdCA9IFBvc3Q6OmNyZWF0ZShbJ3RpdGxlJyA9PiAnVGlua2Vyd2VsbCddKTtcbiRwb3N0LT5jb21tZW50cygpLT5jcmVhdGUoWydib2R5JyA9PiAnRm9vIEJhciBCYXonXSk7XG4kcG9zdC0+Y29tbWVudHMoKS0+Y3JlYXRlKFsnYm9keScgPT4gJ0NvbW1lbnQgMiddKTtcblxuJGNvbW1lbnRzID0gQ29tbWVudDo6d2hlcmVIYXNNb3JwaChcbiAgICAnY29tbWVudGFibGUnLFxuICAgIFsnUG9zdCcsICdWaWRlbyddLFxuICAgIGZ1bmN0aW9uICgkcXVlcnkpIHtcbiAgICAgICAgJHF1ZXJ5LT53aGVyZSgnYm9keScsICdsaWtlJywgJ2ZvbyUnKTtcbiAgICB9XG4pLT5nZXQoKTtcbiIsImhhc2giOiJlbG9xdWVudC1yZWxhdGlvbnNoaXBzLXF1ZXJ5aW5nLXBvbHltb3JwaGljLXJlbGF0aW9uc2hpcHMifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Builder</span>;\n\n<span class="hljs-comment">// Retrieve comments associated to posts or videos with a title like foo%...</span>\n$comments = App\\Comment::whereHasMorph(\n    <span class="hljs-string">\'commentable\'</span>,\n    [<span class="hljs-string">\'App\\Post\'</span>, <span class="hljs-string">\'App\\Video\'</span>],\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Builder $query)</span> </span>{\n        $query-&gt;where(<span class="hljs-string">\'title\'</span>, <span class="hljs-string">\'like\'</span>, <span class="hljs-string">\'foo%\'</span>);\n    }\n)-&gt;get();\n\n<span class="hljs-comment">// Retrieve comments associated to posts with a title not like foo%...</span>\n$comments = App\\Comment::whereDoesntHaveMorph(\n    <span class="hljs-string">\'commentable\'</span>,\n    <span class="hljs-string">\'App\\Post\'</span>,\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Builder $query)</span> </span>{\n        $query-&gt;where(<span class="hljs-string">\'title\'</span>, <span class="hljs-string">\'like\'</span>, <span class="hljs-string">\'foo%\'</span>);\n    }\n)-&gt;get();</code></pre>\n  <p>You may use the <code>$type</code> parameter to add different constraints depending on the related model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Builder</span>;\n\n$comments = App\\Comment::whereHasMorph(\n    <span class="hljs-string">\'commentable\'</span>,\n    [<span class="hljs-string">\'App\\Post\'</span>, <span class="hljs-string">\'App\\Video\'</span>],\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Builder $query, $type)</span> </span>{\n        $query-&gt;where(<span class="hljs-string">\'title\'</span>, <span class="hljs-string">\'like\'</span>, <span class="hljs-string">\'foo%\'</span>);\n\n        <span class="hljs-keyword">if</span> ($type === <span class="hljs-string">\'App\\Post\'</span>) {\n            $query-&gt;orWhere(<span class="hljs-string">\'content\'</span>, <span class="hljs-string">\'like\'</span>, <span class="hljs-string">\'foo%\'</span>);\n        }\n    }\n)-&gt;get();</code></pre>\n  <p>Instead of passing an array of possible polymorphic models, you may provide <code>*</code> as a wildcard and let Laravel retrieve all the possible polymorphic types from the database. Laravel will execute an additional query in order to perform this operation:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Builder</span>;\n\n$comments = App\\Comment::whereHasMorph(<span class="hljs-string">\'commentable\'</span>, <span class="hljs-string">\'*\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Builder $query)</span> </span>{\n    $query-&gt;where(<span class="hljs-string">\'title\'</span>, <span class="hljs-string">\'like\'</span>, <span class="hljs-string">\'foo%\'</span>);\n})-&gt;get();</code></pre>\n  <p><a name="counting-related-models"></a></p>\n\n          <p><a name="counting-related-models"></a></p>\n          <h3>\n            <a href="#counting-related-models">\n              Counting Related Models\n            </a>\n          </h3><p>If you want to count the number of results from a relationship without actually loading them you may use the <code>withCount</code> method, which will place a <code>{relation}_count</code> column on your resulting models. For example:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ3Bvc3RzJywgZnVuY3Rpb24gKCR0YWJsZSkge1xuICAgICR0YWJsZS0+YmlnSW5jcmVtZW50cygnaWQnKTtcbiAgICAkdGFibGUtPnN0cmluZygndGl0bGUnKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5TY2hlbWE6OmNyZWF0ZSgnY29tbWVudHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+aW50ZWdlcigncG9zdF9pZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCdjb21tZW50Jyk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuY2xhc3MgQ29tbWVudCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsnY29tbWVudCcsICdwb3N0X2lkJ107XG59XG5cbmNsYXNzIFBvc3QgZXh0ZW5kcyBJbGx1bWluYXRlXFxEYXRhYmFzZVxcRWxvcXVlbnRcXE1vZGVsIFxue1xuICAgIHByb3RlY3RlZCAkZmlsbGFibGUgPSBbJ3RpdGxlJ107XG5cbiAgICBwdWJsaWMgZnVuY3Rpb24gY29tbWVudHMoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuICR0aGlzLT5oYXNNYW55KCdDb21tZW50Jyk7XG4gICAgfVxufVxuXG4kcG9zdCA9IFBvc3Q6OmNyZWF0ZShbJ3RpdGxlJyA9PiAnVGlua2Vyd2VsbCBpcyBhd2Vzb21lJ10pO1xuXG5Db21tZW50OjpjcmVhdGUoWydwb3N0X2lkJyA9PiAkcG9zdC0+aWQsICdjb21tZW50JyA9PiAnWWVzISddKTtcbkNvbW1lbnQ6OmNyZWF0ZShbJ3Bvc3RfaWQnID0+ICRwb3N0LT5pZCwgJ2NvbW1lbnQnID0+ICdGb3Igc3VyZSEhJ10pO1xuXG4kcG9zdHMgPSBQb3N0Ojp3aXRoQ291bnQoJ2NvbW1lbnRzJyktPmdldCgpO1xuIiwiaGFzaCI6ImVsb3F1ZW50LXJlbGF0aW9uc2hpcHMtY291bnRpbmctcmVsYXRlZC1tb2RlbHMifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$posts = App\\Post::withCount(<span class="hljs-string">\'comments\'</span>)-&gt;get();\n\n<span class="hljs-keyword">foreach</span> ($posts <span class="hljs-keyword">as</span> $post) {\n    <span class="hljs-keyword">echo</span> $post-&gt;comments_count;\n}</code></pre>\n  <p>You may add the &quot;counts&quot; for multiple relations as well as add constraints to the queries:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Builder</span>;\n\n$posts = App\\Post::withCount([<span class="hljs-string">\'votes\'</span>, <span class="hljs-string">\'comments\'</span> =&gt; <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Builder $query)</span> </span>{\n    $query-&gt;where(<span class="hljs-string">\'content\'</span>, <span class="hljs-string">\'like\'</span>, <span class="hljs-string">\'foo%\'</span>);\n}])-&gt;get();\n\n<span class="hljs-keyword">echo</span> $posts[<span class="hljs-number">0</span>]-&gt;votes_count;\n<span class="hljs-keyword">echo</span> $posts[<span class="hljs-number">0</span>]-&gt;comments_count;</code></pre>\n  <p>You may also alias the relationship count result, allowing multiple counts on the same relationship:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Builder</span>;\n\n$posts = App\\Post::withCount([\n    <span class="hljs-string">\'comments\'</span>,\n    <span class="hljs-string">\'comments as pending_comments_count\'</span> =&gt; <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Builder $query)</span> </span>{\n        $query-&gt;where(<span class="hljs-string">\'approved\'</span>, <span class="hljs-keyword">false</span>);\n    },\n])-&gt;get();\n\n<span class="hljs-keyword">echo</span> $posts[<span class="hljs-number">0</span>]-&gt;comments_count;\n\n<span class="hljs-keyword">echo</span> $posts[<span class="hljs-number">0</span>]-&gt;pending_comments_count;</code></pre>\n  <p>If you&#39;re combining <code>withCount</code> with a <code>select</code> statement, ensure that you call <code>withCount</code> after the <code>select</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$posts = App\\Post::select([<span class="hljs-string">\'title\'</span>, <span class="hljs-string">\'body\'</span>])-&gt;withCount(<span class="hljs-string">\'comments\'</span>)-&gt;get();\n\n<span class="hljs-keyword">echo</span> $posts[<span class="hljs-number">0</span>]-&gt;title;\n<span class="hljs-keyword">echo</span> $posts[<span class="hljs-number">0</span>]-&gt;body;\n<span class="hljs-keyword">echo</span> $posts[<span class="hljs-number">0</span>]-&gt;comments_count;</code></pre>\n  <p>In addition, using the <code>loadCount</code> method, you may load a relationship count after the parent model has already been retrieved:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$book</span> = App\\Book::first();\n\n<span class="hljs-variable">$book</span>-&gt;loadCount(<span class="hljs-string">\'genres\'</span>);</code></pre>\n  <p>If you need to set additional query constraints on the eager loading query, you may pass an array keyed by the relationships you wish to load. The array values should be <code>Closure</code> instances which receive the query builder instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$book-&gt;loadCount([<span class="hljs-string">\'reviews\'</span> =&gt; <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($query)</span> </span>{\n    $query-&gt;where(<span class="hljs-string">\'rating\'</span>, <span class="hljs-number">5</span>);\n}])</code></pre>\n  <p><a name="eager-loading"></a></p>\n\n          <p><a name="eager-loading"></a></p>\n          <h2>\n            <a href="#eager-loading">\n              Eager Loading\n            </a>\n          </h2><p>When accessing Eloquent relationships as properties, the relationship data is &quot;lazy loaded&quot;. This means the relationship data is not actually loaded until you first access the property. However, Eloquent can &quot;eager load&quot; relationships at the time you query the parent model. Eager loading alleviates the N + 1 query problem. To illustrate the N + 1 query problem, consider a <code>Book</code> model that is related to <code>Author</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Get the author that wrote the book.\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">author</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;belongsTo(<span class="hljs-string">\'App\\Author\'</span>);\n    }\n}</span></code></pre>\n  <p>Now, let&#39;s retrieve all books and their authors:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$books = App\\Book::all();\n\n<span class="hljs-keyword">foreach</span> ($books <span class="hljs-keyword">as</span> $book) {\n    <span class="hljs-keyword">echo</span> $book-&gt;author-&gt;name;\n}</code></pre>\n  <p>This loop will execute 1 query to retrieve all of the books on the table, then another query for each book to retrieve the author. So, if we have 25 books, this loop would run 26 queries: 1 for the original book, and 25 additional queries to retrieve the author of each book.</p>\n<p>Thankfully, we can use eager loading to reduce this operation to just 2 queries. When querying, you may specify which relationships should be eager loaded using the <code>with</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$books = App\\Book::with(<span class="hljs-string">\'author\'</span>)-&gt;get();\n\n<span class="hljs-keyword">foreach</span> ($books <span class="hljs-keyword">as</span> $book) {\n    <span class="hljs-keyword">echo</span> $book-&gt;author-&gt;name;\n}</code></pre>\n  <p>For this operation, only two queries will be executed:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">select * <span class="hljs-keyword">from</span> books\n\nselect * <span class="hljs-keyword">from</span> authors where id <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, ...)</code></pre>\n  \n          <p><a name="eager-loading-multiple-relationships"></a></p>\n          <h4>\n            <a href="#eager-loading-multiple-relationships">\n              Eager Loading Multiple Relationships\n            </a>\n          </h4><p>Sometimes you may need to eager load several different relationships in a single operation. To do so, just pass additional arguments to the <code>with</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$books</span> = App\\Book::<span class="hljs-keyword">with</span>([<span class="hljs-string">\'author\'</span>, <span class="hljs-string">\'publisher\'</span>])-&gt;get();</code></pre>\n  \n          <p><a name="nested-eager-loading"></a></p>\n          <h4>\n            <a href="#nested-eager-loading">\n              Nested Eager Loading\n            </a>\n          </h4><p>To eager load nested relationships, you may use &quot;dot&quot; syntax. For example, let&#39;s eager load all of the book&#39;s authors and all of the author&#39;s personal contacts in one Eloquent statement:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$books</span> = App\\Book::<span class="hljs-keyword">with</span>(<span class="hljs-string">\'author.contacts\'</span>)-&gt;get();</code></pre>\n  \n          <p><a name="nested-eager-loading-code-morphto-code-relationships"></a></p>\n          <h4>\n            <a href="#nested-eager-loading-code-morphto-code-relationships">\n              Nested Eager Loading <code>morphTo</code> Relationships\n            </a>\n          </h4><p>If you would like to eager load a <code>morphTo</code> relationship, as well as nested relationships on the various entities that may be returned by that relationship, you may use the <code>with</code> method in combination with the <code>morphTo</code> relationship&#39;s <code>morphWith</code> method. To help illustrate this method, let&#39;s consider the following model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">&lt;?php\n\nuse <span class="hljs-type">Illuminate</span>\\<span class="hljs-type">Database</span>\\<span class="hljs-type">Eloquent</span>\\<span class="hljs-type">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ActivityFeed</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span>\n{\n    <span class="hljs-comment">/**\n     * Get the parent of the activity feed record.\n     */</span>\n    public function parentable()\n    {\n        <span class="hljs-keyword">return</span> $<span class="hljs-keyword">this</span>-&gt;morphTo();\n    }\n}</code></pre>\n  <p>In this example, let&#39;s assume <code>Event</code>, <code>Photo</code>, and <code>Post</code> models may create <code>ActivityFeed</code> models. Additionally, let&#39;s assume that <code>Event</code> models belong to a <code>Calendar</code> model, <code>Photo</code> models are associated with <code>Tag</code> models, and <code>Post</code> models belong to an <code>Author</code> model.</p>\n<p>Using these model definitions and relationships, we may retrieve <code>ActivityFeed</code> model instances and eager load all <code>parentable</code> models and their respective nested relationships:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Relations</span>\\<span class="hljs-title">MorphTo</span>;\n\n$activities = ActivityFeed::query()\n    -&gt;with([<span class="hljs-string">\'parentable\'</span> =&gt; <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(MorphTo $morphTo)</span> </span>{\n        $morphTo-&gt;morphWith([\n            Event::class =&gt; [<span class="hljs-string">\'calendar\'</span>],\n            Photo::class =&gt; [<span class="hljs-string">\'tags\'</span>],\n            Post::class =&gt; [<span class="hljs-string">\'author\'</span>],\n        ]);\n    }])-&gt;get();</code></pre>\n  \n          <p><a name="eager-loading-specific-columns"></a></p>\n          <h4>\n            <a href="#eager-loading-specific-columns">\n              Eager Loading Specific Columns\n            </a>\n          </h4><p>You may not always need every column from the relationships you are retrieving. For this reason, Eloquent allows you to specify which columns of the relationship you would like to retrieve:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$books</span> = App\\Book::<span class="hljs-keyword">with</span>(<span class="hljs-string">\'author:id,name\'</span>)-&gt;get();</code></pre>\n  <blockquote>\n<p>{note} When using this feature, you should always include the <code>id</code> column and any relevant foreign key columns in the list of columns you wish to retrieve.</p>\n</blockquote>\n\n          <p><a name="eager-loading-by-default"></a></p>\n          <h4>\n            <a href="#eager-loading-by-default">\n              Eager Loading By Default\n            </a>\n          </h4><p>Sometimes you might want to always load some relationships when retrieving a model. To accomplish this, you may define a <code>$with</code> property on the model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The relationships that should always be loaded.\n     *\n     * <span class="hljs-doctag">@var</span> array\n     */</span>\n    <span class="hljs-keyword">protected</span> $with = [<span class="hljs-string">\'author\'</span>];\n\n    <span class="hljs-comment">/**\n     * Get the author that wrote the book.\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">author</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;belongsTo(<span class="hljs-string">\'App\\Author\'</span>);\n    }\n}</span></code></pre>\n  <p>If you would like to remove an item from the <code>$with</code> property for a single query, you may use the <code>without</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$books</span> = App\\Book::without(<span class="hljs-string">\'author\'</span>)-&gt;get();</code></pre>\n  <p><a name="constraining-eager-loads"></a></p>\n\n          <p><a name="constraining-eager-loads"></a></p>\n          <h3>\n            <a href="#constraining-eager-loads">\n              Constraining Eager Loads\n            </a>\n          </h3><p>Sometimes you may wish to eager load a relationship, but also specify additional query conditions for the eager loading query. Here&#39;s an example:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = App\\User::with([<span class="hljs-string">\'posts\'</span> =&gt; <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($query)</span> </span>{\n    $query-&gt;where(<span class="hljs-string">\'title\'</span>, <span class="hljs-string">\'like\'</span>, <span class="hljs-string">\'%first%\'</span>);\n}])-&gt;get();</code></pre>\n  <p>In this example, Eloquent will only eager load posts where the post&#39;s <code>title</code> column contains the word <code>first</code>. You may call other <router-link to="/docs/queries">query builder</router-link> methods to further customize the eager loading operation:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = App\\User::with([<span class="hljs-string">\'posts\'</span> =&gt; <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($query)</span> </span>{\n    $query-&gt;orderBy(<span class="hljs-string">\'created_at\'</span>, <span class="hljs-string">\'desc\'</span>);\n}])-&gt;get();</code></pre>\n  <blockquote>\n<p>{note} The <code>limit</code> and <code>take</code> query builder methods may not be used when constraining eager loads.</p>\n</blockquote>\n<p><a name="lazy-eager-loading"></a></p>\n\n          <p><a name="lazy-eager-loading"></a></p>\n          <h3>\n            <a href="#lazy-eager-loading">\n              Lazy Eager Loading\n            </a>\n          </h3><p>Sometimes you may need to eager load a relationship after the parent model has already been retrieved. For example, this may be useful if you need to dynamically decide whether to load related models:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$books = App\\Book::all();\n\n<span class="hljs-keyword">if</span> ($someCondition) {\n    $books-&gt;load(<span class="hljs-string">\'author\'</span>, <span class="hljs-string">\'publisher\'</span>);\n}</code></pre>\n  <p>If you need to set additional query constraints on the eager loading query, you may pass an array keyed by the relationships you wish to load. The array values should be <code>Closure</code> instances which receive the query instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$author-&gt;load([<span class="hljs-string">\'books\'</span> =&gt; <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($query)</span> </span>{\n    $query-&gt;orderBy(<span class="hljs-string">\'published_date\'</span>, <span class="hljs-string">\'asc\'</span>);\n}]);</code></pre>\n  <p>To load a relationship only when it has not already been loaded, use the <code>loadMissing</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">format</span><span class="hljs-params">(Book $book)</span>\n</span>{\n    $book-&gt;loadMissing(<span class="hljs-string">\'author\'</span>);\n\n    <span class="hljs-keyword">return</span> [\n        <span class="hljs-string">\'name\'</span> =&gt; $book-&gt;name,\n        <span class="hljs-string">\'author\'</span> =&gt; $book-&gt;author-&gt;name,\n    ];\n}</code></pre>\n  \n          <p><a name="nested-lazy-eager-loading-amp-code-morphto-code-"></a></p>\n          <h4>\n            <a href="#nested-lazy-eager-loading-amp-code-morphto-code-">\n              Nested Lazy Eager Loading &amp; <code>morphTo</code>\n            </a>\n          </h4><p>If you would like to eager load a <code>morphTo</code> relationship, as well as nested relationships on the various entities that may be returned by that relationship, you may use the <code>loadMorph</code> method.</p>\n<p>This method accepts the name of the <code>morphTo</code> relationship as its first argument, and an array of model / relationship pairs as its second argument. To help illustrate this method, let&#39;s consider the following model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">&lt;?php\n\nuse <span class="hljs-type">Illuminate</span>\\<span class="hljs-type">Database</span>\\<span class="hljs-type">Eloquent</span>\\<span class="hljs-type">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ActivityFeed</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span>\n{\n    <span class="hljs-comment">/**\n     * Get the parent of the activity feed record.\n     */</span>\n    public function parentable()\n    {\n        <span class="hljs-keyword">return</span> $<span class="hljs-keyword">this</span>-&gt;morphTo();\n    }\n}</code></pre>\n  <p>In this example, let&#39;s assume <code>Event</code>, <code>Photo</code>, and <code>Post</code> models may create <code>ActivityFeed</code> models. Additionally, let&#39;s assume that <code>Event</code> models belong to a <code>Calendar</code> model, <code>Photo</code> models are associated with <code>Tag</code> models, and <code>Post</code> models belong to an <code>Author</code> model.</p>\n<p>Using these model definitions and relationships, we may retrieve <code>ActivityFeed</code> model instances and eager load all <code>parentable</code> models and their respective nested relationships:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$activities = ActivityFeed::with(<span class="hljs-string">\'parentable\'</span>)\n    -&gt;get()\n    -&gt;loadMorph(<span class="hljs-string">\'parentable\'</span>, [\n        Event::class =&gt; [<span class="hljs-string">\'calendar\'</span>],\n        Photo::class =&gt; [<span class="hljs-string">\'tags\'</span>],\n        Post::class =&gt; [<span class="hljs-string">\'author\'</span>],\n    ]);</code></pre>\n  <p><a name="inserting-and-updating-related-models"></a></p>\n\n          <p><a name="inserting-amp-updating-related-models"></a></p>\n          <h2>\n            <a href="#inserting-amp-updating-related-models">\n              Inserting &amp; Updating Related Models\n            </a>\n          </h2><p><a name="the-save-method"></a></p>\n\n          <p><a name="the-save-method"></a></p>\n          <h3>\n            <a href="#the-save-method">\n              The Save Method\n            </a>\n          </h3><p>Eloquent provides convenient methods for adding new models to relationships. For example, perhaps you need to insert a new <code>Comment</code> for a <code>Post</code> model. Instead of manually setting the <code>post_id</code> attribute on the <code>Comment</code>, you may insert the <code>Comment</code> directly from the relationship&#39;s <code>save</code> method:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ3Bvc3RzJywgZnVuY3Rpb24gKCR0YWJsZSkge1xuICAgICR0YWJsZS0+YmlnSW5jcmVtZW50cygnaWQnKTtcbiAgICAkdGFibGUtPnN0cmluZygndGl0bGUnKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5TY2hlbWE6OmNyZWF0ZSgnY29tbWVudHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+aW50ZWdlcigncG9zdF9pZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCdjb21tZW50Jyk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuY2xhc3MgQ29tbWVudCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsnY29tbWVudCcsICdwb3N0X2lkJ107XG59XG5cbmNsYXNzIFBvc3QgZXh0ZW5kcyBJbGx1bWluYXRlXFxEYXRhYmFzZVxcRWxvcXVlbnRcXE1vZGVsIFxue1xuICAgIHByb3RlY3RlZCAkZmlsbGFibGUgPSBbJ3RpdGxlJ107XG5cbiAgICBwdWJsaWMgZnVuY3Rpb24gY29tbWVudHMoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuICR0aGlzLT5oYXNNYW55KCdDb21tZW50Jyk7XG4gICAgfVxufVxuXG5Qb3N0OjpjcmVhdGUoWyd0aXRsZScgPT4gJ1RpbmtlcndlbGwgaXMgYXdlc29tZSddKTtcblxuJGNvbW1lbnQgPSBuZXcgQ29tbWVudChbJ2NvbW1lbnQnID0+ICdBIG5ldyBjb21tZW50LiddKTtcblxuJHBvc3QgPSBQb3N0OjpmaW5kKDEpO1xuXG4kcG9zdC0+Y29tbWVudHMoKS0+c2F2ZSgkY29tbWVudCk7XG4iLCJoYXNoIjoiZWxvcXVlbnQtcmVsYXRpb25zaGlwcy10aGUtc2F2ZS1tZXRob2QifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$comment = <span class="hljs-keyword">new</span> App\\Comment([<span class="hljs-string">\'message\'</span> =&gt; <span class="hljs-string">\'A new comment.\'</span>]);\n\n$post = App\\Post::find(<span class="hljs-number">1</span>);\n\n$post-&gt;comments()-&gt;save($comment);</code></pre>\n  <p>Notice that we did not access the <code>comments</code> relationship as a dynamic property. Instead, we called the <code>comments</code> method to obtain an instance of the relationship. The <code>save</code> method will automatically add the appropriate <code>post_id</code> value to the new <code>Comment</code> model.</p>\n<p>If you need to save multiple related models, you may use the <code>saveMany</code> method:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ3Bvc3RzJywgZnVuY3Rpb24gKCR0YWJsZSkge1xuICAgICR0YWJsZS0+YmlnSW5jcmVtZW50cygnaWQnKTtcbiAgICAkdGFibGUtPnN0cmluZygndGl0bGUnKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5TY2hlbWE6OmNyZWF0ZSgnY29tbWVudHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+aW50ZWdlcigncG9zdF9pZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCdjb21tZW50Jyk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuY2xhc3MgQ29tbWVudCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsnY29tbWVudCcsICdwb3N0X2lkJ107XG59XG5cbmNsYXNzIFBvc3QgZXh0ZW5kcyBJbGx1bWluYXRlXFxEYXRhYmFzZVxcRWxvcXVlbnRcXE1vZGVsIFxue1xuICAgIHByb3RlY3RlZCAkZmlsbGFibGUgPSBbJ3RpdGxlJ107XG5cbiAgICBwdWJsaWMgZnVuY3Rpb24gY29tbWVudHMoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuICR0aGlzLT5oYXNNYW55KCdDb21tZW50Jyk7XG4gICAgfVxufVxuXG5Qb3N0OjpjcmVhdGUoWyd0aXRsZScgPT4gJ1RpbmtlcndlbGwgaXMgYXdlc29tZSddKTtcblxuJHBvc3QgPSBQb3N0OjpmaW5kKDEpO1xuXG4kcG9zdC0+Y29tbWVudHMoKS0+c2F2ZU1hbnkoW1xuICAgIG5ldyBDb21tZW50KFsnY29tbWVudCcgPT4gJ0EgbmV3IGNvbW1lbnQuJ10pLFxuICAgIG5ldyBDb21tZW50KFsnY29tbWVudCcgPT4gJ0Fub3RoZXIgY29tbWVudC4nXSksXG5dKTtcbiIsImhhc2giOiJlbG9xdWVudC1yZWxhdGlvbnNoaXBzLXRoZS1zYXZlLW1ldGhvZCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$post = App\\Post::find(<span class="hljs-number">1</span>);\n\n$post-&gt;comments()-&gt;saveMany([\n    <span class="hljs-keyword">new</span> App\\Comment([<span class="hljs-string">\'message\'</span> =&gt; <span class="hljs-string">\'A new comment.\'</span>]),\n    <span class="hljs-keyword">new</span> App\\Comment([<span class="hljs-string">\'message\'</span> =&gt; <span class="hljs-string">\'Another comment.\'</span>]),\n]);</code></pre>\n  <p><a name="the-push-method"></a></p>\n\n          <p><a name="recursively-saving-models-amp-relationships"></a></p>\n          <h4>\n            <a href="#recursively-saving-models-amp-relationships">\n              Recursively Saving Models &amp; Relationships\n            </a>\n          </h4><p>If you would like to <code>save</code> your model and all of its associated relationships, you may use the <code>push</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$post = App\\Post::find(<span class="hljs-number">1</span>);\n\n$<span class="hljs-function"><span class="hljs-title">post</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">comments</span>[0]-&gt;</span>message = <span class="hljs-string">\'Message\'</span>;\n$<span class="hljs-function"><span class="hljs-title">post</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">comments</span>[0]-&gt;</span><span class="hljs-function"><span class="hljs-title">author</span>-&gt;</span><span class="hljs-keyword">name</span> = <span class="hljs-string">\'Author Name\'</span>;\n\n$<span class="hljs-function"><span class="hljs-title">post</span>-&gt;</span>push();</code></pre>\n  <p><a name="the-create-method"></a></p>\n\n          <p><a name="the-create-method"></a></p>\n          <h3>\n            <a href="#the-create-method">\n              The Create Method\n            </a>\n          </h3><p>In addition to the <code>save</code> and <code>saveMany</code> methods, you may also use the <code>create</code> method, which accepts an array of attributes, creates a model, and inserts it into the database. Again, the difference between <code>save</code> and <code>create</code> is that <code>save</code> accepts a full Eloquent model instance while <code>create</code> accepts a plain PHP <code>array</code>:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ3Bvc3RzJywgZnVuY3Rpb24gKCR0YWJsZSkge1xuICAgICR0YWJsZS0+YmlnSW5jcmVtZW50cygnaWQnKTtcbiAgICAkdGFibGUtPnN0cmluZygndGl0bGUnKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5TY2hlbWE6OmNyZWF0ZSgnY29tbWVudHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+aW50ZWdlcigncG9zdF9pZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCdjb21tZW50Jyk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuY2xhc3MgQ29tbWVudCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsnY29tbWVudCcsICdwb3N0X2lkJ107XG59XG5cbmNsYXNzIFBvc3QgZXh0ZW5kcyBJbGx1bWluYXRlXFxEYXRhYmFzZVxcRWxvcXVlbnRcXE1vZGVsIFxue1xuICAgIHByb3RlY3RlZCAkZmlsbGFibGUgPSBbJ3RpdGxlJ107XG5cbiAgICBwdWJsaWMgZnVuY3Rpb24gY29tbWVudHMoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuICR0aGlzLT5oYXNNYW55KCdDb21tZW50Jyk7XG4gICAgfVxufVxuXG5Qb3N0OjpjcmVhdGUoWyd0aXRsZScgPT4gJ1RpbmtlcndlbGwgaXMgYXdlc29tZSddKTtcblxuJHBvc3QgPSBQb3N0OjpmaW5kKDEpO1xuXG4kY29tbWVudCA9ICRwb3N0LT5jb21tZW50cygpLT5jcmVhdGUoW1xuICAgICdjb21tZW50JyA9PiAnQSBuZXcgY29tbWVudC4nLFxuXSk7XG4iLCJoYXNoIjoiZWxvcXVlbnQtcmVsYXRpb25zaGlwcy10aGUtY3JlYXRlLW1ldGhvZCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$post = App\\Post::find(<span class="hljs-number">1</span>);\n\n$comment = $post-&gt;comments()-&gt;create([\n    <span class="hljs-string">\'message\'</span> =&gt; <span class="hljs-string">\'A new comment.\'</span>,\n]);</code></pre>\n  <p>You may use the <code>createMany</code> method to create multiple related models:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ3Bvc3RzJywgZnVuY3Rpb24gKCR0YWJsZSkge1xuICAgICR0YWJsZS0+YmlnSW5jcmVtZW50cygnaWQnKTtcbiAgICAkdGFibGUtPnN0cmluZygndGl0bGUnKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5TY2hlbWE6OmNyZWF0ZSgnY29tbWVudHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+aW50ZWdlcigncG9zdF9pZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCdjb21tZW50Jyk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuY2xhc3MgQ29tbWVudCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsnY29tbWVudCcsICdwb3N0X2lkJ107XG59XG5cbmNsYXNzIFBvc3QgZXh0ZW5kcyBJbGx1bWluYXRlXFxEYXRhYmFzZVxcRWxvcXVlbnRcXE1vZGVsIFxue1xuICAgIHByb3RlY3RlZCAkZmlsbGFibGUgPSBbJ3RpdGxlJ107XG5cbiAgICBwdWJsaWMgZnVuY3Rpb24gY29tbWVudHMoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuICR0aGlzLT5oYXNNYW55KCdDb21tZW50Jyk7XG4gICAgfVxufVxuXG5Qb3N0OjpjcmVhdGUoWyd0aXRsZScgPT4gJ1RpbmtlcndlbGwgaXMgYXdlc29tZSddKTtcblxuJHBvc3QgPSBQb3N0OjpmaW5kKDEpO1xuXG4kY29tbWVudCA9ICRwb3N0LT5jb21tZW50cygpLT5jcmVhdGVNYW55KFtcbiAgICBbXG4gICAgICAgICdjb21tZW50JyA9PiAnQSBuZXcgY29tbWVudC4nLFxuICAgIF0sXG4gICAgW1xuICAgICAgICAnY29tbWVudCcgPT4gJ0Fub3RoZXIgY29tbWVudC4nLFxuICAgIF0gICAgXG5dKTtcbiIsImhhc2giOiJlbG9xdWVudC1yZWxhdGlvbnNoaXBzLXRoZS1jcmVhdGUtbWV0aG9kIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$post = App\\Post::find(<span class="hljs-number">1</span>);\n\n$post-&gt;comments()-&gt;createMany([\n    [\n        <span class="hljs-string">\'message\'</span> =&gt; <span class="hljs-string">\'A new comment.\'</span>,\n    ],\n    [\n        <span class="hljs-string">\'message\'</span> =&gt; <span class="hljs-string">\'Another new comment.\'</span>,\n    ],\n]);</code></pre>\n  <p>You may also use the <code>findOrNew</code>, <code>firstOrNew</code>, <code>firstOrCreate</code> and <code>updateOrCreate</code> methods to <router-link to="https://laravel.com/docs/eloquent#other-creation-methods">create and update models on relationships</router-link>.</p>\n<p><a name="updating-belongs-to-relationships"></a></p>\n\n          <p><a name="belongs-to-relationships"></a></p>\n          <h3>\n            <a href="#belongs-to-relationships">\n              Belongs To Relationships\n            </a>\n          </h3><p>When updating a <code>belongsTo</code> relationship, you may use the <code>associate</code> method. This method will set the foreign key on the child model:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2d1ZXN0cycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ25hbWUnKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5TY2hlbWE6OmNyZWF0ZSgncGhvbmVzJywgZnVuY3Rpb24gKCR0YWJsZSkge1xuICAgICR0YWJsZS0+YmlnSW5jcmVtZW50cygnaWQnKTtcbiAgICAkdGFibGUtPmludGVnZXIoJ2d1ZXN0X2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ251bWJlcicpO1xuICAgICR0YWJsZS0+dGltZXN0YW1wcygpO1xufSk7XG5cbmNsYXNzIFBob25lIGV4dGVuZHMgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxNb2RlbCBcbntcbiAgICBwcm90ZWN0ZWQgJGZpbGxhYmxlID0gWydudW1iZXInLCAnZ3Vlc3RfaWQnXTtcblxuICAgIHB1YmxpYyBmdW5jdGlvbiBndWVzdCgpXG4gICAge1xuICAgICAgICByZXR1cm4gJHRoaXMtPmJlbG9uZ3NUbygnR3Vlc3QnKTtcbiAgICB9XG59XG5cbmNsYXNzIEd1ZXN0IGV4dGVuZHMgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxNb2RlbCBcbntcbiAgICBwcm90ZWN0ZWQgJGZpbGxhYmxlID0gWyduYW1lJ107XG5cbiAgICBwdWJsaWMgZnVuY3Rpb24gcGhvbmUoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuICR0aGlzLT5oYXNPbmUoJ1Bob25lJyk7XG4gICAgfVxufVxuXG4kZ3Vlc3QgPSBHdWVzdDo6Y3JlYXRlKFsnbmFtZScgPT4gJ1BhdWwnXSk7XG5cbiRwaG9uZSA9IFBob25lOjpjcmVhdGUoWydudW1iZXInID0+ICcxMjM0NTY3ODkwJ10pO1xuXG5QaG9uZTo6ZmluZCgxKS0+YXNzb2NpYXRlKCRndWVzdCk7XG4iLCJoYXNoIjoiZWxvcXVlbnQtcmVsYXRpb25zaGlwcy1iZWxvbmdzLXRvLXJlbGF0aW9uc2hpcHMifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$account</span> = App\\Account::find(<span class="hljs-number">10</span>);\n\n<span class="hljs-variable">$user</span>-&gt;account()-&gt;associate(<span class="hljs-variable">$account</span>);\n\n<span class="hljs-variable">$user</span>-&gt;save();</code></pre>\n  <p>When removing a <code>belongsTo</code> relationship, you may use the <code>dissociate</code> method. This method will set the relationship&#39;s foreign key to <code>null</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-function"><span class="hljs-title">user</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">account</span>()-&gt;</span>dissociate();\n\n$<span class="hljs-function"><span class="hljs-title">user</span>-&gt;</span>save();</code></pre>\n  <p><a name="default-models"></a></p>\n\n          <p><a name="default-models"></a></p>\n          <h4>\n            <a href="#default-models">\n              Default Models\n            </a>\n          </h4><p>The <code>belongsTo</code>, <code>hasOne</code>, <code>hasOneThrough</code>, and <code>morphOne</code> relationships allow you to define a default model that will be returned if the given relationship is <code>null</code>. This pattern is often referred to as the <router-link to="https://en.wikipedia.org/wiki/Null_Object_pattern">Null Object pattern</router-link> and can help remove conditional checks in your code. In the following example, the <code>user</code> relation will return an empty <code>App\\User</code> model if no <code>user</code> is attached to the post:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the author of the post.\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">user</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;belongsTo(<span class="hljs-string">\'App\\User\'</span>)-&gt;withDefault();\n}</code></pre>\n  <p>To populate the default model with attributes, you may pass an array or Closure to the <code>withDefault</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the author of the post.\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">user</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;belongsTo(<span class="hljs-string">\'App\\User\'</span>)-&gt;withDefault([\n        <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Guest Author\'</span>,\n    ]);\n}\n\n<span class="hljs-comment">/**\n * Get the author of the post.\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">user</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;belongsTo(<span class="hljs-string">\'App\\User\'</span>)-&gt;withDefault(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($user, $post)</span> </span>{\n        $user-&gt;name = <span class="hljs-string">\'Guest Author\'</span>;\n    });\n}</code></pre>\n  <p><a name="updating-many-to-many-relationships"></a></p>\n\n          <p><a name="many-to-many-relationships"></a></p>\n          <h3>\n            <a href="#many-to-many-relationships">\n              Many To Many Relationships\n            </a>\n          </h3>\n          <p><a name="attaching-detaching"></a></p>\n          <h4>\n            <a href="#attaching-detaching">\n              Attaching / Detaching\n            </a>\n          </h4><p>Eloquent also provides a few additional helper methods to make working with related models more convenient. For example, let&#39;s imagine a user can have many roles and a role can have many users. To attach a role to a user by inserting a record in the intermediate table that joins the models, use the <code>attach</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span> = App\\User::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-variable">$user</span>-&gt;roles()-&gt;attach(<span class="hljs-variable">$roleId</span>);</code></pre>\n  <p>When attaching a relationship to a model, you may also pass an array of additional data to be inserted into the intermediate table:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user-&gt;roles()-&gt;attach($roleId, [<span class="hljs-string">\'expires\'</span> =&gt; $expires]);</code></pre>\n  <p>Sometimes it may be necessary to remove a role from a user. To remove a many-to-many relationship record, use the <code>detach</code> method. The <code>detach</code> method will delete the appropriate record out of the intermediate table; however, both models will remain in the database:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Detach a single role from the user...</span>\n$<span class="hljs-function"><span class="hljs-title">user</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">roles</span>()-&gt;</span>detach($roleId);\n\n<span class="hljs-comment">// Detach all roles from the user...</span>\n$<span class="hljs-function"><span class="hljs-title">user</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">roles</span>()-&gt;</span>detach();</code></pre>\n  <p>For convenience, <code>attach</code> and <code>detach</code> also accept arrays of IDs as input:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user = App\\User::find(<span class="hljs-number">1</span>);\n\n$user-&gt;roles()-&gt;detach([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);\n\n$user-&gt;roles()-&gt;attach([\n    <span class="hljs-number">1</span> =&gt; [<span class="hljs-string">\'expires\'</span> =&gt; $expires],\n    <span class="hljs-number">2</span> =&gt; [<span class="hljs-string">\'expires\'</span> =&gt; $expires],\n]);</code></pre>\n  \n          <p><a name="syncing-associations"></a></p>\n          <h4>\n            <a href="#syncing-associations">\n              Syncing Associations\n            </a>\n          </h4><p>You may also use the <code>sync</code> method to construct many-to-many associations. The <code>sync</code> method accepts an array of IDs to place on the intermediate table. Any IDs that are not in the given array will be removed from the intermediate table. So, after this operation is complete, only the IDs in the given array will exist in the intermediate table:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-function"><span class="hljs-title">user</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">roles</span>()-&gt;</span>sync([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);</code></pre>\n  <p>You may also pass additional intermediate table values with the IDs:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user-&gt;roles()-&gt;sync([<span class="hljs-number">1</span> =&gt; [<span class="hljs-string">\'expires\'</span> =&gt; <span class="hljs-keyword">true</span>], <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);</code></pre>\n  <p>If you do not want to detach existing IDs, you may use the <code>syncWithoutDetaching</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-function"><span class="hljs-title">user</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">roles</span>()-&gt;</span>syncWithoutDetaching([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);</code></pre>\n  \n          <p><a name="toggling-associations"></a></p>\n          <h4>\n            <a href="#toggling-associations">\n              Toggling Associations\n            </a>\n          </h4><p>The many-to-many relationship also provides a <code>toggle</code> method which &quot;toggles&quot; the attachment status of the given IDs. If the given ID is currently attached, it will be detached. Likewise, if it is currently detached, it will be attached:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-function"><span class="hljs-title">user</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">roles</span>()-&gt;</span>toggle([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);</code></pre>\n  \n          <p><a name="saving-additional-data-on-a-pivot-table"></a></p>\n          <h4>\n            <a href="#saving-additional-data-on-a-pivot-table">\n              Saving Additional Data On A Pivot Table\n            </a>\n          </h4><p>When working with a many-to-many relationship, the <code>save</code> method accepts an array of additional intermediate table attributes as its second argument:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">App\\User::find(<span class="hljs-number">1</span>)-&gt;roles()-&gt;save($role, [<span class="hljs-string">\'expires\'</span> =&gt; $expires]);</code></pre>\n  \n          <p><a name="updating-a-record-on-a-pivot-table"></a></p>\n          <h4>\n            <a href="#updating-a-record-on-a-pivot-table">\n              Updating A Record On A Pivot Table\n            </a>\n          </h4><p>If you need to update an existing row in your pivot table, you may use <code>updateExistingPivot</code> method. This method accepts the pivot record foreign key and an array of attributes to update:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span> = App\\User::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-variable">$user</span>-&gt;roles()-&gt;updateExistingPivot(<span class="hljs-variable">$roleId</span>, <span class="hljs-variable">$attributes</span>);</code></pre>\n  <p><a name="touching-parent-timestamps"></a></p>\n\n          <p><a name="touching-parent-timestamps"></a></p>\n          <h2>\n            <a href="#touching-parent-timestamps">\n              Touching Parent Timestamps\n            </a>\n          </h2><p>When a model <code>belongsTo</code> or <code>belongsToMany</code> another model, such as a <code>Comment</code> which belongs to a <code>Post</code>, it is sometimes helpful to update the parent&#39;s timestamp when the child model is updated. For example, when a <code>Comment</code> model is updated, you may want to automatically &quot;touch&quot; the <code>updated_at</code> timestamp of the owning <code>Post</code>. Eloquent makes it easy. Just add a <code>touches</code> property containing the names of the relationships to the child model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Comment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * All of the relationships to be touched.\n     *\n     * <span class="hljs-doctag">@var</span> array\n     */</span>\n    <span class="hljs-keyword">protected</span> $touches = [<span class="hljs-string">\'post\'</span>];\n\n    <span class="hljs-comment">/**\n     * Get the post that the comment belongs to.\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">post</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;belongsTo(<span class="hljs-string">\'App\\Post\'</span>);\n    }\n}</span></code></pre>\n  <p>Now, when you update a <code>Comment</code>, the owning <code>Post</code> will have its <code>updated_at</code> column updated as well, making it more convenient to know when to invalidate a cache of the <code>Post</code> model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-keyword">comment</span> = App\\<span class="hljs-keyword">Comment</span>::find(<span class="hljs-number">1</span>);\n\n$<span class="hljs-keyword">comment</span>-&gt;<span class="hljs-built_in">text</span> = <span class="hljs-string">\'Edit to this comment!\'</span>;\n\n$<span class="hljs-keyword">comment</span>-&gt;<span class="hljs-keyword">save</span>();</code></pre>\n  '},"9f07":function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="laravel-scout"></a></p>\n          <h1>\n            <a href="#laravel-scout">\n              Laravel Scout\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#installation">Installation</a><ul>\n<li><a href="#queueing">Queueing</a></li>\n<li><a href="#driver-prerequisites">Driver Prerequisites</a></li>\n</ul>\n</li>\n<li><a href="#configuration">Configuration</a><ul>\n<li><a href="#configuring-model-indexes">Configuring Model Indexes</a></li>\n<li><a href="#configuring-searchable-data">Configuring Searchable Data</a></li>\n<li><a href="#configuring-the-model-id">Configuring The Model ID</a></li>\n</ul>\n</li>\n<li><a href="#indexing">Indexing</a><ul>\n<li><a href="#batch-import">Batch Import</a></li>\n<li><a href="#adding-records">Adding Records</a></li>\n<li><a href="#updating-records">Updating Records</a></li>\n<li><a href="#removing-records">Removing Records</a></li>\n<li><a href="#pausing-indexing">Pausing Indexing</a></li>\n<li><a href="#conditionally-searchable-model-instances">Conditionally Searchable Model Instances</a></li>\n</ul>\n</li>\n<li><a href="#searching">Searching</a><ul>\n<li><a href="#where-clauses">Where Clauses</a></li>\n<li><a href="#pagination">Pagination</a></li>\n<li><a href="#soft-deleting">Soft Deleting</a></li>\n<li><a href="#customizing-engine-searches">Customizing Engine Searches</a></li>\n</ul>\n</li>\n<li><a href="#custom-engines">Custom Engines</a></li>\n<li><a href="#builder-macros">Builder Macros</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Laravel Scout provides a simple, driver based solution for adding full-text search to your <router-link to="/docs/{{version}}/eloquent">Eloquent models</router-link>. Using model observers, Scout will automatically keep your search indexes in sync with your Eloquent records.</p>\n<p>Currently, Scout ships with an <router-link to="https://www.algolia.com/">Algolia</router-link> driver; however, writing custom drivers is simple and you are free to extend Scout with your own search implementations.</p>\n<p><a name="installation"></a></p>\n\n          <p><a name="installation"></a></p>\n          <h2>\n            <a href="#installation">\n              Installation\n            </a>\n          </h2><p>First, install Scout via the Composer package manager:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">composer</span> <span class="hljs-meta">require</span> laravel/scout</code></pre>\n  <p>After installing Scout, you should publish the Scout configuration using the <code>vendor:publish</code> Artisan command. This command will publish the <code>scout.php</code> configuration file to your <code>config</code> directory:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan <span class="hljs-string">vendor:</span>publish --provider=<span class="hljs-string">"Laravel\\Scout\\ScoutServiceProvider"</span></code></pre>\n  <p>Finally, add the <code>Laravel\\Scout\\Searchable</code> trait to the model you would like to make searchable. This trait will register a model observer to keep the model in sync with your search driver:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Scout</span>\\<span class="hljs-title">Searchable</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">Searchable</span>;\n}</span></code></pre>\n  <p><a name="queueing"></a></p>\n\n          <p><a name="queueing"></a></p>\n          <h3>\n            <a href="#queueing">\n              Queueing\n            </a>\n          </h3><p>While not strictly required to use Scout, you should strongly consider configuring a <router-link to="/docs/{{version}}/queues">queue driver</router-link> before using the library. Running a queue worker will allow Scout to queue all operations that sync your model information to your search indexes, providing much better response times for your application&#39;s web interface.</p>\n<p>Once you have configured a queue driver, set the value of the <code>queue</code> option in your <code>config/scout.php</code> configuration file to <code>true</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'queue\'</span> =&gt; <span class="hljs-keyword">true</span>,</code></pre>\n  <p><a name="driver-prerequisites"></a></p>\n\n          <p><a name="driver-prerequisites"></a></p>\n          <h3>\n            <a href="#driver-prerequisites">\n              Driver Prerequisites\n            </a>\n          </h3>\n          <p><a name="algolia"></a></p>\n          <h4>\n            <a href="#algolia">\n              Algolia\n            </a>\n          </h4><p>When using the Algolia driver, you should configure your Algolia <code>id</code> and <code>secret</code> credentials in your <code>config/scout.php</code> configuration file. Once your credentials have been configured, you will also need to install the Algolia PHP SDK via the Composer package manager:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">composer require algolia/algoliasearch-client-php:^<span class="hljs-number">2.2</span></code></pre>\n  <p><a name="configuration"></a></p>\n\n          <p><a name="configuration"></a></p>\n          <h2>\n            <a href="#configuration">\n              Configuration\n            </a>\n          </h2><p><a name="configuring-model-indexes"></a></p>\n\n          <p><a name="configuring-model-indexes"></a></p>\n          <h3>\n            <a href="#configuring-model-indexes">\n              Configuring Model Indexes\n            </a>\n          </h3><p>Each Eloquent model is synced with a given search &quot;index&quot;, which contains all of the searchable records for that model. In other words, you can think of each index like a MySQL table. By default, each model will be persisted to an index matching the model&#39;s typical &quot;table&quot; name. Typically, this is the plural form of the model name; however, you are free to customize the model&#39;s index by overriding the <code>searchableAs</code> method on the model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Scout</span>\\<span class="hljs-title">Searchable</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">Searchable</span>;\n\n    <span class="hljs-comment">/**\n     * Get the index name for the model.\n     *\n     * <span class="hljs-doctag">@return</span> string\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">searchableAs</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-string">\'posts_index\'</span>;\n    }\n}</span></code></pre>\n  <p><a name="configuring-searchable-data"></a></p>\n\n          <p><a name="configuring-searchable-data"></a></p>\n          <h3>\n            <a href="#configuring-searchable-data">\n              Configuring Searchable Data\n            </a>\n          </h3><p>By default, the entire <code>toArray</code> form of a given model will be persisted to its search index. If you would like to customize the data that is synchronized to the search index, you may override the <code>toSearchableArray</code> method on the model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Scout</span>\\<span class="hljs-title">Searchable</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">Searchable</span>;\n\n    <span class="hljs-comment">/**\n     * Get the indexable data array for the model.\n     *\n     * <span class="hljs-doctag">@return</span> array\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toSearchableArray</span><span class="hljs-params">()</span>\n    </span>{\n        $array = <span class="hljs-keyword">$this</span>-&gt;toArray();\n\n        <span class="hljs-comment">// Customize array...</span>\n\n        <span class="hljs-keyword">return</span> $array;\n    }\n}</span></code></pre>\n  <p><a name="configuring-the-model-id"></a></p>\n\n          <p><a name="configuring-the-model-id"></a></p>\n          <h3>\n            <a href="#configuring-the-model-id">\n              Configuring The Model ID\n            </a>\n          </h3><p>By default, Scout will use the primary key of the model as the unique ID stored in the search index. If you need to customize this behavior, you may override the <code>getScoutKey</code> and the <code>getScoutKeyName</code> methods on the model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Scout</span>\\<span class="hljs-title">Searchable</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">Searchable</span>;\n\n    <span class="hljs-comment">/**\n     * Get the value used to index the model.\n     *\n     * <span class="hljs-doctag">@return</span> mixed\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getScoutKey</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;email;\n    }\n\n     <span class="hljs-comment">/**\n     * Get the key name used to index the model.\n     *\n     * <span class="hljs-doctag">@return</span> mixed\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getScoutKeyName</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-string">\'email\'</span>;\n    }\n}</span></code></pre>\n  <p><a name="indexing"></a></p>\n\n          <p><a name="indexing"></a></p>\n          <h2>\n            <a href="#indexing">\n              Indexing\n            </a>\n          </h2><p><a name="batch-import"></a></p>\n\n          <p><a name="batch-import"></a></p>\n          <h3>\n            <a href="#batch-import">\n              Batch Import\n            </a>\n          </h3><p>If you are installing Scout into an existing project, you may already have database records you need to import into your search driver. Scout provides an <code>import</code> Artisan command that you may use to import all of your existing records into your search indexes:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan <span class="hljs-string">scout:</span><span class="hljs-keyword">import</span> <span class="hljs-string">"App\\Post"</span></code></pre>\n  <p>The <code>flush</code> command may be used to remove all of a model&#39;s records from your search indexes:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan scout:<span class="hljs-built_in">flush</span> <span class="hljs-string">"App\\Post"</span></code></pre>\n  <p><a name="adding-records"></a></p>\n\n          <p><a name="adding-records"></a></p>\n          <h3>\n            <a href="#adding-records">\n              Adding Records\n            </a>\n          </h3><p>Once you have added the <code>Laravel\\Scout\\Searchable</code> trait to a model, all you need to do is <code>save</code> a model instance and it will automatically be added to your search index. If you have configured Scout to <a href="#queueing">use queues</a> this operation will be performed in the background by your queue worker:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$order</span> = new <span class="hljs-keyword">App</span>\\<span class="hljs-keyword">Order</span>;\n\n<span class="hljs-comment">// ...</span>\n\n<span class="hljs-variable">$order</span>-&gt;<span class="hljs-keyword">save</span>();</code></pre>\n  \n          <p><a name="adding-via-query"></a></p>\n          <h4>\n            <a href="#adding-via-query">\n              Adding Via Query\n            </a>\n          </h4><p>If you would like to add a collection of models to your search index via an Eloquent query, you may chain the <code>searchable</code> method onto an Eloquent query. The <code>searchable</code> method will <router-link to="/docs/{{version}}/eloquent#chunking-results">chunk the results</router-link> of the query and add the records to your search index. Again, if you have configured Scout to use queues, all of the chunks will be added in the background by your queue workers:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Adding via Eloquent query...</span>\nApp\\Order::where(<span class="hljs-string">\'price\'</span>, <span class="hljs-string">\'&gt;\'</span>, <span class="hljs-number">100</span>)-&gt;searchable();\n\n<span class="hljs-comment">// You may also add records via relationships...</span>\n$user-&gt;orders()-&gt;searchable();\n\n<span class="hljs-comment">// You may also add records via collections...</span>\n$orders-&gt;searchable();</code></pre>\n  <p>The <code>searchable</code> method can be considered an &quot;upsert&quot; operation. In other words, if the model record is already in your index, it will be updated. If it does not exist in the search index, it will be added to the index.</p>\n<p><a name="updating-records"></a></p>\n\n          <p><a name="updating-records"></a></p>\n          <h3>\n            <a href="#updating-records">\n              Updating Records\n            </a>\n          </h3><p>To update a searchable model, you only need to update the model instance&#39;s properties and <code>save</code> the model to your database. Scout will automatically persist the changes to your search index:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$order</span> = <span class="hljs-keyword">App</span>\\<span class="hljs-keyword">Order</span>::find(1);\n\n<span class="hljs-comment">// Update the order...</span>\n\n<span class="hljs-variable">$order</span>-&gt;<span class="hljs-keyword">save</span>();</code></pre>\n  <p>You may also use the <code>searchable</code> method on an Eloquent query to update a collection of models. If the models do not exist in your search index, they will be created:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Updating via Eloquent query...</span>\nApp\\Order::where(<span class="hljs-string">\'price\'</span>, <span class="hljs-string">\'&gt;\'</span>, <span class="hljs-number">100</span>)-&gt;searchable();\n\n<span class="hljs-comment">// You may also update via relationships...</span>\n$user-&gt;orders()-&gt;searchable();\n\n<span class="hljs-comment">// You may also update via collections...</span>\n$orders-&gt;searchable();</code></pre>\n  <p><a name="removing-records"></a></p>\n\n          <p><a name="removing-records"></a></p>\n          <h3>\n            <a href="#removing-records">\n              Removing Records\n            </a>\n          </h3><p>To remove a record from your index, <code>delete</code> the model from the database. This form of removal is even compatible with <router-link to="/docs/{{version}}/eloquent#soft-deleting">soft deleted</router-link> models:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$order</span> = App\\Order::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-variable">$order</span>-&gt;delete();</code></pre>\n  <p>If you do not want to retrieve the model before deleting the record, you may use the <code>unsearchable</code> method on an Eloquent query instance or collection:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Removing via Eloquent query...</span>\nApp\\Order::where(<span class="hljs-string">\'price\'</span>, <span class="hljs-string">\'&gt;\'</span>, <span class="hljs-number">100</span>)-&gt;unsearchable();\n\n<span class="hljs-comment">// You may also remove via relationships...</span>\n$user-&gt;orders()-&gt;unsearchable();\n\n<span class="hljs-comment">// You may also remove via collections...</span>\n$orders-&gt;unsearchable();</code></pre>\n  <p><a name="pausing-indexing"></a></p>\n\n          <p><a name="pausing-indexing"></a></p>\n          <h3>\n            <a href="#pausing-indexing">\n              Pausing Indexing\n            </a>\n          </h3><p>Sometimes you may need to perform a batch of Eloquent operations on a model without syncing the model data to your search index. You may do this using the <code>withoutSyncingToSearch</code> method. This method accepts a single callback which will be immediately executed. Any model operations that occur within the callback will not be synced to the model&#39;s index:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">App\\Order::withoutSyncingToSearch(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">// Perform model actions...</span>\n});</code></pre>\n  <p><a name="conditionally-searchable-model-instances"></a></p>\n\n          <p><a name="conditionally-searchable-model-instances"></a></p>\n          <h3>\n            <a href="#conditionally-searchable-model-instances">\n              Conditionally Searchable Model Instances\n            </a>\n          </h3><p>Sometimes you may need to only make a model searchable under certain conditions. For example, imagine you have <code>App\\Post</code> model that may be in one of two states: &quot;draft&quot; and &quot;published&quot;. You may only want to allow &quot;published&quot; posts to be searchable. To accomplish this, you may define a <code>shouldBeSearchable</code> method on your model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shouldBeSearchable</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;isPublished();\n}</code></pre>\n  <p>The <code>shouldBeSearchable</code> method is only applied when manipulating models through the <code>save</code> method, queries, or relationships. Directly making models or collections searchable using the <code>searchable</code> method will override the result of the <code>shouldBeSearchable</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Will respect "shouldBeSearchable"...</span>\nApp\\Order::where(<span class="hljs-string">\'price\'</span>, <span class="hljs-string">\'&gt;\'</span>, <span class="hljs-number">100</span>)-&gt;searchable();\n\n$user-&gt;orders()-&gt;searchable();\n\n$order-&gt;save();\n\n<span class="hljs-comment">// Will override "shouldBeSearchable"...</span>\n$orders-&gt;searchable();\n\n$order-&gt;searchable();</code></pre>\n  <p><a name="searching"></a></p>\n\n          <p><a name="searching"></a></p>\n          <h2>\n            <a href="#searching">\n              Searching\n            </a>\n          </h2><p>You may begin searching a model using the <code>search</code> method. The search method accepts a single string that will be used to search your models. You should then chain the <code>get</code> method onto the search query to retrieve the Eloquent models that match the given search query:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$orders</span> = <span class="hljs-keyword">App</span>\\<span class="hljs-keyword">Order</span>::<span class="hljs-keyword">search</span>(\'Star Trek\')-&gt;<span class="hljs-built_in">get</span>();</code></pre>\n  <p>Since Scout searches return a collection of Eloquent models, you may even return the results directly from a route or controller and they will automatically be converted to JSON:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Request</span>;\n\nRoute::get(<span class="hljs-string">\'/search\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Request $request)</span> </span>{\n    <span class="hljs-keyword">return</span> App\\Order::search($request-&gt;search)-&gt;get();\n});</code></pre>\n  <p>If you would like to get the raw results before they are converted to Eloquent models, you should use the <code>raw</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$orders</span> = App\\Order::search(<span class="hljs-string">\'Star Trek\'</span>)-&gt;raw();</code></pre>\n  <p>Search queries will typically be performed on the index specified by the model&#39;s <a href="#configuring-model-indexes"><code>searchableAs</code></a> method. However, you may use the <code>within</code> method to specify a custom index that should be searched instead:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$orders</span> = App\\Order::search(<span class="hljs-string">\'Star Trek\'</span>)\n    -&gt;within(<span class="hljs-string">\'tv_shows_popularity_desc\'</span>)\n    -&gt;get();</code></pre>\n  <p><a name="where-clauses"></a></p>\n\n          <p><a name="where-clauses"></a></p>\n          <h3>\n            <a href="#where-clauses">\n              Where Clauses\n            </a>\n          </h3><p>Scout allows you to add simple &quot;where&quot; clauses to your search queries. Currently, these clauses only support basic numeric equality checks, and are primarily useful for scoping search queries by a tenant ID. Since a search index is not a relational database, more advanced &quot;where&quot; clauses are not currently supported:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$orders</span> = App\\Order::search(<span class="hljs-string">\'Star Trek\'</span>)-&gt;where(<span class="hljs-string">\'user_id\'</span>, <span class="hljs-number">1</span>)-&gt;get();</code></pre>\n  <p><a name="pagination"></a></p>\n\n          <p><a name="pagination"></a></p>\n          <h3>\n            <a href="#pagination">\n              Pagination\n            </a>\n          </h3><p>In addition to retrieving a collection of models, you may paginate your search results using the <code>paginate</code> method. This method will return a <code>Paginator</code> instance just as if you had <router-link to="/docs/{{version}}/pagination">paginated a traditional Eloquent query</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$orders</span> = App\\Order::search(<span class="hljs-string">\'Star Trek\'</span>)-&gt;paginate();</code></pre>\n  <p>You may specify how many models to retrieve per page by passing the amount as the first argument to the <code>paginate</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$orders</span> = App\\Order::search(<span class="hljs-string">\'Star Trek\'</span>)-&gt;paginate(<span class="hljs-number">15</span>);</code></pre>\n  <p>Once you have retrieved the results, you may display the results and render the page links using <router-link to="/docs/{{version}}/blade">Blade</router-link> just as if you had paginated a traditional Eloquent query:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">"container"</span>&gt;\n    @<span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$orders</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$order</span>)\n        {{ <span class="hljs-variable">$order</span>-&gt;price }}\n    @endforeach\n&lt;/div&gt;\n\n{{ <span class="hljs-variable">$orders</span>-&gt;links() }}</code></pre>\n  <p><a name="soft-deleting"></a></p>\n\n          <p><a name="soft-deleting"></a></p>\n          <h3>\n            <a href="#soft-deleting">\n              Soft Deleting\n            </a>\n          </h3><p>If your indexed models are <router-link to="/docs/{{version}}/eloquent#soft-deleting">soft deleting</router-link> and you need to search your soft deleted models, set the <code>soft_delete</code> option of the <code>config/scout.php</code> configuration file to <code>true</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'soft_delete\'</span> =&gt; <span class="hljs-keyword">true</span>,</code></pre>\n  <p>When this configuration option is <code>true</code>, Scout will not remove soft deleted models from the search index. Instead, it will set a hidden <code>__soft_deleted</code> attribute on the indexed record. Then, you may use the <code>withTrashed</code> or <code>onlyTrashed</code> methods to retrieve the soft deleted records when searching:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Include trashed records when retrieving results...</span>\n$orders = App\\Order::search(<span class="hljs-string">\'Star Trek\'</span>)-&gt;withTrashed()-&gt;get();\n\n<span class="hljs-comment">// Only include trashed records when retrieving results...</span>\n$orders = App\\Order::search(<span class="hljs-string">\'Star Trek\'</span>)-&gt;onlyTrashed()-&gt;get();</code></pre>\n  <blockquote>\n<p>{tip} When a soft deleted model is permanently deleted using <code>forceDelete</code>, Scout will remove it from the search index automatically.</p>\n</blockquote>\n<p><a name="customizing-engine-searches"></a></p>\n\n          <p><a name="customizing-engine-searches"></a></p>\n          <h3>\n            <a href="#customizing-engine-searches">\n              Customizing Engine Searches\n            </a>\n          </h3><p>If you need to customize the search behavior of an engine you may pass a callback as the second argument to the <code>search</code> method. For example, you could use this callback to add geo-location data to your search options before the search query is passed to Algolia:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Algolia</span>\\<span class="hljs-title">AlgoliaSearch</span>\\<span class="hljs-title">SearchIndex</span>;\n\nApp\\Order::search(<span class="hljs-string">\'Star Trek\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(SearchIndex $algolia, string $query, array $options)</span> </span>{\n    $options[<span class="hljs-string">\'body\'</span>][<span class="hljs-string">\'query\'</span>][<span class="hljs-string">\'bool\'</span>][<span class="hljs-string">\'filter\'</span>][<span class="hljs-string">\'geo_distance\'</span>] = [\n        <span class="hljs-string">\'distance\'</span> =&gt; <span class="hljs-string">\'1000km\'</span>,\n        <span class="hljs-string">\'location\'</span> =&gt; [<span class="hljs-string">\'lat\'</span> =&gt; <span class="hljs-number">36</span>, <span class="hljs-string">\'lon\'</span> =&gt; <span class="hljs-number">111</span>],\n    ];\n\n    <span class="hljs-keyword">return</span> $algolia-&gt;search($query, $options);\n})-&gt;get();</code></pre>\n  <p><a name="custom-engines"></a></p>\n\n          <p><a name="custom-engines"></a></p>\n          <h2>\n            <a href="#custom-engines">\n              Custom Engines\n            </a>\n          </h2>\n          <p><a name="writing-the-engine"></a></p>\n          <h4>\n            <a href="#writing-the-engine">\n              Writing The Engine\n            </a>\n          </h4><p>If one of the built-in Scout search engines doesn&#39;t fit your needs, you may write your own custom engine and register it with Scout. Your engine should extend the <code>Laravel\\Scout\\Engines\\Engine</code> abstract class. This abstract class contains eight methods your custom engine must implement:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Scout</span>\\<span class="hljs-title">Builder</span>;\n\n<span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">($models)</span></span>;\n<span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delete</span><span class="hljs-params">($models)</span></span>;\n<span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">search</span><span class="hljs-params">(Builder $builder)</span></span>;\n<span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">paginate</span><span class="hljs-params">(Builder $builder, $perPage, $page)</span></span>;\n<span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mapIds</span><span class="hljs-params">($results)</span></span>;\n<span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">map</span><span class="hljs-params">(Builder $builder, $results, $model)</span></span>;\n<span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTotalCount</span><span class="hljs-params">($results)</span></span>;\n<span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flush</span><span class="hljs-params">($model)</span></span>;</code></pre>\n  <p>You may find it helpful to review the implementations of these methods on the <code>Laravel\\Scout\\Engines\\AlgoliaEngine</code> class. This class will provide you with a good starting point for learning how to implement each of these methods in your own engine.</p>\n\n          <p><a name="registering-the-engine"></a></p>\n          <h4>\n            <a href="#registering-the-engine">\n              Registering The Engine\n            </a>\n          </h4><p>Once you have written your custom engine, you may register it with Scout using the <code>extend</code> method of the Scout engine manager. You should call the <code>extend</code> method from the <code>boot</code> method of your <code>AppServiceProvider</code> or any other service provider used by your application. For example, if you have written a <code>MySqlSearchEngine</code>, you may register it like so:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Scout</span>\\<span class="hljs-title">EngineManager</span>;\n\n<span class="hljs-comment">/**\n * Bootstrap any application services.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n</span>{\n    resolve(EngineManager::class)-&gt;extend(<span class="hljs-string">\'mysql\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MySqlSearchEngine;\n    });\n}</code></pre>\n  <p>Once your engine has been registered, you may specify it as your default Scout <code>driver</code> in your <code>config/scout.php</code> configuration file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'driver\'</span> =&gt; <span class="hljs-string">\'mysql\'</span>,</code></pre>\n  <p><a name="builder-macros"></a></p>\n\n          <p><a name="builder-macros"></a></p>\n          <h2>\n            <a href="#builder-macros">\n              Builder Macros\n            </a>\n          </h2><p>If you would like to define a custom builder method, you may use the <code>macro</code> method on the <code>Laravel\\Scout\\Builder</code> class. Typically, &quot;macros&quot; should be defined within a <router-link to="/docs/{{version}}/providers">service provider&#39;s</router-link> <code>boot</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Providers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Response</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">ServiceProvider</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Scout</span>\\<span class="hljs-title">Builder</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScoutMacroServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Register the application\'s scout macros.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n    </span>{\n        Builder::macro(<span class="hljs-string">\'count\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n            <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;engine-&gt;getTotalCount(\n                <span class="hljs-keyword">$this</span>-&gt;engine()-&gt;search(<span class="hljs-keyword">$this</span>)\n            );\n        });\n    }\n}</span></code></pre>\n  <p>The <code>macro</code> function accepts a name as its first argument, and a Closure as its second. The macro&#39;s Closure will be executed when calling the macro name from a <code>Laravel\\Scout\\Builder</code> implementation:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">App\\<span class="hljs-keyword">Order</span>::<span class="hljs-keyword">search</span>(<span class="hljs-string">\'Star Trek\'</span>)-&gt;count();</code></pre>\n  '},"9f53":function(s,e,a){"use strict";var n=a("2f4d"),t=a.n(n);t.a},a150:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="laravel-horizon"></a></p>\n          <h1>\n            <a href="#laravel-horizon">\n              Laravel Horizon\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#upgrading">Upgrading Horizon</a></li>\n<li><a href="#installation">Installation</a><ul>\n<li><a href="#configuration">Configuration</a></li>\n<li><a href="#dashboard-authorization">Dashboard Authorization</a></li>\n</ul>\n</li>\n<li><a href="#running-horizon">Running Horizon</a><ul>\n<li><a href="#deploying-horizon">Deploying Horizon</a></li>\n</ul>\n</li>\n<li><a href="#tags">Tags</a></li>\n<li><a href="#notifications">Notifications</a></li>\n<li><a href="#metrics">Metrics</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Horizon provides a beautiful dashboard and code-driven configuration for your Laravel powered Redis queues. Horizon allows you to easily monitor key metrics of your queue system such as job throughput, runtime, and job failures.</p>\n<p>All of your worker configuration is stored in a single, simple configuration file, allowing your configuration to stay in source control where your entire team can collaborate.</p>\n<p align="center">\n<img src="https://res.cloudinary.com/dtfbvvkyp/image/upload/v1537195039/photos/Test.png" width="600" height="481">\n</p>\n\n<p><a name="upgrading"></a></p>\n\n          <p><a name="upgrading-horizon"></a></p>\n          <h2>\n            <a href="#upgrading-horizon">\n              Upgrading Horizon\n            </a>\n          </h2><p>When upgrading to a new major version of Horizon, it&#39;s important that you carefully review <router-link to="https://github.com/laravel/horizon/blob/master/UPGRADE.md">the upgrade guide</router-link>.</p>\n<p>In addition, you should re-publish Horizon&#39;s assets:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">horizon</span><span class="hljs-selector-pseudo">:assets</span></code></pre>\n  <p><a name="installation"></a></p>\n\n          <p><a name="installation"></a></p>\n          <h2>\n            <a href="#installation">\n              Installation\n            </a>\n          </h2><blockquote>\n<p>{note} You should ensure that your queue connection is set to <code>redis</code> in your <code>queue</code> configuration file.</p>\n</blockquote>\n<p>You may use Composer to install Horizon into your Laravel project:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">composer</span> <span class="hljs-meta">require</span> laravel/horizon</code></pre>\n  <p>After installing Horizon, publish its assets using the <code>horizon:install</code> Artisan command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan horizon:<span class="hljs-keyword">install</span></code></pre>\n  <p><a name="configuration"></a></p>\n\n          <p><a name="configuration"></a></p>\n          <h3>\n            <a href="#configuration">\n              Configuration\n            </a>\n          </h3><p>After publishing Horizon&#39;s assets, its primary configuration file will be located at <code>config/horizon.php</code>. This configuration file allows you to configure your worker options and each configuration option includes a description of its purpose, so be sure to thoroughly explore this file.</p>\n<blockquote>\n<p>{note} You should ensure that the <code>environments</code> portion of your <code>horizon</code> configuration file contains an entry for each environment on which you plan to run Horizon.</p>\n</blockquote>\n\n          <p><a name="balance-options"></a></p>\n          <h4>\n            <a href="#balance-options">\n              Balance Options\n            </a>\n          </h4><p>Horizon allows you to choose from three balancing strategies: <code>simple</code>, <code>auto</code>, and <code>false</code>. The <code>simple</code> strategy, which is the configuration file&#39;s default, splits incoming jobs evenly between processes:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'balance\'</span> =&gt; <span class="hljs-string">\'simple\'</span>,</code></pre>\n  <p>The <code>auto</code> strategy adjusts the number of worker processes per queue based on the current workload of the queue. For example, if your <code>notifications</code> queue has 1,000 waiting jobs while your <code>render</code> queue is empty, Horizon will allocate more workers to your <code>notifications</code> queue until it is empty. When the <code>balance</code> option is set to <code>false</code>, the default Laravel behavior will be used, which processes queues in the order they are listed in your configuration.</p>\n<p>When using the <code>auto</code> strategy, you may define the <code>minProcesses</code> and <code>maxProcesses</code> configuration options to control the minimum and maximum number of processes Horizon should scale up and down to:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'environments\'</span> =&gt; [\n    <span class="hljs-string">\'production\'</span> =&gt; [\n        <span class="hljs-string">\'supervisor-1\'</span> =&gt; [\n            <span class="hljs-string">\'connection\'</span> =&gt; <span class="hljs-string">\'redis\'</span>,\n            <span class="hljs-string">\'queue\'</span> =&gt; [<span class="hljs-string">\'default\'</span>],\n            <span class="hljs-string">\'balance\'</span> =&gt; <span class="hljs-string">\'auto\'</span>,\n            <span class="hljs-string">\'minProcesses\'</span> =&gt; <span class="hljs-number">1</span>,\n            <span class="hljs-string">\'maxProcesses\'</span> =&gt; <span class="hljs-number">10</span>,\n            <span class="hljs-string">\'tries\'</span> =&gt; <span class="hljs-number">3</span>,\n        ],\n    ],\n],</code></pre>\n  \n          <p><a name="job-trimming"></a></p>\n          <h4>\n            <a href="#job-trimming">\n              Job Trimming\n            </a>\n          </h4><p>The <code>horizon</code> configuration file allows you to configure how long recent and failed jobs should be persisted (in minutes). By default, recent jobs are kept for one hour while failed jobs are kept for a week:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'trim\'</span> =&gt; [\n    <span class="hljs-string">\'recent\'</span> =&gt; <span class="hljs-number">60</span>,\n    <span class="hljs-string">\'failed\'</span> =&gt; <span class="hljs-number">10080</span>,\n],</code></pre>\n  <p><a name="dashboard-authorization"></a></p>\n\n          <p><a name="dashboard-authorization"></a></p>\n          <h3>\n            <a href="#dashboard-authorization">\n              Dashboard Authorization\n            </a>\n          </h3><p>Horizon exposes a dashboard at <code>/horizon</code>. By default, you will only be able to access this dashboard in the <code>local</code> environment. Within your <code>app/Providers/HorizonServiceProvider.php</code> file, there is a <code>gate</code> method. This authorization gate controls access to Horizon in <strong>non-local</strong> environments. You are free to modify this gate as needed to restrict access to your Horizon installation:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Register the Horizon gate.\n *\n * This gate determines who can access Horizon in non-local environments.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">gate</span><span class="hljs-params">()</span>\n</span>{\n    Gate::define(<span class="hljs-string">\'viewHorizon\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($user)</span> </span>{\n        <span class="hljs-keyword">return</span> in_array($user-&gt;email, [\n            <span class="hljs-string">\'taylor@laravel.com\'</span>,\n        ]);\n    });\n}</code></pre>\n  <blockquote>\n<p>{note} Remember that Laravel injects the <em>authenticated</em> user to the Gate automatically. If your app is providing Horizon security via another method, such as IP restrictions, then your Horizon users may not need to &quot;login&quot;. Therefore, you will need to change <code>function ($user)</code> above to <code>function ($user = null)</code> to force Laravel to not require authentication.</p>\n</blockquote>\n<p><a name="running-horizon"></a></p>\n\n          <p><a name="running-horizon"></a></p>\n          <h2>\n            <a href="#running-horizon">\n              Running Horizon\n            </a>\n          </h2><p>Once you have configured your workers in the <code>config/horizon.php</code> configuration file, you may start Horizon using the <code>horizon</code> Artisan command. This single command will start all of your configured workers:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">php artisan horizon</span></code></pre>\n  <p>You may pause the Horizon process and instruct it to continue processing jobs using the <code>horizon:pause</code> and <code>horizon:continue</code> Artisan commands:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan <span class="hljs-string">horizon:</span>pause\n\nphp artisan <span class="hljs-string">horizon:</span><span class="hljs-keyword">continue</span></code></pre>\n  <p>You may gracefully terminate the master Horizon process on your machine using the <code>horizon:terminate</code> Artisan command. Any jobs that Horizon is currently processing will be completed and then Horizon will exit:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan horizon:<span class="hljs-keyword">terminate</span></code></pre>\n  <p><a name="deploying-horizon"></a></p>\n\n          <p><a name="deploying-horizon"></a></p>\n          <h3>\n            <a href="#deploying-horizon">\n              Deploying Horizon\n            </a>\n          </h3><p>If you are deploying Horizon to a live server, you should configure a process monitor to monitor the <code>php artisan horizon</code> command and restart it if it quits unexpectedly. When deploying fresh code to your server, you will need to instruct the master Horizon process to terminate so it can be restarted by your process monitor and receive your code changes.</p>\n\n          <p><a name="installing-supervisor"></a></p>\n          <h4>\n            <a href="#installing-supervisor">\n              Installing Supervisor\n            </a>\n          </h4><p>Supervisor is a process monitor for the Linux operating system, and will automatically restart your <code>horizon</code> process if it fails. To install Supervisor on Ubuntu, you may use the following command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">sudo apt-<span class="hljs-builtin-name">get</span> install supervisor</code></pre>\n  <blockquote>\n<p>{tip} If configuring Supervisor yourself sounds overwhelming, consider using <router-link to="https://forge.laravel.com">Laravel Forge</router-link>, which will automatically install and configure Supervisor for your Laravel projects.</p>\n</blockquote>\n\n          <p><a name="supervisor-configuration"></a></p>\n          <h4>\n            <a href="#supervisor-configuration">\n              Supervisor Configuration\n            </a>\n          </h4><p>Supervisor configuration files are typically stored in the <code>/etc/supervisor/conf.d</code> directory. Within this directory, you may create any number of configuration files that instruct supervisor how your processes should be monitored. For example, let&#39;s create a <code>horizon.conf</code> file that starts and monitors a <code>horizon</code> process:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-section">[program:horizon]</span>\n<span class="hljs-attr">process_name</span>=%(program_name)s\n<span class="hljs-attr">command</span>=php /home/forge/app.com/artisan horizon\n<span class="hljs-attr">autostart</span>=<span class="hljs-literal">true</span>\n<span class="hljs-attr">autorestart</span>=<span class="hljs-literal">true</span>\n<span class="hljs-attr">user</span>=forge\n<span class="hljs-attr">redirect_stderr</span>=<span class="hljs-literal">true</span>\n<span class="hljs-attr">stdout_logfile</span>=/home/forge/app.com/horizon.log</code></pre>\n  \n          <p><a name="starting-supervisor"></a></p>\n          <h4>\n            <a href="#starting-supervisor">\n              Starting Supervisor\n            </a>\n          </h4><p>Once the configuration file has been created, you may update the Supervisor configuration and start the processes using the following commands:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">sudo supervisorctl reread\n\nsudo supervisorctl <span class="hljs-keyword">update</span>\n\nsudo supervisorctl <span class="hljs-keyword">start</span> horizon</code></pre>\n  <p>For more information on Supervisor, consult the <router-link to="http://supervisord.org/index.html">Supervisor documentation</router-link>.</p>\n<p><a name="tags"></a></p>\n\n          <p><a name="tags"></a></p>\n          <h2>\n            <a href="#tags">\n              Tags\n            </a>\n          </h2><p>Horizon allows you to assign “tags” to jobs, including mailables, event broadcasts, notifications, and queued event listeners. In fact, Horizon will intelligently and automatically tag most jobs depending on the Eloquent models that are attached to the job. For example, take a look at the following job:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Jobs</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Video</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Bus</span>\\<span class="hljs-title">Queueable</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">Queue</span>\\<span class="hljs-title">ShouldQueue</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Bus</span>\\<span class="hljs-title">Dispatchable</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Queue</span>\\<span class="hljs-title">InteractsWithQueue</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Queue</span>\\<span class="hljs-title">SerializesModels</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RenderVideo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ShouldQueue</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">Dispatchable</span>, <span class="hljs-title">InteractsWithQueue</span>, <span class="hljs-title">Queueable</span>, <span class="hljs-title">SerializesModels</span>;\n\n    <span class="hljs-comment">/**\n     * The video instance.\n     *\n     * <span class="hljs-doctag">@var</span> \\App\\Video\n     */</span>\n    <span class="hljs-keyword">public</span> $video;\n\n    <span class="hljs-comment">/**\n     * Create a new job instance.\n     *\n     * <span class="hljs-doctag">@param</span>  \\App\\Video  $video\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(Video $video)</span>\n    </span>{\n        <span class="hljs-keyword">$this</span>-&gt;video = $video;\n    }\n\n    <span class="hljs-comment">/**\n     * Execute the job.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-comment">//</span>\n    }\n}</span></code></pre>\n  <p>If this job is queued with an <code>App\\Video</code> instance that has an <code>id</code> of <code>1</code>, it will automatically receive the tag <code>App\\Video:1</code>. This is because Horizon will examine the job&#39;s properties for any Eloquent models. If Eloquent models are found, Horizon will intelligently tag the job using the model&#39;s class name and primary key:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$video</span> = App\\Video::find(<span class="hljs-number">1</span>);\n\nApp\\Jobs\\RenderVideo::dispatch(<span class="hljs-variable">$video</span>);</code></pre>\n  \n          <p><a name="manually-tagging"></a></p>\n          <h4>\n            <a href="#manually-tagging">\n              Manually Tagging\n            </a>\n          </h4><p>If you would like to manually define the tags for one of your queueable objects, you may define a <code>tags</code> method on the class:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RenderVideo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ShouldQueue</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Get the tags that should be assigned to the job.\n     *\n     * <span class="hljs-doctag">@return</span> array\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tags</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> [<span class="hljs-string">\'render\'</span>, <span class="hljs-string">\'video:\'</span>.<span class="hljs-keyword">$this</span>-&gt;video-&gt;id];\n    }\n}</code></pre>\n  <p><a name="notifications"></a></p>\n\n          <p><a name="notifications"></a></p>\n          <h2>\n            <a href="#notifications">\n              Notifications\n            </a>\n          </h2><blockquote>\n<p><strong>Note:</strong> When configuring Horizon to send Slack or SMS notifications, you should review the <router-link to="/docs/{{version}}/notifications">prerequisites for the relevant notification driver</router-link>.</p>\n</blockquote>\n<p>If you would like to be notified when one of your queues has a long wait time, you may use the <code>Horizon::routeMailNotificationsTo</code>, <code>Horizon::routeSlackNotificationsTo</code>, and <code>Horizon::routeSmsNotificationsTo</code> methods. You may call these methods from your application&#39;s <code>HorizonServiceProvider</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Horizon::route<span class="hljs-constructor">MailNotificationsTo(\'<span class="hljs-params">example</span>@<span class="hljs-params">example</span>.<span class="hljs-params">com</span>\')</span>;\nHorizon::route<span class="hljs-constructor">SlackNotificationsTo(\'<span class="hljs-params">slack</span>-<span class="hljs-params">webhook</span>-<span class="hljs-params">url</span>\', \'#<span class="hljs-params">channel</span>\')</span>;\nHorizon::route<span class="hljs-constructor">SmsNotificationsTo(\'15556667777\')</span>;</code></pre>\n  \n          <p><a name="configuring-notification-wait-time-thresholds"></a></p>\n          <h4>\n            <a href="#configuring-notification-wait-time-thresholds">\n              Configuring Notification Wait Time Thresholds\n            </a>\n          </h4><p>You may configure how many seconds are considered a &quot;long wait&quot; within your <code>config/horizon.php</code> configuration file. The <code>waits</code> configuration option within this file allows you to control the long wait threshold for each connection / queue combination:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'waits\'</span> =&gt; [\n    <span class="hljs-symbol">\'redis</span>:default\' =&gt; <span class="hljs-number">60</span>,\n],</code></pre>\n  <p><a name="metrics"></a></p>\n\n          <p><a name="metrics"></a></p>\n          <h2>\n            <a href="#metrics">\n              Metrics\n            </a>\n          </h2><p>Horizon includes a metrics dashboard which provides information on your job and queue wait times and throughput. In order to populate this dashboard, you should configure Horizon&#39;s <code>snapshot</code> Artisan command to run every five minutes via your application&#39;s <router-link to="/docs/{{version}}/scheduling">scheduler</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Define the application\'s command schedule.\n *\n * <span class="hljs-doctag">@param</span>  \\Illuminate\\Console\\Scheduling\\Schedule  $schedule\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">schedule</span><span class="hljs-params">(Schedule $schedule)</span>\n</span>{\n    $schedule-&gt;command(<span class="hljs-string">\'horizon:snapshot\'</span>)-&gt;everyFiveMinutes();\n}</code></pre>\n  '},a367:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="testing-getting-started"></a></p>\n          <h1>\n            <a href="#testing-getting-started">\n              Testing: Getting Started\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#environment">Environment</a></li>\n<li><a href="#creating-and-running-tests">Creating &amp; Running Tests</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Laravel is built with testing in mind. In fact, support for testing with PHPUnit is included out of the box and a <code>phpunit.xml</code> file is already set up for your application. The framework also ships with convenient helper methods that allow you to expressively test your applications.</p>\n<p>By default, your application&#39;s <code>tests</code> directory contains two directories: <code>Feature</code> and <code>Unit</code>. Unit tests are tests that focus on a very small, isolated portion of your code. In fact, most unit tests probably focus on a single method. Feature tests may test a larger portion of your code, including how several objects interact with each other or even a full HTTP request to a JSON endpoint.</p>\n<p>An <code>ExampleTest.php</code> file is provided in both the <code>Feature</code> and <code>Unit</code> test directories. After installing a new Laravel application, run <code>phpunit</code> on the command line to run your tests.</p>\n<p><a name="environment"></a></p>\n\n          <p><a name="environment"></a></p>\n          <h2>\n            <a href="#environment">\n              Environment\n            </a>\n          </h2><p>When running tests via <code>phpunit</code>, Laravel will automatically set the configuration environment to <code>testing</code> because of the environment variables defined in the <code>phpunit.xml</code> file. Laravel also automatically configures the session and cache to the <code>array</code> driver while testing, meaning no session or cache data will be persisted while testing.</p>\n<p>You are free to define other testing environment configuration values as necessary. The <code>testing</code> environment variables may be configured in the <code>phpunit.xml</code> file, but make sure to clear your configuration cache using the <code>config:clear</code> Artisan command before running your tests!</p>\n<p>In addition, you may create a <code>.env.testing</code> file in the root of your project. This file will override the <code>.env</code> file when running PHPUnit tests or executing Artisan commands with the <code>--env=testing</code> option.</p>\n<p><a name="creating-and-running-tests"></a></p>\n\n          <p><a name="creating-amp-running-tests"></a></p>\n          <h2>\n            <a href="#creating-amp-running-tests">\n              Creating &amp; Running Tests\n            </a>\n          </h2><p>To create a new test case, use the <code>make:test</code> Artisan command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">// <span class="hljs-keyword">Create</span> a <span class="hljs-keyword">test</span> <span class="hljs-keyword">in</span> the Feature directory...\nphp artisan make:<span class="hljs-keyword">test</span> UserTest\n\n// <span class="hljs-keyword">Create</span> a <span class="hljs-keyword">test</span> <span class="hljs-keyword">in</span> the Unit directory...\nphp artisan make:<span class="hljs-keyword">test</span> UserTest <span class="hljs-comment">--unit</span></code></pre>\n  <p>Once the test has been generated, you may define test methods as you normally would using PHPUnit. To run your tests, execute the <code>phpunit</code> command from your terminal:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">Tests</span>\\<span class="hljs-title">Unit</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">PHPUnit</span>\\<span class="hljs-title">Framework</span>\\<span class="hljs-title">TestCase</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExampleTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span>\n</span>{\n    <span class="hljs-comment">/**\n     * A basic test example.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testBasicTest</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">$this</span>-&gt;assertTrue(<span class="hljs-keyword">true</span>);\n    }\n}</span></code></pre>\n  <blockquote>\n<p>{note} If you define your own <code>setUp</code> / <code>tearDown</code> methods within a test class, be sure to call the respective <code>parent::setUp()</code> / <code>parent::tearDown()</code> methods on the parent class.</p>\n</blockquote>\n'},aca0:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="api-authentication"></a></p>\n          <h1>\n            <a href="#api-authentication">\n              API Authentication\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#configuration">Configuration</a><ul>\n<li><a href="#database-preparation">Database Preparation</a></li>\n</ul>\n</li>\n<li><a href="#generating-tokens">Generating Tokens</a><ul>\n<li><a href="#hashing-tokens">Hashing Tokens</a></li>\n</ul>\n</li>\n<li><a href="#protecting-routes">Protecting Routes</a></li>\n<li><a href="#passing-tokens-in-requests">Passing Tokens In Requests</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>By default, Laravel ships with a simple solution to API authentication via a random token assigned to each user of your application. In your <code>config/auth.php</code> configuration file, an <code>api</code> guard is already defined and utilizes a <code>token</code> driver. This driver is responsible for inspecting the API token on the incoming request and verifying that it matches the user&#39;s assigned token in the database.</p>\n<blockquote>\n<p><strong>Note:</strong> While Laravel ships with a simple, token based authentication guard, we strongly recommend you consider using <router-link to="/docs/{{version}}/passport">Laravel Passport</router-link> for robust, production applications that offer API authentication.</p>\n</blockquote>\n<p><a name="configuration"></a></p>\n\n          <p><a name="configuration"></a></p>\n          <h2>\n            <a href="#configuration">\n              Configuration\n            </a>\n          </h2><p><a name="database-preparation"></a></p>\n\n          <p><a name="database-preparation"></a></p>\n          <h3>\n            <a href="#database-preparation">\n              Database Preparation\n            </a>\n          </h3><p>Before using the <code>token</code> driver, you will need to <router-link to="/docs/{{version}}/migrations">create a migration</router-link> which adds an <code>api_token</code> column to your <code>users</code> table:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Schema::table(<span class="hljs-string">\'users\'</span>, <span class="hljs-keyword">function</span> ($table) {\n    $table-&gt;string<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'api_token\'</span>, <span class="hljs-number">80</span>)</span>-&gt;</span>after<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'password\'</span>)</span>\n                        -&gt;</span>unique<span class="hljs-function"><span class="hljs-params">()</span>\n                        -&gt;</span>nullable<span class="hljs-function"><span class="hljs-params">()</span>\n                        -&gt;</span><span class="hljs-keyword">default</span>(<span class="hljs-literal">null</span>);\n});</code></pre>\n  <p>Once the migration has been created, run the <code>migrate</code> Artisan command.</p>\n<blockquote>\n<p>{tip} If you choose to use a different column name, be sure to update your API&#39;s <code>storage_key</code> configuration option within the <code>config/auth.php</code> configuration file.</p>\n</blockquote>\n<p><a name="generating-tokens"></a></p>\n\n          <p><a name="generating-tokens"></a></p>\n          <h2>\n            <a href="#generating-tokens">\n              Generating Tokens\n            </a>\n          </h2><p>Once the <code>api_token</code> column has been added to your <code>users</code> table, you are ready to assign random API tokens to each user that registers with your application. You should assign these tokens when a <code>User</code> model is created for the user during registration. When using the <router-link to="/docs/{{version}}/authentication#authentication-quickstart">authentication scaffolding</router-link> provided by the <code>laravel/ui</code> Composer package, this may be done in the <code>create</code> method of the <code>RegisterController</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Hash</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Str</span>;\n\n<span class="hljs-comment">/**\n * Create a new user instance after a valid registration.\n *\n * <span class="hljs-doctag">@param</span>  array  $data\n * <span class="hljs-doctag">@return</span> \\App\\User\n */</span>\n<span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">(array $data)</span>\n</span>{\n    <span class="hljs-keyword">return</span> User::forceCreate([\n        <span class="hljs-string">\'name\'</span> =&gt; $data[<span class="hljs-string">\'name\'</span>],\n        <span class="hljs-string">\'email\'</span> =&gt; $data[<span class="hljs-string">\'email\'</span>],\n        <span class="hljs-string">\'password\'</span> =&gt; Hash::make($data[<span class="hljs-string">\'password\'</span>]),\n        <span class="hljs-string">\'api_token\'</span> =&gt; Str::random(<span class="hljs-number">80</span>),\n    ]);\n}</code></pre>\n  <p><a name="hashing-tokens"></a></p>\n\n          <p><a name="hashing-tokens"></a></p>\n          <h3>\n            <a href="#hashing-tokens">\n              Hashing Tokens\n            </a>\n          </h3><p>In the examples above, API tokens are stored in your database as plain-text. If you would like to hash your API tokens using SHA-256 hashing, you may set the <code>hash</code> option of your <code>api</code> guard configuration to <code>true</code>. The <code>api</code> guard is defined in your <code>config/auth.php</code> configuration file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'api\'</span> =&gt; [\n    <span class="hljs-string">\'driver\'</span> =&gt; <span class="hljs-string">\'token\'</span>,\n    <span class="hljs-string">\'provider\'</span> =&gt; <span class="hljs-string">\'users\'</span>,\n    <span class="hljs-string">\'hash\'</span> =&gt; <span class="hljs-keyword">true</span>,\n],</code></pre>\n  \n          <p><a name="generating-hashed-tokens"></a></p>\n          <h4>\n            <a href="#generating-hashed-tokens">\n              Generating Hashed Tokens\n            </a>\n          </h4><p>When using hashed API tokens, you should not generate your API tokens during user registration. Instead, you will need to implement your own API token management page within your application. This page should allow users to initialize and refresh their API token. When a user makes a request to initialize or refresh their token, you should store a hashed copy of the token in the database, and return the plain-text copy of token to the view / frontend client for one-time display.</p>\n<p>For example, a controller method that initializes / refreshes the token for a given user and returns the plain-text token as a JSON response might look like the following:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Request</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Str</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApiTokenController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Update the authenticated user\'s API token.\n     *\n     * <span class="hljs-doctag">@param</span>  \\Illuminate\\Http\\Request  $request\n     * <span class="hljs-doctag">@return</span> array\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">(Request $request)</span>\n    </span>{\n        $token = Str::random(<span class="hljs-number">80</span>);\n\n        $request-&gt;user()-&gt;forceFill([\n            <span class="hljs-string">\'api_token\'</span> =&gt; hash(<span class="hljs-string">\'sha256\'</span>, $token),\n        ])-&gt;save();\n\n        <span class="hljs-keyword">return</span> [<span class="hljs-string">\'token\'</span> =&gt; $token];\n    }\n}</span></code></pre>\n  <blockquote>\n<p>{tip} Since the API tokens in the example above have sufficient entropy, it is impractical to create &quot;rainbow tables&quot; to lookup the original value of the hashed token. Therefore, slow hashing methods such as <code>bcrypt</code> are unnecessary.</p>\n</blockquote>\n<p><a name="protecting-routes"></a></p>\n\n          <p><a name="protecting-routes"></a></p>\n          <h2>\n            <a href="#protecting-routes">\n              Protecting Routes\n            </a>\n          </h2><p>Laravel includes an <router-link to="/docs/{{version}}/authentication#adding-custom-guards">authentication guard</router-link> that will automatically validate API tokens on incoming requests. You only need to specify the <code>auth:api</code> middleware on any route that requires a valid access token:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Request</span>;\n\nRoute::middleware(<span class="hljs-string">\'auth:api\'</span>)-&gt;get(<span class="hljs-string">\'/user\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Request $request)</span> </span>{\n    <span class="hljs-keyword">return</span> $request-&gt;user();\n});</code></pre>\n  <p><a name="passing-tokens-in-requests"></a></p>\n\n          <p><a name="passing-tokens-in-requests"></a></p>\n          <h2>\n            <a href="#passing-tokens-in-requests">\n              Passing Tokens In Requests\n            </a>\n          </h2><p>There are several ways of passing the API token to your application. We&#39;ll discuss each of these approaches while using the Guzzle HTTP library to demonstrate their usage. You may choose any of these approaches based on the needs of your application.</p>\n\n          <p><a name="query-string"></a></p>\n          <h4>\n            <a href="#query-string">\n              Query String\n            </a>\n          </h4><p>Your application&#39;s API consumers may specify their token as an <code>api_token</code> query string value:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$response</span> = <span class="hljs-variable">$client</span>-&gt;request(<span class="hljs-string">\'GET\'</span>, <span class="hljs-string">\'/api/user?api_token=\'</span>.<span class="hljs-variable">$token</span>);</code></pre>\n  \n          <p><a name="request-payload"></a></p>\n          <h4>\n            <a href="#request-payload">\n              Request Payload\n            </a>\n          </h4><p>Your application&#39;s API consumers may include their API token in the request&#39;s form parameters as an <code>api_token</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response = $client-&gt;request(<span class="hljs-string">\'POST\'</span>, <span class="hljs-string">\'/api/user\'</span>, [\n    <span class="hljs-string">\'headers\'</span> =&gt; [\n        <span class="hljs-string">\'Accept\'</span> =&gt; <span class="hljs-string">\'application/json\'</span>,\n    ],\n    <span class="hljs-string">\'form_params\'</span> =&gt; [\n        <span class="hljs-string">\'api_token\'</span> =&gt; $token,\n    ],\n]);</code></pre>\n  \n          <p><a name="bearer-token"></a></p>\n          <h4>\n            <a href="#bearer-token">\n              Bearer Token\n            </a>\n          </h4><p>Your application&#39;s API consumers may provide their API token as a <code>Bearer</code> token in the <code>Authorization</code> header of the request:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response = $client-&gt;request(<span class="hljs-string">\'POST\'</span>, <span class="hljs-string">\'/api/user\'</span>, [\n    <span class="hljs-string">\'headers\'</span> =&gt; [\n        <span class="hljs-string">\'Authorization\'</span> =&gt; <span class="hljs-string">\'Bearer \'</span>.$token,\n        <span class="hljs-string">\'Accept\'</span> =&gt; <span class="hljs-string">\'application/json\'</span>,\n    ],\n]);</code></pre>\n  '},b115:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="notifications"></a></p>\n          <h1>\n            <a href="#notifications">\n              Notifications\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#creating-notifications">Creating Notifications</a></li>\n<li><a href="#sending-notifications">Sending Notifications</a><ul>\n<li><a href="#using-the-notifiable-trait">Using The Notifiable Trait</a></li>\n<li><a href="#using-the-notification-facade">Using The Notification Facade</a></li>\n<li><a href="#specifying-delivery-channels">Specifying Delivery Channels</a></li>\n<li><a href="#queueing-notifications">Queueing Notifications</a></li>\n<li><a href="#on-demand-notifications">On-Demand Notifications</a></li>\n</ul>\n</li>\n<li><a href="#mail-notifications">Mail Notifications</a><ul>\n<li><a href="#formatting-mail-messages">Formatting Mail Messages</a></li>\n<li><a href="#customizing-the-sender">Customizing The Sender</a></li>\n<li><a href="#customizing-the-recipient">Customizing The Recipient</a></li>\n<li><a href="#customizing-the-subject">Customizing The Subject</a></li>\n<li><a href="#customizing-the-templates">Customizing The Templates</a></li>\n<li><a href="#previewing-mail-notifications">Previewing Mail Notifications</a></li>\n</ul>\n</li>\n<li><a href="#markdown-mail-notifications">Markdown Mail Notifications</a><ul>\n<li><a href="#generating-the-message">Generating The Message</a></li>\n<li><a href="#writing-the-message">Writing The Message</a></li>\n<li><a href="#customizing-the-components">Customizing The Components</a></li>\n</ul>\n</li>\n<li><a href="#database-notifications">Database Notifications</a><ul>\n<li><a href="#database-prerequisites">Prerequisites</a></li>\n<li><a href="#formatting-database-notifications">Formatting Database Notifications</a></li>\n<li><a href="#accessing-the-notifications">Accessing The Notifications</a></li>\n<li><a href="#marking-notifications-as-read">Marking Notifications As Read</a></li>\n</ul>\n</li>\n<li><a href="#broadcast-notifications">Broadcast Notifications</a><ul>\n<li><a href="#broadcast-prerequisites">Prerequisites</a></li>\n<li><a href="#formatting-broadcast-notifications">Formatting Broadcast Notifications</a></li>\n<li><a href="#listening-for-notifications">Listening For Notifications</a></li>\n</ul>\n</li>\n<li><a href="#sms-notifications">SMS Notifications</a><ul>\n<li><a href="#sms-prerequisites">Prerequisites</a></li>\n<li><a href="#formatting-sms-notifications">Formatting SMS Notifications</a></li>\n<li><a href="#formatting-shortcode-notifications">Formatting Shortcode Notifications</a></li>\n<li><a href="#customizing-the-from-number">Customizing The &quot;From&quot; Number</a></li>\n<li><a href="#routing-sms-notifications">Routing SMS Notifications</a></li>\n</ul>\n</li>\n<li><a href="#slack-notifications">Slack Notifications</a><ul>\n<li><a href="#slack-prerequisites">Prerequisites</a></li>\n<li><a href="#formatting-slack-notifications">Formatting Slack Notifications</a></li>\n<li><a href="#slack-attachments">Slack Attachments</a></li>\n<li><a href="#routing-slack-notifications">Routing Slack Notifications</a></li>\n</ul>\n</li>\n<li><a href="#localizing-notifications">Localizing Notifications</a></li>\n<li><a href="#notification-events">Notification Events</a></li>\n<li><a href="#custom-channels">Custom Channels</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>In addition to support for <router-link to="/docs/{{version}}/mail">sending email</router-link>, Laravel provides support for sending notifications across a variety of delivery channels, including mail, SMS (via <router-link to="https://www.nexmo.com/">Nexmo</router-link>), and <router-link to="https://slack.com">Slack</router-link>. Notifications may also be stored in a database so they may be displayed in your web interface.</p>\n<p>Typically, notifications should be short, informational messages that notify users of something that occurred in your application. For example, if you are writing a billing application, you might send an &quot;Invoice Paid&quot; notification to your users via the email and SMS channels.</p>\n<p><a name="creating-notifications"></a></p>\n\n          <p><a name="creating-notifications"></a></p>\n          <h2>\n            <a href="#creating-notifications">\n              Creating Notifications\n            </a>\n          </h2><p>In Laravel, each notification is represented by a single class (typically stored in the <code>app/Notifications</code> directory). Don&#39;t worry if you don&#39;t see this directory in your application, it will be created for you when you run the <code>make:notification</code> Artisan command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">make</span><span class="hljs-selector-pseudo">:notification</span> <span class="hljs-selector-tag">InvoicePaid</span></code></pre>\n  <p>This command will place a fresh notification class in your <code>app/Notifications</code> directory. Each notification class contains a <code>via</code> method and a variable number of message building methods (such as <code>toMail</code> or <code>toDatabase</code>) that convert the notification to a message optimized for that particular channel.</p>\n<p><a name="sending-notifications"></a></p>\n\n          <p><a name="sending-notifications"></a></p>\n          <h2>\n            <a href="#sending-notifications">\n              Sending Notifications\n            </a>\n          </h2><p><a name="using-the-notifiable-trait"></a></p>\n\n          <p><a name="using-the-notifiable-trait"></a></p>\n          <h3>\n            <a href="#using-the-notifiable-trait">\n              Using The Notifiable Trait\n            </a>\n          </h3><p>Notifications may be sent in two ways: using the <code>notify</code> method of the <code>Notifiable</code> trait or using the <code>Notification</code> <router-link to="/docs/{{version}}/facades">facade</router-link>. First, let&#39;s explore using the trait:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Auth</span>\\<span class="hljs-title">User</span> <span class="hljs-title">as</span> <span class="hljs-title">Authenticatable</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Notifications</span>\\<span class="hljs-title">Notifiable</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Authenticatable</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">Notifiable</span>;\n}</span></code></pre>\n  <p>This trait is utilized by the default <code>App\\User</code> model and contains one method that may be used to send notifications: <code>notify</code>. The <code>notify</code> method expects to receive a notification instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Notifications</span>\\<span class="hljs-title">InvoicePaid</span>;\n\n$user-&gt;notify(<span class="hljs-keyword">new</span> InvoicePaid($invoice));</code></pre>\n  <blockquote>\n<p>{tip} Remember, you may use the <code>Illuminate\\Notifications\\Notifiable</code> trait on any of your models. You are not limited to only including it on your <code>User</code> model.</p>\n</blockquote>\n<p><a name="using-the-notification-facade"></a></p>\n\n          <p><a name="using-the-notification-facade"></a></p>\n          <h3>\n            <a href="#using-the-notification-facade">\n              Using The Notification Facade\n            </a>\n          </h3><p>Alternatively, you may send notifications via the <code>Notification</code> <router-link to="/docs/{{version}}/facades">facade</router-link>. This is useful primarily when you need to send a notification to multiple notifiable entities such as a collection of users. To send notifications using the facade, pass all of the notifiable entities and the notification instance to the <code>send</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Notification<span class="hljs-type">::send</span>($users, <span class="hljs-literal">new</span> InvoicePaid($invoice));</code></pre>\n  <p><a name="specifying-delivery-channels"></a></p>\n\n          <p><a name="specifying-delivery-channels"></a></p>\n          <h3>\n            <a href="#specifying-delivery-channels">\n              Specifying Delivery Channels\n            </a>\n          </h3><p>Every notification class has a <code>via</code> method that determines on which channels the notification will be delivered. Notifications may be sent on the <code>mail</code>, <code>database</code>, <code>broadcast</code>, <code>nexmo</code>, and <code>slack</code> channels.</p>\n<blockquote>\n<p>{tip} If you would like to use other delivery channels such as Telegram or Pusher, check out the community driven <router-link to="http://laravel-notification-channels.com">Laravel Notification Channels website</router-link>.</p>\n</blockquote>\n<p>The <code>via</code> method receives a <code>$notifiable</code> instance, which will be an instance of the class to which the notification is being sent. You may use <code>$notifiable</code> to determine which channels the notification should be delivered on:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the notification\'s delivery channels.\n *\n * <span class="hljs-doctag">@param</span>  mixed  $notifiable\n * <span class="hljs-doctag">@return</span> array\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">via</span><span class="hljs-params">($notifiable)</span>\n</span>{\n    <span class="hljs-keyword">return</span> $notifiable-&gt;prefers_sms ? [<span class="hljs-string">\'nexmo\'</span>] : [<span class="hljs-string">\'mail\'</span>, <span class="hljs-string">\'database\'</span>];\n}</code></pre>\n  <p><a name="queueing-notifications"></a></p>\n\n          <p><a name="queueing-notifications"></a></p>\n          <h3>\n            <a href="#queueing-notifications">\n              Queueing Notifications\n            </a>\n          </h3><blockquote>\n<p>{note} Before queueing notifications you should configure your queue and <router-link to="/docs/{{version}}/queues">start a worker</router-link>.</p>\n</blockquote>\n<p>Sending notifications can take time, especially if the channel needs an external API call to deliver the notification. To speed up your application&#39;s response time, let your notification be queued by adding the <code>ShouldQueue</code> interface and <code>Queueable</code> trait to your class. The interface and trait are already imported for all notifications generated using <code>make:notification</code>, so you may immediately add them to your notification class:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Notifications</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Bus</span>\\<span class="hljs-title">Queueable</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">Queue</span>\\<span class="hljs-title">ShouldQueue</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Notifications</span>\\<span class="hljs-title">Notification</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvoicePaid</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Notification</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ShouldQueue</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">Queueable</span>;\n\n    <span class="hljs-comment">// ...</span>\n}</span></code></pre>\n  <p>Once the <code>ShouldQueue</code> interface has been added to your notification, you may send the notification like normal. Laravel will detect the <code>ShouldQueue</code> interface on the class and automatically queue the delivery of the notification:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user-&gt;notify(<span class="hljs-keyword">new</span> InvoicePaid($invoice));</code></pre>\n  <p>If you would like to delay the delivery of the notification, you may chain the <code>delay</code> method onto your notification instantiation:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-keyword">when</span> = now<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>addMinutes(<span class="hljs-number">10</span>);\n\n$user-&gt;notify<span class="hljs-function"><span class="hljs-params">((<span class="hljs-keyword">new</span> InvoicePaid($invoice))-&gt;delay($<span class="hljs-keyword">when</span>))</span>;</span></code></pre>\n  <p><a name="on-demand-notifications"></a></p>\n\n          <p><a name="on-demand-notifications"></a></p>\n          <h3>\n            <a href="#on-demand-notifications">\n              On-Demand Notifications\n            </a>\n          </h3><p>Sometimes you may need to send a notification to someone who is not stored as a &quot;user&quot; of your application. Using the <code>Notification::route</code> method, you may specify ad-hoc notification routing information before sending the notification:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Notification::route<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'mail\'</span>, <span class="hljs-string">\'taylor@example.com\'</span>)</span>\n            -&gt;</span>route<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'nexmo\'</span>, <span class="hljs-string">\'5555555555\'</span>)</span>\n            -&gt;</span>route<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'slack\'</span>, <span class="hljs-string">\'https://hooks.slack.com/services/...\'</span>)</span>\n            -&gt;</span>notify(<span class="hljs-keyword">new</span> InvoicePaid($invoice));</code></pre>\n  <p><a name="mail-notifications"></a></p>\n\n          <p><a name="mail-notifications"></a></p>\n          <h2>\n            <a href="#mail-notifications">\n              Mail Notifications\n            </a>\n          </h2><p><a name="formatting-mail-messages"></a></p>\n\n          <p><a name="formatting-mail-messages"></a></p>\n          <h3>\n            <a href="#formatting-mail-messages">\n              Formatting Mail Messages\n            </a>\n          </h3><p>If a notification supports being sent as an email, you should define a <code>toMail</code> method on the notification class. This method will receive a <code>$notifiable</code> entity and should return a <code>Illuminate\\Notifications\\Messages\\MailMessage</code> instance. Mail messages may contain lines of text as well as a &quot;call to action&quot;. Let&#39;s take a look at an example <code>toMail</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the mail representation of the notification.\n *\n * <span class="hljs-doctag">@param</span>  mixed  $notifiable\n * <span class="hljs-doctag">@return</span> \\Illuminate\\Notifications\\Messages\\MailMessage\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toMail</span><span class="hljs-params">($notifiable)</span>\n</span>{\n    $url = url(<span class="hljs-string">\'/invoice/\'</span>.<span class="hljs-keyword">$this</span>-&gt;invoice-&gt;id);\n\n    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> MailMessage)\n                -&gt;greeting(<span class="hljs-string">\'Hello!\'</span>)\n                -&gt;line(<span class="hljs-string">\'One of your invoices has been paid!\'</span>)\n                -&gt;action(<span class="hljs-string">\'View Invoice\'</span>, $url)\n                -&gt;line(<span class="hljs-string">\'Thank you for using our application!\'</span>);\n}</code></pre>\n  <blockquote>\n<p>{tip} Note we are using <code>$this-&gt;invoice-&gt;id</code> in our <code>toMail</code> method. You may pass any data your notification needs to generate its message into the notification&#39;s constructor.</p>\n</blockquote>\n<p>In this example, we register a greeting, a line of text, a call to action, and then another line of text. These methods provided by the <code>MailMessage</code> object make it simple and fast to format small transactional emails. The mail channel will then translate the message components into a nice, responsive HTML email template with a plain-text counterpart. Here is an example of an email generated by the <code>mail</code> channel:</p>\n<img src="https://laravel.com/img/docs/notification-example.png" width="551" height="596">\n\n<blockquote>\n<p>{tip} When sending mail notifications, be sure to set the <code>name</code> value in your <code>config/app.php</code> configuration file. This value will be used in the header and footer of your mail notification messages.</p>\n</blockquote>\n\n          <p><a name="other-notification-formatting-options"></a></p>\n          <h4>\n            <a href="#other-notification-formatting-options">\n              Other Notification Formatting Options\n            </a>\n          </h4><p>Instead of defining the &quot;lines&quot; of text in the notification class, you may use the <code>view</code> method to specify a custom template that should be used to render the notification email:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the mail representation of the notification.\n *\n * <span class="hljs-doctag">@param</span>  mixed  $notifiable\n * <span class="hljs-doctag">@return</span> \\Illuminate\\Notifications\\Messages\\MailMessage\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toMail</span><span class="hljs-params">($notifiable)</span>\n</span>{\n    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> MailMessage)-&gt;view(\n        <span class="hljs-string">\'emails.name\'</span>, [<span class="hljs-string">\'invoice\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;invoice]\n    );\n}</code></pre>\n  <p>In addition, you may return a <router-link to="/docs/{{version}}/mail">mailable object</router-link> from the <code>toMail</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Mail</span>\\<span class="hljs-title">InvoicePaid</span> <span class="hljs-title">as</span> <span class="hljs-title">Mailable</span>;\n\n<span class="hljs-comment">/**\n * Get the mail representation of the notification.\n *\n * <span class="hljs-doctag">@param</span>  mixed  $notifiable\n * <span class="hljs-doctag">@return</span> Mailable\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toMail</span><span class="hljs-params">($notifiable)</span>\n</span>{\n    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> Mailable(<span class="hljs-keyword">$this</span>-&gt;invoice))-&gt;to(<span class="hljs-keyword">$this</span>-&gt;user-&gt;email);\n}</code></pre>\n  <p><a name="error-messages"></a></p>\n\n          <p><a name="error-messages"></a></p>\n          <h4>\n            <a href="#error-messages">\n              Error Messages\n            </a>\n          </h4><p>Some notifications inform users of errors, such as a failed invoice payment. You may indicate that a mail message is regarding an error by calling the <code>error</code> method when building your message. When using the <code>error</code> method on a mail message, the call to action button will be red instead of blue:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the mail representation of the notification.\n *\n * @param  mixed  $notifiable\n * @return \\Illuminate\\Notifications\\Message\n */</span>\npublic <span class="hljs-keyword">function</span> toMail($notifiable)\n{\n    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">(<span class="hljs-keyword">new</span> MailMessage)</span>\n                -&gt;</span>error<span class="hljs-function"><span class="hljs-params">()</span>\n                -&gt;</span>subject<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'Notification Subject\'</span>)</span>\n                -&gt;</span>line(<span class="hljs-string">\'...\'</span>);\n}</code></pre>\n  <p><a name="customizing-the-sender"></a></p>\n\n          <p><a name="customizing-the-sender"></a></p>\n          <h3>\n            <a href="#customizing-the-sender">\n              Customizing The Sender\n            </a>\n          </h3><p>By default, the email&#39;s sender / from address is defined in the <code>config/mail.php</code> configuration file. However, you may specify the from address for a specific notification using the <code>from</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the mail representation of the notification.\n *\n * <span class="hljs-doctag">@param</span>  mixed  $notifiable\n * <span class="hljs-doctag">@return</span> \\Illuminate\\Notifications\\Messages\\MailMessage\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toMail</span><span class="hljs-params">($notifiable)</span>\n</span>{\n    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> MailMessage)\n                -&gt;from(<span class="hljs-string">\'test@example.com\'</span>, <span class="hljs-string">\'Example\'</span>)\n                -&gt;line(<span class="hljs-string">\'...\'</span>);\n}</code></pre>\n  <p><a name="customizing-the-recipient"></a></p>\n\n          <p><a name="customizing-the-recipient"></a></p>\n          <h3>\n            <a href="#customizing-the-recipient">\n              Customizing The Recipient\n            </a>\n          </h3><p>When sending notifications via the <code>mail</code> channel, the notification system will automatically look for an <code>email</code> property on your notifiable entity. You may customize which email address is used to deliver the notification by defining a <code>routeNotificationForMail</code> method on the entity:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Auth</span>\\<span class="hljs-title">User</span> <span class="hljs-title">as</span> <span class="hljs-title">Authenticatable</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Notifications</span>\\<span class="hljs-title">Notifiable</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Authenticatable</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">Notifiable</span>;\n\n    <span class="hljs-comment">/**\n     * Route notifications for the mail channel.\n     *\n     * <span class="hljs-doctag">@param</span>  \\Illuminate\\Notifications\\Notification  $notification\n     * <span class="hljs-doctag">@return</span> string\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">routeNotificationForMail</span><span class="hljs-params">($notification)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;email_address;\n    }\n}</span></code></pre>\n  <p><a name="customizing-the-subject"></a></p>\n\n          <p><a name="customizing-the-subject"></a></p>\n          <h3>\n            <a href="#customizing-the-subject">\n              Customizing The Subject\n            </a>\n          </h3><p>By default, the email&#39;s subject is the class name of the notification formatted to &quot;title case&quot;. So, if your notification class is named <code>InvoicePaid</code>, the email&#39;s subject will be <code>Invoice Paid</code>. If you would like to specify an explicit subject for the message, you may call the <code>subject</code> method when building your message:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the mail representation of the notification.\n *\n * <span class="hljs-doctag">@param</span>  mixed  $notifiable\n * <span class="hljs-doctag">@return</span> \\Illuminate\\Notifications\\Messages\\MailMessage\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toMail</span><span class="hljs-params">($notifiable)</span>\n</span>{\n    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> MailMessage)\n                -&gt;subject(<span class="hljs-string">\'Notification Subject\'</span>)\n                -&gt;line(<span class="hljs-string">\'...\'</span>);\n}</code></pre>\n  <p><a name="customizing-the-templates"></a></p>\n\n          <p><a name="customizing-the-templates"></a></p>\n          <h3>\n            <a href="#customizing-the-templates">\n              Customizing The Templates\n            </a>\n          </h3><p>You can modify the HTML and plain-text template used by mail notifications by publishing the notification package&#39;s resources. After running this command, the mail notification templates will be located in the <code>resources/views/vendor/notifications</code> directory:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan vendor:publish <span class="hljs-attribute">--tag</span>=laravel-notifications</code></pre>\n  <p><a name="previewing-mail-notifications"></a></p>\n\n          <p><a name="previewing-mail-notifications"></a></p>\n          <h3>\n            <a href="#previewing-mail-notifications">\n              Previewing Mail Notifications\n            </a>\n          </h3><p>When designing a mail notification template, it is convenient to quickly preview the rendered mail message in your browser like a typical Blade template. For this reason, Laravel allows you to return any mail message generated by a mail notification directly from a route Closure or controller. When a <code>MailMessage</code> is returned, it will be rendered and displayed in the browser, allowing you to quickly preview its design without needing to send it to an actual email address:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'mail\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    $invoice = App\\Invoice::find(<span class="hljs-number">1</span>);\n\n    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> App\\Notifications\\InvoicePaid($invoice))\n                -&gt;toMail($invoice-&gt;user);\n});</code></pre>\n  <p><a name="markdown-mail-notifications"></a></p>\n\n          <p><a name="markdown-mail-notifications"></a></p>\n          <h2>\n            <a href="#markdown-mail-notifications">\n              Markdown Mail Notifications\n            </a>\n          </h2><p>Markdown mail notifications allow you to take advantage of the pre-built templates of mail notifications, while giving you more freedom to write longer, customized messages. Since the messages are written in Markdown, Laravel is able to render beautiful, responsive HTML templates for the messages while also automatically generating a plain-text counterpart.</p>\n<p><a name="generating-the-message"></a></p>\n\n          <p><a name="generating-the-message"></a></p>\n          <h3>\n            <a href="#generating-the-message">\n              Generating The Message\n            </a>\n          </h3><p>To generate a notification with a corresponding Markdown template, you may use the <code>--markdown</code> option of the <code>make:notification</code> Artisan command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan make:notification InvoicePaid --markdown=mail<span class="hljs-selector-class">.invoice</span><span class="hljs-selector-class">.paid</span></code></pre>\n  <p>Like all other mail notifications, notifications that use Markdown templates should define a <code>toMail</code> method on their notification class. However, instead of using the <code>line</code> and <code>action</code> methods to construct the notification, use the <code>markdown</code> method to specify the name of the Markdown template that should be used:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the mail representation of the notification.\n *\n * <span class="hljs-doctag">@param</span>  mixed  $notifiable\n * <span class="hljs-doctag">@return</span> \\Illuminate\\Notifications\\Messages\\MailMessage\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toMail</span><span class="hljs-params">($notifiable)</span>\n</span>{\n    $url = url(<span class="hljs-string">\'/invoice/\'</span>.<span class="hljs-keyword">$this</span>-&gt;invoice-&gt;id);\n\n    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> MailMessage)\n                -&gt;subject(<span class="hljs-string">\'Invoice Paid\'</span>)\n                -&gt;markdown(<span class="hljs-string">\'mail.invoice.paid\'</span>, [<span class="hljs-string">\'url\'</span> =&gt; $url]);\n}</code></pre>\n  <p><a name="writing-the-message"></a></p>\n\n          <p><a name="writing-the-message"></a></p>\n          <h3>\n            <a href="#writing-the-message">\n              Writing The Message\n            </a>\n          </h3><p>Markdown mail notifications use a combination of Blade components and Markdown syntax which allow you to easily construct notifications while leveraging Laravel&#39;s pre-crafted notification components:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@component</span>(<span class="hljs-string">\'mail::message\'</span>)\n# Invoice Paid\n\nYour invoice has been paid!\n\n<span class="hljs-variable">@component</span>(<span class="hljs-string">\'mail::button\'</span>, [<span class="hljs-string">\'url\'</span> =&gt; $url])\nView Invoice\n<span class="hljs-variable">@endcomponent</span>\n\nThanks,&lt;br&gt;\n{{ <span class="hljs-selector-tag">config</span>(<span class="hljs-string">\'app.name\'</span>) }}\n@<span class="hljs-selector-tag">endcomponent</span></code></pre>\n  \n          <p><a name="button-component"></a></p>\n          <h4>\n            <a href="#button-component">\n              Button Component\n            </a>\n          </h4><p>The button component renders a centered button link. The component accepts two arguments, a <code>url</code> and an optional <code>color</code>. Supported colors are <code>blue</code>, <code>green</code>, and <code>red</code>. You may add as many button components to a notification as you wish:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@component</span>(<span class="hljs-string">\'mail::button\'</span>, [<span class="hljs-string">\'url\'</span> =&gt; $url, <span class="hljs-string">\'color\'</span> =&gt; <span class="hljs-string">\'green\'</span>])\nView Invoice\n<span class="hljs-variable">@endcomponent</span></code></pre>\n  \n          <p><a name="panel-component"></a></p>\n          <h4>\n            <a href="#panel-component">\n              Panel Component\n            </a>\n          </h4><p>The panel component renders the given block of text in a panel that has a slightly different background color than the rest of the notification. This allows you to draw attention to a given block of text:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@component</span>(<span class="hljs-string">\'mail::panel\'</span>)\nThis is the panel content.\n<span class="hljs-variable">@endcomponent</span></code></pre>\n  \n          <p><a name="table-component"></a></p>\n          <h4>\n            <a href="#table-component">\n              Table Component\n            </a>\n          </h4><p>The table component allows you to transform a Markdown table into an HTML table. The component accepts the Markdown table as its content. Table column alignment is supported using the default Markdown table alignment syntax:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">@component(<span class="hljs-string">\'mail::table\'</span>)\n<span class="hljs-params">| Laravel       |</span> Table         <span class="hljs-params">| Example  |</span>\n<span class="hljs-params">| ------------- |</span><span class="hljs-symbol">:-------------</span><span class="hljs-symbol">:|</span> --------<span class="hljs-symbol">:|</span>\n<span class="hljs-params">| Col 2 is      |</span> Centered      <span class="hljs-params">| $10      |</span>\n<span class="hljs-params">| Col 3 is      |</span> Right-Aligned <span class="hljs-params">| $20      |</span>\n@endcomponent</code></pre>\n  <p><a name="customizing-the-components"></a></p>\n\n          <p><a name="customizing-the-components"></a></p>\n          <h3>\n            <a href="#customizing-the-components">\n              Customizing The Components\n            </a>\n          </h3><p>You may export all of the Markdown notification components to your own application for customization. To export the components, use the <code>vendor:publish</code> Artisan command to publish the <code>laravel-mail</code> asset tag:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan vendor:publish <span class="hljs-attribute">--tag</span>=laravel-mail</code></pre>\n  <p>This command will publish the Markdown mail components to the <code>resources/views/vendor/mail</code> directory. The <code>mail</code> directory will contain an <code>html</code> and a <code>text</code> directory, each containing their respective representations of every available component. You are free to customize these components however you like.</p>\n\n          <p><a name="customizing-the-css"></a></p>\n          <h4>\n            <a href="#customizing-the-css">\n              Customizing The CSS\n            </a>\n          </h4><p>After exporting the components, the <code>resources/views/vendor/mail/html/themes</code> directory will contain a <code>default.css</code> file. You may customize the CSS in this file and your styles will automatically be in-lined within the HTML representations of your Markdown notifications.</p>\n<p>If you would like to build an entirely new theme for Laravel&#39;s Markdown components, you may place a CSS file within the <code>html/themes</code> directory. After naming and saving your CSS file, update the <code>theme</code> option of the <code>mail</code> configuration file to match the name of your new theme.</p>\n<p>To customize the theme for an individual notification, you may call the <code>theme</code> method while building the notification&#39;s mail message. The <code>theme</code> method accepts the name of the theme that should be used when sending the notification:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the mail representation of the notification.\n *\n * <span class="hljs-doctag">@param</span>  mixed  $notifiable\n * <span class="hljs-doctag">@return</span> \\Illuminate\\Notifications\\Messages\\MailMessage\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toMail</span><span class="hljs-params">($notifiable)</span>\n</span>{\n    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> MailMessage)\n                -&gt;theme(<span class="hljs-string">\'invoice\'</span>)\n                -&gt;subject(<span class="hljs-string">\'Invoice Paid\'</span>)\n                -&gt;markdown(<span class="hljs-string">\'mail.invoice.paid\'</span>, [<span class="hljs-string">\'url\'</span> =&gt; $url]);\n}</code></pre>\n  <p><a name="database-notifications"></a></p>\n\n          <p><a name="database-notifications"></a></p>\n          <h2>\n            <a href="#database-notifications">\n              Database Notifications\n            </a>\n          </h2><p><a name="database-prerequisites"></a></p>\n\n          <p><a name="prerequisites"></a></p>\n          <h3>\n            <a href="#prerequisites">\n              Prerequisites\n            </a>\n          </h3><p>The <code>database</code> notification channel stores the notification information in a database table. This table will contain information such as the notification type as well as custom JSON data that describes the notification.</p>\n<p>You can query the table to display the notifications in your application&#39;s user interface. But, before you can do that, you will need to create a database table to hold your notifications. You may use the <code>notifications:table</code> command to generate a migration with the proper table schema:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan notifications:<span class="hljs-keyword">table</span>\n\nphp artisan migrate</code></pre>\n  <p><a name="formatting-database-notifications"></a></p>\n\n          <p><a name="formatting-database-notifications"></a></p>\n          <h3>\n            <a href="#formatting-database-notifications">\n              Formatting Database Notifications\n            </a>\n          </h3><p>If a notification supports being stored in a database table, you should define a <code>toDatabase</code> or <code>toArray</code> method on the notification class. This method will receive a <code>$notifiable</code> entity and should return a plain PHP array. The returned array will be encoded as JSON and stored in the <code>data</code> column of your <code>notifications</code> table. Let&#39;s take a look at an example <code>toArray</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">/**\n * Get the<span class="hljs-built_in"> array </span>representation of the notification.\n *\n * @param  mixed  $notifiable\n * @return<span class="hljs-built_in"> array\n</span> */<span class="hljs-keyword">\npublic</span> function toArray($notifiable)\n{\n   <span class="hljs-built_in"> return </span>[\n        \'invoice_id\' =&gt; $this-&gt;invoice-&gt;id,\n        \'amount\' =&gt; $this-&gt;invoice-&gt;amount,\n    ];\n}</code></pre>\n  \n          <p><a name="-code-todatabase-code-vs-code-toarray-code-"></a></p>\n          <h4>\n            <a href="#-code-todatabase-code-vs-code-toarray-code-">\n              <code>toDatabase</code> Vs. <code>toArray</code>\n            </a>\n          </h4><p>The <code>toArray</code> method is also used by the <code>broadcast</code> channel to determine which data to broadcast to your JavaScript client. If you would like to have two different array representations for the <code>database</code> and <code>broadcast</code> channels, you should define a <code>toDatabase</code> method instead of a <code>toArray</code> method.</p>\n<p><a name="accessing-the-notifications"></a></p>\n\n          <p><a name="accessing-the-notifications"></a></p>\n          <h3>\n            <a href="#accessing-the-notifications">\n              Accessing The Notifications\n            </a>\n          </h3><p>Once notifications are stored in the database, you need a convenient way to access them from your notifiable entities. The <code>Illuminate\\Notifications\\Notifiable</code> trait, which is included on Laravel&#39;s default <code>App\\User</code> model, includes a <code>notifications</code> Eloquent relationship that returns the notifications for the entity. To fetch notifications, you may access this method like any other Eloquent relationship. By default, notifications will be sorted by the <code>created_at</code> timestamp:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user = App\\User::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-keyword">foreach</span> ($user-&gt;notifications <span class="hljs-keyword">as</span> $notification) {\n    <span class="hljs-keyword">echo</span> $notification-&gt;type;\n}</code></pre>\n  <p>If you want to retrieve only the &quot;unread&quot; notifications, you may use the <code>unreadNotifications</code> relationship. Again, these notifications will be sorted by the <code>created_at</code> timestamp:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user = App\\User::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-keyword">foreach</span> ($user-&gt;unreadNotifications <span class="hljs-keyword">as</span> $notification) {\n    <span class="hljs-keyword">echo</span> $notification-&gt;type;\n}</code></pre>\n  <blockquote>\n<p>{tip} To access your notifications from your JavaScript client, you should define a notification controller for your application which returns the notifications for a notifiable entity, such as the current user. You may then make an HTTP request to that controller&#39;s URI from your JavaScript client.</p>\n</blockquote>\n<p><a name="marking-notifications-as-read"></a></p>\n\n          <p><a name="marking-notifications-as-read"></a></p>\n          <h3>\n            <a href="#marking-notifications-as-read">\n              Marking Notifications As Read\n            </a>\n          </h3><p>Typically, you will want to mark a notification as &quot;read&quot; when a user views it. The <code>Illuminate\\Notifications\\Notifiable</code> trait provides a <code>markAsRead</code> method, which updates the <code>read_at</code> column on the notification&#39;s database record:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user = App\\User::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-keyword">foreach</span> ($user-&gt;unreadNotifications <span class="hljs-keyword">as</span> $notification) {\n    $notification-&gt;markAsRead();\n}</code></pre>\n  <p>However, instead of looping through each notification, you may use the <code>markAsRead</code> method directly on a collection of notifications:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-function"><span class="hljs-title">user</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">unreadNotifications</span>-&gt;</span>markAsRead();</code></pre>\n  <p>You may also use a mass-update query to mark all of the notifications as read without retrieving them from the database:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user = App\\User::find(<span class="hljs-number">1</span>);\n\n$user-&gt;unreadNotifications()-&gt;update([<span class="hljs-string">\'read_at\'</span> =&gt; now()]);</code></pre>\n  <p>You may <code>delete</code> the notifications to remove them from the table entirely:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user-&gt;notifications<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span><span class="hljs-keyword">delete</span>();</code></pre>\n  <p><a name="broadcast-notifications"></a></p>\n\n          <p><a name="broadcast-notifications"></a></p>\n          <h2>\n            <a href="#broadcast-notifications">\n              Broadcast Notifications\n            </a>\n          </h2><p><a name="broadcast-prerequisites"></a></p>\n\n          <p><a name="prerequisites"></a></p>\n          <h3>\n            <a href="#prerequisites">\n              Prerequisites\n            </a>\n          </h3><p>Before broadcasting notifications, you should configure and be familiar with Laravel&#39;s <router-link to="/docs/{{version}}/broadcasting">event broadcasting</router-link> services. Event broadcasting provides a way to react to server-side fired Laravel events from your JavaScript client.</p>\n<p><a name="formatting-broadcast-notifications"></a></p>\n\n          <p><a name="formatting-broadcast-notifications"></a></p>\n          <h3>\n            <a href="#formatting-broadcast-notifications">\n              Formatting Broadcast Notifications\n            </a>\n          </h3><p>The <code>broadcast</code> channel broadcasts notifications using Laravel&#39;s <router-link to="/docs/{{version}}/broadcasting">event broadcasting</router-link> services, allowing your JavaScript client to catch notifications in realtime. If a notification supports broadcasting, you can define a <code>toBroadcast</code> method on the notification class. This method will receive a <code>$notifiable</code> entity and should return a <code>BroadcastMessage</code> instance. If the <code>toBroadcast</code> method does not exist, the <code>toArray</code> method will be used to gather the data that should be broadcast. The returned data will be encoded as JSON and broadcast to your JavaScript client. Let&#39;s take a look at an example <code>toBroadcast</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Notifications</span>\\<span class="hljs-title">Messages</span>\\<span class="hljs-title">BroadcastMessage</span>;\n\n<span class="hljs-comment">/**\n * Get the broadcastable representation of the notification.\n *\n * <span class="hljs-doctag">@param</span>  mixed  $notifiable\n * <span class="hljs-doctag">@return</span> BroadcastMessage\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toBroadcast</span><span class="hljs-params">($notifiable)</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BroadcastMessage([\n        <span class="hljs-string">\'invoice_id\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;invoice-&gt;id,\n        <span class="hljs-string">\'amount\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;invoice-&gt;amount,\n    ]);\n}</code></pre>\n  \n          <p><a name="broadcast-queue-configuration"></a></p>\n          <h4>\n            <a href="#broadcast-queue-configuration">\n              Broadcast Queue Configuration\n            </a>\n          </h4><p>All broadcast notifications are queued for broadcasting. If you would like to configure the queue connection or queue name that is used to queue the broadcast operation, you may use the <code>onConnection</code> and <code>onQueue</code> methods of the <code>BroadcastMessage</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">(<span class="hljs-keyword">new</span> BroadcastMessage($data))</span>\n                -&gt;</span>onConnection<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'sqs\'</span>)</span>\n                -&gt;</span>onQueue(<span class="hljs-string">\'broadcasts\'</span>);</code></pre>\n  <blockquote>\n<p>{tip} In addition to the data you specify, broadcast notifications will also contain a <code>type</code> field containing the class name of the notification.</p>\n</blockquote>\n<p><a name="listening-for-notifications"></a></p>\n\n          <p><a name="listening-for-notifications"></a></p>\n          <h3>\n            <a href="#listening-for-notifications">\n              Listening For Notifications\n            </a>\n          </h3><p>Notifications will broadcast on a private channel formatted using a <code>{notifiable}.{id}</code> convention. So, if you are sending a notification to a <code>App\\User</code> instance with an ID of <code>1</code>, the notification will be broadcast on the <code>App.User.1</code> private channel. When using <router-link to="/docs/{{version}}/broadcasting">Laravel Echo</router-link>, you may easily listen for notifications on a channel using the <code>notification</code> helper method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Echo.private(<span class="hljs-string">\'App.User.\'</span> + userId)\n    .notification(<span class="hljs-function"><span class="hljs-params">(notification)</span> =&gt;</span> {\n        <span class="hljs-built_in">console</span>.log(notification.type);\n    });</code></pre>\n  \n          <p><a name="customizing-the-notification-channel"></a></p>\n          <h4>\n            <a href="#customizing-the-notification-channel">\n              Customizing The Notification Channel\n            </a>\n          </h4><p>If you would like to customize which channels a notifiable entity receives its broadcast notifications on, you may define a <code>receivesBroadcastNotificationsOn</code> method on the notifiable entity:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Broadcasting</span>\\<span class="hljs-title">PrivateChannel</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Auth</span>\\<span class="hljs-title">User</span> <span class="hljs-title">as</span> <span class="hljs-title">Authenticatable</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Notifications</span>\\<span class="hljs-title">Notifiable</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Authenticatable</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">Notifiable</span>;\n\n    <span class="hljs-comment">/**\n     * The channels the user receives notification broadcasts on.\n     *\n     * <span class="hljs-doctag">@return</span> string\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">receivesBroadcastNotificationsOn</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-string">\'users.\'</span>.<span class="hljs-keyword">$this</span>-&gt;id;\n    }\n}</span></code></pre>\n  <p><a name="sms-notifications"></a></p>\n\n          <p><a name="sms-notifications"></a></p>\n          <h2>\n            <a href="#sms-notifications">\n              SMS Notifications\n            </a>\n          </h2><p><a name="sms-prerequisites"></a></p>\n\n          <p><a name="prerequisites"></a></p>\n          <h3>\n            <a href="#prerequisites">\n              Prerequisites\n            </a>\n          </h3><p>Sending SMS notifications in Laravel is powered by <router-link to="https://www.nexmo.com/">Nexmo</router-link>. Before you can send notifications via Nexmo, you need to install the <code>laravel/nexmo-notification-channel</code> Composer package:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">composer</span> <span class="hljs-meta">require</span> laravel/nexmo-notification-channel</code></pre>\n  <p>This will also install the <router-link to="https://github.com/Nexmo/nexmo-laravel"><code>nexmo/laravel</code></router-link> package. This package includes <router-link to="https://github.com/Nexmo/nexmo-laravel/blob/master/config/nexmo.php">its own configuration file</router-link>. You can use the <code>NEXMO_KEY</code> and <code>NEXMO_SECRET</code> environment variables to set your Nexmo public and secret key.</p>\n<p>Next, you will need to add a configuration option to your <code>config/services.php</code> configuration file. You may copy the example configuration below to get started:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'nexmo\'</span> =&gt; [\n    <span class="hljs-string">\'sms_from\'</span> =&gt; <span class="hljs-string">\'15556666666\'</span>,\n],</code></pre>\n  <p>The <code>sms_from</code> option is the phone number that your SMS messages will be sent from. You should generate a phone number for your application in the Nexmo control panel.</p>\n<p><a name="formatting-sms-notifications"></a></p>\n\n          <p><a name="formatting-sms-notifications"></a></p>\n          <h3>\n            <a href="#formatting-sms-notifications">\n              Formatting SMS Notifications\n            </a>\n          </h3><p>If a notification supports being sent as an SMS, you should define a <code>toNexmo</code> method on the notification class. This method will receive a <code>$notifiable</code> entity and should return a <code>Illuminate\\Notifications\\Messages\\NexmoMessage</code> instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the Nexmo / SMS representation of the notification.\n *\n * <span class="hljs-doctag">@param</span>  mixed  $notifiable\n * <span class="hljs-doctag">@return</span> NexmoMessage\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toNexmo</span><span class="hljs-params">($notifiable)</span>\n</span>{\n    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> NexmoMessage)\n                -&gt;content(<span class="hljs-string">\'Your SMS message content\'</span>);\n}</code></pre>\n  <p><a name="formatting-shortcode-notifications"></a></p>\n\n          <p><a name="formatting-shortcode-notifications"></a></p>\n          <h3>\n            <a href="#formatting-shortcode-notifications">\n              Formatting Shortcode Notifications\n            </a>\n          </h3><p>Laravel also supports sending shortcode notifications, which are pre-defined message templates in your Nexmo account. You may specify the type of notification (<code>alert</code>, <code>2fa</code>, or <code>marketing</code>), as well as the custom values that will populate the template:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the Nexmo / Shortcode representation of the notification.\n *\n * <span class="hljs-doctag">@param</span>  mixed  $notifiable\n * <span class="hljs-doctag">@return</span> array\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toShortcode</span><span class="hljs-params">($notifiable)</span>\n</span>{\n    <span class="hljs-keyword">return</span> [\n        <span class="hljs-string">\'type\'</span> =&gt; <span class="hljs-string">\'alert\'</span>,\n        <span class="hljs-string">\'custom\'</span> =&gt; [\n            <span class="hljs-string">\'code\'</span> =&gt; <span class="hljs-string">\'ABC123\'</span>,\n        ];\n    ];\n}</code></pre>\n  <blockquote>\n<p>{tip} Like <a href="#routing-sms-notifications">routing SMS Notifications</a>, you should implement the <code>routeNotificationForShortcode</code> method on your notifiable model.</p>\n</blockquote>\n\n          <p><a name="unicode-content"></a></p>\n          <h4>\n            <a href="#unicode-content">\n              Unicode Content\n            </a>\n          </h4><p>If your SMS message will contain unicode characters, you should call the <code>unicode</code> method when constructing the <code>NexmoMessage</code> instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the Nexmo / SMS representation of the notification.\n *\n * <span class="hljs-doctag">@param</span>  mixed  $notifiable\n * <span class="hljs-doctag">@return</span> NexmoMessage\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toNexmo</span><span class="hljs-params">($notifiable)</span>\n</span>{\n    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> NexmoMessage)\n                -&gt;content(<span class="hljs-string">\'Your unicode message\'</span>)\n                -&gt;unicode();\n}</code></pre>\n  <p><a name="customizing-the-from-number"></a></p>\n\n          <p><a name="customizing-the-quot-from-quot-number"></a></p>\n          <h3>\n            <a href="#customizing-the-quot-from-quot-number">\n              Customizing The &quot;From&quot; Number\n            </a>\n          </h3><p>If you would like to send some notifications from a phone number that is different from the phone number specified in your <code>config/services.php</code> file, you may use the <code>from</code> method on a <code>NexmoMessage</code> instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the Nexmo / SMS representation of the notification.\n *\n * <span class="hljs-doctag">@param</span>  mixed  $notifiable\n * <span class="hljs-doctag">@return</span> NexmoMessage\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toNexmo</span><span class="hljs-params">($notifiable)</span>\n</span>{\n    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> NexmoMessage)\n                -&gt;content(<span class="hljs-string">\'Your SMS message content\'</span>)\n                -&gt;from(<span class="hljs-string">\'15554443333\'</span>);\n}</code></pre>\n  <p><a name="routing-sms-notifications"></a></p>\n\n          <p><a name="routing-sms-notifications"></a></p>\n          <h3>\n            <a href="#routing-sms-notifications">\n              Routing SMS Notifications\n            </a>\n          </h3><p>To route Nexmo notifications to the proper phone number, define a <code>routeNotificationForNexmo</code> method on your notifiable entity:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Auth</span>\\<span class="hljs-title">User</span> <span class="hljs-title">as</span> <span class="hljs-title">Authenticatable</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Notifications</span>\\<span class="hljs-title">Notifiable</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Authenticatable</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">Notifiable</span>;\n\n    <span class="hljs-comment">/**\n     * Route notifications for the Nexmo channel.\n     *\n     * <span class="hljs-doctag">@param</span>  \\Illuminate\\Notifications\\Notification  $notification\n     * <span class="hljs-doctag">@return</span> string\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">routeNotificationForNexmo</span><span class="hljs-params">($notification)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;phone_number;\n    }\n}</span></code></pre>\n  <p><a name="slack-notifications"></a></p>\n\n          <p><a name="slack-notifications"></a></p>\n          <h2>\n            <a href="#slack-notifications">\n              Slack Notifications\n            </a>\n          </h2><p><a name="slack-prerequisites"></a></p>\n\n          <p><a name="prerequisites"></a></p>\n          <h3>\n            <a href="#prerequisites">\n              Prerequisites\n            </a>\n          </h3><p>Before you can send notifications via Slack, you must install the notification channel via Composer:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">composer</span> <span class="hljs-meta">require</span> laravel/slack-notification-channel</code></pre>\n  <p>You will also need to configure an <router-link to="https://api.slack.com/incoming-webhooks">&quot;Incoming Webhook&quot;</router-link> integration for your Slack team. This integration will provide you with a URL you may use when <a href="#routing-slack-notifications">routing Slack notifications</a>.</p>\n<p><a name="formatting-slack-notifications"></a></p>\n\n          <p><a name="formatting-slack-notifications"></a></p>\n          <h3>\n            <a href="#formatting-slack-notifications">\n              Formatting Slack Notifications\n            </a>\n          </h3><p>If a notification supports being sent as a Slack message, you should define a <code>toSlack</code> method on the notification class. This method will receive a <code>$notifiable</code> entity and should return a <code>Illuminate\\Notifications\\Messages\\SlackMessage</code> instance. Slack messages may contain text content as well as an &quot;attachment&quot; that formats additional text or an array of fields. Let&#39;s take a look at a basic <code>toSlack</code> example:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the Slack representation of the notification.\n *\n * <span class="hljs-doctag">@param</span>  mixed  $notifiable\n * <span class="hljs-doctag">@return</span> SlackMessage\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toSlack</span><span class="hljs-params">($notifiable)</span>\n</span>{\n    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> SlackMessage)\n                -&gt;content(<span class="hljs-string">\'One of your invoices has been paid!\'</span>);\n}</code></pre>\n  <p>In this example we are just sending a single line of text to Slack, which will create a message that looks like the following:</p>\n<img src="https://laravel.com/img/docs/basic-slack-notification.png">\n\n\n          <p><a name="customizing-the-sender-amp-recipient"></a></p>\n          <h4>\n            <a href="#customizing-the-sender-amp-recipient">\n              Customizing The Sender &amp; Recipient\n            </a>\n          </h4><p>You may use the <code>from</code> and <code>to</code> methods to customize the sender and recipient. The <code>from</code> method accepts a username and emoji identifier, while the <code>to</code> method accepts a channel or username:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the Slack representation of the notification.\n *\n * @param  mixed  $notifiable\n * @return SlackMessage\n */</span>\npublic <span class="hljs-keyword">function</span> toSlack($notifiable)\n{\n    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">(<span class="hljs-keyword">new</span> SlackMessage)</span>\n                -&gt;</span><span class="hljs-keyword">from</span><span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'Ghost\'</span>, <span class="hljs-string">\':ghost:\'</span>)</span>\n                -&gt;</span><span class="hljs-keyword">to</span><span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'#other\'</span>)</span>\n                -&gt;</span>content(<span class="hljs-string">\'This will be sent to #other\'</span>);\n}</code></pre>\n  <p>You may also use an image as your logo instead of an emoji:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the Slack representation of the notification.\n *\n * @param  mixed  $notifiable\n * @return SlackMessage\n */</span>\npublic <span class="hljs-keyword">function</span> toSlack($notifiable)\n{\n    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">(<span class="hljs-keyword">new</span> SlackMessage)</span>\n                -&gt;</span><span class="hljs-keyword">from</span><span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'Laravel\'</span>)</span>\n                -&gt;</span>image<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'https://laravel.com/img/favicon/favicon.ico\'</span>)</span>\n                -&gt;</span>content(<span class="hljs-string">\'This will display the Laravel logo next to the message\'</span>);\n}</code></pre>\n  <p><a name="slack-attachments"></a></p>\n\n          <p><a name="slack-attachments"></a></p>\n          <h3>\n            <a href="#slack-attachments">\n              Slack Attachments\n            </a>\n          </h3><p>You may also add &quot;attachments&quot; to Slack messages. Attachments provide richer formatting options than simple text messages. In this example, we will send an error notification about an exception that occurred in an application, including a link to view more details about the exception:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the Slack representation of the notification.\n *\n * <span class="hljs-doctag">@param</span>  mixed  $notifiable\n * <span class="hljs-doctag">@return</span> SlackMessage\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toSlack</span><span class="hljs-params">($notifiable)</span>\n</span>{\n    $url = url(<span class="hljs-string">\'/exceptions/\'</span>.<span class="hljs-keyword">$this</span>-&gt;exception-&gt;id);\n\n    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> SlackMessage)\n                -&gt;error()\n                -&gt;content(<span class="hljs-string">\'Whoops! Something went wrong.\'</span>)\n                -&gt;attachment(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($attachment)</span> <span class="hljs-title">use</span> <span class="hljs-params">($url)</span> </span>{\n                    $attachment-&gt;title(<span class="hljs-string">\'Exception: File Not Found\'</span>, $url)\n                               -&gt;content(<span class="hljs-string">\'File [background.jpg] was not found.\'</span>);\n                });\n}</code></pre>\n  <p>The example above will generate a Slack message that looks like the following:</p>\n<img src="https://laravel.com/img/docs/basic-slack-attachment.png">\n\n<p>Attachments also allow you to specify an array of data that should be presented to the user. The given data will be presented in a table-style format for easy reading:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the Slack representation of the notification.\n *\n * <span class="hljs-doctag">@param</span>  mixed  $notifiable\n * <span class="hljs-doctag">@return</span> SlackMessage\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toSlack</span><span class="hljs-params">($notifiable)</span>\n</span>{\n    $url = url(<span class="hljs-string">\'/invoices/\'</span>.<span class="hljs-keyword">$this</span>-&gt;invoice-&gt;id);\n\n    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> SlackMessage)\n                -&gt;success()\n                -&gt;content(<span class="hljs-string">\'One of your invoices has been paid!\'</span>)\n                -&gt;attachment(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($attachment)</span> <span class="hljs-title">use</span> <span class="hljs-params">($url)</span> </span>{\n                    $attachment-&gt;title(<span class="hljs-string">\'Invoice 1322\'</span>, $url)\n                               -&gt;fields([\n                                    <span class="hljs-string">\'Title\'</span> =&gt; <span class="hljs-string">\'Server Expenses\'</span>,\n                                    <span class="hljs-string">\'Amount\'</span> =&gt; <span class="hljs-string">\'$1,234\'</span>,\n                                    <span class="hljs-string">\'Via\'</span> =&gt; <span class="hljs-string">\'American Express\'</span>,\n                                    <span class="hljs-string">\'Was Overdue\'</span> =&gt; <span class="hljs-string">\':-1:\'</span>,\n                                ]);\n                });\n}</code></pre>\n  <p>The example above will create a Slack message that looks like the following:</p>\n<img src="https://laravel.com/img/docs/slack-fields-attachment.png">\n\n\n          <p><a name="markdown-attachment-content"></a></p>\n          <h4>\n            <a href="#markdown-attachment-content">\n              Markdown Attachment Content\n            </a>\n          </h4><p>If some of your attachment fields contain Markdown, you may use the <code>markdown</code> method to instruct Slack to parse and display the given attachment fields as Markdown formatted text. The values accepted by this method are: <code>pretext</code>, <code>text</code>, and / or <code>fields</code>. For more information about Slack attachment formatting, check out the <router-link to="https://api.slack.com/docs/message-formatting#message_formatting">Slack API documentation</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the Slack representation of the notification.\n *\n * <span class="hljs-doctag">@param</span>  mixed  $notifiable\n * <span class="hljs-doctag">@return</span> SlackMessage\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toSlack</span><span class="hljs-params">($notifiable)</span>\n</span>{\n    $url = url(<span class="hljs-string">\'/exceptions/\'</span>.<span class="hljs-keyword">$this</span>-&gt;exception-&gt;id);\n\n    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> SlackMessage)\n                -&gt;error()\n                -&gt;content(<span class="hljs-string">\'Whoops! Something went wrong.\'</span>)\n                -&gt;attachment(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($attachment)</span> <span class="hljs-title">use</span> <span class="hljs-params">($url)</span> </span>{\n                    $attachment-&gt;title(<span class="hljs-string">\'Exception: File Not Found\'</span>, $url)\n                               -&gt;content(<span class="hljs-string">\'File [background.jpg] was *not found*.\'</span>)\n                               -&gt;markdown([<span class="hljs-string">\'text\'</span>]);\n                });\n}</code></pre>\n  <p><a name="routing-slack-notifications"></a></p>\n\n          <p><a name="routing-slack-notifications"></a></p>\n          <h3>\n            <a href="#routing-slack-notifications">\n              Routing Slack Notifications\n            </a>\n          </h3><p>To route Slack notifications to the proper location, define a <code>routeNotificationForSlack</code> method on your notifiable entity. This should return the webhook URL to which the notification should be delivered. Webhook URLs may be generated by adding an &quot;Incoming Webhook&quot; service to your Slack team:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Auth</span>\\<span class="hljs-title">User</span> <span class="hljs-title">as</span> <span class="hljs-title">Authenticatable</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Notifications</span>\\<span class="hljs-title">Notifiable</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Authenticatable</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">Notifiable</span>;\n\n    <span class="hljs-comment">/**\n     * Route notifications for the Slack channel.\n     *\n     * <span class="hljs-doctag">@param</span>  \\Illuminate\\Notifications\\Notification  $notification\n     * <span class="hljs-doctag">@return</span> string\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">routeNotificationForSlack</span><span class="hljs-params">($notification)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-string">\'https://hooks.slack.com/services/...\'</span>;\n    }\n}</span></code></pre>\n  <p><a name="localizing-notifications"></a></p>\n\n          <p><a name="localizing-notifications"></a></p>\n          <h2>\n            <a href="#localizing-notifications">\n              Localizing Notifications\n            </a>\n          </h2><p>Laravel allows you to send notifications in a locale other than the current language, and will even remember this locale if the notification is queued.</p>\n<p>To accomplish this, the <code>Illuminate\\Notifications\\Notification</code> class offers a <code>locale</code> method to set the desired language. The application will change into this locale when the notification is being formatted and then revert back to the previous locale when formatting is complete:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user-&gt;notify<span class="hljs-function"><span class="hljs-params">((<span class="hljs-keyword">new</span> InvoicePaid($invoice))-&gt;locale(<span class="hljs-string">\'es\'</span>))</span>;</span></code></pre>\n  <p>Localization of multiple notifiable entries may also be achieved via the <code>Notification</code> facade:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Notification::locale(<span class="hljs-string">\'es\'</span>)-&gt;send($users, <span class="hljs-keyword">new</span> InvoicePaid($invoice));</code></pre>\n  \n          <p><a name="user-preferred-locales"></a></p>\n          <h3>\n            <a href="#user-preferred-locales">\n              User Preferred Locales\n            </a>\n          </h3><p>Sometimes, applications store each user&#39;s preferred locale. By implementing the <code>HasLocalePreference</code> contract on your notifiable model, you may instruct Laravel to use this stored locale when sending a notification:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">Translation</span>\\<span class="hljs-title">HasLocalePreference</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HasLocalePreference</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Get the user\'s preferred locale.\n     *\n     * <span class="hljs-doctag">@return</span> string\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">preferredLocale</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;locale;\n    }\n}</code></pre>\n  <p>Once you have implemented the interface, Laravel will automatically use the preferred locale when sending notifications and mailables to the model. Therefore, there is no need to call the <code>locale</code> method when using this interface:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user-&gt;notify(<span class="hljs-keyword">new</span> InvoicePaid($invoice));</code></pre>\n  <p><a name="notification-events"></a></p>\n\n          <p><a name="notification-events"></a></p>\n          <h2>\n            <a href="#notification-events">\n              Notification Events\n            </a>\n          </h2><p>When a notification is sent, the <code>Illuminate\\Notifications\\Events\\NotificationSent</code> event is fired by the notification system. This contains the &quot;notifiable&quot; entity and the notification instance itself. You may register listeners for this event in your <code>EventServiceProvider</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">/**\n * The event listener mappings for the application.\n *\n * @var<span class="hljs-built_in"> array\n</span> */<span class="hljs-keyword">\nprotected</span> $listen = [\n    \'Illuminate\\Notifications\\Events\\NotificationSent\' =&gt; [\n        \'App\\Listeners\\LogNotification\',\n    ],\n];</code></pre>\n  <blockquote>\n<p>{tip} After registering listeners in your <code>EventServiceProvider</code>, use the <code>event:generate</code> Artisan command to quickly generate listener classes.</p>\n</blockquote>\n<p>Within an event listener, you may access the <code>notifiable</code>, <code>notification</code>, and <code>channel</code> properties on the event to learn more about the notification recipient or the notification itself:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Handle the event.\n *\n * <span class="hljs-doctag">@param</span>  NotificationSent  $event\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">(NotificationSent $event)</span>\n</span>{\n    <span class="hljs-comment">// $event-&gt;channel</span>\n    <span class="hljs-comment">// $event-&gt;notifiable</span>\n    <span class="hljs-comment">// $event-&gt;notification</span>\n    <span class="hljs-comment">// $event-&gt;response</span>\n}</code></pre>\n  <p><a name="custom-channels"></a></p>\n\n          <p><a name="custom-channels"></a></p>\n          <h2>\n            <a href="#custom-channels">\n              Custom Channels\n            </a>\n          </h2><p>Laravel ships with a handful of notification channels, but you may want to write your own drivers to deliver notifications via other channels. Laravel makes it simple. To get started, define a class that contains a <code>send</code> method. The method should receive two arguments: a <code>$notifiable</code> and a <code>$notification</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Channels</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Notifications</span>\\<span class="hljs-title">Notification</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VoiceChannel</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Send the given notification.\n     *\n     * <span class="hljs-doctag">@param</span>  mixed  $notifiable\n     * <span class="hljs-doctag">@param</span>  \\Illuminate\\Notifications\\Notification  $notification\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">send</span><span class="hljs-params">($notifiable, Notification $notification)</span>\n    </span>{\n        $message = $notification-&gt;toVoice($notifiable);\n\n        <span class="hljs-comment">// Send notification to the $notifiable instance...</span>\n    }\n}</span></code></pre>\n  <p>Once your notification channel class has been defined, you may return the class name from the <code>via</code> method of any of your notifications:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Notifications</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Channels</span>\\<span class="hljs-title">Messages</span>\\<span class="hljs-title">VoiceMessage</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Channels</span>\\<span class="hljs-title">VoiceChannel</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Bus</span>\\<span class="hljs-title">Queueable</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">Queue</span>\\<span class="hljs-title">ShouldQueue</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Notifications</span>\\<span class="hljs-title">Notification</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvoicePaid</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Notification</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">Queueable</span>;\n\n    <span class="hljs-comment">/**\n     * Get the notification channels.\n     *\n     * <span class="hljs-doctag">@param</span>  mixed  $notifiable\n     * <span class="hljs-doctag">@return</span> array|string\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">via</span><span class="hljs-params">($notifiable)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> [VoiceChannel::class];\n    }\n\n    <span class="hljs-comment">/**\n     * Get the voice representation of the notification.\n     *\n     * <span class="hljs-doctag">@param</span>  mixed  $notifiable\n     * <span class="hljs-doctag">@return</span> VoiceMessage\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toVoice</span><span class="hljs-params">($notifiable)</span>\n    </span>{\n        <span class="hljs-comment">// ...</span>\n    }\n}</span></code></pre>\n  '},b261:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="upgrade-guide"></a></p>\n          <h1>\n            <a href="#upgrade-guide">\n              Upgrade Guide\n            </a>\n          </h1><ul>\n<li><a href="#upgrade-6.0">Upgrading To 6.0 From 5.8</a></li>\n</ul>\n<p><a name="high-impact-changes"></a></p>\n\n          <p><a name="high-impact-changes"></a></p>\n          <h2>\n            <a href="#high-impact-changes">\n              High Impact Changes\n            </a>\n          </h2><div class="content-list" markdown="1">\n- [Authorized Resources & `viewAny`](#authorized-resources)\n- [String & Array Helpers](#helpers)\n</div>\n\n<p><a name="medium-impact-changes"></a></p>\n\n          <p><a name="medium-impact-changes"></a></p>\n          <h2>\n            <a href="#medium-impact-changes">\n              Medium Impact Changes\n            </a>\n          </h2><div class="content-list" markdown="1">\n- [Carbon 1.x No Longer Supported](#carbon-support)\n- [Redis Default Client](#redis-default-client)\n- [Database `Capsule::table` Method](#capsule-table)\n- [Eloquent Arrayable & `toArray`](#eloquent-to-array)\n- [Eloquent `BelongsTo::update` Method](#belongs-to-update)\n- [Eloquent Primary Key Types](#eloquent-primary-key-type)\n- [Localization `Lang::trans` and `Lang::transChoice` Methods](#trans-and-trans-choice)\n- [Localization `Lang::getFromJson` Method](#get-from-json)\n- [Queue Retry Limit](#queue-retry-limit)\n- [Resend Email Verification Route](#email-verification-route)\n- [Email Verification Route Change](#email-verification-route-change)\n- [The `Input` Facade](#the-input-facade)\n</div>\n\n<p><a name="upgrade-6.0"></a></p>\n\n          <p><a name="upgrading-to-6-0-from-5-8"></a></p>\n          <h2>\n            <a href="#upgrading-to-6-0-from-5-8">\n              Upgrading To 6.0 From 5.8\n            </a>\n          </h2>\n          <p><a name="estimated-upgrade-time-one-hour"></a></p>\n          <h4>\n            <a href="#estimated-upgrade-time-one-hour">\n              Estimated Upgrade Time: One Hour\n            </a>\n          </h4><blockquote>\n<p>{note} We attempt to document every possible breaking change. Since some of these breaking changes are in obscure parts of the framework only a portion of these changes may actually affect your application.</p>\n</blockquote>\n\n          <p><a name="php-7-2-required"></a></p>\n          <h3>\n            <a href="#php-7-2-required">\n              PHP 7.2 Required\n            </a>\n          </h3><p><strong>Likelihood Of Impact: Medium</strong></p>\n<p>PHP 7.1 will no longer be actively maintained as of December 2019. Therefore, Laravel 6.0 requires PHP 7.2 or greater.</p>\n<p><a name="updating-dependencies"></a></p>\n\n          <p><a name="updating-dependencies"></a></p>\n          <h3>\n            <a href="#updating-dependencies">\n              Updating Dependencies\n            </a>\n          </h3><p>Update your <code>laravel/framework</code> dependency to <code>^6.0</code> in your <code>composer.json</code> file.</p>\n<p>Next, examine any 3rd party packages consumed by your application and verify you are using the proper version for Laravel 6 support.</p>\n\n          <p><a name="authorization"></a></p>\n          <h3>\n            <a href="#authorization">\n              Authorization\n            </a>\n          </h3><p><a name="authorized-resources"></a></p>\n\n          <p><a name="authorized-resources-amp-code-viewany-code-"></a></p>\n          <h4>\n            <a href="#authorized-resources-amp-code-viewany-code-">\n              Authorized Resources &amp; <code>viewAny</code>\n            </a>\n          </h4><p><strong>Likelihood Of Impact: High</strong></p>\n<p>Authorization policies attached to controllers using the <code>authorizeResource</code> method should now define a <code>viewAny</code> method, which will be called when a user accesses the controller&#39;s <code>index</code> method. Otherwise, calls to the <code>index</code> method of the controller will be rejected as unauthorized.</p>\n\n          <p><a name="authorization-responses"></a></p>\n          <h4>\n            <a href="#authorization-responses">\n              Authorization Responses\n            </a>\n          </h4><p><strong>Likelihood Of Impact: Low</strong></p>\n<p>The constructor signature of the <code>Illuminate\\Auth\\Access\\Response</code> class has changed. You should update your code accordingly. If you are not constructing authorization responses manually and are only using the <code>allow</code> and <code>deny</code> instance methods within your policies, no change is required:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Create a new response.\n *\n * <span class="hljs-doctag">@param</span>  bool  $allowed\n * <span class="hljs-doctag">@param</span>  string  $message\n * <span class="hljs-doctag">@param</span>  mixed  $code\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($allowed, $message = <span class="hljs-string">\'\'</span>, $code = null)</span></span></code></pre>\n  \n          <p><a name="returning-quot-deny-quot-responses"></a></p>\n          <h4>\n            <a href="#returning-quot-deny-quot-responses">\n              Returning &quot;Deny&quot; Responses\n            </a>\n          </h4><p><strong>Likelihood Of Impact: Low</strong></p>\n<p>In previous releases of Laravel, you did not need to return the value of the <code>deny</code> method from your policy methods since an exception was thrown immediately. However, in accordance with the Laravel documentation, you must now return the value of the <code>deny</code> method from your policies:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">(User $user, Post $post)</span>\n</span>{\n    <span class="hljs-keyword">if</span> (! $user-&gt;role-&gt;isEditor()) {\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;deny(<span class="hljs-string">"You must be an editor to edit this post."</span>)\n    }\n\n    <span class="hljs-keyword">return</span> $user-&gt;id === $post-&gt;user_id;\n}</code></pre>\n  <p><a name="auth-access-gate-contract"></a></p>\n\n          <p><a name="the-code-illuminate-contracts-auth-access-gate-code-contract"></a></p>\n          <h4>\n            <a href="#the-code-illuminate-contracts-auth-access-gate-code-contract">\n              The <code>Illuminate\\Contracts\\Auth\\Access\\Gate</code> Contract\n            </a>\n          </h4><p><strong>Likelihood Of Impact: Low</strong></p>\n<p>The <code>Illuminate\\Contracts\\Auth\\Access\\Gate</code> contract has received a new <code>inspect</code> method. If you are implementing this interface manually, you should add this method to your implementation.</p>\n\n          <p><a name="carbon"></a></p>\n          <h3>\n            <a href="#carbon">\n              Carbon\n            </a>\n          </h3><p><a name="carbon-support"></a></p>\n\n          <p><a name="carbon-1-x-no-longer-supported"></a></p>\n          <h4>\n            <a href="#carbon-1-x-no-longer-supported">\n              Carbon 1.x No Longer Supported\n            </a>\n          </h4><p><strong>Likelihood Of Impact: Medium</strong></p>\n<p>Carbon 1.x <router-link to="https://github.com/laravel/framework/pull/28683">is no longer supported</router-link> since it is nearing its maintenance end of life. Please upgrade your application to Carbon 2.0.</p>\n\n          <p><a name="configuration"></a></p>\n          <h3>\n            <a href="#configuration">\n              Configuration\n            </a>\n          </h3>\n          <p><a name="the-code-aws_region-code-environment-variable"></a></p>\n          <h4>\n            <a href="#the-code-aws_region-code-environment-variable">\n              The <code>AWS_REGION</code> Environment Variable\n            </a>\n          </h4><p><strong>Likelihood Of Impact: Optional</strong></p>\n<p>If you plan to utilize <router-link to="https://vapor.laravel.com">Laravel Vapor</router-link>, you should update all occurrences of <code>AWS_REGION</code> within your <code>config</code> directory to <code>AWS_DEFAULT_REGION</code>. In addition, you should update this environment variable&#39;s name in your <code>.env</code> file.</p>\n<p><a name="redis-default-client"></a></p>\n\n          <p><a name="redis-default-client"></a></p>\n          <h4>\n            <a href="#redis-default-client">\n              Redis Default Client\n            </a>\n          </h4><p><strong>Likelihood Of Impact: Medium</strong></p>\n<p>The default Redis client has changed from <code>predis</code> to <code>phpredis</code>. In order to keep using <code>predis</code>, ensure the <code>redis.client</code> configuration option is set to <code>predis</code> in your <code>config/database.php</code> configuration file.</p>\n\n          <p><a name="database"></a></p>\n          <h3>\n            <a href="#database">\n              Database\n            </a>\n          </h3><p><a name="capsule-table"></a></p>\n\n          <p><a name="the-capsule-code-table-code-method"></a></p>\n          <h4>\n            <a href="#the-capsule-code-table-code-method">\n              The Capsule <code>table</code> Method\n            </a>\n          </h4><p><strong>Likelihood Of Impact: Medium</strong></p>\n<blockquote>\n<p>{note} This change only applies to non-Laravel applications that are using <code>illuminate/database</code> as a dependency.</p>\n</blockquote>\n<p>The signature of the <code>Illuminate\\Database\\Capsule\\Manager</code> class&#39; <code>table</code> method has \nupdated to accept a table alias as its second argument. If you are using <code>illuminate/database</code> outside of a Laravel application, you should update any calls to this method accordingly:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get a fluent query builder instance.\n *\n * <span class="hljs-doctag">@param</span>  \\Closure|\\Illuminate\\Database\\Query\\Builder|string  $table\n * <span class="hljs-doctag">@param</span>  string|null  $as\n * <span class="hljs-doctag">@param</span>  string|null  $connection\n * <span class="hljs-doctag">@return</span> \\Illuminate\\Database\\Query\\Builder\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">table</span><span class="hljs-params">($table, $as = null, $connection = null)</span></span></code></pre>\n  \n          <p><a name="the-code-cursor-code-method"></a></p>\n          <h4>\n            <a href="#the-code-cursor-code-method">\n              The <code>cursor</code> Method\n            </a>\n          </h4><p><strong>Likelihood Of Impact: Low</strong></p>\n<p>The <code>cursor</code> method now returns an instance of <code>Illuminate\\Support\\LazyCollection</code> instead of a <code>Generator</code> The <code>LazyCollection</code> may be iterated just like a generator:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = App\\User::cursor();\n\n<span class="hljs-keyword">foreach</span> ($users <span class="hljs-keyword">as</span> $user) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p><a name="eloquent"></a></p>\n\n          <p><a name="eloquent"></a></p>\n          <h3>\n            <a href="#eloquent">\n              Eloquent\n            </a>\n          </h3><p><a name="belongs-to-update"></a></p>\n\n          <p><a name="the-code-belongsto-update-code-method"></a></p>\n          <h4>\n            <a href="#the-code-belongsto-update-code-method">\n              The <code>BelongsTo::update</code> Method\n            </a>\n          </h4><p><strong>Likelihood Of Impact: Medium</strong></p>\n<p>For consistency, the <code>update</code> method of the <code>BelongsTo</code> relationship now functions as an ad-hoc update query, meaning it does not provide mass assignment protection or fire Eloquent events. This makes the relationship consistent with the <code>update</code> methods on all other types of relationships.</p>\n<p>If you would like to update a model attached via a <code>BelongsTo</code> relationship and receive mass assignment update protection and events, you should call the <code>update</code> method on the model itself:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Ad-hoc query... no mass assignment protection or events...</span>\n$post-&gt;user()-&gt;update([<span class="hljs-string">\'foo\'</span> =&gt; <span class="hljs-string">\'bar\'</span>]);\n\n<span class="hljs-comment">// Model update... provides mass assignment protection and events...</span>\n$post-&gt;user-&gt;update([<span class="hljs-string">\'foo\'</span> =&gt; <span class="hljs-string">\'bar\'</span>]);</code></pre>\n  <p><a name="eloquent-to-array"></a></p>\n\n          <p><a name="arrayable-amp-code-toarray-code-"></a></p>\n          <h4>\n            <a href="#arrayable-amp-code-toarray-code-">\n              Arrayable &amp; <code>toArray</code>\n            </a>\n          </h4><p><strong>Likelihood Of Impact: Medium</strong></p>\n<p>The Eloquent model&#39;s <code>toArray</code> method will now cast any attributes that implement <code>Illuminate\\Contracts\\Support\\Arrayable</code> to an array.</p>\n<p><a name="eloquent-primary-key-type"></a></p>\n\n          <p><a name="declaration-of-primary-key-type"></a></p>\n          <h4>\n            <a href="#declaration-of-primary-key-type">\n              Declaration Of Primary Key Type\n            </a>\n          </h4><p><strong>Likelihood Of Impact: Medium</strong></p>\n<p>Laravel 6.0 has received <router-link to="https://github.com/laravel/framework/pull/28153">performance optimizations</router-link> for integer key types. If you are using a string as your model&#39;s primary key, you should declare the key type using the <code>$keyType</code> property on your model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * The "type" of the primary key ID.\n *\n * <span class="hljs-doctag">@var</span> string\n */</span>\n<span class="hljs-keyword">protected</span> $keyType = <span class="hljs-string">\'string\'</span>;</code></pre>\n  \n          <p><a name="email-verification"></a></p>\n          <h3>\n            <a href="#email-verification">\n              Email Verification\n            </a>\n          </h3><p><a name="email-verification-route"></a></p>\n\n          <p><a name="resend-verification-route-http-method"></a></p>\n          <h4>\n            <a href="#resend-verification-route-http-method">\n              Resend Verification Route HTTP Method\n            </a>\n          </h4><p><strong>Likelihood Of Impact: Medium</strong></p>\n<p>To prevent possible CSRF attacks, the <code>email/resend</code> route registered by the router when using Laravel&#39;s built-in email verification has been updated from a <code>GET</code> route to a <code>POST</code> route. Therefore, you will need to update your frontend to send the proper request type to this route. For example, if you are using the built-in email verification template scaffolding:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">{{ <span class="hljs-constructor">__(\'Before <span class="hljs-params">proceeding</span>, <span class="hljs-params">please</span> <span class="hljs-params">check</span> <span class="hljs-params">your</span> <span class="hljs-params">email</span> <span class="hljs-params">for</span> <span class="hljs-params">a</span> <span class="hljs-params">verification</span> <span class="hljs-params">link</span>.\')</span> }}\n{{ <span class="hljs-constructor">__(\'If <span class="hljs-params">you</span> <span class="hljs-params">did</span> <span class="hljs-params">not</span> <span class="hljs-params">receive</span> <span class="hljs-params">the</span> <span class="hljs-params">email</span>\')</span> }},\n\n&lt;form <span class="hljs-keyword">class</span>=<span class="hljs-string">"d-inline"</span> <span class="hljs-keyword">method</span>=<span class="hljs-string">"POST"</span> action=<span class="hljs-string">"{{ route(\'verification.resend\') }}"</span>&gt;\n    @csrf\n\n    &lt;button <span class="hljs-keyword">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"btn btn-link p-0 m-0 align-baseline"</span>&gt;\n        {{ <span class="hljs-constructor">__(\'<span class="hljs-params">click</span> <span class="hljs-params">here</span> <span class="hljs-params">to</span> <span class="hljs-params">request</span> <span class="hljs-params">another</span>\')</span> }}\n    &lt;/button&gt;.\n&lt;/form&gt;</code></pre>\n  <p><a name="mustverifyemail-contract"></a></p>\n\n          <p><a name="the-code-mustverifyemail-code-contract"></a></p>\n          <h4>\n            <a href="#the-code-mustverifyemail-code-contract">\n              The <code>MustVerifyEmail</code> Contract\n            </a>\n          </h4><p><strong>Likelihood Of Impact: Low</strong></p>\n<p>A new <code>getEmailForVerification</code> method has been added to the <code>Illuminate\\Contracts\\Auth\\MustVerifyEmail</code> contract. If you are manually implementing this contract, you should implement this method. This method should return the object&#39;s associated email address. If your <code>App\\User</code> model is using the <code>Illuminate\\Auth\\MustVerifyEmail</code> trait, no changes are required, as this trait implements this method for you.</p>\n<p><a name="email-verification-route-change"></a></p>\n\n          <p><a name="email-verification-route-change"></a></p>\n          <h4>\n            <a href="#email-verification-route-change">\n              Email Verification Route Change\n            </a>\n          </h4><p><strong>Likelihood Of Impact: Medium</strong></p>\n<p>The route path for verifying emails has changed from <code>/email/verify/{id}</code> to <code>/email/verify/{id}/{hash}</code>. Any email verification emails that were sent prior to upgrading to Laravel 6.x will not longer be valid and will display a 404 page. If you wish, you may define a route matching the old verification URL path and display an informative message for your users that asks them to re-verify their email address.</p>\n<p><a name="helpers"></a></p>\n\n          <p><a name="helpers"></a></p>\n          <h3>\n            <a href="#helpers">\n              Helpers\n            </a>\n          </h3>\n          <p><a name="string-amp-array-helpers-package"></a></p>\n          <h4>\n            <a href="#string-amp-array-helpers-package">\n              String &amp; Array Helpers Package\n            </a>\n          </h4><p><strong>Likelihood Of Impact: High</strong></p>\n<p>All <code>str_</code> and <code>array_</code> helpers have been moved to the new <code>laravel/helpers</code> Composer package and removed from the framework. If desired, you may update all calls to these helpers to use the <code>Illuminate\\Support\\Str</code> and <code>Illuminate\\Support\\Arr</code> classes. Alternatively, you can add the new <code>laravel/helpers</code> package to your application to continue using these helpers:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">composer</span> <span class="hljs-meta">require</span> laravel/helpers</code></pre>\n  \n          <p><a name="localization"></a></p>\n          <h3>\n            <a href="#localization">\n              Localization\n            </a>\n          </h3><p><a name="trans-and-trans-choice"></a></p>\n\n          <p><a name="the-code-lang-trans-code-amp-code-lang-transchoice-code-methods"></a></p>\n          <h4>\n            <a href="#the-code-lang-trans-code-amp-code-lang-transchoice-code-methods">\n              The <code>Lang::trans</code> &amp; <code>Lang::transChoice</code> Methods\n            </a>\n          </h4><p><strong>Likelihood Of Impact: Medium</strong></p>\n<p>The <code>Lang::trans</code> and <code>Lang::transChoice</code> methods of the translator have been renamed to <code>Lang::get</code> and <code>Lang::choice</code>.</p>\n<p>In addition, if you are manually implementing the <code>Illuminate\\Contracts\\Translation\\Translator</code> contract, you should update your implementation&#39;s <code>trans</code> and <code>transChoice</code> methods to <code>get</code> and <code>choice</code>.</p>\n<p><a name="get-from-json"></a></p>\n\n          <p><a name="the-code-lang-getfromjson-code-method"></a></p>\n          <h4>\n            <a href="#the-code-lang-getfromjson-code-method">\n              The <code>Lang::getFromJson</code> Method\n            </a>\n          </h4><p><strong>Likelihood Of Impact: Medium</strong></p>\n<p>The <code>Lang::get</code> and <code>Lang::getFromJson</code> methods have been consolidated. Calls to the <code>Lang::getFromJson</code> method should be updated to call <code>Lang::get</code>.</p>\n<blockquote>\n<p>{note} You should run the <code>php artisan view:clear</code> Artisan command to avoid Blade errors related to the removal of <code>Lang::transChoice</code>, <code>Lang::trans</code>, and <code>Lang::getFromJson</code>.</p>\n</blockquote>\n\n          <p><a name="mail"></a></p>\n          <h3>\n            <a href="#mail">\n              Mail\n            </a>\n          </h3>\n          <p><a name="mandrill-amp-sparkpost-drivers-removed"></a></p>\n          <h4>\n            <a href="#mandrill-amp-sparkpost-drivers-removed">\n              Mandrill &amp; SparkPost Drivers Removed\n            </a>\n          </h4><p><strong>Likelihood Of Impact: Low</strong></p>\n<p>The <code>mandrill</code> and <code>sparkpost</code> mail drivers have been removed. If you would like to continue using either of these drivers, we encourage you to adopt a community maintained package of your choice that provides the driver.</p>\n\n          <p><a name="notifications"></a></p>\n          <h3>\n            <a href="#notifications">\n              Notifications\n            </a>\n          </h3>\n          <p><a name="nexmo-routing-removed"></a></p>\n          <h4>\n            <a href="#nexmo-routing-removed">\n              Nexmo Routing Removed\n            </a>\n          </h4><p><strong>Likelihood Of Impact: Low</strong></p>\n<p>A lingering part of the Nexmo notification channel was removed from the core of the framework. If you&#39;re relying on routing Nexmo notifications you should manually implement the <code>routeNotificationForNexmo</code> method on your notifiable entity <router-link to="/docs/{{version}}/notifications#routing-sms-notifications">as described in the documentation</router-link>.</p>\n\n          <p><a name="password-reset"></a></p>\n          <h3>\n            <a href="#password-reset">\n              Password Reset\n            </a>\n          </h3>\n          <p><a name="password-validation"></a></p>\n          <h4>\n            <a href="#password-validation">\n              Password Validation\n            </a>\n          </h4><p><strong>Likelihood Of Impact: Low</strong></p>\n<p>The <code>PasswordBroker</code> no longer restricts or validates passwords. Password validation was already being handled by the <code>ResetPasswordController</code> class, making the broker&#39;s validations redundant and impossible to customize. If you are manually using the <code>PasswordBroker</code> (or <code>Password</code> facade) outside of the built-in <code>ResetPasswordController</code>, you should validate all passwords before passing them to the broker.</p>\n\n          <p><a name="queues"></a></p>\n          <h3>\n            <a href="#queues">\n              Queues\n            </a>\n          </h3><p><a name="queue-retry-limit"></a></p>\n\n          <p><a name="queue-retry-limit"></a></p>\n          <h4>\n            <a href="#queue-retry-limit">\n              Queue Retry Limit\n            </a>\n          </h4><p><strong>Likelihood Of Impact: Medium</strong></p>\n<p>In previous releases of Laravel, the <code>php artisan queue:work</code> command would retry jobs indefinitely. Beginning with Laravel 6.0, this command will now try a job one time by default. If you would like to force jobs to be tried indefinitely, you may pass <code>0</code> to the <code>--tries</code> option:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan queue:<span class="hljs-keyword">work</span> <span class="hljs-comment">--tries=0</span></code></pre>\n  <p>In addition, please ensure your application&#39;s database contains a <code>failed_jobs</code> table. You can generate a migration for this table using the <code>queue:failed-table</code> Artisan command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan queue:failed-<span class="hljs-keyword">table</span></code></pre>\n  \n          <p><a name="requests"></a></p>\n          <h3>\n            <a href="#requests">\n              Requests\n            </a>\n          </h3><p><a name="the-input-facade"></a></p>\n\n          <p><a name="the-code-input-code-facade"></a></p>\n          <h4>\n            <a href="#the-code-input-code-facade">\n              The <code>Input</code> Facade\n            </a>\n          </h4><p><strong>Likelihood Of Impact: Medium</strong></p>\n<p>The <code>Input</code> facade, which was primarily a duplicate of the <code>Request</code> facade, has been removed. If you are using the <code>Input::get</code> method, you should now call the <code>Request::input</code> method. All other calls to the <code>Input</code> facade may simply be updated to use the <code>Request</code> facade.</p>\n\n          <p><a name="scheduling"></a></p>\n          <h3>\n            <a href="#scheduling">\n              Scheduling\n            </a>\n          </h3>\n          <p><a name="the-code-between-code-method"></a></p>\n          <h4>\n            <a href="#the-code-between-code-method">\n              The <code>between</code> Method\n            </a>\n          </h4><p><strong>Likelihood Of Impact: Low</strong></p>\n<p>In previous releases of Laravel, the scheduler&#39;s <code>between</code> method exhibited confusing behavior across date boundaries. For example:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$schedule</span>-&gt;command(<span class="hljs-string">\'list\'</span>)-&gt;between(<span class="hljs-string">\'23:00\'</span>, <span class="hljs-string">\'4:00\'</span>);</code></pre>\n  <p>For most users, the expected behavior of this method would be to run the <code>list</code> command every minute for all minutes between 23:00 and 4:00. However, in previous releases of Laravel, the scheduler ran the <code>list</code> command every minute between 4:00 and 23:00, essentially swapping the time thresholds. In Laravel 6.0, this behavior has been corrected.</p>\n\n          <p><a name="storage"></a></p>\n          <h3>\n            <a href="#storage">\n              Storage\n            </a>\n          </h3><p><a name="rackspace-storage-driver"></a></p>\n\n          <p><a name="rackspace-storage-driver-removed"></a></p>\n          <h4>\n            <a href="#rackspace-storage-driver-removed">\n              Rackspace Storage Driver Removed\n            </a>\n          </h4><p><strong>Likelihood Of Impact: Low</strong></p>\n<p>The <code>rackspace</code> storage driver has been removed. If you would like to continue using Rackspace as a storage provider, we encourage you to adopt a community maintained package of your choice that provides this driver.</p>\n\n          <p><a name="url-generation"></a></p>\n          <h3>\n            <a href="#url-generation">\n              URL Generation\n            </a>\n          </h3>\n          <p><a name="route-url-generation-amp-extra-parameters"></a></p>\n          <h4>\n            <a href="#route-url-generation-amp-extra-parameters">\n              Route URL Generation &amp; Extra Parameters\n            </a>\n          </h4><p>In previous releases of Laravel, passing associative array parameters to the <code>route</code> helper or <code>URL::route</code> method would occasionally use these parameters as URI values when generating URLs for routes, even if the parameter value had no matching key within the route path. Beginning in Laravel 6.0, these values will be attached to the query string instead. For example, consider the following route:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'/profile/{location}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($location = null)</span> </span>{\n    <span class="hljs-comment">//</span>\n})-&gt;name(<span class="hljs-string">\'profile\'</span>);\n\n<span class="hljs-comment">// Laravel 5.8: http://example.com/profile/active</span>\n<span class="hljs-keyword">echo</span> route(<span class="hljs-string">\'profile\'</span>, [<span class="hljs-string">\'status\'</span> =&gt; <span class="hljs-string">\'active\'</span>]);\n\n<span class="hljs-comment">// Laravel 6.0: http://example.com/profile?status=active</span>\n<span class="hljs-keyword">echo</span> route(<span class="hljs-string">\'profile\'</span>, [<span class="hljs-string">\'status\'</span> =&gt; <span class="hljs-string">\'active\'</span>]);    </code></pre>\n  <p>The <code>action</code> helper and <code>URL::action</code> method are also affected by this change:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'/profile/{id}\'</span>, <span class="hljs-string">\'ProfileController@show\'</span>);\n\n<span class="hljs-comment">// Laravel 5.8: http://example.com/profile/1</span>\n<span class="hljs-keyword">echo</span> action(<span class="hljs-string">\'ProfileController@show\'</span>, [<span class="hljs-string">\'profile\'</span> =&gt; <span class="hljs-number">1</span>]);\n\n<span class="hljs-comment">// Laravel 6.0: http://example.com/profile?profile=1</span>\n<span class="hljs-keyword">echo</span> action(<span class="hljs-string">\'ProfileController@show\'</span>, [<span class="hljs-string">\'profile\'</span> =&gt; <span class="hljs-number">1</span>]);   </code></pre>\n  \n          <p><a name="validation"></a></p>\n          <h3>\n            <a href="#validation">\n              Validation\n            </a>\n          </h3>\n          <p><a name="formrequest-code-validationdata-code-method"></a></p>\n          <h4>\n            <a href="#formrequest-code-validationdata-code-method">\n              FormRequest <code>validationData</code> Method\n            </a>\n          </h4><p><strong>Likelihood Of Impact: Low</strong></p>\n<p>The form request&#39;s <code>validationData</code> method was changed from <code>protected</code> to <code>public</code>. If you are overriding this method in your implementation, you should update the visibility to <code>public</code>.</p>\n<p><a name="miscellaneous"></a></p>\n\n          <p><a name="miscellaneous"></a></p>\n          <h3>\n            <a href="#miscellaneous">\n              Miscellaneous\n            </a>\n          </h3><p>We also encourage you to view the changes in the <code>laravel/laravel</code> <router-link to="https://github.com/laravel/laravel">GitHub repository</router-link>. While many of these changes are not required, you may wish to keep these files in sync with your application. Some of these changes will be covered in this upgrade guide, but others, such as changes to configuration files or comments, will not be. You can easily view the changes with the <router-link to="https://github.com/laravel/laravel/compare/5.8...master">GitHub comparison tool</router-link> and choose which updates are important to you.</p>\n'},b2726:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="database-pagination"></a></p>\n          <h1>\n            <a href="#database-pagination">\n              Database: Pagination\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#basic-usage">Basic Usage</a><ul>\n<li><a href="#paginating-query-builder-results">Paginating Query Builder Results</a></li>\n<li><a href="#paginating-eloquent-results">Paginating Eloquent Results</a></li>\n<li><a href="#manually-creating-a-paginator">Manually Creating A Paginator</a></li>\n</ul>\n</li>\n<li><a href="#displaying-pagination-results">Displaying Pagination Results</a><ul>\n<li><a href="#converting-results-to-json">Converting Results To JSON</a></li>\n</ul>\n</li>\n<li><a href="#customizing-the-pagination-view">Customizing The Pagination View</a></li>\n<li><a href="#paginator-instance-methods">Paginator Instance Methods</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>In other frameworks, pagination can be very painful. Laravel&#39;s paginator is integrated with the <router-link to="/docs/queries">query builder</router-link> and <router-link to="/docs/eloquent">Eloquent ORM</router-link> and provides convenient, easy-to-use pagination of database results out of the box. The HTML generated by the paginator is compatible with the <router-link to="https://getbootstrap.com/">Bootstrap CSS framework</router-link>.</p>\n<p><a name="basic-usage"></a></p>\n\n          <p><a name="basic-usage"></a></p>\n          <h2>\n            <a href="#basic-usage">\n              Basic Usage\n            </a>\n          </h2><p><a name="paginating-query-builder-results"></a></p>\n\n          <p><a name="paginating-query-builder-results"></a></p>\n          <h3>\n            <a href="#paginating-query-builder-results">\n              Paginating Query Builder Results\n            </a>\n          </h3><p>There are several ways to paginate items. The simplest is by using the <code>paginate</code> method on the <router-link to="/docs/queries">query builder</router-link> or an <router-link to="/docs/eloquent">Eloquent query</router-link>. The <code>paginate</code> method automatically takes care of setting the proper limit and offset based on the current page being viewed by the user. By default, the current page is detected by the value of the <code>page</code> query string argument on the HTTP request. This value is automatically detected by Laravel, and is also automatically inserted into links generated by the paginator.</p>\n<p>In this example, the only argument passed to the <code>paginate</code> method is the number of items you would like displayed &quot;per page&quot;. In this case, let&#39;s specify that we would like to display <code>15</code> items per page:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIEZha2VyXFxGYWN0b3J5O1xuJGZha2VyID0gRmFjdG9yeTo6Y3JlYXRlKCk7XG5cbi8vIFBvcHVsYXRlIGRhdGFiYXNlIHdpdGggdXNlcnNcbmZvcigkaT0wOyAkaTwyMDsgJGkrKykge1xuICAgIERCOjppbnNlcnQoJ2luc2VydCBpbnRvIHVzZXJzIChuYW1lLCBlbWFpbCwgcGFzc3dvcmQpIHZhbHVlcyAoPywgPywgPyknLCBbXG4gICAgICAgICRmYWtlci0+bmFtZSwgXG4gICAgICAgICRmYWtlci0+ZW1haWwsIFxuICAgICAgICAndGVzdCdcbiAgICBdKTtcbn1cblxuY2xhc3MgVGlua2Vyd2VsbENvbnRyb2xsZXIge1xuXG4gICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KClcbiAgICB7XG4gICAgICAgICR1c2VycyA9IERCOjp0YWJsZSgndXNlcnMnKS0+cGFnaW5hdGUoMTUpO1xuXG4gICAgICAgIHJldHVybiB2aWV3KCdfX3Rpbmtlcl9fOjp0aW5rZXJ3ZWxsJywgWyd1c2VycycgPT4gJHVzZXJzXSk7XG4gICAgfVxufVxuIiwidmlld0NvZGUiOiJcbkBmb3JlYWNoKCR1c2VycyBhcyAkdXNlcilcbiAgICB7eyAkdXNlci0+bmFtZSB9fTxicj5cbkBlbmRmb3JlYWNoXG5cbnt7ICR1c2VycyB9fVxuICAgICIsImhhc2giOiJwYWdpbmF0aW9uLXBhZ2luYXRpbmctcXVlcnktYnVpbGRlci1yZXN1bHRzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">Controller</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">DB</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Show all of the users for the application.\n     *\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">()</span>\n    </span>{\n        $users = DB::table(<span class="hljs-string">\'users\'</span>)-&gt;paginate(<span class="hljs-number">15</span>);\n\n        <span class="hljs-keyword">return</span> view(<span class="hljs-string">\'user.index\'</span>, [<span class="hljs-string">\'users\'</span> =&gt; $users]);\n    }\n}</span></code></pre>\n  \n          <p><a name="-quot-simple-pagination-quot-"></a></p>\n          <h4>\n            <a href="#-quot-simple-pagination-quot-">\n              &quot;Simple Pagination&quot;\n            </a>\n          </h4><p>If you only need to display simple &quot;Next&quot; and &quot;Previous&quot; links in your pagination view, you may use the <code>simplePaginate</code> method to perform a more efficient query. This is very useful for large datasets when you do not need to display a link for each page number when rendering your view:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$users</span> = DB::table(<span class="hljs-string">\'users\'</span>)-&gt;simplePaginate(<span class="hljs-number">15</span>);</code></pre>\n  <p><a name="paginating-eloquent-results"></a></p>\n\n          <p><a name="paginating-eloquent-results"></a></p>\n          <h3>\n            <a href="#paginating-eloquent-results">\n              Paginating Eloquent Results\n            </a>\n          </h3><p>You may also paginate <router-link to="/docs/eloquent">Eloquent</router-link> queries. In this example, we will paginate the <code>User</code> model with <code>15</code> items per page. As you can see, the syntax is nearly identical to paginating query builder results:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIEZha2VyXFxGYWN0b3J5O1xudXNlIEFwcFxcVXNlcjtcblxuJGZha2VyID0gRmFjdG9yeTo6Y3JlYXRlKCk7XG5cbi8vIFBvcHVsYXRlIGRhdGFiYXNlIHdpdGggdXNlcnNcbmZvcigkaT0wOyAkaTwyMDsgJGkrKykge1xuICAgIERCOjppbnNlcnQoJ2luc2VydCBpbnRvIHVzZXJzIChuYW1lLCBlbWFpbCwgcGFzc3dvcmQpIHZhbHVlcyAoPywgPywgPyknLCBbXG4gICAgICAgICRmYWtlci0+bmFtZSwgXG4gICAgICAgICRmYWtlci0+ZW1haWwsIFxuICAgICAgICAndGVzdCdcbiAgICBdKTtcbn1cblxuY2xhc3MgVGlua2Vyd2VsbENvbnRyb2xsZXIge1xuXG4gICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KClcbiAgICB7XG4gICAgICAgICR1c2VycyA9IFVzZXI6OnBhZ2luYXRlKDE1KTtcblxuICAgICAgICByZXR1cm4gdmlldygnX190aW5rZXJfXzo6dGlua2Vyd2VsbCcsIFsndXNlcnMnID0+ICR1c2Vyc10pO1xuICAgIH1cbn1cbiIsInZpZXdDb2RlIjoiXG5AZm9yZWFjaCgkdXNlcnMgYXMgJHVzZXIpXG4gICAge3sgJHVzZXItPm5hbWUgfX08YnI+XG5AZW5kZm9yZWFjaFxuXG57eyAkdXNlcnMgfX1cbiAgICAiLCJoYXNoIjoicGFnaW5hdGlvbi1wYWdpbmF0aW5nLWVsb3F1ZW50LXJlc3VsdHMifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$users</span> = App\\User::paginate(<span class="hljs-number">15</span>);</code></pre>\n  <p>You may call <code>paginate</code> after setting other constraints on the query, such as <code>where</code> clauses:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$users</span> = User::where(<span class="hljs-string">\'votes\'</span>, <span class="hljs-string">\'&gt;\'</span>, <span class="hljs-number">100</span>)-&gt;paginate(<span class="hljs-number">15</span>);</code></pre>\n  <p>You may also use the <code>simplePaginate</code> method when paginating Eloquent models:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIEZha2VyXFxGYWN0b3J5O1xudXNlIEFwcFxcVXNlcjtcblxuJGZha2VyID0gRmFjdG9yeTo6Y3JlYXRlKCk7XG5cbi8vIFBvcHVsYXRlIGRhdGFiYXNlIHdpdGggdXNlcnNcbmZvcigkaT0wOyAkaTwyMDsgJGkrKykge1xuICAgIERCOjppbnNlcnQoJ2luc2VydCBpbnRvIHVzZXJzIChuYW1lLCBlbWFpbCwgcGFzc3dvcmQpIHZhbHVlcyAoPywgPywgPyknLCBbXG4gICAgICAgICRmYWtlci0+bmFtZSwgXG4gICAgICAgICRmYWtlci0+ZW1haWwsIFxuICAgICAgICAndGVzdCdcbiAgICBdKTtcbn1cblxuY2xhc3MgVGlua2Vyd2VsbENvbnRyb2xsZXIge1xuXG4gICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KClcbiAgICB7XG4gICAgICAgICR1c2VycyA9IFVzZXI6OnNpbXBsZVBhZ2luYXRlKDE1KTtcblxuICAgICAgICByZXR1cm4gdmlldygnX190aW5rZXJfXzo6dGlua2Vyd2VsbCcsIFsndXNlcnMnID0+ICR1c2Vyc10pO1xuICAgIH1cbn1cbiIsInZpZXdDb2RlIjoiXG5AZm9yZWFjaCgkdXNlcnMgYXMgJHVzZXIpXG4gICAge3sgJHVzZXItPm5hbWUgfX08YnI+XG5AZW5kZm9yZWFjaFxuXG57eyAkdXNlcnMgfX1cbiAgICAiLCJoYXNoIjoicGFnaW5hdGlvbi1wYWdpbmF0aW5nLWVsb3F1ZW50LXJlc3VsdHMifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$users</span> = User::where(<span class="hljs-string">\'votes\'</span>, <span class="hljs-string">\'&gt;\'</span>, <span class="hljs-number">100</span>)-&gt;simplePaginate(<span class="hljs-number">15</span>);</code></pre>\n  <p><a name="manually-creating-a-paginator"></a></p>\n\n          <p><a name="manually-creating-a-paginator"></a></p>\n          <h3>\n            <a href="#manually-creating-a-paginator">\n              Manually Creating A Paginator\n            </a>\n          </h3><p>Sometimes you may wish to create a pagination instance manually, passing it an array of items. You may do so by creating either an <code>Illuminate\\Pagination\\Paginator</code> or <code>Illuminate\\Pagination\\LengthAwarePaginator</code> instance, depending on your needs.</p>\n<p>The <code>Paginator</code> class does not need to know the total number of items in the result set; however, because of this, the class does not have methods for retrieving the index of the last page. The <code>LengthAwarePaginator</code> accepts almost the same arguments as the <code>Paginator</code>; however, it does require a count of the total number of items in the result set.</p>\n<p>In other words, the <code>Paginator</code> corresponds to the <code>simplePaginate</code> method on the query builder and Eloquent, while the <code>LengthAwarePaginator</code> corresponds to the <code>paginate</code> method.</p>\n<blockquote>\n<p>{note} When manually creating a paginator instance, you should manually &quot;slice&quot; the array of results you pass to the paginator. If you&#39;re unsure how to do this, check out the <router-link to="https://secure.php.net/manual/en/function.array-slice.php">array_slice</router-link> PHP function.</p>\n</blockquote>\n<p><a name="displaying-pagination-results"></a></p>\n\n          <p><a name="displaying-pagination-results"></a></p>\n          <h2>\n            <a href="#displaying-pagination-results">\n              Displaying Pagination Results\n            </a>\n          </h2><p>When calling the <code>paginate</code> method, you will receive an instance of <code>Illuminate\\Pagination\\LengthAwarePaginator</code>. When calling the <code>simplePaginate</code> method, you will receive an instance of <code>Illuminate\\Pagination\\Paginator</code>. These objects provide several methods that describe the result set. In addition to these helpers methods, the paginator instances are iterators and may be looped as an array. So, once you have retrieved the results, you may display the results and render the page links using <router-link to="/docs/blade">Blade</router-link>:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIEZha2VyXFxGYWN0b3J5O1xudXNlIEFwcFxcVXNlcjtcblxuJGZha2VyID0gRmFjdG9yeTo6Y3JlYXRlKCk7XG5cbi8vIFBvcHVsYXRlIGRhdGFiYXNlIHdpdGggdXNlcnNcbmZvcigkaT0wOyAkaTwyMDsgJGkrKykge1xuICAgIERCOjppbnNlcnQoJ2luc2VydCBpbnRvIHVzZXJzIChuYW1lLCBlbWFpbCwgcGFzc3dvcmQpIHZhbHVlcyAoPywgPywgPyknLCBbXG4gICAgICAgICRmYWtlci0+bmFtZSwgXG4gICAgICAgICRmYWtlci0+ZW1haWwsIFxuICAgICAgICAndGVzdCdcbiAgICBdKTtcbn1cblxuY2xhc3MgVGlua2Vyd2VsbENvbnRyb2xsZXIge1xuXG4gICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KClcbiAgICB7XG4gICAgICAgICR1c2VycyA9IFVzZXI6OnNpbXBsZVBhZ2luYXRlKDE1KTtcblxuICAgICAgICByZXR1cm4gdmlldygnX190aW5rZXJfXzo6dGlua2Vyd2VsbCcsIFsndXNlcnMnID0+ICR1c2Vyc10pO1xuICAgIH1cbn1cbiIsInZpZXdDb2RlIjoiXG48ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+XG4gICAgQGZvcmVhY2ggKCR1c2VycyBhcyAkdXNlcilcbiAgICAgICAge3sgJHVzZXItPm5hbWUgfX1cbiAgICBAZW5kZm9yZWFjaFxuPC9kaXY+XG5cbnt7ICR1c2Vycy0+bGlua3MoKSB9fVxuICAgICIsImhhc2giOiJwYWdpbmF0aW9uLWRpc3BsYXlpbmctcGFnaW5hdGlvbi1yZXN1bHRzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">"container"</span>&gt;\n    @<span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$users</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$user</span>)\n        {{ <span class="hljs-variable">$user</span>-&gt;name }}\n    @endforeach\n&lt;/div&gt;\n\n{{ <span class="hljs-variable">$users</span>-&gt;links() }}</code></pre>\n  <p>The <code>links</code> method will render the links to the rest of the pages in the result set. Each of these links will already contain the proper <code>page</code> query string variable. Remember, the HTML generated by the <code>links</code> method is compatible with the <router-link to="https://getbootstrap.com">Bootstrap CSS framework</router-link>.</p>\n\n          <p><a name="customizing-the-paginator-uri"></a></p>\n          <h4>\n            <a href="#customizing-the-paginator-uri">\n              Customizing The Paginator URI\n            </a>\n          </h4><p>The <code>withPath</code> method allows you to customize the URI used by the paginator when generating links. For example, if you want the paginator to generate links like <code>http://example.com/custom/url?page=N</code>, you should pass <code>custom/url</code> to the <code>withPath</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'users\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    $users = App\\User::paginate(<span class="hljs-number">15</span>);\n\n    $users-&gt;withPath(<span class="hljs-string">\'custom/url\'</span>);\n\n    <span class="hljs-comment">//</span>\n});</code></pre>\n  \n          <p><a name="appending-to-pagination-links"></a></p>\n          <h4>\n            <a href="#appending-to-pagination-links">\n              Appending To Pagination Links\n            </a>\n          </h4><p>You may append to the query string of pagination links using the <code>appends</code> method. For example, to append <code>sort=votes</code> to each pagination link, you should make the following call to <code>appends</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">{{ $users-&gt;appends([<span class="hljs-string">\'sort\'</span> =&gt; <span class="hljs-string">\'votes\'</span>])-&gt;links() }}</code></pre>\n  <p>If you wish to append a &quot;hash fragment&quot; to the paginator&#39;s URLs, you may use the <code>fragment</code> method. For example, to append <code>#foo</code> to the end of each pagination link, make the following call to the <code>fragment</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">{{ $users-&gt;fragment(<span class="hljs-name">\'foo\'</span>)-&gt;links() }}</code></pre>\n  \n          <p><a name="adjusting-the-pagination-link-window"></a></p>\n          <h4>\n            <a href="#adjusting-the-pagination-link-window">\n              Adjusting The Pagination Link Window\n            </a>\n          </h4><p>You may control how many additional links are displayed on each side of the paginator&#39;s URL &quot;window&quot;. By default, three links are displayed on each side of the primary paginator links. However, you may control this number using the <code>onEachSide</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">{{ $users-&gt;onEachSide(<span class="hljs-number">5</span>)-&gt;links() }}</code></pre>\n  <p><a name="converting-results-to-json"></a></p>\n\n          <p><a name="converting-results-to-json"></a></p>\n          <h3>\n            <a href="#converting-results-to-json">\n              Converting Results To JSON\n            </a>\n          </h3><p>The Laravel paginator result classes implement the <code>Illuminate\\Contracts\\Support\\Jsonable</code> Interface contract and expose the <code>toJson</code> method, so it&#39;s very easy to convert your pagination results to JSON. You may also convert a paginator instance to JSON by returning it from a route or controller action:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIEZha2VyXFxGYWN0b3J5O1xudXNlIEFwcFxcVXNlcjtcblxuJGZha2VyID0gRmFjdG9yeTo6Y3JlYXRlKCk7XG5cbi8vIFBvcHVsYXRlIGRhdGFiYXNlIHdpdGggdXNlcnNcbmZvcigkaT0wOyAkaTwyMDsgJGkrKykge1xuICAgIERCOjppbnNlcnQoJ2luc2VydCBpbnRvIHVzZXJzIChuYW1lLCBlbWFpbCwgcGFzc3dvcmQpIHZhbHVlcyAoPywgPywgPyknLCBbXG4gICAgICAgICRmYWtlci0+bmFtZSwgXG4gICAgICAgICRmYWtlci0+ZW1haWwsIFxuICAgICAgICAndGVzdCdcbiAgICBdKTtcbn1cblxuY2xhc3MgVGlua2Vyd2VsbENvbnRyb2xsZXIge1xuXG4gICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KClcbiAgICB7XG4gICAgICAgIHJldHVybiBVc2VyOjpwYWdpbmF0ZSgxNSk7XG4gICAgfVxufVxuIiwidmlld0NvZGUiOiJ7ey0tIG5vdCBuZWVkZWQgLS19fSIsImhhc2giOiJwYWdpbmF0aW9uLWNvbnZlcnRpbmctcmVzdWx0cy10by1qc29uIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'users\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> App\\User::paginate();\n});</code></pre>\n  <p>The JSON from the paginator will include meta information such as <code>total</code>, <code>current_page</code>, <code>last_page</code>, and more. The actual result objects will be available via the <code>data</code> key in the JSON array. Here is an example of the JSON created by returning a paginator instance from a route:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">{\n   <span class="hljs-string">"total"</span>: <span class="hljs-number">50</span>,\n   <span class="hljs-string">"per_page"</span>: <span class="hljs-number">15</span>,\n   <span class="hljs-string">"current_page"</span>: <span class="hljs-number">1</span>,\n   <span class="hljs-string">"last_page"</span>: <span class="hljs-number">4</span>,\n   <span class="hljs-string">"first_page_url"</span>: <span class="hljs-string">"http://laravel.app?page=1"</span>,\n   <span class="hljs-string">"last_page_url"</span>: <span class="hljs-string">"http://laravel.app?page=4"</span>,\n   <span class="hljs-string">"next_page_url"</span>: <span class="hljs-string">"http://laravel.app?page=2"</span>,\n   <span class="hljs-string">"prev_page_url"</span>: null,\n   <span class="hljs-string">"path"</span>: <span class="hljs-string">"http://laravel.app"</span>,\n   <span class="hljs-string">"from"</span>: <span class="hljs-number">1</span>,\n   <span class="hljs-string">"to"</span>: <span class="hljs-number">15</span>,\n   <span class="hljs-string">"data"</span>:[\n        {\n            // Result Object\n        },\n        {\n            // Result Object\n        }\n   ]\n}</code></pre>\n  <p><a name="customizing-the-pagination-view"></a></p>\n\n          <p><a name="customizing-the-pagination-view"></a></p>\n          <h2>\n            <a href="#customizing-the-pagination-view">\n              Customizing The Pagination View\n            </a>\n          </h2><p>By default, the views rendered to display the pagination links are compatible with the Bootstrap CSS framework. However, if you are not using Bootstrap, you are free to define your own views to render these links. When calling the <code>links</code> method on a paginator instance, pass the view name as the first argument to the method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">{{ $paginator-&gt;links(<span class="hljs-string">\'view.name\'</span>) }}\n\n<span class="hljs-comment">// Passing data to the view...</span>\n{{ $paginator-&gt;links(<span class="hljs-string">\'view.name\'</span>, [<span class="hljs-string">\'foo\'</span> =&gt; <span class="hljs-string">\'bar\'</span>]) }}</code></pre>\n  <p>However, the easiest way to customize the pagination views is by exporting them to your <code>resources/views/vendor</code> directory using the <code>vendor:publish</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan vendor:publish <span class="hljs-attribute">--tag</span>=laravel-pagination</code></pre>\n  <p>This command will place the views in the <code>resources/views/vendor/pagination</code> directory. The <code>bootstrap-4.blade.php</code> file within this directory corresponds to the default pagination view. You may edit this file to modify the pagination HTML.</p>\n<p>If you would like to designate a different file as the default pagination view, you may use the paginator&#39;s <code>defaultView</code> and <code>defaultSimpleView</code> methods within your <code>AppServiceProvider</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">use</span> <span class="hljs-selector-tag">Illuminate</span>\\<span class="hljs-selector-tag">Pagination</span>\\<span class="hljs-selector-tag">Paginator</span>;\n\n<span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">function</span> <span class="hljs-selector-tag">boot</span>()\n{\n    <span class="hljs-attribute">Paginator</span>::<span class="hljs-built_in">defaultView</span>(<span class="hljs-string">\'view-name\'</span>);\n\n    <span class="hljs-attribute">Paginator</span>::<span class="hljs-built_in">defaultSimpleView</span>(<span class="hljs-string">\'view-name\'</span>);\n}</code></pre>\n  <p><a name="paginator-instance-methods"></a></p>\n\n          <p><a name="paginator-instance-methods"></a></p>\n          <h2>\n            <a href="#paginator-instance-methods">\n              Paginator Instance Methods\n            </a>\n          </h2><p>Each paginator instance provides additional pagination information via the following methods:</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>$results-&gt;count()</code></td>\n<td>Get the number of items for the current page.</td>\n</tr>\n<tr>\n<td><code>$results-&gt;currentPage()</code></td>\n<td>Get the current page number.</td>\n</tr>\n<tr>\n<td><code>$results-&gt;firstItem()</code></td>\n<td>Get the result number of the first item in the results.</td>\n</tr>\n<tr>\n<td><code>$results-&gt;getOptions()</code></td>\n<td>Get the paginator options.</td>\n</tr>\n<tr>\n<td><code>$results-&gt;getUrlRange($start, $end)</code></td>\n<td>Create a range of pagination URLs.</td>\n</tr>\n<tr>\n<td><code>$results-&gt;hasMorePages()</code></td>\n<td>Determine if there are enough items to split into multiple pages.</td>\n</tr>\n<tr>\n<td><code>$results-&gt;items()</code></td>\n<td>Get the items for the current page.</td>\n</tr>\n<tr>\n<td><code>$results-&gt;lastItem()</code></td>\n<td>Get the result number of the last item in the results.</td>\n</tr>\n<tr>\n<td><code>$results-&gt;lastPage()</code></td>\n<td>Get the page number of the last available page. (Not available when using <code>simplePaginate</code>).</td>\n</tr>\n<tr>\n<td><code>$results-&gt;nextPageUrl()</code></td>\n<td>Get the URL for the next page.</td>\n</tr>\n<tr>\n<td><code>$results-&gt;onFirstPage()</code></td>\n<td>Determine if the paginator is on the first page.</td>\n</tr>\n<tr>\n<td><code>$results-&gt;perPage()</code></td>\n<td>The number of items to be shown per page.</td>\n</tr>\n<tr>\n<td><code>$results-&gt;previousPageUrl()</code></td>\n<td>Get the URL for the previous page.</td>\n</tr>\n<tr>\n<td><code>$results-&gt;total()</code></td>\n<td>Determine the total number of matching items in the data store. (Not available when using <code>simplePaginate</code>).</td>\n</tr>\n<tr>\n<td><code>$results-&gt;url($page)</code></td>\n<td>Get the URL for a given page number.</td>\n</tr>\n<tr>\n<td><code>$results-&gt;getPageName()</code></td>\n<td>Get the query string variable used to store the page.</td>\n</tr>\n<tr>\n<td><code>$results-&gt;setPageName($name)</code></td>\n<td>Set the query string variable used to store the page.</td>\n</tr>\n</tbody></table>\n'},b32e:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="database-seeding"></a></p>\n          <h1>\n            <a href="#database-seeding">\n              Database: Seeding\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#writing-seeders">Writing Seeders</a><ul>\n<li><a href="#using-model-factories">Using Model Factories</a></li>\n<li><a href="#calling-additional-seeders">Calling Additional Seeders</a></li>\n</ul>\n</li>\n<li><a href="#running-seeders">Running Seeders</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Laravel includes a simple method of seeding your database with test data using seed classes. All seed classes are stored in the <code>database/seeds</code> directory. Seed classes may have any name you wish, but probably should follow some sensible convention, such as <code>UsersTableSeeder</code>, etc. By default, a <code>DatabaseSeeder</code> class is defined for you. From this class, you may use the <code>call</code> method to run other seed classes, allowing you to control the seeding order.</p>\n<p><a name="writing-seeders"></a></p>\n\n          <p><a name="writing-seeders"></a></p>\n          <h2>\n            <a href="#writing-seeders">\n              Writing Seeders\n            </a>\n          </h2><p>To generate a seeder, execute the <code>make:seeder</code> <router-link to="/docs/{{version}}/artisan">Artisan command</router-link>. All seeders generated by the framework will be placed in the <code>database/seeds</code> directory:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">make</span><span class="hljs-selector-pseudo">:seeder</span> <span class="hljs-selector-tag">UsersTableSeeder</span></code></pre>\n  <p>A seeder class only contains one method by default: <code>run</code>. This method is called when the <code>db:seed</code> <router-link to="/docs/{{version}}/artisan">Artisan command</router-link> is executed. Within the <code>run</code> method, you may insert data into your database however you wish. You may use the <router-link to="/docs/{{version}}/queries">query builder</router-link> to manually insert data or you may use <router-link to="/docs/{{version}}/database-testing#writing-factories">Eloquent model factories</router-link>.</p>\n<blockquote>\n<p>{tip} <router-link to="/docs/{{version}}/eloquent#mass-assignment">Mass assignment protection</router-link> is automatically disabled during database seeding.</p>\n</blockquote>\n<p>As an example, let&#39;s modify the default <code>DatabaseSeeder</code> class and add a database insert statement to the <code>run</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Seeder</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">DB</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Str</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DatabaseSeeder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Seeder</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Run the database seeds.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span><span class="hljs-params">()</span>\n    </span>{\n        DB::table(<span class="hljs-string">\'users\'</span>)-&gt;insert([\n            <span class="hljs-string">\'name\'</span> =&gt; Str::random(<span class="hljs-number">10</span>),\n            <span class="hljs-string">\'email\'</span> =&gt; Str::random(<span class="hljs-number">10</span>).<span class="hljs-string">\'@gmail.com\'</span>,\n            <span class="hljs-string">\'password\'</span> =&gt; bcrypt(<span class="hljs-string">\'password\'</span>),\n        ]);\n    }\n}</span></code></pre>\n  <blockquote>\n<p>{tip} You may type-hint any dependencies you need within the <code>run</code> method&#39;s signature. They will automatically be resolved via the Laravel <router-link to="/docs/{{version}}/container">service container</router-link>.</p>\n</blockquote>\n<p><a name="using-model-factories"></a></p>\n\n          <p><a name="using-model-factories"></a></p>\n          <h3>\n            <a href="#using-model-factories">\n              Using Model Factories\n            </a>\n          </h3><p>Of course, manually specifying the attributes for each model seed is cumbersome. Instead, you can use <router-link to="/docs/{{version}}/database-testing#writing-factories">model factories</router-link> to conveniently generate large amounts of database records. First, review the <router-link to="/docs/{{version}}/database-testing#writing-factories">model factory documentation</router-link> to learn how to define your factories. Once you have defined your factories, you may use the <code>factory</code> helper function to insert records into your database.</p>\n<p>For example, let&#39;s create 50 users and attach a relationship to each user:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Run the database seeds.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span><span class="hljs-params">()</span>\n</span>{\n    factory(App\\User::class, <span class="hljs-number">50</span>)-&gt;create()-&gt;each(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($user)</span> </span>{\n        $user-&gt;posts()-&gt;save(factory(App\\Post::class)-&gt;make());\n    });\n}</code></pre>\n  <p><a name="calling-additional-seeders"></a></p>\n\n          <p><a name="calling-additional-seeders"></a></p>\n          <h3>\n            <a href="#calling-additional-seeders">\n              Calling Additional Seeders\n            </a>\n          </h3><p>Within the <code>DatabaseSeeder</code> class, you may use the <code>call</code> method to execute additional seed classes. Using the <code>call</code> method allows you to break up your database seeding into multiple files so that no single seeder class becomes overwhelmingly large. Pass the name of the seeder class you wish to run:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Run the database seeds.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;call([\n        UsersTableSeeder::class,\n        PostsTableSeeder::class,\n        CommentsTableSeeder::class,\n    ]);\n}</code></pre>\n  <p><a name="running-seeders"></a></p>\n\n          <p><a name="running-seeders"></a></p>\n          <h2>\n            <a href="#running-seeders">\n              Running Seeders\n            </a>\n          </h2><p>Once you have written your seeder, you may need to regenerate Composer&#39;s autoloader using the <code>dump-autoload</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">composer dump-<span class="hljs-built_in">auto</span>load</code></pre>\n  <p>Now you may use the <code>db:seed</code> Artisan command to seed your database. By default, the <code>db:seed</code> command runs the <code>DatabaseSeeder</code> class, which may be used to call other seed classes. However, you may use the <code>--class</code> option to specify a specific seeder class to run individually:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan db:<span class="hljs-built_in">seed</span>\n\nphp artisan db:<span class="hljs-built_in">seed</span> --<span class="hljs-class"><span class="hljs-keyword">class</span>=<span class="hljs-title">UsersTableSeeder</span></span></code></pre>\n  <p>You may also seed your database using the <code>migrate:fresh</code> command, which will drop all tables and re-run all of your migrations. This command is useful for completely re-building your database:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan migrate:fresh <span class="hljs-comment">--seed</span></code></pre>\n  <p><a name="forcing-seeding-production"></a></p>\n\n          <p><a name="forcing-seeders-to-run-in-production"></a></p>\n          <h4>\n            <a href="#forcing-seeders-to-run-in-production">\n              Forcing Seeders To Run In Production\n            </a>\n          </h4><p>Some seeding operations may cause you to alter or lose data. In order to protect you from running seeding commands against your production database, you will be prompted for confirmation before the seeders are executed. To force the seeders to run without a prompt, use the <code>--force</code> flag:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan db:seed <span class="hljs-comment">--force</span></code></pre>\n  '},b352:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="cache"></a></p>\n          <h1>\n            <a href="#cache">\n              Cache\n            </a>\n          </h1><ul>\n<li><a href="#cache-usage">Cache Usage</a><ul>\n<li><a href="#obtaining-a-cache-instance">Obtaining A Cache Instance</a></li>\n<li><a href="#retrieving-items-from-the-cache">Retrieving Items From The Cache</a></li>\n<li><a href="#storing-items-in-the-cache">Storing Items In The Cache</a></li>\n<li><a href="#removing-items-from-the-cache">Removing Items From The Cache</a></li>\n<li><a href="#atomic-locks">Atomic Locks</a></li>\n<li><a href="#the-cache-helper">The Cache Helper</a></li>\n</ul>\n</li>\n</ul>\n<p><a name="cache-usage"></a></p>\n\n          <p><a name="cache-usage"></a></p>\n          <h2>\n            <a href="#cache-usage">\n              Cache Usage\n            </a>\n          </h2><p><a name="obtaining-a-cache-instance"></a></p>\n\n          <p><a name="obtaining-a-cache-instance"></a></p>\n          <h3>\n            <a href="#obtaining-a-cache-instance">\n              Obtaining A Cache Instance\n            </a>\n          </h3><p>The <code>Illuminate\\Contracts\\Cache\\Factory</code> and <code>Illuminate\\Contracts\\Cache\\Repository</code> <router-link to="/docs/contracts">contracts</router-link> provide access to Laravel&#39;s cache services. The <code>Factory</code> contract provides access to all cache drivers defined for your application. The <code>Repository</code> contract is typically an implementation of the default cache driver for your application as specified by your <code>cache</code> configuration file.</p>\n<p>However, you may also use the <code>Cache</code> facade, which is what we will use throughout this documentation. The <code>Cache</code> facade provides convenient, terse access to the underlying implementations of the Laravel cache contracts:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiR2YWx1ZSA9IENhY2hlOjpnZXQoJ2tleScpOyIsImhhc2giOiJjYWNoZS1vYnRhaW5pbmctYS1jYWNoZS1pbnN0YW5jZSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Cache</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Show a list of all users of the application.\n     *\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">()</span>\n    </span>{\n        $value = Cache::get(<span class="hljs-string">\'key\'</span>);\n\n        <span class="hljs-comment">//</span>\n    }\n}</span></code></pre>\n  \n          <p><a name="accessing-multiple-cache-stores"></a></p>\n          <h4>\n            <a href="#accessing-multiple-cache-stores">\n              Accessing Multiple Cache Stores\n            </a>\n          </h4><p>Using the <code>Cache</code> facade, you may access various cache stores via the <code>store</code> method. The key passed to the <code>store</code> method should correspond to one of the stores listed in the <code>stores</code> configuration array in your <code>cache</code> configuration file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$value = <span class="hljs-keyword">Cache</span>::<span class="hljs-keyword">store</span>(<span class="hljs-string">\'file\'</span>)-&gt;<span class="hljs-keyword">get</span>(<span class="hljs-string">\'foo\'</span>);\n\n<span class="hljs-keyword">Cache</span>::<span class="hljs-keyword">store</span>(<span class="hljs-string">\'redis\'</span>)-&gt;put(<span class="hljs-string">\'bar\'</span>, <span class="hljs-string">\'baz\'</span>, <span class="hljs-number">600</span>); // 10 Minutes</code></pre>\n  <p><a name="retrieving-items-from-the-cache"></a></p>\n\n          <p><a name="retrieving-items-from-the-cache"></a></p>\n          <h3>\n            <a href="#retrieving-items-from-the-cache">\n              Retrieving Items From The Cache\n            </a>\n          </h3><p>The <code>get</code> method on the <code>Cache</code> facade is used to retrieve items from the cache. If the item does not exist in the cache, <code>null</code> will be returned. If you wish, you may pass a second argument to the <code>get</code> method specifying the default value you wish to be returned if the item doesn&#39;t exist:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiR2YWx1ZSA9IENhY2hlOjpnZXQoJ2tleScsICdkZWZhdWx0Jyk7IiwiaGFzaCI6ImNhY2hlLXJldHJpZXZpbmctaXRlbXMtZnJvbS10aGUtY2FjaGUifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$value = <span class="hljs-keyword">Cache</span><span class="hljs-type">::get</span>(<span class="hljs-string">\'key\'</span>);\n\n$value = <span class="hljs-keyword">Cache</span><span class="hljs-type">::get</span>(<span class="hljs-string">\'key\'</span>, <span class="hljs-string">\'default\'</span>);</code></pre>\n  <p>You may even pass a <code>Closure</code> as the default value. The result of the <code>Closure</code> will be returned if the specified item does not exist in the cache. Passing a Closure allows you to defer the retrieval of default values from a database or other external service:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiR2YWx1ZSA9IENhY2hlOjpnZXQoJ2tleScsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGltZSgpO1xufSk7IiwiaGFzaCI6ImNhY2hlLXJldHJpZXZpbmctaXRlbXMtZnJvbS10aGUtY2FjaGUifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$value = Cache::get(<span class="hljs-string">\'key\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> DB::table(...)-&gt;get();\n});</code></pre>\n  \n          <p><a name="checking-for-item-existence"></a></p>\n          <h4>\n            <a href="#checking-for-item-existence">\n              Checking For Item Existence\n            </a>\n          </h4><p>The <code>has</code> method may be used to determine if an item exists in the cache. This method will return <code>false</code> if the value is <code>null</code>:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImlmIChDYWNoZTo6aGFzKCdrZXknKSkge1xuICAgIGVjaG8gXCJDYWNoZSBoYXMgdGhlIGtleVwiO1xufSIsImhhc2giOiJjYWNoZS1jaGVja2luZy1mb3ItaXRlbS1leGlzdGVuY2UifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">Cache</span><span class="hljs-type">::has</span>(<span class="hljs-string">\'key\'</span>)) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  \n          <p><a name="incrementing-decrementing-values"></a></p>\n          <h4>\n            <a href="#incrementing-decrementing-values">\n              Incrementing / Decrementing Values\n            </a>\n          </h4><p>The <code>increment</code> and <code>decrement</code> methods may be used to adjust the value of integer items in the cache. Both of these methods accept an optional second argument indicating the amount by which to increment or decrement the item&#39;s value:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IkNhY2hlOjppbmNyZW1lbnQoJ2tleScpO1xuXG5lY2hvIENhY2hlOjpnZXQoJ2tleScpLlBIUF9FT0w7XG5cbkNhY2hlOjppbmNyZW1lbnQoJ2tleScsIDUpO1xuXG5lY2hvIENhY2hlOjpnZXQoJ2tleScpLlBIUF9FT0w7XG5cbkNhY2hlOjpkZWNyZW1lbnQoJ2tleScpO1xuXG5lY2hvIENhY2hlOjpnZXQoJ2tleScpLlBIUF9FT0w7XG5cbkNhY2hlOjpkZWNyZW1lbnQoJ2tleScsIDUpO1xuXG5lY2hvIENhY2hlOjpnZXQoJ2tleScpLlBIUF9FT0w7XG4iLCJoYXNoIjoiY2FjaGUtaW5jcmVtZW50aW5nLS8tZGVjcmVtZW50aW5nLXZhbHVlcyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">Cache</span>::<span class="hljs-keyword">increment</span>(<span class="hljs-string">\'key\'</span>);\n<span class="hljs-keyword">Cache</span>::<span class="hljs-keyword">increment</span>(<span class="hljs-string">\'key\'</span>, $amount);\n<span class="hljs-keyword">Cache</span>::<span class="hljs-keyword">decrement</span>(<span class="hljs-string">\'key\'</span>);\n<span class="hljs-keyword">Cache</span>::<span class="hljs-keyword">decrement</span>(<span class="hljs-string">\'key\'</span>, $amount);</code></pre>\n  \n          <p><a name="retrieve-amp-store"></a></p>\n          <h4>\n            <a href="#retrieve-amp-store">\n              Retrieve &amp; Store\n            </a>\n          </h4><p>Sometimes you may wish to retrieve an item from the cache, but also store a default value if the requested item doesn&#39;t exist. For example, you may wish to retrieve all users from the cache or, if they don&#39;t exist, retrieve them from the database and add them to the cache. You may do this using the <code>Cache::remember</code> method:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiR2YWx1ZSA9IENhY2hlOjpyZW1lbWJlcigndXNlcnMnLCAkc2Vjb25kcyA9IDYwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRpbWUoKTtcbn0pO1xuXG5lY2hvIFBIUF9FT0w7XG5cbmVjaG8gQ2FjaGU6OmdldCgndXNlcnMnKTtcbiIsImhhc2giOiJjYWNoZS1yZXRyaWV2ZS1hbmRhbXA7LXN0b3JlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$value = Cache::remember(<span class="hljs-string">\'users\'</span>, $seconds, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> DB::table(<span class="hljs-string">\'users\'</span>)-&gt;get();\n});</code></pre>\n  <p>If the item does not exist in the cache, the <code>Closure</code> passed to the <code>remember</code> method will be executed and its result will be placed in the cache.</p>\n<p>You may use the <code>rememberForever</code> method to retrieve an item from the cache or store it forever:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$value = Cache::rememberForever(<span class="hljs-string">\'users\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> DB::table(<span class="hljs-string">\'users\'</span>)-&gt;get();\n});</code></pre>\n  \n          <p><a name="retrieve-amp-delete"></a></p>\n          <h4>\n            <a href="#retrieve-amp-delete">\n              Retrieve &amp; Delete\n            </a>\n          </h4><p>If you need to retrieve an item from the cache and then delete the item, you may use the <code>pull</code> method. Like the <code>get</code> method, <code>null</code> will be returned if the item does not exist in the cache:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IkNhY2hlOjpwdXQoJ2tleScsICd2YWx1ZScsICRzZWNvbmRzID0gNjApO1xuXG4kdmFsdWUgPSBDYWNoZTo6cHVsbCgna2V5Jyk7XG5cbnZhcl9kdW1wKCR2YWx1ZSk7XG5cbkNhY2hlOjpnZXQoJ2tleScpO1xuIiwiaGFzaCI6ImNhY2hlLXJldHJpZXZlLWFuZGFtcDstZGVsZXRlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$value = <span class="hljs-keyword">Cache</span><span class="hljs-type">::pull</span>(<span class="hljs-string">\'key\'</span>);</code></pre>\n  <p><a name="storing-items-in-the-cache"></a></p>\n\n          <p><a name="storing-items-in-the-cache"></a></p>\n          <h3>\n            <a href="#storing-items-in-the-cache">\n              Storing Items In The Cache\n            </a>\n          </h3><p>You may use the <code>put</code> method on the <code>Cache</code> facade to store items in the cache:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IkNhY2hlOjpwdXQoJ2tleScsICd2YWx1ZScsIDYwKTtcblxuQ2FjaGU6OmdldCgna2V5Jyk7XG4iLCJoYXNoIjoiY2FjaGUtc3RvcmluZy1pdGVtcy1pbi10aGUtY2FjaGUifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">Cache</span><span class="hljs-type">::put</span>(<span class="hljs-string">\'key\'</span>, <span class="hljs-string">\'value\'</span>, $seconds);</code></pre>\n  <p>If the storage time is not passed to the <code>put</code> method, the item will be stored indefinitely:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">Cache</span><span class="hljs-type">::put</span>(<span class="hljs-string">\'key\'</span>, <span class="hljs-string">\'value\'</span>);</code></pre>\n  <p>Instead of passing the number of seconds as an integer, you may also pass a <code>DateTime</code> instance representing the expiration time of the cached item:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Cache::put<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'key\'</span>, <span class="hljs-string">\'value\'</span>, now()-&gt;addMinutes(<span class="hljs-number">10</span>))</span>;</span></code></pre>\n  \n          <p><a name="store-if-not-present"></a></p>\n          <h4>\n            <a href="#store-if-not-present">\n              Store If Not Present\n            </a>\n          </h4><p>The <code>add</code> method will only add the item to the cache if it does not already exist in the cache store. The method will return <code>true</code> if the item is actually added to the cache. Otherwise, the method will return <code>false</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">Cache</span>::<span class="hljs-keyword">add</span>(<span class="hljs-string">\'key\'</span>, <span class="hljs-string">\'value\'</span>, $<span class="hljs-keyword">seconds</span>);</code></pre>\n  \n          <p><a name="storing-items-forever"></a></p>\n          <h4>\n            <a href="#storing-items-forever">\n              Storing Items Forever\n            </a>\n          </h4><p>The <code>forever</code> method may be used to store an item in the cache permanently. Since these items will not expire, they must be manually removed from the cache using the <code>forget</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">Cache</span><span class="hljs-type">::forever</span>(<span class="hljs-string">\'key\'</span>, <span class="hljs-string">\'value\'</span>);</code></pre>\n  <p><a name="removing-items-from-the-cache"></a></p>\n\n          <p><a name="removing-items-from-the-cache"></a></p>\n          <h3>\n            <a href="#removing-items-from-the-cache">\n              Removing Items From The Cache\n            </a>\n          </h3><p>You may remove items from the cache using the <code>forget</code> method:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IkNhY2hlOjpwdXQoJ2tleScsICd2YWx1ZScsIDYwKTtcblxuQ2FjaGU6OmZvcmdldCgna2V5Jyk7XG5cbkNhY2hlOjpnZXQoJ2tleScpO1xuIiwiaGFzaCI6ImNhY2hlLXJlbW92aW5nLWl0ZW1zLWZyb20tdGhlLWNhY2hlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">Cache</span><span class="hljs-type">::forget</span>(<span class="hljs-string">\'key\'</span>);</code></pre>\n  <p>You may also remove items by providing a zero or negative TTL:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">Cache</span><span class="hljs-type">::put</span>(<span class="hljs-string">\'key\'</span>, <span class="hljs-string">\'value\'</span>, <span class="hljs-number">0</span>);\n\n<span class="hljs-keyword">Cache</span><span class="hljs-type">::put</span>(<span class="hljs-string">\'key\'</span>, <span class="hljs-string">\'value\'</span>, <span class="hljs-number">-5</span>);</code></pre>\n  <p>You may clear the entire cache using the <code>flush</code> method:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IkNhY2hlOjpwdXQoJ2tleScsICd2YWx1ZScsIDYwKTtcblxuQ2FjaGU6OmZsdXNoKCk7XG5cbkNhY2hlOjpnZXQoJ2tleScpO1xuIiwiaGFzaCI6ImNhY2hlLXJlbW92aW5nLWl0ZW1zLWZyb20tdGhlLWNhY2hlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">Cache</span>::<span class="hljs-keyword">flush</span>();</code></pre>\n  <p><a name="the-cache-helper"></a></p>\n\n          <p><a name="the-cache-helper"></a></p>\n          <h3>\n            <a href="#the-cache-helper">\n              The Cache Helper\n            </a>\n          </h3><p>In addition to using the <code>Cache</code> facade or <router-link to="/docs/contracts">cache contract</router-link>, you may also use the global <code>cache</code> function to retrieve and store data via the cache. When the <code>cache</code> function is called with a single, string argument, it will return the value of the given key:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IkNhY2hlOjpwdXQoJ2tleScsICd2YWx1ZScsIDYwKTtcblxuY2FjaGUoJ2tleScpO1xuIiwiaGFzaCI6ImNhY2hlLXRoZS1jYWNoZS1oZWxwZXIifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$value = <span class="hljs-keyword">cache</span>(<span class="hljs-string">\'key\'</span>);</code></pre>\n  <p>If you provide an array of key / value pairs and an expiration time to the function, it will store values in the cache for the specified duration:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImNhY2hlKFsna2V5JyA9PiAndmFsdWUnXSwgNjApO1xuXG5jYWNoZSgna2V5Jyk7XG4iLCJoYXNoIjoiY2FjaGUtdGhlLWNhY2hlLWhlbHBlciJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">cache</span>([<span class="hljs-string">\'key\'</span> =&gt; <span class="hljs-string">\'value\'</span>], $<span class="hljs-keyword">seconds</span>);\n\n<span class="hljs-keyword">cache</span>([<span class="hljs-string">\'key\'</span> =&gt; <span class="hljs-string">\'value\'</span>], <span class="hljs-keyword">now</span>()-&gt;addMinutes(<span class="hljs-number">10</span>));</code></pre>\n  <p>When the <code>cache</code> function is called without any arguments, it returns an instance of the <code>Illuminate\\Contracts\\Cache\\Factory</code> implementation, allowing you to call other caching methods:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImNhY2hlKCktPnJlbWVtYmVyKCd1c2VycycsIDYwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRpbWUoKTtcbn0pO1xuXG5jYWNoZSgndXNlcnMnKTtcbiIsImhhc2giOiJjYWNoZS10aGUtY2FjaGUtaGVscGVyIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">cache<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>remember(<span class="hljs-string">\'users\'</span>, $seconds, <span class="hljs-keyword">function</span> () {\n    <span class="hljs-keyword">return</span> DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>-&gt;</span>get();\n});</code></pre>\n  <p><a name="events"></a></p>\n\n          <p><a name="events"></a></p>\n          <h2>\n            <a href="#events">\n              Events\n            </a>\n          </h2><p>To execute code on every cache operation, you may listen for the <router-link to="/docs/events">events</router-link> fired by the cache. Typically, you should place these event listeners within your <code>EventServiceProvider</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">/**\n * The event listener mappings for the application.\n *\n * @var array\n */\nprotected <span class="hljs-formula">$listen = [\n    \'Illuminate<span class="hljs-tag">\\<span class="hljs-name">Cache</span></span><span class="hljs-tag">\\<span class="hljs-name">Events</span></span><span class="hljs-tag">\\<span class="hljs-name">CacheHit</span></span>\' =&gt; [\n        \'App<span class="hljs-tag">\\<span class="hljs-name">Listeners</span></span><span class="hljs-tag">\\<span class="hljs-name">LogCacheHit</span></span>\',\n    ],\n\n    \'Illuminate<span class="hljs-tag">\\<span class="hljs-name">Cache</span></span><span class="hljs-tag">\\<span class="hljs-name">Events</span></span><span class="hljs-tag">\\<span class="hljs-name">CacheMissed</span></span>\' =&gt; [\n        \'App<span class="hljs-tag">\\<span class="hljs-name">Listeners</span></span><span class="hljs-tag">\\<span class="hljs-name">LogCacheMissed</span></span>\',\n    ],\n\n    \'Illuminate<span class="hljs-tag">\\<span class="hljs-name">Cache</span></span><span class="hljs-tag">\\<span class="hljs-name">Events</span></span><span class="hljs-tag">\\<span class="hljs-name">KeyForgotten</span></span>\' =&gt; [\n        \'App<span class="hljs-tag">\\<span class="hljs-name">Listeners</span></span><span class="hljs-tag">\\<span class="hljs-name">LogKeyForgotten</span></span>\',\n    ],\n\n    \'Illuminate<span class="hljs-tag">\\<span class="hljs-name">Cache</span></span><span class="hljs-tag">\\<span class="hljs-name">Events</span></span><span class="hljs-tag">\\<span class="hljs-name">KeyWritten</span></span>\' =&gt; [\n        \'App<span class="hljs-tag">\\<span class="hljs-name">Listeners</span></span><span class="hljs-tag">\\<span class="hljs-name">LogKeyWritten</span></span>\',\n    ],\n];</span></code></pre>\n  '},bcbc:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="routing"></a></p>\n          <h1>\n            <a href="#routing">\n              Routing\n            </a>\n          </h1><ul>\n<li><a href="#basic-routing">Basic Routing</a><ul>\n<li><a href="#redirect-routes">Redirect Routes</a></li>\n<li><a href="#view-routes">View Routes</a></li>\n</ul>\n</li>\n<li><a href="#route-parameters">Route Parameters</a><ul>\n<li><a href="#required-parameters">Required Parameters</a></li>\n<li><a href="#parameters-optional-parameters">Optional Parameters</a></li>\n<li><a href="#parameters-regular-expression-constraints">Regular Expression Constraints</a></li>\n</ul>\n</li>\n<li><a href="#named-routes">Named Routes</a></li>\n<li><a href="#route-groups">Route Groups</a><ul>\n<li><a href="#route-group-middleware">Middleware</a></li>\n<li><a href="#route-group-namespaces">Namespaces</a></li>\n<li><a href="#route-group-sub-domain-routing">Sub-Domain Routing</a></li>\n<li><a href="#route-group-prefixes">Route Prefixes</a></li>\n<li><a href="#route-group-name-prefixes">Route Name Prefixes</a></li>\n</ul>\n</li>\n<li><a href="#route-model-binding">Route Model Binding</a><ul>\n<li><a href="#implicit-binding">Implicit Binding</a></li>\n<li><a href="#explicit-binding">Explicit Binding</a></li>\n</ul>\n</li>\n<li><a href="#fallback-routes">Fallback Routes</a></li>\n<li><a href="#rate-limiting">Rate Limiting</a></li>\n<li><a href="#form-method-spoofing">Form Method Spoofing</a></li>\n<li><a href="#accessing-the-current-route">Accessing The Current Route</a></li>\n</ul>\n<p><a name="basic-routing"></a></p>\n\n          <p><a name="basic-routing"></a></p>\n          <h2>\n            <a href="#basic-routing">\n              Basic Routing\n            </a>\n          </h2><p>The most basic Laravel routes accept a URI and a <code>Closure</code>, providing a very simple and expressive method of defining routes:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::<span class="hljs-keyword">get</span>(<span class="hljs-string">\'foo\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-string">\'Hello World\'</span>;\n});</code></pre>\n  \n          <p><a name="the-default-route-files"></a></p>\n          <h4>\n            <a href="#the-default-route-files">\n              The Default Route Files\n            </a>\n          </h4><p>All Laravel routes are defined in your route files, which are located in the <code>routes</code> directory. These files are automatically loaded by the framework. The <code>routes/web.php</code> file defines routes that are for your web interface. These routes are assigned the <code>web</code> middleware group, which provides features like session state and CSRF protection. The routes in <code>routes/api.php</code> are stateless and are assigned the <code>api</code> middleware group.</p>\n<p>For most applications, you will begin by defining routes in your <code>routes/web.php</code> file. The routes defined in <code>routes/web.php</code> may be accessed by entering the defined route&#39;s URL in your browser. For example, you may access the following route by navigating to <code>http://your-app.test/user</code> in your browser:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::<span class="hljs-keyword">get</span>(<span class="hljs-string">\'/user\'</span>, <span class="hljs-string">\'UserController@index\'</span>);</code></pre>\n  <p>Routes defined in the <code>routes/api.php</code> file are nested within a route group by the <code>RouteServiceProvider</code>. Within this group, the <code>/api</code> URI prefix is automatically applied so you do not need to manually apply it to every route in the file. You may modify the prefix and other route group options by modifying your <code>RouteServiceProvider</code> class.</p>\n\n          <p><a name="available-router-methods"></a></p>\n          <h4>\n            <a href="#available-router-methods">\n              Available Router Methods\n            </a>\n          </h4><p>The router allows you to register routes that respond to any HTTP verb:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-variable">$uri</span>, <span class="hljs-variable">$callback</span>);\nRoute::post(<span class="hljs-variable">$uri</span>, <span class="hljs-variable">$callback</span>);\nRoute::put(<span class="hljs-variable">$uri</span>, <span class="hljs-variable">$callback</span>);\nRoute::patch(<span class="hljs-variable">$uri</span>, <span class="hljs-variable">$callback</span>);\nRoute::delete(<span class="hljs-variable">$uri</span>, <span class="hljs-variable">$callback</span>);\nRoute::options(<span class="hljs-variable">$uri</span>, <span class="hljs-variable">$callback</span>);</code></pre>\n  <p>Sometimes you may need to register a route that responds to multiple HTTP verbs. You may do so using the <code>match</code> method. Or, you may even register a route that responds to all HTTP verbs using the <code>any</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::match([<span class="hljs-string">\'get\'</span>, <span class="hljs-string">\'post\'</span>], <span class="hljs-string">\'/\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">//</span>\n});\n\nRoute::any(<span class="hljs-string">\'/\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">//</span>\n});</code></pre>\n  \n          <p><a name="csrf-protection"></a></p>\n          <h4>\n            <a href="#csrf-protection">\n              CSRF Protection\n            </a>\n          </h4><p>Any HTML forms pointing to <code>POST</code>, <code>PUT</code>, or <code>DELETE</code> routes that are defined in the <code>web</code> routes file should include a CSRF token field. Otherwise, the request will be rejected. You can read more about CSRF protection in the <router-link to="/docs/csrf">CSRF documentation</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">&lt;form method=<span class="hljs-string">"<span class="hljs-keyword">POST</span>"</span> action=<span class="hljs-string">"/profile"</span>&gt;\n    @csrf\n    ...\n&lt;/form&gt;</code></pre>\n  <p><a name="redirect-routes"></a></p>\n\n          <p><a name="redirect-routes"></a></p>\n          <h3>\n            <a href="#redirect-routes">\n              Redirect Routes\n            </a>\n          </h3><p>If you are defining a route that redirects to another URI, you may use the <code>Route::redirect</code> method. This method provides a convenient shortcut so that you do not have to define a full route or controller for performing a simple redirect:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::redirect(<span class="hljs-string">\'/here\'</span>, <span class="hljs-string">\'/there\'</span>);</code></pre>\n  <p>By default, <code>Route::redirect</code> returns a <code>302</code> status code. You may customize the status code using the optional third parameter:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::redirect(<span class="hljs-string">\'/here\'</span>, <span class="hljs-string">\'/there\'</span>, <span class="hljs-number">301</span>);</code></pre>\n  <p>You may use the <code>Route::permanentRedirect</code> method to return a <code>301</code> status code:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::permanentRedirect(<span class="hljs-string">\'/here\'</span>, <span class="hljs-string">\'/there\'</span>);</code></pre>\n  <p><a name="view-routes"></a></p>\n\n          <p><a name="view-routes"></a></p>\n          <h3>\n            <a href="#view-routes">\n              View Routes\n            </a>\n          </h3><p>If your route only needs to return a view, you may use the <code>Route::view</code> method. Like the <code>redirect</code> method, this method provides a simple shortcut so that you do not have to define a full route or controller. The <code>view</code> method accepts a URI as its first argument and a view name as its second argument. In addition, you may provide an array of data to pass to the view as an optional third argument:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::view(<span class="hljs-string">\'/welcome\'</span>, <span class="hljs-string">\'welcome\'</span>);\n\nRoute::view(<span class="hljs-string">\'/welcome\'</span>, <span class="hljs-string">\'welcome\'</span>, [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Taylor\'</span>]);</code></pre>\n  <p><a name="route-parameters"></a></p>\n\n          <p><a name="route-parameters"></a></p>\n          <h2>\n            <a href="#route-parameters">\n              Route Parameters\n            </a>\n          </h2><p><a name="required-parameters"></a></p>\n\n          <p><a name="required-parameters"></a></p>\n          <h3>\n            <a href="#required-parameters">\n              Required Parameters\n            </a>\n          </h3><p>Sometimes you will need to capture segments of the URI within your route. For example, you may need to capture a user&#39;s ID from the URL. You may do so by defining route parameters:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'user/{id}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($id)</span> </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-string">\'User \'</span>.$id;\n});</code></pre>\n  <p>You may define as many route parameters as required by your route:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'posts/{post}/comments/{comment}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($postId, $commentId)</span> </span>{\n    <span class="hljs-comment">//</span>\n});</code></pre>\n  <p>Route parameters are always encased within <code>{}</code> braces and should consist of alphabetic characters, and may not contain a <code>-</code> character. Instead of using the <code>-</code> character, use an underscore (<code>_</code>). Route parameters are injected into route callbacks / controllers based on their order - the names of the callback / controller arguments do not matter.</p>\n<p><a name="parameters-optional-parameters"></a></p>\n\n          <p><a name="optional-parameters"></a></p>\n          <h3>\n            <a href="#optional-parameters">\n              Optional Parameters\n            </a>\n          </h3><p>Occasionally you may need to specify a route parameter, but make the presence of that route parameter optional. You may do so by placing a <code>?</code> mark after the parameter name. Make sure to give the route&#39;s corresponding variable a default value:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'user/{name?}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($name = null)</span> </span>{\n    <span class="hljs-keyword">return</span> $name;\n});\n\nRoute::get(<span class="hljs-string">\'user/{name?}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($name = <span class="hljs-string">\'John\'</span>)</span> </span>{\n    <span class="hljs-keyword">return</span> $name;\n});</code></pre>\n  <p><a name="parameters-regular-expression-constraints"></a></p>\n\n          <p><a name="regular-expression-constraints"></a></p>\n          <h3>\n            <a href="#regular-expression-constraints">\n              Regular Expression Constraints\n            </a>\n          </h3><p>You may constrain the format of your route parameters using the <code>where</code> method on a route instance. The <code>where</code> method accepts the name of the parameter and a regular expression defining how the parameter should be constrained:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'user/{name}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($name)</span> </span>{\n    <span class="hljs-comment">//</span>\n})-&gt;where(<span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'[A-Za-z]+\'</span>);\n\nRoute::get(<span class="hljs-string">\'user/{id}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($id)</span> </span>{\n    <span class="hljs-comment">//</span>\n})-&gt;where(<span class="hljs-string">\'id\'</span>, <span class="hljs-string">\'[0-9]+\'</span>);\n\nRoute::get(<span class="hljs-string">\'user/{id}/{name}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($id, $name)</span> </span>{\n    <span class="hljs-comment">//</span>\n})-&gt;where([<span class="hljs-string">\'id\'</span> =&gt; <span class="hljs-string">\'[0-9]+\'</span>, <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'[a-z]+\'</span>]);</code></pre>\n  <p><a name="parameters-global-constraints"></a></p>\n\n          <p><a name="global-constraints"></a></p>\n          <h4>\n            <a href="#global-constraints">\n              Global Constraints\n            </a>\n          </h4><p>If you would like a route parameter to always be constrained by a given regular expression, you may use the <code>pattern</code> method. You should define these patterns in the <code>boot</code> method of your <code>RouteServiceProvider</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Define your route model bindings, pattern filters, etc.\n *\n * @return void\n */</span>\n<span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">function</span> <span class="hljs-selector-tag">boot</span>()\n{\n    <span class="hljs-attribute">Route</span>::<span class="hljs-built_in">pattern</span>(<span class="hljs-string">\'id\'</span>, <span class="hljs-string">\'[0-9]+\'</span>);\n\n    <span class="hljs-attribute">parent</span>::<span class="hljs-built_in">boot</span>();\n}</code></pre>\n  <p>Once the pattern has been defined, it is automatically applied to all routes using that parameter name:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'user/{id}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($id)</span> </span>{\n    <span class="hljs-comment">// Only executed if {id} is numeric...</span>\n});</code></pre>\n  <p><a name="parameters-encoded-forward-slashes"></a></p>\n\n          <p><a name="encoded-forward-slashes"></a></p>\n          <h4>\n            <a href="#encoded-forward-slashes">\n              Encoded Forward Slashes\n            </a>\n          </h4><p>The Laravel routing component allows all characters except <code>/</code>. You must explicitly allow <code>/</code> to be part of your placeholder using a <code>where</code> condition regular expression:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'search/{search}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($search)</span> </span>{\n    <span class="hljs-keyword">return</span> $search;\n})-&gt;where(<span class="hljs-string">\'search\'</span>, <span class="hljs-string">\'.*\'</span>);</code></pre>\n  <blockquote>\n<p>{note} Encoded forward slashes are only supported within the last route segment.</p>\n</blockquote>\n<p><a name="named-routes"></a></p>\n\n          <p><a name="named-routes"></a></p>\n          <h2>\n            <a href="#named-routes">\n              Named Routes\n            </a>\n          </h2><p>Named routes allow the convenient generation of URLs or redirects for specific routes. You may specify a name for a route by chaining the <code>name</code> method onto the route definition:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'user/profile\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">//</span>\n})-&gt;name(<span class="hljs-string">\'profile\'</span>);</code></pre>\n  <p>You may also specify route names for controller actions:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'user/profile\'</span>, <span class="hljs-string">\'UserProfileController@show\'</span>)</span>-&gt;</span>name(<span class="hljs-string">\'profile\'</span>);</code></pre>\n  \n          <p><a name="generating-urls-to-named-routes"></a></p>\n          <h4>\n            <a href="#generating-urls-to-named-routes">\n              Generating URLs To Named Routes\n            </a>\n          </h4><p>Once you have assigned a name to a given route, you may use the route&#39;s name when generating URLs or redirects via the global <code>route</code> function:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Generating URLs...</span>\n$url = route(<span class="hljs-string">\'profile\'</span>);\n\n<span class="hljs-comment">// Generating Redirects...</span>\n<span class="hljs-keyword">return</span> redirect()-&gt;route(<span class="hljs-string">\'profile\'</span>);</code></pre>\n  <p>If the named route defines parameters, you may pass the parameters as the second argument to the <code>route</code> function. The given parameters will automatically be inserted into the URL in their correct positions:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'user/{id}/profile\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($id)</span> </span>{\n    <span class="hljs-comment">//</span>\n})-&gt;name(<span class="hljs-string">\'profile\'</span>);\n\n$url = route(<span class="hljs-string">\'profile\'</span>, [<span class="hljs-string">\'id\'</span> =&gt; <span class="hljs-number">1</span>]);</code></pre>\n  <p>If you pass additional parameters in the array, those key / value pairs will automatically be added to the generated URL&#39;s query string:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'user/{id}/profile\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($id)</span> </span>{\n    <span class="hljs-comment">//</span>\n})-&gt;name(<span class="hljs-string">\'profile\'</span>);\n\n$url = route(<span class="hljs-string">\'profile\'</span>, [<span class="hljs-string">\'id\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">\'photos\'</span> =&gt; <span class="hljs-string">\'yes\'</span>]);\n\n<span class="hljs-comment">// /user/1/profile?photos=yes</span></code></pre>\n  \n          <p><a name="inspecting-the-current-route"></a></p>\n          <h4>\n            <a href="#inspecting-the-current-route">\n              Inspecting The Current Route\n            </a>\n          </h4><p>If you would like to determine if the current request was routed to a given named route, you may use the <code>named</code> method on a Route instance. For example, you may check the current route name from a route middleware:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Handle an incoming request.\n *\n * <span class="hljs-doctag">@param</span>  \\Illuminate\\Http\\Request  $request\n * <span class="hljs-doctag">@param</span>  \\Closure  $next\n * <span class="hljs-doctag">@return</span> mixed\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">($request, Closure $next)</span>\n</span>{\n    <span class="hljs-keyword">if</span> ($request-&gt;route()-&gt;named(<span class="hljs-string">\'profile\'</span>)) {\n        <span class="hljs-comment">//</span>\n    }\n\n    <span class="hljs-keyword">return</span> $next($request);\n}</code></pre>\n  <p><a name="route-groups"></a></p>\n\n          <p><a name="route-groups"></a></p>\n          <h2>\n            <a href="#route-groups">\n              Route Groups\n            </a>\n          </h2><p>Route groups allow you to share route attributes, such as middleware or namespaces, across a large number of routes without needing to define those attributes on each individual route. Shared attributes are specified in an array format as the first parameter to the <code>Route::group</code> method.</p>\n<p>Nested groups attempt to intelligently &quot;merge&quot; attributes with their parent group. Middleware and <code>where</code> conditions are merged while names, namespaces, and prefixes are appended. Namespace delimiters and slashes in URI prefixes are automatically added where appropriate.</p>\n<p><a name="route-group-middleware"></a></p>\n\n          <p><a name="middleware"></a></p>\n          <h3>\n            <a href="#middleware">\n              Middleware\n            </a>\n          </h3><p>To assign middleware to all routes within a group, you may use the <code>middleware</code> method before defining the group. Middleware are executed in the order they are listed in the array:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::middleware([<span class="hljs-string">\'first\'</span>, <span class="hljs-string">\'second\'</span>])-&gt;group(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    Route::get(<span class="hljs-string">\'/\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n        <span class="hljs-comment">// Uses first &amp; second Middleware</span>\n    });\n\n    Route::get(<span class="hljs-string">\'user/profile\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n        <span class="hljs-comment">// Uses first &amp; second Middleware</span>\n    });\n});</code></pre>\n  <p><a name="route-group-namespaces"></a></p>\n\n          <p><a name="namespaces"></a></p>\n          <h3>\n            <a href="#namespaces">\n              Namespaces\n            </a>\n          </h3><p>Another common use-case for route groups is assigning the same PHP namespace to a group of controllers using the <code>namespace</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::namespace(<span class="hljs-string">\'Admin\'</span>)-&gt;group(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">// Controllers Within The "App\\Http\\Controllers\\Admin" Namespace</span>\n});</code></pre>\n  <p>Remember, by default, the <code>RouteServiceProvider</code> includes your route files within a namespace group, allowing you to register controller routes without specifying the full <code>App\\Http\\Controllers</code> namespace prefix. So, you only need to specify the portion of the namespace that comes after the base <code>App\\Http\\Controllers</code> namespace.</p>\n<p><a name="route-group-sub-domain-routing"></a></p>\n\n          <p><a name="sub-domain-routing"></a></p>\n          <h3>\n            <a href="#sub-domain-routing">\n              Sub-Domain Routing\n            </a>\n          </h3><p>Route groups may also be used to handle sub-domain routing. Sub-domains may be assigned route parameters just like route URIs, allowing you to capture a portion of the sub-domain for usage in your route or controller. The sub-domain may be specified by calling the <code>domain</code> method before defining the group:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::domain(<span class="hljs-string">\'{account}.myapp.com\'</span>)-&gt;group(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    Route::get(<span class="hljs-string">\'user/{id}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($account, $id)</span> </span>{\n        <span class="hljs-comment">//</span>\n    });\n});</code></pre>\n  <blockquote>\n<p>{note} In order to ensure your sub-domain routes are reachable, you should register sub-domain routes before registering root domain routes. This will prevent root domain routes from overwriting sub-domain routes which have the same URI path.</p>\n</blockquote>\n<p><a name="route-group-prefixes"></a></p>\n\n          <p><a name="route-prefixes"></a></p>\n          <h3>\n            <a href="#route-prefixes">\n              Route Prefixes\n            </a>\n          </h3><p>The <code>prefix</code> method may be used to prefix each route in the group with a given URI. For example, you may want to prefix all route URIs within the group with <code>admin</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::prefix(<span class="hljs-string">\'admin\'</span>)-&gt;group(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    Route::get(<span class="hljs-string">\'users\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n        <span class="hljs-comment">// Matches The "/admin/users" URL</span>\n    });\n});</code></pre>\n  <p><a name="route-group-name-prefixes"></a></p>\n\n          <p><a name="route-name-prefixes"></a></p>\n          <h3>\n            <a href="#route-name-prefixes">\n              Route Name Prefixes\n            </a>\n          </h3><p>The <code>name</code> method may be used to prefix each route name in the group with a given string. For example, you may want to prefix all of the grouped route&#39;s names with <code>admin</code>. The given string is prefixed to the route name exactly as it is specified, so we will be sure to provide the trailing <code>.</code> character in the prefix:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::name(<span class="hljs-string">\'admin.\'</span>)-&gt;group(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    Route::get(<span class="hljs-string">\'users\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n        <span class="hljs-comment">// Route assigned name "admin.users"...</span>\n    })-&gt;name(<span class="hljs-string">\'users\'</span>);\n});</code></pre>\n  <p><a name="route-model-binding"></a></p>\n\n          <p><a name="route-model-binding"></a></p>\n          <h2>\n            <a href="#route-model-binding">\n              Route Model Binding\n            </a>\n          </h2><p>When injecting a model ID to a route or controller action, you will often query to retrieve the model that corresponds to that ID. Laravel route model binding provides a convenient way to automatically inject the model instances directly into your routes. For example, instead of injecting a user&#39;s ID, you can inject the entire <code>User</code> model instance that matches the given ID.</p>\n<p><a name="implicit-binding"></a></p>\n\n          <p><a name="implicit-binding"></a></p>\n          <h3>\n            <a href="#implicit-binding">\n              Implicit Binding\n            </a>\n          </h3><p>Laravel automatically resolves Eloquent models defined in routes or controller actions whose type-hinted variable names match a route segment name. For example:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'api/users/{user}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(App\\User $user)</span> </span>{\n    <span class="hljs-keyword">return</span> $user-&gt;email;\n});</code></pre>\n  <p>Since the <code>$user</code> variable is type-hinted as the <code>App\\User</code> Eloquent model and the variable name matches the <code>{user}</code> URI segment, Laravel will automatically inject the model instance that has an ID matching the corresponding value from the request URI. If a matching model instance is not found in the database, a 404 HTTP response will automatically be generated.</p>\n\n          <p><a name="customizing-the-key-name"></a></p>\n          <h4>\n            <a href="#customizing-the-key-name">\n              Customizing The Key Name\n            </a>\n          </h4><p>If you would like model binding to use a database column other than <code>id</code> when retrieving a given model class, you may override the <code>getRouteKeyName</code> method on the Eloquent model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the route key for the model.\n *\n * <span class="hljs-doctag">@return</span> string\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRouteKeyName</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-string">\'slug\'</span>;\n}</code></pre>\n  <p><a name="explicit-binding"></a></p>\n\n          <p><a name="explicit-binding"></a></p>\n          <h3>\n            <a href="#explicit-binding">\n              Explicit Binding\n            </a>\n          </h3><p>To register an explicit binding, use the router&#39;s <code>model</code> method to specify the class for a given parameter. You should define your explicit model bindings in the <code>boot</code> method of the <code>RouteServiceProvider</code> class:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">function</span> <span class="hljs-selector-tag">boot</span>()\n{\n    <span class="hljs-attribute">parent</span>::<span class="hljs-built_in">boot</span>();\n\n    <span class="hljs-attribute">Route</span>::<span class="hljs-built_in">model</span>(<span class="hljs-string">\'user\'</span>, App\\User::class);\n}</code></pre>\n  <p>Next, define a route that contains a <code>{user}</code> parameter:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'profile/{user}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(App\\User $user)</span> </span>{\n    <span class="hljs-comment">//</span>\n});</code></pre>\n  <p>Since we have bound all <code>{user}</code> parameters to the <code>App\\User</code> model, a <code>User</code> instance will be injected into the route. So, for example, a request to <code>profile/1</code> will inject the <code>User</code> instance from the database which has an ID of <code>1</code>.</p>\n<p>If a matching model instance is not found in the database, a 404 HTTP response will be automatically generated.</p>\n\n          <p><a name="customizing-the-resolution-logic"></a></p>\n          <h4>\n            <a href="#customizing-the-resolution-logic">\n              Customizing The Resolution Logic\n            </a>\n          </h4><p>If you wish to use your own resolution logic, you may use the <code>Route::bind</code> method. The <code>Closure</code> you pass to the <code>bind</code> method will receive the value of the URI segment and should return the instance of the class that should be injected into the route:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Bootstrap any application services.\n *\n * @return void\n */</span>\n<span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">function</span> <span class="hljs-selector-tag">boot</span>()\n{\n    <span class="hljs-attribute">parent</span>::<span class="hljs-built_in">boot</span>();\n\n    <span class="hljs-attribute">Route</span>::<span class="hljs-built_in">bind</span>(<span class="hljs-string">\'user\'</span>, function ($value) {\n        return App\\User::<span class="hljs-built_in">where</span>(<span class="hljs-string">\'name\'</span>, $value)<span class="hljs-built_in">-</span>&gt;<span class="hljs-built_in">firstOrFail</span>();\n    });\n}</code></pre>\n  <p>Alternatively, you may override the <code>resolveRouteBinding</code> method on your Eloquent model. This method will receive the value of the URI segment and should return the instance of the class that should be injected into the route:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Retrieve the model for a bound value.\n *\n * <span class="hljs-doctag">@param</span>  mixed  $value\n * <span class="hljs-doctag">@return</span> \\Illuminate\\Database\\Eloquent\\Model|null\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolveRouteBinding</span><span class="hljs-params">($value)</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;where(<span class="hljs-string">\'name\'</span>, $value)-&gt;firstOrFail();\n}</code></pre>\n  <p><a name="fallback-routes"></a></p>\n\n          <p><a name="fallback-routes"></a></p>\n          <h2>\n            <a href="#fallback-routes">\n              Fallback Routes\n            </a>\n          </h2><p>Using the <code>Route::fallback</code> method, you may define a route that will be executed when no other route matches the incoming request. Typically, unhandled requests will automatically render a &quot;404&quot; page via your application&#39;s exception handler. However, since you may define the <code>fallback</code> route within your <code>routes/web.php</code> file, all middleware in the <code>web</code> middleware group will apply to the route. You are free to add additional middleware to this route as needed:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::fallback(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">//</span>\n});</code></pre>\n  <blockquote>\n<p>{note} The fallback route should always be the last route registered by your application.</p>\n</blockquote>\n<p><a name="rate-limiting"></a></p>\n\n          <p><a name="rate-limiting"></a></p>\n          <h2>\n            <a href="#rate-limiting">\n              Rate Limiting\n            </a>\n          </h2><p>Laravel includes a <router-link to="/docs/middleware">middleware</router-link> to rate limit access to routes within your application. To get started, assign the <code>throttle</code> middleware to a route or a group of routes. The <code>throttle</code> middleware accepts two parameters that determine the maximum number of requests that can be made in a given number of minutes. For example, let&#39;s specify that an authenticated user may access the following group of routes 60 times per minute:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::middleware(<span class="hljs-string">\'auth:api\'</span>, <span class="hljs-string">\'throttle:60,1\'</span>)-&gt;group(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    Route::get(<span class="hljs-string">\'/user\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n        <span class="hljs-comment">//</span>\n    });\n});</code></pre>\n  \n          <p><a name="dynamic-rate-limiting"></a></p>\n          <h4>\n            <a href="#dynamic-rate-limiting">\n              Dynamic Rate Limiting\n            </a>\n          </h4><p>You may specify a dynamic request maximum based on an attribute of the authenticated <code>User</code> model. For example, if your <code>User</code> model contains a <code>rate_limit</code> attribute, you may pass the name of the attribute to the <code>throttle</code> middleware so that it is used to calculate the maximum request count:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::middleware(<span class="hljs-string">\'auth:api\'</span>, <span class="hljs-string">\'throttle:rate_limit,1\'</span>)-&gt;group(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    Route::get(<span class="hljs-string">\'/user\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n        <span class="hljs-comment">//</span>\n    });\n});</code></pre>\n  \n          <p><a name="distinct-guest-amp-authenticated-user-rate-limits"></a></p>\n          <h4>\n            <a href="#distinct-guest-amp-authenticated-user-rate-limits">\n              Distinct Guest &amp; Authenticated User Rate Limits\n            </a>\n          </h4><p>You may specify different rate limits for guest and authenticated users. For example, you may specify a maximum of <code>10</code> requests per minute for guests <code>60</code> for authenticated users:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::middleware(<span class="hljs-string">\'throttle:10|60,1\'</span>)-&gt;group(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">//</span>\n});</code></pre>\n  <p>You may also combine this functionality with dynamic rate limits. For example, if your <code>User</code> model contains a <code>rate_limit</code> attribute, you may pass the name of the attribute to the <code>throttle</code> middleware so that it is used to calculate the maximum request count for authenticated users:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::middleware(<span class="hljs-string">\'auth:api\'</span>, <span class="hljs-string">\'throttle:10|rate_limit,1\'</span>)-&gt;group(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    Route::get(<span class="hljs-string">\'/user\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n        <span class="hljs-comment">//</span>\n    });\n});</code></pre>\n  <p><a name="form-method-spoofing"></a></p>\n\n          <p><a name="form-method-spoofing"></a></p>\n          <h2>\n            <a href="#form-method-spoofing">\n              Form Method Spoofing\n            </a>\n          </h2><p>HTML forms do not support <code>PUT</code>, <code>PATCH</code> or <code>DELETE</code> actions. So, when defining <code>PUT</code>, <code>PATCH</code> or <code>DELETE</code> routes that are called from an HTML form, you will need to add a hidden <code>_method</code> field to the form. The value sent with the <code>_method</code> field will be used as the HTTP request method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">&lt;form action=<span class="hljs-string">"/foo/bar"</span> method=<span class="hljs-string">"<span class="hljs-keyword">POST</span>"</span>&gt;\n    &lt;input type=<span class="hljs-string">"hidden"</span> name=<span class="hljs-string">"_method"</span> value=<span class="hljs-string">"<span class="hljs-keyword">PUT</span>"</span>&gt;\n    &lt;input type=<span class="hljs-string">"hidden"</span> name=<span class="hljs-string">"_token"</span> value=<span class="hljs-string">" csrf_token() "</span>&gt;\n&lt;/form&gt;</code></pre>\n  <p>You may use the <code>@method</code> Blade directive to generate the <code>_method</code> input:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">&lt;form action=<span class="hljs-string">"/foo/bar"</span> method=<span class="hljs-string">"<span class="hljs-keyword">POST</span>"</span>&gt;\n    @method(\'PUT\')\n    @csrf\n&lt;/form&gt;</code></pre>\n  <p><a name="accessing-the-current-route"></a></p>\n\n          <p><a name="accessing-the-current-route"></a></p>\n          <h2>\n            <a href="#accessing-the-current-route">\n              Accessing The Current Route\n            </a>\n          </h2><p>You may use the <code>current</code>, <code>currentRouteName</code>, and <code>currentRouteAction</code> methods on the <code>Route</code> facade to access information about the route handling the incoming request:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$route</span> = Route::current();\n\n<span class="hljs-variable">$name</span> = Route::currentRouteName();\n\n<span class="hljs-variable">$action</span> = Route::currentRouteAction();</code></pre>\n  '},bd53:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="authentication"></a></p>\n          <h1>\n            <a href="#authentication">\n              Authentication\n            </a>\n          </h1><ul>\n<li><a href="#authentication-quickstart">Authentication Quickstart</a><ul>\n<li><a href="#retrieving-the-authenticated-user">Retrieving The Authenticated User</a></li>\n</ul>\n</li>\n<li><a href="#logging-out">Logging Out</a></li>\n<li><a href="#events">Events</a></li>\n</ul>\n<p><a name="retrieving-the-authenticated-user"></a></p>\n\n          <p><a name="retrieving-the-authenticated-user"></a></p>\n          <h3>\n            <a href="#retrieving-the-authenticated-user">\n              Retrieving The Authenticated User\n            </a>\n          </h3><p>You may access the authenticated user via the <code>Auth</code> facade:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlXFxTdXBwb3J0XFxGYWNhZGVzXFxBdXRoO1xuLy8gU3RvcmUgYW5kIGxvZ2luIGEgdXNlclxuJHVzZXIgPSBVc2VyOjpjcmVhdGUoW1xuICAnbmFtZScgPT4gJ01hcmNlbCcsXG4gICdlbWFpbCcgPT4gJ21hcmNlbEBiZXlvbmRjby5kZScsXG4gICdwYXNzd29yZCcgPT4gJ3Rlc3QnLFxuXSk7XG5cbkF1dGg6OmxvZ2luKCR1c2VyKTtcblxuLy8gR2V0IHRoZSBjdXJyZW50bHkgYXV0aGVudGljYXRlZCB1c2VyLi4uXG4kdXNlciA9IEF1dGg6OnVzZXIoKTtcbiIsImhhc2giOiJhdXRoZW50aWNhdGlvbi1yZXRyaWV2aW5nLXRoZS1hdXRoZW50aWNhdGVkLXVzZXIifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Auth</span>;\n\n<span class="hljs-comment">// Get the currently authenticated user...</span>\n$user = Auth::user();\n\n<span class="hljs-comment">// Get the currently authenticated user\'s ID...</span>\n$id = Auth::id();</code></pre>\n  <p>Alternatively, once a user is authenticated, you may access the authenticated user via an <code>Illuminate\\Http\\Request</code> instance. Remember, type-hinted classes will automatically be injected into your controller methods:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIElsbHVtaW5hdGVcXFN1cHBvcnRcXEZhY2FkZXNcXEF1dGg7XG51c2UgSWxsdW1pbmF0ZVxcSHR0cFxcUmVxdWVzdDtcblxuLy8gU3RvcmUgYW5kIGxvZ2luIGEgdXNlclxuJHVzZXIgPSBVc2VyOjpjcmVhdGUoW1xuICAnbmFtZScgPT4gJ01hcmNlbCcsXG4gICdlbWFpbCcgPT4gJ21hcmNlbEBiZXlvbmRjby5kZScsXG4gICdwYXNzd29yZCcgPT4gJ3Rlc3QnLFxuXSk7XG5cbkF1dGg6OmxvZ2luKCR1c2VyKTtcblxuY2xhc3MgVGlua2Vyd2VsbENvbnRyb2xsZXJcbntcbiAgICBwdWJsaWMgZnVuY3Rpb24gaW5kZXgoUmVxdWVzdCAkcmVxdWVzdCkge1xuICAgICAgICBkdW1wKCRyZXF1ZXN0LT51c2VyKCkpO1xuICAgIH1cbn1cbiIsInZpZXdDb2RlIjoie3stLSBub3QgbmVlZGVkIC0tfX0iLCJoYXNoIjoiYXV0aGVudGljYXRpb24tcmV0cmlldmluZy10aGUtYXV0aGVudGljYXRlZC11c2VyIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Request</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProfileController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Update the user\'s profile.\n     *\n     * <span class="hljs-doctag">@param</span>  Request  $request\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">(Request $request)</span>\n    </span>{\n        <span class="hljs-comment">// $request-&gt;user() returns an instance of the authenticated user...</span>\n    }\n}</span></code></pre>\n  \n          <p><a name="determining-if-the-current-user-is-authenticated"></a></p>\n          <h4>\n            <a href="#determining-if-the-current-user-is-authenticated">\n              Determining If The Current User Is Authenticated\n            </a>\n          </h4><p>To determine if the user is already logged into your application, you may use the <code>check</code> method on the <code>Auth</code> facade, which will return <code>true</code> if the user is authenticated:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlXFxTdXBwb3J0XFxGYWNhZGVzXFxBdXRoO1xuXG52YXJfZHVtcChBdXRoOjpjaGVjaygpKTtcblxuLy8gU3RvcmUgYW5kIGxvZ2luIGEgdXNlclxuJHVzZXIgPSBVc2VyOjpjcmVhdGUoW1xuICAnbmFtZScgPT4gJ01hcmNlbCcsXG4gICdlbWFpbCcgPT4gJ21hcmNlbEBiZXlvbmRjby5kZScsXG4gICdwYXNzd29yZCcgPT4gJ3Rlc3QnLFxuXSk7XG5cbkF1dGg6OmxvZ2luKCR1c2VyKTtcblxudmFyX2R1bXAoQXV0aDo6Y2hlY2soKSk7XG4iLCJoYXNoIjoiYXV0aGVudGljYXRpb24tZGV0ZXJtaW5pbmctaWYtdGhlLWN1cnJlbnQtdXNlci1pcy1hdXRoZW50aWNhdGVkIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Auth</span>;\n\n<span class="hljs-keyword">if</span> (Auth::check()) {\n    <span class="hljs-comment">// The user is logged in...</span>\n}</code></pre>\n  \n          <p><a name="logging-out"></a></p>\n          <h4>\n            <a href="#logging-out">\n              Logging Out\n            </a>\n          </h4><p>To log users out of your application, you may use the <code>logout</code> method on the <code>Auth</code> facade. This will clear the authentication information in the user&#39;s session:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlXFxTdXBwb3J0XFxGYWNhZGVzXFxBdXRoO1xuXG4vLyBTdG9yZSBhbmQgbG9naW4gYSB1c2VyXG4kdXNlciA9IFVzZXI6OmNyZWF0ZShbXG4gICduYW1lJyA9PiAnTWFyY2VsJyxcbiAgJ2VtYWlsJyA9PiAnbWFyY2VsQGJleW9uZGNvLmRlJyxcbiAgJ3Bhc3N3b3JkJyA9PiAndGVzdCcsXG5dKTtcblxuQXV0aDo6bG9naW4oJHVzZXIpO1xuXG52YXJfZHVtcChBdXRoOjpjaGVjaygpKTtcblxuQXV0aDo6bG9nb3V0KCk7XG5cbnZhcl9kdW1wKEF1dGg6OmNoZWNrKCkpO1xuIiwiaGFzaCI6ImF1dGhlbnRpY2F0aW9uLWxvZ2dpbmctb3V0In0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">Auth::logout();</code></pre>\n  <p><a name="other-authentication-methods"></a></p>\n\n          <p><a name="other-authentication-methods"></a></p>\n          <h3>\n            <a href="#other-authentication-methods">\n              Other Authentication Methods\n            </a>\n          </h3>\n          <p><a name="authenticate-a-user-instance"></a></p>\n          <h4>\n            <a href="#authenticate-a-user-instance">\n              Authenticate A User Instance\n            </a>\n          </h4><p>If you need to log an existing user instance into your application, you may call the <code>login</code> method with the user instance. The given object must be an implementation of the <code>Illuminate\\Contracts\\Auth\\Authenticatable</code> <router-link to="/docs/contracts">contract</router-link>. The <code>App\\User</code> model included with Laravel already implements this interface:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlXFxTdXBwb3J0XFxGYWNhZGVzXFxBdXRoO1xuLy8gU3RvcmUgYW5kIGxvZ2luIGEgdXNlclxuJHVzZXIgPSBVc2VyOjpjcmVhdGUoW1xuICAnbmFtZScgPT4gJ01hcmNlbCcsXG4gICdlbWFpbCcgPT4gJ21hcmNlbEBiZXlvbmRjby5kZScsXG4gICdwYXNzd29yZCcgPT4gJ3Rlc3QnLFxuXSk7XG5cbkF1dGg6OmxvZ2luKCR1c2VyKTtcblxuLy8gR2V0IHRoZSBjdXJyZW50bHkgYXV0aGVudGljYXRlZCB1c2VyLi4uXG4kdXNlciA9IEF1dGg6OnVzZXIoKTtcbiIsImhhc2giOiJhdXRoZW50aWNhdGlvbi1hdXRoZW50aWNhdGUtYS11c2VyLWluc3RhbmNlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">Auth::login(<span class="hljs-variable">$user</span>);\n\n<span class="hljs-regexp">//</span> Login <span class="hljs-keyword">and</span> <span class="hljs-string">"remember"</span> the given user...\nAuth::login(<span class="hljs-variable">$user</span>, <span class="hljs-keyword">true</span>);</code></pre>\n  <p>You may specify the guard instance you would like to use:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Auth::guard(<span class="hljs-string">\'admin\'</span>)-&gt;login(<span class="hljs-variable">$user</span>);</code></pre>\n  \n          <p><a name="authenticate-a-user-by-id"></a></p>\n          <h4>\n            <a href="#authenticate-a-user-by-id">\n              Authenticate A User By ID\n            </a>\n          </h4><p>To log a user into the application by their ID, you may use the <code>loginUsingId</code> method. This method accepts the primary key of the user you wish to authenticate:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlXFxTdXBwb3J0XFxGYWNhZGVzXFxBdXRoO1xuLy8gU3RvcmUgYW5kIGxvZ2luIGEgdXNlclxuJHVzZXIgPSBVc2VyOjpjcmVhdGUoW1xuICAnbmFtZScgPT4gJ01hcmNlbCcsXG4gICdlbWFpbCcgPT4gJ21hcmNlbEBiZXlvbmRjby5kZScsXG4gICdwYXNzd29yZCcgPT4gJ3Rlc3QnLFxuXSk7XG5cbkF1dGg6OmxvZ2luVXNpbmdJZCgkdXNlci0+aWQpO1xuXG4vLyBHZXQgdGhlIGN1cnJlbnRseSBhdXRoZW50aWNhdGVkIHVzZXIuLi5cbiR1c2VyID0gQXV0aDo6dXNlcigpO1xuIiwiaGFzaCI6ImF1dGhlbnRpY2F0aW9uLWF1dGhlbnRpY2F0ZS1hLXVzZXItYnktaWQifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">Auth::loginUsingId(<span class="hljs-number">1</span>);\n\n<span class="hljs-regexp">//</span> Login <span class="hljs-keyword">and</span> <span class="hljs-string">"remember"</span> the given user...\nAuth::loginUsingId(<span class="hljs-number">1</span>, <span class="hljs-keyword">true</span>);</code></pre>\n  '},bd56:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="console-tests"></a></p>\n          <h1>\n            <a href="#console-tests">\n              Console Tests\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#expecting-input-and-output">Expecting Input / Output</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>In addition to simplifying HTTP testing, Laravel provides a simple API for testing console applications that ask for user input.</p>\n<p><a name="expecting-input-and-output"></a></p>\n\n          <p><a name="expecting-input-output"></a></p>\n          <h2>\n            <a href="#expecting-input-output">\n              Expecting Input / Output\n            </a>\n          </h2><p>Laravel allows you to easily &quot;mock&quot; user input for your console commands using the <code>expectsQuestion</code> method. In addition, you may specify the exit code and text that you expect to be output by the console command using the <code>assertExitCode</code> and <code>expectsOutput</code> methods. For example, consider the following console command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Artisan::command(<span class="hljs-string">\'question\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    $name = <span class="hljs-keyword">$this</span>-&gt;ask(<span class="hljs-string">\'What is your name?\'</span>);\n\n    $language = <span class="hljs-keyword">$this</span>-&gt;choice(<span class="hljs-string">\'Which language do you program in?\'</span>, [\n        <span class="hljs-string">\'PHP\'</span>,\n        <span class="hljs-string">\'Ruby\'</span>,\n        <span class="hljs-string">\'Python\'</span>,\n    ]);\n\n    <span class="hljs-keyword">$this</span>-&gt;line(<span class="hljs-string">\'Your name is \'</span>.$name.<span class="hljs-string">\' and you program in \'</span>.$language.<span class="hljs-string">\'.\'</span>);\n});</code></pre>\n  <p>You may test this command with the following test which utilizes the <code>expectsQuestion</code>, <code>expectsOutput</code>, and <code>assertExitCode</code> methods:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Test a console command.\n *\n * @return void\n */</span>\npublic <span class="hljs-keyword">function</span> test<span class="hljs-constructor">ConsoleCommand()</span>\n{\n    $this-&gt;artisan(\'question\')\n         -&gt;expects<span class="hljs-constructor">Question(\'What <span class="hljs-params">is</span> <span class="hljs-params">your</span> <span class="hljs-params">name</span>?\', \'Taylor Otwell\')</span>\n         -&gt;expects<span class="hljs-constructor">Question(\'Which <span class="hljs-params">language</span> <span class="hljs-params">do</span> <span class="hljs-params">you</span> <span class="hljs-params">program</span> <span class="hljs-params">in</span>?\', \'PHP\')</span>\n         -&gt;expects<span class="hljs-constructor">Output(\'Your <span class="hljs-params">name</span> <span class="hljs-params">is</span> Taylor Otwell <span class="hljs-params">and</span> <span class="hljs-params">you</span> <span class="hljs-params">program</span> <span class="hljs-params">in</span> PHP.\')</span>\n         -&gt;<span class="hljs-keyword">assert</span><span class="hljs-constructor">ExitCode(0)</span>;\n}</code></pre>\n  '},be64:function(s,e,a){"use strict"},c06c:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="database-query-builder"></a></p>\n          <h1>\n            <a href="#database-query-builder">\n              Database: Query Builder\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#retrieving-results">Retrieving Results</a><ul>\n<li><a href="#chunking-results">Chunking Results</a></li>\n<li><a href="#aggregates">Aggregates</a></li>\n</ul>\n</li>\n<li><a href="#selects">Selects</a></li>\n<li><a href="#raw-expressions">Raw Expressions</a></li>\n<li><a href="#joins">Joins</a></li>\n<li><a href="#unions">Unions</a></li>\n<li><a href="#where-clauses">Where Clauses</a><ul>\n<li><a href="#parameter-grouping">Parameter Grouping</a></li>\n<li><a href="#where-exists-clauses">Where Exists Clauses</a></li>\n<li><a href="#json-where-clauses">JSON Where Clauses</a></li>\n</ul>\n</li>\n<li><a href="#ordering-grouping-limit-and-offset">Ordering, Grouping, Limit &amp; Offset</a></li>\n<li><a href="#conditional-clauses">Conditional Clauses</a></li>\n<li><a href="#inserts">Inserts</a></li>\n<li><a href="#updates">Updates</a><ul>\n<li><a href="#updating-json-columns">Updating JSON Columns</a></li>\n<li><a href="#increment-and-decrement">Increment &amp; Decrement</a></li>\n</ul>\n</li>\n<li><a href="#deletes">Deletes</a></li>\n<li><a href="#debugging">Debugging</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Laravel&#39;s database query builder provides a convenient, fluent interface to creating and running database queries. It can be used to perform most database operations in your application and works on all supported database systems.</p>\n<p>The Laravel query builder uses PDO parameter binding to protect your application against SQL injection attacks. There is no need to clean strings being passed as bindings.</p>\n<p><a name="retrieving-results"></a></p>\n\n          <p><a name="retrieving-results"></a></p>\n          <h2>\n            <a href="#retrieving-results">\n              Retrieving Results\n            </a>\n          </h2>\n          <p><a name="retrieving-all-rows-from-a-table"></a></p>\n          <h4>\n            <a href="#retrieving-all-rows-from-a-table">\n              Retrieving All Rows From A Table\n            </a>\n          </h4><p>You may use the <code>table</code> method on the <code>DB</code> facade to begin a query. The <code>table</code> method returns a fluent query builder instance for the given table, allowing you to chain more constraints onto the query and then finally get the results using the <code>get</code> method:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIElsbHVtaW5hdGVcXEh0dHBcXFJlcXVlc3Q7XG5cbmNsYXNzIFRpbmtlcndlbGxDb250cm9sbGVyXG57XG4gICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KFJlcXVlc3QgJHJlcXVlc3QpIHtcbiAgICAgICAgLy8gSW5zZXJ0IHR3byB1c2Vyc1xuICAgICAgICBVc2VyOjpjcmVhdGUoW1xuICAgICAgICAgICduYW1lJyA9PiAnTWFyY2VsJyxcbiAgICAgICAgICAnZW1haWwnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAgICAgICAgICdwYXNzd29yZCcgPT4gJ3Rlc3QnLFxuICAgICAgICBdKTtcblxuICAgICAgICBVc2VyOjpjcmVhdGUoW1xuICAgICAgICAgICduYW1lJyA9PiAnU2ViYXN0aWFuJyxcbiAgICAgICAgICAnZW1haWwnID0+ICdzZWJhc3RpYW5AYmV5b25kY28uZGUnLFxuICAgICAgICAgICdwYXNzd29yZCcgPT4gJ3Rlc3QnLFxuICAgICAgICBdKTtcblxuICAgICAgICAkdXNlcnMgPSBEQjo6dGFibGUoJ3VzZXJzJyktPmdldCgpO1xuXG4gICAgICAgIHJldHVybiB2aWV3KCdfX3Rpbmtlcl9fOjp0aW5rZXJ3ZWxsJywgW1xuICAgICAgICAgICAgJ3VzZXJzJyA9PiAkdXNlcnNcbiAgICAgICAgXSk7XG4gICAgfVxufVxuIiwidmlld0NvZGUiOiJAZm9yZWFjaCAoJHVzZXJzIGFzICR1c2VyKVxuICAgIDxwPnt7ICR1c2VyLT5uYW1lIH19PC9wPlxuQGVuZGZvcmVhY2giLCJoYXNoIjoicXVlcmllcy1yZXRyaWV2aW5nLWFsbC1yb3dzLWZyb20tYS10YWJsZSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">Controller</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">DB</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Show a list of all of the application\'s users.\n     *\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">()</span>\n    </span>{\n        $users = DB::table(<span class="hljs-string">\'users\'</span>)-&gt;get();\n\n        <span class="hljs-keyword">return</span> view(<span class="hljs-string">\'user.index\'</span>, [<span class="hljs-string">\'users\'</span> =&gt; $users]);\n    }\n}</span></code></pre>\n  <p>The <code>get</code> method returns an <code>Illuminate\\Support\\Collection</code> containing the results where each result is an instance of the PHP <code>stdClass</code> object. You may access each column&#39;s value by accessing the column as a property of the object:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">foreach</span> ($users <span class="hljs-keyword">as</span> $user) {\n    <span class="hljs-keyword">echo</span> $user-&gt;name;\n}</code></pre>\n  \n          <p><a name="retrieving-a-single-row-column-from-a-table"></a></p>\n          <h4>\n            <a href="#retrieving-a-single-row-column-from-a-table">\n              Retrieving A Single Row / Column From A Table\n            </a>\n          </h4><p>If you just need to retrieve a single row from the database table, you may use the <code>first</code> method. This method will return a single <code>stdClass</code> object:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlxuVXNlcjo6Y3JlYXRlKFtcbiAgJ25hbWUnID0+ICdNYXJjZWwnLFxuICAnZW1haWwnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAncGFzc3dvcmQnID0+ICd0ZXN0Jyxcbl0pO1xuXG4kdXNlciA9IERCOjp0YWJsZSgndXNlcnMnKS0+d2hlcmUoJ25hbWUnLCAnTWFyY2VsJyktPmZpcnN0KCk7XG4iLCJoYXNoIjoicXVlcmllcy1yZXRyaWV2aW5nLWEtc2luZ2xlLXJvdy0vLWNvbHVtbi1mcm9tLWEtdGFibGUifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$user = DB::table(<span class="hljs-string">\'users\'</span>)-&gt;where(<span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'John\'</span>)-&gt;first();\n\n<span class="hljs-keyword">echo</span> $user-&gt;name;</code></pre>\n  <p>If you don&#39;t even need an entire row, you may extract a single value from a record using the <code>value</code> method. This method will return the value of the column directly:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlxuVXNlcjo6Y3JlYXRlKFtcbiAgJ25hbWUnID0+ICdNYXJjZWwnLFxuICAnZW1haWwnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAncGFzc3dvcmQnID0+ICd0ZXN0Jyxcbl0pO1xuXG4kZW1haWwgPSBEQjo6dGFibGUoJ3VzZXJzJyktPndoZXJlKCduYW1lJywgJ01hcmNlbCcpLT52YWx1ZSgnZW1haWwnKTtcbiIsImhhc2giOiJxdWVyaWVzLXJldHJpZXZpbmctYS1zaW5nbGUtcm93LS8tY29sdW1uLWZyb20tYS10YWJsZSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$email = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>-&gt;</span>where<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'John\'</span>)</span>-&gt;</span>value(<span class="hljs-string">\'email\'</span>);</code></pre>\n  <p>To retrieve a single row by its <code>id</code> column value, use the <code>find</code> method:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlxuVXNlcjo6Y3JlYXRlKFtcbiAgJ25hbWUnID0+ICdNYXJjZWwnLFxuICAnZW1haWwnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAncGFzc3dvcmQnID0+ICd0ZXN0Jyxcbl0pO1xuXG4kdXNlciA9IERCOjp0YWJsZSgndXNlcnMnKS0+ZmluZCgxKTtcbiIsImhhc2giOiJxdWVyaWVzLXJldHJpZXZpbmctYS1zaW5nbGUtcm93LS8tY29sdW1uLWZyb20tYS10YWJsZSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span> = DB::table(<span class="hljs-string">\'users\'</span>)-&gt;find(<span class="hljs-number">3</span>);</code></pre>\n  \n          <p><a name="retrieving-a-list-of-column-values"></a></p>\n          <h4>\n            <a href="#retrieving-a-list-of-column-values">\n              Retrieving A List Of Column Values\n            </a>\n          </h4><p>If you would like to retrieve a Collection containing the values of a single column, you may use the <code>pluck</code> method. In this example, we&#39;ll retrieve a Collection of role titles:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlxuVXNlcjo6Y3JlYXRlKFtcbiAgJ25hbWUnID0+ICdNYXJjZWwnLFxuICAnZW1haWwnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAncGFzc3dvcmQnID0+ICd0ZXN0Jyxcbl0pO1xuXG5Vc2VyOjpjcmVhdGUoW1xuICAnbmFtZScgPT4gJ1NlYmFzdGlhbicsXG4gICdlbWFpbCcgPT4gJ3NlYmFzdGlhbkBiZXlvbmRjby5kZScsXG4gICdwYXNzd29yZCcgPT4gJ3Rlc3QnLFxuXSk7XG5cbiRuYW1lcyA9IERCOjp0YWJsZSgndXNlcnMnKS0+cGx1Y2soJ25hbWUnKTtcbiIsImhhc2giOiJxdWVyaWVzLXJldHJpZXZpbmctYS1saXN0LW9mLWNvbHVtbi12YWx1ZXMifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$titles = DB::table(<span class="hljs-string">\'roles\'</span>)-&gt;pluck(<span class="hljs-string">\'title\'</span>);\n\n<span class="hljs-keyword">foreach</span> ($titles <span class="hljs-keyword">as</span> $title) {\n    <span class="hljs-keyword">echo</span> $title;\n}</code></pre>\n  <p> You may also specify a custom key column for the returned Collection:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$roles = DB::table(<span class="hljs-string">\'roles\'</span>)-&gt;pluck(<span class="hljs-string">\'title\'</span>, <span class="hljs-string">\'name\'</span>);\n\n<span class="hljs-keyword">foreach</span> ($roles <span class="hljs-keyword">as</span> $name =&gt; $title) {\n    <span class="hljs-keyword">echo</span> $title;\n}</code></pre>\n  <p><a name="chunking-results"></a></p>\n\n          <p><a name="chunking-results"></a></p>\n          <h3>\n            <a href="#chunking-results">\n              Chunking Results\n            </a>\n          </h3><p>If you need to work with thousands of database records, consider using the <code>chunk</code> method. This method retrieves a small chunk of the results at a time and feeds each chunk into a <code>Closure</code> for processing. This method is very useful for writing <router-link to="/docs/artisan">Artisan commands</router-link> that process thousands of records. For example, let&#39;s work with the entire <code>users</code> table in chunks of 100 records at a time:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">DB::table(<span class="hljs-string">\'users\'</span>)-&gt;orderBy(<span class="hljs-string">\'id\'</span>)-&gt;chunk(<span class="hljs-number">100</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($users)</span> </span>{\n    <span class="hljs-keyword">foreach</span> ($users <span class="hljs-keyword">as</span> $user) {\n        <span class="hljs-comment">//</span>\n    }\n});</code></pre>\n  <p>You may stop further chunks from being processed by returning <code>false</code> from the <code>Closure</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">DB::table(<span class="hljs-string">\'users\'</span>)-&gt;orderBy(<span class="hljs-string">\'id\'</span>)-&gt;chunk(<span class="hljs-number">100</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($users)</span> </span>{\n    <span class="hljs-comment">// Process the records...</span>\n\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;\n});</code></pre>\n  <p>If you are updating database records while chunking results, your chunk results could change in unexpected ways. So, when updating records while chunking, it is always best to use the <code>chunkById</code> method instead. This method will automatically paginate the results based on the record&#39;s primary key:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">DB::table(<span class="hljs-string">\'users\'</span>)-&gt;where(<span class="hljs-string">\'active\'</span>, <span class="hljs-keyword">false</span>)\n    -&gt;chunkById(<span class="hljs-number">100</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($users)</span> </span>{\n        <span class="hljs-keyword">foreach</span> ($users <span class="hljs-keyword">as</span> $user) {\n            DB::table(<span class="hljs-string">\'users\'</span>)\n                -&gt;where(<span class="hljs-string">\'id\'</span>, $user-&gt;id)\n                -&gt;update([<span class="hljs-string">\'active\'</span> =&gt; <span class="hljs-keyword">true</span>]);\n        }\n    });</code></pre>\n  <blockquote>\n<p>{note} When updating or deleting records inside the chunk callback, any changes to the primary key or foreign keys could affect the chunk query. This could potentially result in records not being included in the chunked results.</p>\n</blockquote>\n<p><a name="aggregates"></a></p>\n\n          <p><a name="aggregates"></a></p>\n          <h3>\n            <a href="#aggregates">\n              Aggregates\n            </a>\n          </h3><p>The query builder also provides a variety of aggregate methods such as <code>count</code>, <code>max</code>, <code>min</code>, <code>avg</code>, and <code>sum</code>. You may call any of these methods after constructing your query:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlxuVXNlcjo6Y3JlYXRlKFtcbiAgJ25hbWUnID0+ICdNYXJjZWwnLFxuICAnZW1haWwnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAncGFzc3dvcmQnID0+ICd0ZXN0Jyxcbl0pO1xuXG5Vc2VyOjpjcmVhdGUoW1xuICAnbmFtZScgPT4gJ1NlYmFzdGlhbicsXG4gICdlbWFpbCcgPT4gJ3NlYmFzdGlhbkBiZXlvbmRjby5kZScsXG4gICdwYXNzd29yZCcgPT4gJ3Rlc3QnLFxuXSk7XG5cbiR1c2VycyA9IERCOjp0YWJsZSgndXNlcnMnKS0+Y291bnQoKTtcbiIsImhhc2giOiJxdWVyaWVzLWFnZ3JlZ2F0ZXMifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$users</span> = DB::table(<span class="hljs-string">\'users\'</span>)-&gt;count();\n\n<span class="hljs-variable">$price</span> = DB::table(<span class="hljs-string">\'orders\'</span>)-&gt;max(<span class="hljs-string">\'price\'</span>);</code></pre>\n  <p>You may combine these methods with other clauses:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$price = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'orders\'</span>)</span>\n                -&gt;</span>where<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'finalized\'</span>, <span class="hljs-number">1</span>)</span>\n                -&gt;</span>avg(<span class="hljs-string">\'price\'</span>);</code></pre>\n  \n          <p><a name="determining-if-records-exist"></a></p>\n          <h4>\n            <a href="#determining-if-records-exist">\n              Determining If Records Exist\n            </a>\n          </h4><p>Instead of using the <code>count</code> method to determine if any records exist that match your query&#39;s constraints, you may use the <code>exists</code> and <code>doesntExist</code> methods:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlxuVXNlcjo6Y3JlYXRlKFtcbiAgJ25hbWUnID0+ICdNYXJjZWwnLFxuICAnZW1haWwnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAncGFzc3dvcmQnID0+ICd0ZXN0Jyxcbl0pO1xuXG5Vc2VyOjpjcmVhdGUoW1xuICAnbmFtZScgPT4gJ1NlYmFzdGlhbicsXG4gICdlbWFpbCcgPT4gJ3NlYmFzdGlhbkBiZXlvbmRjby5kZScsXG4gICdwYXNzd29yZCcgPT4gJ3Rlc3QnLFxuXSk7XG5cbkRCOjp0YWJsZSgndXNlcnMnKS0+d2hlcmUoJ25hbWUnLCAnTWFyY2VsJyktPmV4aXN0cygpO1xuIiwiaGFzaCI6InF1ZXJpZXMtZGV0ZXJtaW5pbmctaWYtcmVjb3Jkcy1leGlzdCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'orders\'</span>)</span>-&gt;</span>where<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'finalized\'</span>, <span class="hljs-number">1</span>)</span>-&gt;</span>exists();\n\n<span class="hljs-keyword">return</span> DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'orders\'</span>)</span>-&gt;</span>where<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'finalized\'</span>, <span class="hljs-number">1</span>)</span>-&gt;</span>doesntExist();</code></pre>\n  <p><a name="selects"></a></p>\n\n          <p><a name="selects"></a></p>\n          <h2>\n            <a href="#selects">\n              Selects\n            </a>\n          </h2>\n          <p><a name="specifying-a-select-clause"></a></p>\n          <h4>\n            <a href="#specifying-a-select-clause">\n              Specifying A Select Clause\n            </a>\n          </h4><p>You may not always want to select all columns from a database table. Using the <code>select</code> method, you can specify a custom <code>select</code> clause for the query:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlxuVXNlcjo6Y3JlYXRlKFtcbiAgJ25hbWUnID0+ICdNYXJjZWwnLFxuICAnZW1haWwnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAncGFzc3dvcmQnID0+ICd0ZXN0Jyxcbl0pO1xuXG5Vc2VyOjpjcmVhdGUoW1xuICAnbmFtZScgPT4gJ1NlYmFzdGlhbicsXG4gICdlbWFpbCcgPT4gJ3NlYmFzdGlhbkBiZXlvbmRjby5kZScsXG4gICdwYXNzd29yZCcgPT4gJ3Rlc3QnLFxuXSk7XG5cbiR1c2VycyA9IERCOjp0YWJsZSgndXNlcnMnKS0+c2VsZWN0KCduYW1lJywgJ2VtYWlsIGFzIHVzZXJfZW1haWwnKS0+Z2V0KCk7XG4iLCJoYXNoIjoicXVlcmllcy1zcGVjaWZ5aW5nLWEtc2VsZWN0LWNsYXVzZSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>-&gt;</span>select<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'email as user_email\'</span>)</span>-&gt;</span>get();</code></pre>\n  <p>The <code>distinct</code> method allows you to force the query to return distinct results:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>-&gt;</span>distinct<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>get();</code></pre>\n  <p>If you already have a query builder instance and you wish to add a column to its existing select clause, you may use the <code>addSelect</code> method:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlxuVXNlcjo6Y3JlYXRlKFtcbiAgJ25hbWUnID0+ICdNYXJjZWwnLFxuICAnZW1haWwnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAncGFzc3dvcmQnID0+ICd0ZXN0Jyxcbl0pO1xuXG5Vc2VyOjpjcmVhdGUoW1xuICAnbmFtZScgPT4gJ1NlYmFzdGlhbicsXG4gICdlbWFpbCcgPT4gJ3NlYmFzdGlhbkBiZXlvbmRjby5kZScsXG4gICdwYXNzd29yZCcgPT4gJ3Rlc3QnLFxuXSk7XG5cbiRxdWVyeSA9IERCOjp0YWJsZSgndXNlcnMnKS0+c2VsZWN0KCduYW1lJyk7XG5cbiR1c2VycyA9ICRxdWVyeS0+YWRkU2VsZWN0KCdlbWFpbCcpLT5nZXQoKTtcbiIsImhhc2giOiJxdWVyaWVzLXNwZWNpZnlpbmctYS1zZWxlY3QtY2xhdXNlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$query</span> = DB::table(<span class="hljs-string">\'users\'</span>)-&gt;select(<span class="hljs-string">\'name\'</span>);\n\n<span class="hljs-variable">$users</span> = <span class="hljs-variable">$query</span>-&gt;addSelect(<span class="hljs-string">\'age\'</span>)-&gt;get();</code></pre>\n  <p><a name="raw-expressions"></a></p>\n\n          <p><a name="raw-expressions"></a></p>\n          <h2>\n            <a href="#raw-expressions">\n              Raw Expressions\n            </a>\n          </h2><p>Sometimes you may need to use a raw expression in a query. To create a raw expression, you may use the <code>DB::raw</code> method:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlxuVXNlcjo6Y3JlYXRlKFtcbiAgJ25hbWUnID0+ICdNYXJjZWwnLFxuICAnZW1haWwnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAncGFzc3dvcmQnID0+ICd0ZXN0Jyxcbl0pO1xuXG5Vc2VyOjpjcmVhdGUoW1xuICAnbmFtZScgPT4gJ1NlYmFzdGlhbicsXG4gICdlbWFpbCcgPT4gJ3NlYmFzdGlhbkBiZXlvbmRjby5kZScsXG4gICdwYXNzd29yZCcgPT4gJ3Rlc3QnLFxuXSk7XG5cbiR1c2VycyA9IERCOjp0YWJsZSgndXNlcnMnKVxuICAgICAgICAgICAgICAgICAtPnNlbGVjdChEQjo6cmF3KCdjb3VudCgqKSBhcyB1c2VyX2NvdW50JykpXG4gICAgICAgICAgICAgICAgIC0+Z2V0KCk7XG4iLCJoYXNoIjoicXVlcmllcy1yYXctZXhwcmVzc2lvbnMifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                     -&gt;</span>select<span class="hljs-function"><span class="hljs-params">(DB::raw(<span class="hljs-string">\'count(*) as user_count, status\'</span>))</span>\n                     -&gt;</span>where<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'status\'</span>, <span class="hljs-string">\'&lt;&gt;\'</span>, <span class="hljs-number">1</span>)</span>\n                     -&gt;</span>groupBy<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'status\'</span>)</span>\n                     -&gt;</span>get();</code></pre>\n  <blockquote>\n<p>{note} Raw statements will be injected into the query as strings, so you should be extremely careful to not create SQL injection vulnerabilities.</p>\n</blockquote>\n<p><a name="raw-methods"></a></p>\n\n          <p><a name="raw-methods"></a></p>\n          <h3>\n            <a href="#raw-methods">\n              Raw Methods\n            </a>\n          </h3><p>Instead of using <code>DB::raw</code>, you may also use the following methods to insert a raw expression into various parts of your query.</p>\n\n          <p><a name="-code-selectraw-code-"></a></p>\n          <h4>\n            <a href="#-code-selectraw-code-">\n              <code>selectRaw</code>\n            </a>\n          </h4><p>The <code>selectRaw</code> method can be used in place of <code>addSelect(DB::raw(...))</code>. This method accepts an optional array of bindings as its second argument:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$orders = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'orders\'</span>)</span>\n                -&gt;</span>selectRaw<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'price * ? as price_with_tax\'</span>, [<span class="hljs-number">1.0825</span>])</span>\n                -&gt;</span>get();</code></pre>\n  \n          <p><a name="-code-whereraw-orwhereraw-code-"></a></p>\n          <h4>\n            <a href="#-code-whereraw-orwhereraw-code-">\n              <code>whereRaw / orWhereRaw</code>\n            </a>\n          </h4><p>The <code>whereRaw</code> and <code>orWhereRaw</code> methods can be used to inject a raw <code>where</code> clause into your query. These methods accept an optional array of bindings as their second argument:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$orders = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'orders\'</span>)</span>\n                -&gt;</span>whereRaw<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'price &gt; IF(state = "TX", ?, 100)\'</span>, [<span class="hljs-number">200</span>])</span>\n                -&gt;</span>get();</code></pre>\n  \n          <p><a name="-code-havingraw-orhavingraw-code-"></a></p>\n          <h4>\n            <a href="#-code-havingraw-orhavingraw-code-">\n              <code>havingRaw / orHavingRaw</code>\n            </a>\n          </h4><p>The <code>havingRaw</code> and <code>orHavingRaw</code> methods may be used to set a raw string as the value of the <code>having</code> clause. These methods accept an optional array of bindings as their second argument:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$orders = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'orders\'</span>)</span>\n                -&gt;</span>select<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'department\'</span>, DB::raw(<span class="hljs-string">\'SUM(price) as total_sales\'</span>))</span>\n                -&gt;</span>groupBy<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'department\'</span>)</span>\n                -&gt;</span>havingRaw<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'SUM(price) &gt; ?\'</span>, [<span class="hljs-number">2500</span>])</span>\n                -&gt;</span>get();</code></pre>\n  \n          <p><a name="-code-orderbyraw-code-"></a></p>\n          <h4>\n            <a href="#-code-orderbyraw-code-">\n              <code>orderByRaw</code>\n            </a>\n          </h4><p>The <code>orderByRaw</code> method may be used to set a raw string as the value of the <code>order by</code> clause:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$orders = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'orders\'</span>)</span>\n                -&gt;</span>orderByRaw<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'updated_at - created_at DESC\'</span>)</span>\n                -&gt;</span>get();</code></pre>\n  <p><a name="joins"></a></p>\n\n          <p><a name="joins"></a></p>\n          <h2>\n            <a href="#joins">\n              Joins\n            </a>\n          </h2>\n          <p><a name="inner-join-clause"></a></p>\n          <h4>\n            <a href="#inner-join-clause">\n              Inner Join Clause\n            </a>\n          </h4><p>The query builder may also be used to write join statements. To perform a basic &quot;inner join&quot;, you may use the <code>join</code> method on a query builder instance. The first argument passed to the <code>join</code> method is the name of the table you need to join to, while the remaining arguments specify the column constraints for the join. You can even join to multiple tables in a single query:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n            -&gt;</span>join<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'contacts\'</span>, <span class="hljs-string">\'users.id\'</span>, <span class="hljs-string">\'=\'</span>, <span class="hljs-string">\'contacts.user_id\'</span>)</span>\n            -&gt;</span>join<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'orders\'</span>, <span class="hljs-string">\'users.id\'</span>, <span class="hljs-string">\'=\'</span>, <span class="hljs-string">\'orders.user_id\'</span>)</span>\n            -&gt;</span>select<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users.*\'</span>, <span class="hljs-string">\'contacts.phone\'</span>, <span class="hljs-string">\'orders.price\'</span>)</span>\n            -&gt;</span>get();</code></pre>\n  \n          <p><a name="left-join-right-join-clause"></a></p>\n          <h4>\n            <a href="#left-join-right-join-clause">\n              Left Join / Right Join Clause\n            </a>\n          </h4><p>If you would like to perform a &quot;left join&quot; or &quot;right join&quot; instead of an &quot;inner join&quot;, use the <code>leftJoin</code> or <code>rightJoin</code> methods. These methods have the same signature as the <code>join</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n            -&gt;</span>leftJoin<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'posts\'</span>, <span class="hljs-string">\'users.id\'</span>, <span class="hljs-string">\'=\'</span>, <span class="hljs-string">\'posts.user_id\'</span>)</span>\n            -&gt;</span>get();\n\n$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n            -&gt;</span>rightJoin<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'posts\'</span>, <span class="hljs-string">\'users.id\'</span>, <span class="hljs-string">\'=\'</span>, <span class="hljs-string">\'posts.user_id\'</span>)</span>\n            -&gt;</span>get();</code></pre>\n  \n          <p><a name="cross-join-clause"></a></p>\n          <h4>\n            <a href="#cross-join-clause">\n              Cross Join Clause\n            </a>\n          </h4><p>To perform a &quot;cross join&quot; use the <code>crossJoin</code> method with the name of the table you wish to cross join to. Cross joins generate a cartesian product between the first table and the joined table:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'sizes\'</span>)</span>\n            -&gt;</span>crossJoin<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'colours\'</span>)</span>\n            -&gt;</span>get();</code></pre>\n  \n          <p><a name="advanced-join-clauses"></a></p>\n          <h4>\n            <a href="#advanced-join-clauses">\n              Advanced Join Clauses\n            </a>\n          </h4><p>You may also specify more advanced join clauses. To get started, pass a <code>Closure</code> as the second argument into the <code>join</code> method. The <code>Closure</code> will receive a <code>JoinClause</code> object which allows you to specify constraints on the <code>join</code> clause:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">DB::table(<span class="hljs-string">\'users\'</span>)\n        -&gt;join(<span class="hljs-string">\'contacts\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($join)</span> </span>{\n            $join-&gt;on(<span class="hljs-string">\'users.id\'</span>, <span class="hljs-string">\'=\'</span>, <span class="hljs-string">\'contacts.user_id\'</span>)-&gt;orOn(...);\n        })\n        -&gt;get();</code></pre>\n  <p>If you would like to use a &quot;where&quot; style clause on your joins, you may use the <code>where</code> and <code>orWhere</code> methods on a join. Instead of comparing two columns, these methods will compare the column against a value:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">DB::table(<span class="hljs-string">\'users\'</span>)\n        -&gt;join(<span class="hljs-string">\'contacts\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($join)</span> </span>{\n            $join-&gt;on(<span class="hljs-string">\'users.id\'</span>, <span class="hljs-string">\'=\'</span>, <span class="hljs-string">\'contacts.user_id\'</span>)\n                 -&gt;where(<span class="hljs-string">\'contacts.user_id\'</span>, <span class="hljs-string">\'&gt;\'</span>, <span class="hljs-number">5</span>);\n        })\n        -&gt;get();</code></pre>\n  \n          <p><a name="sub-query-joins"></a></p>\n          <h4>\n            <a href="#sub-query-joins">\n              Sub-Query Joins\n            </a>\n          </h4><p>You may use the <code>joinSub</code>, <code>leftJoinSub</code>, and <code>rightJoinSub</code> methods to join a query to a sub-query. Each of these methods receive three arguments: the sub-query, its table alias, and a Closure that defines the related columns:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$latestPosts = DB::table(<span class="hljs-string">\'posts\'</span>)\n                   -&gt;select(<span class="hljs-string">\'user_id\'</span>, DB::raw(<span class="hljs-string">\'MAX(created_at) as last_post_created_at\'</span>))\n                   -&gt;where(<span class="hljs-string">\'is_published\'</span>, <span class="hljs-keyword">true</span>)\n                   -&gt;groupBy(<span class="hljs-string">\'user_id\'</span>);\n\n$users = DB::table(<span class="hljs-string">\'users\'</span>)\n        -&gt;joinSub($latestPosts, <span class="hljs-string">\'latest_posts\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($join)</span> </span>{\n            $join-&gt;on(<span class="hljs-string">\'users.id\'</span>, <span class="hljs-string">\'=\'</span>, <span class="hljs-string">\'latest_posts.user_id\'</span>);\n        })-&gt;get();</code></pre>\n  <p><a name="unions"></a></p>\n\n          <p><a name="unions"></a></p>\n          <h2>\n            <a href="#unions">\n              Unions\n            </a>\n          </h2><p>The query builder also provides a quick way to &quot;union&quot; two queries together. For example, you may create an initial query and use the <code>union</code> method to union it with a second query:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$first = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n            -&gt;</span>whereNull(<span class="hljs-string">\'first_name\'</span>);\n\n$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n            -&gt;</span>whereNull<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'last_name\'</span>)</span>\n            -&gt;</span>union<span class="hljs-function"><span class="hljs-params">($first)</span>\n            -&gt;</span>get();</code></pre>\n  <blockquote>\n<p>{tip} The <code>unionAll</code> method is also available and has the same method signature as <code>union</code>.</p>\n</blockquote>\n<p><a name="where-clauses"></a></p>\n\n          <p><a name="where-clauses"></a></p>\n          <h2>\n            <a href="#where-clauses">\n              Where Clauses\n            </a>\n          </h2>\n          <p><a name="simple-where-clauses"></a></p>\n          <h4>\n            <a href="#simple-where-clauses">\n              Simple Where Clauses\n            </a>\n          </h4><p>You may use the <code>where</code> method on a query builder instance to add <code>where</code> clauses to the query. The most basic call to <code>where</code> requires three arguments. The first argument is the name of the column. The second argument is an operator, which can be any of the database&#39;s supported operators. Finally, the third argument is the value to evaluate against the column.</p>\n<p>For example, here is a query that verifies the value of the &quot;votes&quot; column is equal to 100:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlxuVXNlcjo6Y3JlYXRlKFtcbiAgJ25hbWUnID0+ICdNYXJjZWwnLFxuICAnZW1haWwnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAncGFzc3dvcmQnID0+ICd0ZXN0Jyxcbl0pO1xuXG5Vc2VyOjpjcmVhdGUoW1xuICAnbmFtZScgPT4gJ1NlYmFzdGlhbicsXG4gICdlbWFpbCcgPT4gJ3NlYmFzdGlhbkBiZXlvbmRjby5kZScsXG4gICdwYXNzd29yZCcgPT4gJ3Rlc3QnLFxuXSk7XG5cbiAkdXNlcnMgPSBEQjo6dGFibGUoJ3VzZXJzJyktPndoZXJlKCduYW1lJywgJz0nLCAnU2ViYXN0aWFuJyktPmdldCgpO1xuIiwiaGFzaCI6InF1ZXJpZXMtc2ltcGxlLXdoZXJlLWNsYXVzZXMifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>-&gt;</span>where<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'votes\'</span>, <span class="hljs-string">\'=\'</span>, <span class="hljs-number">100</span>)</span>-&gt;</span>get();</code></pre>\n  <p>For convenience, if you want to verify that a column is equal to a given value, you may pass the value directly as the second argument to the <code>where</code> method:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlxuVXNlcjo6Y3JlYXRlKFtcbiAgJ25hbWUnID0+ICdNYXJjZWwnLFxuICAnZW1haWwnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAncGFzc3dvcmQnID0+ICd0ZXN0Jyxcbl0pO1xuXG5Vc2VyOjpjcmVhdGUoW1xuICAnbmFtZScgPT4gJ1NlYmFzdGlhbicsXG4gICdlbWFpbCcgPT4gJ3NlYmFzdGlhbkBiZXlvbmRjby5kZScsXG4gICdwYXNzd29yZCcgPT4gJ3Rlc3QnLFxuXSk7XG5cbiAkdXNlcnMgPSBEQjo6dGFibGUoJ3VzZXJzJyktPndoZXJlKCduYW1lJywgJ1NlYmFzdGlhbicpLT5nZXQoKTtcbiIsImhhc2giOiJxdWVyaWVzLXNpbXBsZS13aGVyZS1jbGF1c2VzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>-&gt;</span>where<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'votes\'</span>, <span class="hljs-number">100</span>)</span>-&gt;</span>get();</code></pre>\n  <p>You may use a variety of other operators when writing a <code>where</code> clause:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                -&gt;</span>where<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'votes\'</span>, <span class="hljs-string">\'&gt;=\'</span>, <span class="hljs-number">100</span>)</span>\n                -&gt;</span>get();\n\n$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                -&gt;</span>where<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'votes\'</span>, <span class="hljs-string">\'&lt;&gt;\'</span>, <span class="hljs-number">100</span>)</span>\n                -&gt;</span>get();\n\n$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                -&gt;</span>where<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'like\'</span>, <span class="hljs-string">\'T%\'</span>)</span>\n                -&gt;</span>get();</code></pre>\n  <p>You may also pass an array of conditions to the <code>where</code> function:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$users</span> = DB::table(<span class="hljs-string">\'users\'</span>)-&gt;where([\n    [<span class="hljs-string">\'status\'</span>, <span class="hljs-string">\'=\'</span>, <span class="hljs-string">\'1\'</span>],\n    [<span class="hljs-string">\'subscribed\'</span>, <span class="hljs-string">\'&lt;&gt;\'</span>, <span class="hljs-string">\'1\'</span>],\n])-&gt;get();</code></pre>\n  \n          <p><a name="or-statements"></a></p>\n          <h4>\n            <a href="#or-statements">\n              Or Statements\n            </a>\n          </h4><p>You may chain where constraints together as well as add <code>or</code> clauses to the query. The <code>orWhere</code> method accepts the same arguments as the <code>where</code> method:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlxuVXNlcjo6Y3JlYXRlKFtcbiAgJ25hbWUnID0+ICdNYXJjZWwnLFxuICAnZW1haWwnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAncGFzc3dvcmQnID0+ICd0ZXN0Jyxcbl0pO1xuXG5Vc2VyOjpjcmVhdGUoW1xuICAnbmFtZScgPT4gJ1NlYmFzdGlhbicsXG4gICdlbWFpbCcgPT4gJ3NlYmFzdGlhbkBiZXlvbmRjby5kZScsXG4gICdwYXNzd29yZCcgPT4gJ3Rlc3QnLFxuXSk7XG5cbiAkdXNlcnMgPSBEQjo6dGFibGUoJ3VzZXJzJylcbiAgICAtPndoZXJlKCduYW1lJywgJ1NlYmFzdGlhbicpXG4gICAgLT5vcldoZXJlKCdlbWFpbCcsICdtYXJjZWxAYmV5b25kY28uZGUnKVxuICAgIC0+Z2V0KCk7XG4iLCJoYXNoIjoicXVlcmllcy1vci1zdGF0ZW1lbnRzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                    -&gt;</span>where<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'votes\'</span>, <span class="hljs-string">\'&gt;\'</span>, <span class="hljs-number">100</span>)</span>\n                    -&gt;</span>orWhere<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'John\'</span>)</span>\n                    -&gt;</span>get();</code></pre>\n  \n          <p><a name="additional-where-clauses"></a></p>\n          <h4>\n            <a href="#additional-where-clauses">\n              Additional Where Clauses\n            </a>\n          </h4><p><strong>whereBetween / orWhereBetween</strong></p>\n<p>The <code>whereBetween</code> method verifies that a column&#39;s value is between two values:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n           -&gt;</span>whereBetween<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'votes\'</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">100</span>])</span>\n           -&gt;</span>get();</code></pre>\n  <p><strong>whereNotBetween / orWhereNotBetween</strong></p>\n<p>The <code>whereNotBetween</code> method verifies that a column&#39;s value lies outside of two values:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                    -&gt;</span>whereNotBetween<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'votes\'</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">100</span>])</span>\n                    -&gt;</span>get();</code></pre>\n  <p><strong>whereIn / whereNotIn / orWhereIn / orWhereNotIn</strong></p>\n<p>The <code>whereIn</code> method verifies that a given column&#39;s value is contained within the given array:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlxuVXNlcjo6Y3JlYXRlKFtcbiAgJ25hbWUnID0+ICdNYXJjZWwnLFxuICAnZW1haWwnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAncGFzc3dvcmQnID0+ICd0ZXN0Jyxcbl0pO1xuXG5Vc2VyOjpjcmVhdGUoW1xuICAnbmFtZScgPT4gJ1NlYmFzdGlhbicsXG4gICdlbWFpbCcgPT4gJ3NlYmFzdGlhbkBiZXlvbmRjby5kZScsXG4gICdwYXNzd29yZCcgPT4gJ3Rlc3QnLFxuXSk7XG5cbiR1c2VycyA9IERCOjp0YWJsZSgndXNlcnMnKVxuICAgICAgICAgICAgICAgIC0+d2hlcmVJbignaWQnLCBbMSwgMiwgM10pXG4gICAgICAgICAgICAgICAgLT5nZXQoKTtcbiIsImhhc2giOiJxdWVyaWVzLWFkZGl0aW9uYWwtd2hlcmUtY2xhdXNlcyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                    -&gt;</span>whereIn<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'id\'</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])</span>\n                    -&gt;</span>get();</code></pre>\n  <p>The <code>whereNotIn</code> method verifies that the given column&#39;s value is <strong>not</strong> contained in the given array:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlxuVXNlcjo6Y3JlYXRlKFtcbiAgJ25hbWUnID0+ICdNYXJjZWwnLFxuICAnZW1haWwnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAncGFzc3dvcmQnID0+ICd0ZXN0Jyxcbl0pO1xuXG5Vc2VyOjpjcmVhdGUoW1xuICAnbmFtZScgPT4gJ1NlYmFzdGlhbicsXG4gICdlbWFpbCcgPT4gJ3NlYmFzdGlhbkBiZXlvbmRjby5kZScsXG4gICdwYXNzd29yZCcgPT4gJ3Rlc3QnLFxuXSk7XG5cbiR1c2VycyA9IERCOjp0YWJsZSgndXNlcnMnKVxuICAgICAgICAgICAgICAgIC0+d2hlcmVOb3RJbignaWQnLCBbMSwgMiwgM10pXG4gICAgICAgICAgICAgICAgLT5nZXQoKTtcbiIsImhhc2giOiJxdWVyaWVzLWFkZGl0aW9uYWwtd2hlcmUtY2xhdXNlcyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                    -&gt;</span>whereNotIn<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'id\'</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])</span>\n                    -&gt;</span>get();</code></pre>\n  <p><strong>whereNull / whereNotNull / orWhereNull / orWhereNotNull</strong></p>\n<p>The <code>whereNull</code> method verifies that the value of the given column is <code>NULL</code>:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlxuREI6Omluc2VydCgnaW5zZXJ0IGludG8gdXNlcnMgKG5hbWUsIGVtYWlsLCBwYXNzd29yZCkgdmFsdWVzICg/LCA/LCA/KScsIFsnTWFyY2VsJywgJ21hcmNlbEBiZXlvbmRjby5kZScsICd0ZXN0J10pO1xuXG4kdXNlcnMgPSBEQjo6dGFibGUoJ3VzZXJzJylcbiAgICAgICAgICAgICAgICAtPndoZXJlTnVsbCgndXBkYXRlZF9hdCcpXG4gICAgICAgICAgICAgICAgLT5nZXQoKTtcbiIsImhhc2giOiJxdWVyaWVzLWFkZGl0aW9uYWwtd2hlcmUtY2xhdXNlcyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                    -&gt;</span>whereNull<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'updated_at\'</span>)</span>\n                    -&gt;</span>get();</code></pre>\n  <p>The <code>whereNotNull</code> method verifies that the column&#39;s value is not <code>NULL</code>:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlxuVXNlcjo6Y3JlYXRlKFtcbiAgJ25hbWUnID0+ICdNYXJjZWwnLFxuICAnZW1haWwnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAncGFzc3dvcmQnID0+ICd0ZXN0Jyxcbl0pO1xuXG4kdXNlcnMgPSBEQjo6dGFibGUoJ3VzZXJzJylcbiAgICAgICAgICAgICAgICAtPndoZXJlTm90TnVsbCgndXBkYXRlZF9hdCcpXG4gICAgICAgICAgICAgICAgLT5nZXQoKTtcbiIsImhhc2giOiJxdWVyaWVzLWFkZGl0aW9uYWwtd2hlcmUtY2xhdXNlcyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                    -&gt;</span>whereNotNull<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'updated_at\'</span>)</span>\n                    -&gt;</span>get();</code></pre>\n  <p><strong>whereDate / whereMonth / whereDay / whereYear / whereTime</strong></p>\n<p>The <code>whereDate</code> method may be used to compare a column&#39;s value against a date:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlxuVXNlcjo6Y3JlYXRlKFtcbiAgJ25hbWUnID0+ICdNYXJjZWwnLFxuICAnZW1haWwnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAncGFzc3dvcmQnID0+ICd0ZXN0Jyxcbl0pO1xuXG4kdXNlcnMgPSBEQjo6dGFibGUoJ3VzZXJzJylcbiAgICAgICAgICAgICAgICAtPndoZXJlTW9udGgoJ2NyZWF0ZWRfYXQnLCAnMTInKVxuICAgICAgICAgICAgICAgIC0+Z2V0KCk7XG4iLCJoYXNoIjoicXVlcmllcy1hZGRpdGlvbmFsLXdoZXJlLWNsYXVzZXMifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                -&gt;</span>whereDate<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'created_at\'</span>, <span class="hljs-string">\'2016-12-31\'</span>)</span>\n                -&gt;</span>get();</code></pre>\n  <p>The <code>whereMonth</code> method may be used to compare a column&#39;s value against a specific month of a year:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                -&gt;</span>whereMonth<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'created_at\'</span>, <span class="hljs-string">\'12\'</span>)</span>\n                -&gt;</span>get();</code></pre>\n  <p>The <code>whereDay</code> method may be used to compare a column&#39;s value against a specific day of a month:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                -&gt;</span>whereDay<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'created_at\'</span>, <span class="hljs-string">\'31\'</span>)</span>\n                -&gt;</span>get();</code></pre>\n  <p>The <code>whereYear</code> method may be used to compare a column&#39;s value against a specific year:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                -&gt;</span>whereYear<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'created_at\'</span>, <span class="hljs-string">\'2016\'</span>)</span>\n                -&gt;</span>get();</code></pre>\n  <p>The <code>whereTime</code> method may be used to compare a column&#39;s value against a specific time:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                -&gt;</span>whereTime<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'created_at\'</span>, <span class="hljs-string">\'=\'</span>, <span class="hljs-string">\'11:20:45\'</span>)</span>\n                -&gt;</span>get();</code></pre>\n  <p><strong>whereColumn / orWhereColumn</strong></p>\n<p>The <code>whereColumn</code> method may be used to verify that two columns are equal:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlxuVXNlcjo6Y3JlYXRlKFtcbiAgJ25hbWUnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAnZW1haWwnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAncGFzc3dvcmQnID0+ICd0ZXN0Jyxcbl0pO1xuXG4kdXNlcnMgPSBEQjo6dGFibGUoJ3VzZXJzJylcbiAgICAgICAgICAgICAgICAtPndoZXJlQ29sdW1uKCduYW1lJywgJ2VtYWlsJylcbiAgICAgICAgICAgICAgICAtPmdldCgpO1xuIiwiaGFzaCI6InF1ZXJpZXMtYWRkaXRpb25hbC13aGVyZS1jbGF1c2VzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                -&gt;</span>whereColumn<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'first_name\'</span>, <span class="hljs-string">\'last_name\'</span>)</span>\n                -&gt;</span>get();</code></pre>\n  <p>You may also pass a comparison operator to the method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                -&gt;</span>whereColumn<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'updated_at\'</span>, <span class="hljs-string">\'&gt;\'</span>, <span class="hljs-string">\'created_at\'</span>)</span>\n                -&gt;</span>get();</code></pre>\n  <p>The <code>whereColumn</code> method can also be passed an array of multiple conditions. These conditions will be joined using the <code>and</code> operator:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$users</span> = DB::table(<span class="hljs-string">\'users\'</span>)\n                -&gt;whereColumn([\n                    [<span class="hljs-string">\'first_name\'</span>, <span class="hljs-string">\'=\'</span>, <span class="hljs-string">\'last_name\'</span>],\n                    [<span class="hljs-string">\'updated_at\'</span>, <span class="hljs-string">\'&gt;\'</span>, <span class="hljs-string">\'created_at\'</span>],\n                ])-&gt;get();</code></pre>\n  <p><a name="parameter-grouping"></a></p>\n\n          <p><a name="parameter-grouping"></a></p>\n          <h3>\n            <a href="#parameter-grouping">\n              Parameter Grouping\n            </a>\n          </h3><p>Sometimes you may need to create more advanced where clauses such as &quot;where exists&quot; clauses or nested parameter groupings. The Laravel query builder can handle these as well. To get started, let&#39;s look at an example of grouping constraints within parenthesis:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table(<span class="hljs-string">\'users\'</span>)\n           -&gt;where(<span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'=\'</span>, <span class="hljs-string">\'John\'</span>)\n           -&gt;where(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($query)</span> </span>{\n               $query-&gt;where(<span class="hljs-string">\'votes\'</span>, <span class="hljs-string">\'&gt;\'</span>, <span class="hljs-number">100</span>)\n                     -&gt;orWhere(<span class="hljs-string">\'title\'</span>, <span class="hljs-string">\'=\'</span>, <span class="hljs-string">\'Admin\'</span>);\n           })\n           -&gt;get();</code></pre>\n  <p>As you can see, passing a <code>Closure</code> into the <code>where</code> method instructs the query builder to begin a constraint group. The <code>Closure</code> will receive a query builder instance which you can use to set the constraints that should be contained within the parenthesis group. The example above will produce the following SQL:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">name</span> = <span class="hljs-string">\'John\'</span> <span class="hljs-keyword">and</span> (votes &gt; <span class="hljs-number">100</span> <span class="hljs-keyword">or</span> title = <span class="hljs-string">\'Admin\'</span>)</code></pre>\n  <blockquote>\n<p>{tip} You should always group <code>orWhere</code> calls in order to avoid unexpected behavior when global scopes are applied.</p>\n</blockquote>\n<p><a name="where-exists-clauses"></a></p>\n\n          <p><a name="where-exists-clauses"></a></p>\n          <h3>\n            <a href="#where-exists-clauses">\n              Where Exists Clauses\n            </a>\n          </h3><p>The <code>whereExists</code> method allows you to write <code>where exists</code> SQL clauses. The <code>whereExists</code> method accepts a <code>Closure</code> argument, which will receive a query builder instance allowing you to define the query that should be placed inside of the &quot;exists&quot; clause:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n           -&gt;</span>whereExists(<span class="hljs-keyword">function</span> ($query) {\n               $query-&gt;select<span class="hljs-function"><span class="hljs-params">(DB::raw(<span class="hljs-number">1</span>))</span>\n                     -&gt;</span><span class="hljs-keyword">from</span><span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'orders\'</span>)</span>\n                     -&gt;</span>whereRaw(<span class="hljs-string">\'orders.user_id = users.id\'</span>);\n           })<span class="hljs-function">\n           -&gt;</span>get();</code></pre>\n  <p>The query above will produce the following SQL:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">select * <span class="hljs-keyword">from</span><span class="hljs-built_in"> users\n</span>where exists (\n    select 1 <span class="hljs-keyword">from</span> orders where orders.user_id = users.id\n)</code></pre>\n  <p><a name="json-where-clauses"></a></p>\n\n          <p><a name="json-where-clauses"></a></p>\n          <h3>\n            <a href="#json-where-clauses">\n              JSON Where Clauses\n            </a>\n          </h3><p>Laravel also supports querying JSON column types on databases that provide support for JSON column types. Currently, this includes MySQL 5.7, PostgreSQL, SQL Server 2016, and SQLite 3.9.0 (with the <router-link to="https://www.sqlite.org/json1.html">JSON1 extension</router-link>). To query a JSON column, use the <code>-&gt;</code> operator:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                -&gt;</span>where<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'options-&gt;language\'</span>, <span class="hljs-string">\'en\'</span>)</span>\n                -&gt;</span>get();\n\n$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                -&gt;</span>where<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'preferences-&gt;dining-&gt;meal\'</span>, <span class="hljs-string">\'salad\'</span>)</span>\n                -&gt;</span>get();</code></pre>\n  <p>You may use <code>whereJsonContains</code> to query JSON arrays (not supported on SQLite):</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                -&gt;</span>whereJsonContains<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'options-&gt;languages\'</span>, <span class="hljs-string">\'en\'</span>)</span>\n                -&gt;</span>get();</code></pre>\n  <p>MySQL and PostgreSQL support <code>whereJsonContains</code> with multiple values:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                -&gt;</span>whereJsonContains<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'options-&gt;languages\'</span>, [<span class="hljs-string">\'en\'</span>, <span class="hljs-string">\'de\'</span>])</span>\n                -&gt;</span>get();</code></pre>\n  <p>You may use <code>whereJsonLength</code> to query JSON arrays by their length:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                -&gt;</span>whereJsonLength<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'options-&gt;languages\'</span>, <span class="hljs-number">0</span>)</span>\n                -&gt;</span>get();\n\n$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                -&gt;</span>whereJsonLength<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'options-&gt;languages\'</span>, <span class="hljs-string">\'&gt;\'</span>, <span class="hljs-number">1</span>)</span>\n                -&gt;</span>get();</code></pre>\n  <p><a name="ordering-grouping-limit-and-offset"></a></p>\n\n          <p><a name="ordering-grouping-limit-amp-offset"></a></p>\n          <h2>\n            <a href="#ordering-grouping-limit-amp-offset">\n              Ordering, Grouping, Limit &amp; Offset\n            </a>\n          </h2>\n          <p><a name="orderby"></a></p>\n          <h4>\n            <a href="#orderby">\n              orderBy\n            </a>\n          </h4><p>The <code>orderBy</code> method allows you to sort the result of the query by a given column. The first argument to the <code>orderBy</code> method should be the column you wish to sort by, while the second argument controls the direction of the sort and may be either <code>asc</code> or <code>desc</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                -&gt;</span>orderBy<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'desc\'</span>)</span>\n                -&gt;</span>get();</code></pre>\n  \n          <p><a name="latest-oldest"></a></p>\n          <h4>\n            <a href="#latest-oldest">\n              latest / oldest\n            </a>\n          </h4><p>The <code>latest</code> and <code>oldest</code> methods allow you to easily order results by date. By default, result will be ordered by the <code>created_at</code> column. Or, you may pass the column name that you wish to sort by:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                -&gt;</span>latest<span class="hljs-function"><span class="hljs-params">()</span>\n                -&gt;</span>first();</code></pre>\n  \n          <p><a name="inrandomorder"></a></p>\n          <h4>\n            <a href="#inrandomorder">\n              inRandomOrder\n            </a>\n          </h4><p>The <code>inRandomOrder</code> method may be used to sort the query results randomly. For example, you may use this method to fetch a random user:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$randomUser = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                -&gt;</span>inRandomOrder<span class="hljs-function"><span class="hljs-params">()</span>\n                -&gt;</span>first();</code></pre>\n  \n          <p><a name="groupby-having"></a></p>\n          <h4>\n            <a href="#groupby-having">\n              groupBy / having\n            </a>\n          </h4><p>The <code>groupBy</code> and <code>having</code> methods may be used to group the query results. The <code>having</code> method&#39;s signature is similar to that of the <code>where</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                -&gt;</span>groupBy<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'account_id\'</span>)</span>\n                -&gt;</span>having<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'account_id\'</span>, <span class="hljs-string">\'&gt;\'</span>, <span class="hljs-number">100</span>)</span>\n                -&gt;</span>get();</code></pre>\n  <p>You may pass multiple arguments to the <code>groupBy</code> method to group by multiple columns:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                -&gt;</span>groupBy<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'first_name\'</span>, <span class="hljs-string">\'status\'</span>)</span>\n                -&gt;</span>having<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'account_id\'</span>, <span class="hljs-string">\'&gt;\'</span>, <span class="hljs-number">100</span>)</span>\n                -&gt;</span>get();</code></pre>\n  <p>For more advanced <code>having</code> statements, see the <a href="#raw-methods"><code>havingRaw</code></a> method.</p>\n\n          <p><a name="skip-take"></a></p>\n          <h4>\n            <a href="#skip-take">\n              skip / take\n            </a>\n          </h4><p>To limit the number of results returned from the query, or to skip a given number of results in the query, you may use the <code>skip</code> and <code>take</code> methods:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>-&gt;</span>skip<span class="hljs-function"><span class="hljs-params">(<span class="hljs-number">10</span>)</span>-&gt;</span>take<span class="hljs-function"><span class="hljs-params">(<span class="hljs-number">5</span>)</span>-&gt;</span>get();</code></pre>\n  <p>Alternatively, you may use the <code>limit</code> and <code>offset</code> methods:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n                -&gt;</span>offset<span class="hljs-function"><span class="hljs-params">(<span class="hljs-number">10</span>)</span>\n                -&gt;</span>limit<span class="hljs-function"><span class="hljs-params">(<span class="hljs-number">5</span>)</span>\n                -&gt;</span>get();</code></pre>\n  <p><a name="conditional-clauses"></a></p>\n\n          <p><a name="conditional-clauses"></a></p>\n          <h2>\n            <a href="#conditional-clauses">\n              Conditional Clauses\n            </a>\n          </h2><p>Sometimes you may want clauses to apply to a query only when something else is true. For instance you may only want to apply a <code>where</code> statement if a given input value is present on the incoming request. You may accomplish this using the <code>when</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$role = $request-&gt;input(<span class="hljs-string">\'role\'</span>);\n\n$users = DB::table(<span class="hljs-string">\'users\'</span>)\n                -&gt;when($role, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($query, $role)</span> </span>{\n                    <span class="hljs-keyword">return</span> $query-&gt;where(<span class="hljs-string">\'role_id\'</span>, $role);\n                })\n                -&gt;get();</code></pre>\n  <p>The <code>when</code> method only executes the given Closure when the first parameter is <code>true</code>. If the first parameter is <code>false</code>, the Closure will not be executed.</p>\n<p>You may pass another Closure as the third parameter to the <code>when</code> method. This Closure will execute if the first parameter evaluates as <code>false</code>. To illustrate how this feature may be used, we will use it to configure the default sorting of a query:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$sortBy = <span class="hljs-keyword">null</span>;\n\n$users = DB::table(<span class="hljs-string">\'users\'</span>)\n                -&gt;when($sortBy, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($query, $sortBy)</span> </span>{\n                    <span class="hljs-keyword">return</span> $query-&gt;orderBy($sortBy);\n                }, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($query)</span> </span>{\n                    <span class="hljs-keyword">return</span> $query-&gt;orderBy(<span class="hljs-string">\'name\'</span>);\n                })\n                -&gt;get();</code></pre>\n  <p><a name="inserts"></a></p>\n\n          <p><a name="inserts"></a></p>\n          <h2>\n            <a href="#inserts">\n              Inserts\n            </a>\n          </h2><p>The query builder also provides an <code>insert</code> method for inserting records into the database table. The <code>insert</code> method accepts an array of column names and values:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">DB::table(<span class="hljs-string">\'users\'</span>)-&gt;insert(\n    [<span class="hljs-string">\'email\'</span> =&gt; <span class="hljs-string">\'john@example.com\'</span>, <span class="hljs-string">\'votes\'</span> =&gt; <span class="hljs-number">0</span>]\n);</code></pre>\n  <p>You may even insert several records into the table with a single call to <code>insert</code> by passing an array of arrays. Each array represents a row to be inserted into the table:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-type">DB</span>::table(<span class="hljs-symbol">\'users\'</span>)-&gt;insert([\n    [<span class="hljs-symbol">\'email\'</span> =&gt; <span class="hljs-symbol">\'taylor</span>@example.com\', <span class="hljs-symbol">\'votes\'</span> =&gt; <span class="hljs-number">0</span>],\n    [<span class="hljs-symbol">\'email\'</span> =&gt; <span class="hljs-symbol">\'dayle</span>@example.com\', <span class="hljs-symbol">\'votes\'</span> =&gt; <span class="hljs-number">0</span>]\n]);</code></pre>\n  <p>The <code>insertOrIgnore</code> method will ignore duplicate record errors while inserting records into the database:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-type">DB</span>::table(<span class="hljs-symbol">\'users\'</span>)-&gt;insertOrIgnore([\n    [<span class="hljs-symbol">\'id\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-symbol">\'email\'</span> =&gt; <span class="hljs-symbol">\'taylor</span>@example.com\'],\n    [<span class="hljs-symbol">\'id\'</span> =&gt; <span class="hljs-number">2</span>, <span class="hljs-symbol">\'email\'</span> =&gt; <span class="hljs-symbol">\'dayle</span>@example.com\']\n]);</code></pre>\n  \n          <p><a name="auto-incrementing-ids"></a></p>\n          <h4>\n            <a href="#auto-incrementing-ids">\n              Auto-Incrementing IDs\n            </a>\n          </h4><p>If the table has an auto-incrementing id, use the <code>insertGetId</code> method to insert a record and then retrieve the ID:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$id = DB::table(<span class="hljs-string">\'users\'</span>)-&gt;insertGetId(\n    [<span class="hljs-string">\'email\'</span> =&gt; <span class="hljs-string">\'john@example.com\'</span>, <span class="hljs-string">\'votes\'</span> =&gt; <span class="hljs-number">0</span>]\n);</code></pre>\n  <blockquote>\n<p>{note} When using PostgreSQL the <code>insertGetId</code> method expects the auto-incrementing column to be named <code>id</code>. If you would like to retrieve the ID from a different &quot;sequence&quot;, you may pass the column name as the second parameter to the <code>insertGetId</code> method.</p>\n</blockquote>\n<p><a name="updates"></a></p>\n\n          <p><a name="updates"></a></p>\n          <h2>\n            <a href="#updates">\n              Updates\n            </a>\n          </h2><p>In addition to inserting records into the database, the query builder can also update existing records using the <code>update</code> method. The <code>update</code> method, like the <code>insert</code> method, accepts an array of column and value pairs containing the columns to be updated. You may constrain the <code>update</code> query using <code>where</code> clauses:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$affected = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n              -&gt;</span>where<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'id\'</span>, <span class="hljs-number">1</span>)</span>\n              -&gt;</span>update([<span class="hljs-string">\'votes\'</span> =&gt; <span class="hljs-number">1</span>]);</code></pre>\n  \n          <p><a name="update-or-insert"></a></p>\n          <h4>\n            <a href="#update-or-insert">\n              Update Or Insert\n            </a>\n          </h4><p>Sometimes you may want to update an existing record in the database or create it if no matching record exists. In this scenario, the <code>updateOrInsert</code> method may be used. The <code>updateOrInsert</code> method accepts two arguments: an array of conditions by which to find the record, and an array of column and value pairs containing the columns to be updated.</p>\n<p>The <code>updateOrInsert</code> method will first attempt to locate a matching database record using the first argument&#39;s column and value pairs. If the record exists, it will be updated with the values in the second argument. If the record can not be found, a new record will be inserted with the merged attributes of both arguments:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">DB::table(<span class="hljs-string">\'users\'</span>)\n    -&gt;updateOrInsert(\n        [<span class="hljs-string">\'email\'</span> =&gt; <span class="hljs-string">\'john@example.com\'</span>, <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'John\'</span>],\n        [<span class="hljs-string">\'votes\'</span> =&gt; <span class="hljs-string">\'2\'</span>]\n    );</code></pre>\n  <p><a name="updating-json-columns"></a></p>\n\n          <p><a name="updating-json-columns"></a></p>\n          <h3>\n            <a href="#updating-json-columns">\n              Updating JSON Columns\n            </a>\n          </h3><p>When updating a JSON column, you should use <code>-&gt;</code> syntax to access the appropriate key in the JSON object. This operation is supported on MySQL 5.7+ and PostgreSQL 9.5+:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$affected = DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>\n              -&gt;</span>where<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'id\'</span>, <span class="hljs-number">1</span>)</span>\n              -&gt;</span>update([<span class="hljs-string">\'options-&gt;enabled\'</span> =&gt; <span class="hljs-literal">true</span>]);</code></pre>\n  <p><a name="increment-and-decrement"></a></p>\n\n          <p><a name="increment-amp-decrement"></a></p>\n          <h3>\n            <a href="#increment-amp-decrement">\n              Increment &amp; Decrement\n            </a>\n          </h3><p>The query builder also provides convenient methods for incrementing or decrementing the value of a given column. This is a shortcut, providing a more expressive and terse interface compared to manually writing the <code>update</code> statement.</p>\n<p>Both of these methods accept at least one argument: the column to modify. A second argument may optionally be passed to control the amount by which the column should be incremented or decremented:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>-&gt;</span>increment(<span class="hljs-string">\'votes\'</span>);\n\nDB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>-&gt;</span>increment(<span class="hljs-string">\'votes\'</span>, <span class="hljs-number">5</span>);\n\nDB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>-&gt;</span>decrement(<span class="hljs-string">\'votes\'</span>);\n\nDB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>-&gt;</span>decrement(<span class="hljs-string">\'votes\'</span>, <span class="hljs-number">5</span>);</code></pre>\n  <p>You may also specify additional columns to update during the operation:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>-&gt;</span>increment(<span class="hljs-string">\'votes\'</span>, <span class="hljs-number">1</span>, [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'John\'</span>]);</code></pre>\n  <p><a name="deletes"></a></p>\n\n          <p><a name="deletes"></a></p>\n          <h2>\n            <a href="#deletes">\n              Deletes\n            </a>\n          </h2><p>The query builder may also be used to delete records from the table via the <code>delete</code> method. You may constrain <code>delete</code> statements by adding <code>where</code> clauses before calling the <code>delete</code> method:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlxuVXNlcjo6Y3JlYXRlKFtcbiAgJ25hbWUnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAnZW1haWwnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAncGFzc3dvcmQnID0+ICd0ZXN0Jyxcbl0pO1xuXG5EQjo6dGFibGUoJ3VzZXJzJyktPmRlbGV0ZSgpO1xuXG4kdXNlcnMgPSBEQjo6dGFibGUoJ3VzZXJzJyktPmdldCgpO1xuIiwiaGFzaCI6InF1ZXJpZXMtZGVsZXRlcyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>-&gt;</span><span class="hljs-keyword">delete</span>();\n\nDB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>-&gt;</span>where<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'votes\'</span>, <span class="hljs-string">\'&gt;\'</span>, <span class="hljs-number">100</span>)</span>-&gt;</span><span class="hljs-keyword">delete</span>();</code></pre>\n  <p>If you wish to truncate the entire table, which will remove all rows and reset the auto-incrementing ID to zero, you may use the <code>truncate</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>-&gt;</span>truncate();</code></pre>\n  <p><a name="debugging"></a></p>\n\n          <p><a name="debugging"></a></p>\n          <h2>\n            <a href="#debugging">\n              Debugging\n            </a>\n          </h2><p>You may use the <code>dd</code> or <code>dump</code> methods while building a query to dump the query bindings and SQL. The <code>dd</code> method will display the debug information and then stop executing the request. The <code>dump</code> method will display the debug information but allow the request to keep executing:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlxuVXNlcjo6Y3JlYXRlKFtcbiAgJ25hbWUnID0+ICdNYXJjZWwnLFxuICAnZW1haWwnID0+ICdtYXJjZWxAYmV5b25kY28uZGUnLFxuICAncGFzc3dvcmQnID0+ICd0ZXN0Jyxcbl0pO1xuXG5EQjo6dGFibGUoJ3VzZXJzJyktPndoZXJlKCduYW1lJywgJ01hcmNlbCcpLT5kdW1wKCk7XG4iLCJoYXNoIjoicXVlcmllcy1kZWJ1Z2dpbmcifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">DB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>-&gt;</span>where<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'votes\'</span>, <span class="hljs-string">\'&gt;\'</span>, <span class="hljs-number">100</span>)</span>-&gt;</span>dd();\n\nDB::table<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>)</span>-&gt;</span>where<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'votes\'</span>, <span class="hljs-string">\'&gt;\'</span>, <span class="hljs-number">100</span>)</span>-&gt;</span>dump();</code></pre>\n  '},c148:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="javascript-amp-css-scaffolding"></a></p>\n          <h1>\n            <a href="#javascript-amp-css-scaffolding">\n              JavaScript &amp; CSS Scaffolding\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#writing-css">Writing CSS</a></li>\n<li><a href="#writing-javascript">Writing JavaScript</a><ul>\n<li><a href="#writing-vue-components">Writing Vue Components</a></li>\n<li><a href="#using-react">Using React</a></li>\n</ul>\n</li>\n<li><a href="#adding-presets">Adding Presets</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>While Laravel does not dictate which JavaScript or CSS pre-processors you use, it does provide a basic starting point using <router-link to="https://getbootstrap.com/">Bootstrap</router-link>, <router-link to="https://reactjs.org/">React</router-link>, and / or <router-link to="https://vuejs.org/">Vue</router-link> that will be helpful for many applications. By default, Laravel uses <router-link to="https://www.npmjs.org">NPM</router-link> to install both of these frontend packages.</p>\n<p>The Bootstrap and Vue scaffolding provided by Laravel is located in the <code>laravel/ui</code> Composer package, which may be installed using Composer:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">composer <span class="hljs-built_in">require</span> laravel/ui <span class="hljs-comment">--dev</span></code></pre>\n  <p>Once the <code>laravel/ui</code> package has been installed, you may install the frontend scaffolding using the <code>ui</code> Artisan command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">//</span> Generate basic scaffolding.<span class="hljs-string">..</span>\nphp artisan ui bootstrap\nphp artisan ui vue\nphp artisan ui react\n\n<span class="hljs-string">//</span> Generate login / registration scaffolding.<span class="hljs-string">..</span>\nphp artisan ui bootstrap <span class="hljs-params">--auth</span>\nphp artisan ui vue <span class="hljs-params">--auth</span>\nphp artisan ui react <span class="hljs-params">--auth</span></code></pre>\n  \n          <p><a name="css"></a></p>\n          <h4>\n            <a href="#css">\n              CSS\n            </a>\n          </h4><p><router-link to="/docs/{{version}}/mix">Laravel Mix</router-link> provides a clean, expressive API over compiling SASS or Less, which are extensions of plain CSS that add variables, mixins, and other powerful features that make working with CSS much more enjoyable. In this document, we will briefly discuss CSS compilation in general; however, you should consult the full <router-link to="/docs/{{version}}/mix">Laravel Mix documentation</router-link> for more information on compiling SASS or Less.</p>\n\n          <p><a name="javascript"></a></p>\n          <h4>\n            <a href="#javascript">\n              JavaScript\n            </a>\n          </h4><p>Laravel does not require you to use a specific JavaScript framework or library to build your applications. In fact, you don&#39;t have to use JavaScript at all. However, Laravel does include some basic scaffolding to make it easier to get started writing modern JavaScript using the <router-link to="https://vuejs.org">Vue</router-link> library. Vue provides an expressive API for building robust JavaScript applications using components. As with CSS, we may use Laravel Mix to easily compile JavaScript components into a single, browser-ready JavaScript file.</p>\n<p><a name="writing-css"></a></p>\n\n          <p><a name="writing-css"></a></p>\n          <h2>\n            <a href="#writing-css">\n              Writing CSS\n            </a>\n          </h2><p>After installing the <code>laravel/ui</code> Composer package and <a href="#introduction">generating the frontend scaffolding</a>, Laravel&#39;s <code>package.json</code> file will include the <code>bootstrap</code> package to help you get started prototyping your application&#39;s frontend using Bootstrap. However, feel free to add or remove packages from the <code>package.json</code> file as needed for your own application. You are not required to use the Bootstrap framework to build your Laravel application - it is provided as a good starting point for those who choose to use it.</p>\n<p>Before compiling your CSS, install your project&#39;s frontend dependencies using the <router-link to="https://www.npmjs.org">Node package manager (NPM)</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">npm <span class="hljs-keyword">install</span></code></pre>\n  <p>Once the dependencies have been installed using <code>npm install</code>, you can compile your SASS files to plain CSS using <router-link to="/docs/{{version}}/mix#working-with-stylesheets">Laravel Mix</router-link>. The <code>npm run dev</code> command will process the instructions in your <code>webpack.mix.js</code> file. Typically, your compiled CSS will be placed in the <code>public/css</code> directory:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">npm <span class="hljs-keyword">run</span><span class="bash"> dev</span></code></pre>\n  <p>The <code>webpack.mix.js</code> file included with Laravel&#39;s frontend scaffolding will compile the <code>resources/sass/app.scss</code> SASS file. This <code>app.scss</code> file imports a file of SASS variables and loads Bootstrap, which provides a good starting point for most applications. Feel free to customize the <code>app.scss</code> file however you wish or even use an entirely different pre-processor by <router-link to="/docs/{{version}}/mix">configuring Laravel Mix</router-link>.</p>\n<p><a name="writing-javascript"></a></p>\n\n          <p><a name="writing-javascript"></a></p>\n          <h2>\n            <a href="#writing-javascript">\n              Writing JavaScript\n            </a>\n          </h2><p>All of the JavaScript dependencies required by your application can be found in the <code>package.json</code> file in the project&#39;s root directory. This file is similar to a <code>composer.json</code> file except it specifies JavaScript dependencies instead of PHP dependencies. You can install these dependencies using the <router-link to="https://www.npmjs.org">Node package manager (NPM)</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">npm <span class="hljs-keyword">install</span></code></pre>\n  <blockquote>\n<p>{tip} By default, the Laravel <code>package.json</code> file includes a few packages such as <code>lodash</code> and <code>axios</code> to help you get started building your JavaScript application. Feel free to add or remove from the <code>package.json</code> file as needed for your own application.</p>\n</blockquote>\n<p>Once the packages are installed, you can use the <code>npm run dev</code> command to <router-link to="/docs/{{version}}/mix">compile your assets</router-link>. Webpack is a module bundler for modern JavaScript applications. When you run the <code>npm run dev</code> command, Webpack will execute the instructions in your <code>webpack.mix.js</code> file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">npm <span class="hljs-keyword">run</span><span class="bash"> dev</span></code></pre>\n  <p>By default, the Laravel <code>webpack.mix.js</code> file compiles your SASS and the <code>resources/js/app.js</code> file. Within the <code>app.js</code> file you may register your Vue components or, if you prefer a different framework, configure your own JavaScript application. Your compiled JavaScript will typically be placed in the <code>public/js</code> directory.</p>\n<blockquote>\n<p>{tip} The <code>app.js</code> file will load the <code>resources/js/bootstrap.js</code> file which bootstraps and configures Vue, Axios, jQuery, and all other JavaScript dependencies. If you have additional JavaScript dependencies to configure, you may do so in this file.</p>\n</blockquote>\n<p><a name="writing-vue-components"></a></p>\n\n          <p><a name="writing-vue-components"></a></p>\n          <h3>\n            <a href="#writing-vue-components">\n              Writing Vue Components\n            </a>\n          </h3><p>When using the <code>laravel/ui</code> package to scaffold your frontend, an <code>ExampleComponent.vue</code> Vue component will be placed in the <code>resources/js/components</code> directory. The <code>ExampleComponent.vue</code> file is an example of a <router-link to="https://vuejs.org/guide/single-file-components">single file Vue component</router-link> which defines its JavaScript and HTML template in the same file. Single file components provide a very convenient approach to building JavaScript driven applications. The example component is registered in your <code>app.js</code> file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Vue.component(\n    <span class="hljs-string">\'example-component\'</span>,\n    <span class="hljs-built_in">require</span>(<span class="hljs-string">\'./components/ExampleComponent.vue\'</span>).<span class="hljs-keyword">default</span>\n);</code></pre>\n  <p>To use the component in your application, you may drop it into one of your HTML templates. For example, after running the <code>php artisan ui vue --auth</code> Artisan command to scaffold your application&#39;s authentication and registration screens, you could drop the component into the <code>home.blade.php</code> Blade template:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@extends</span>(<span class="hljs-string">\'layouts.app\'</span>)\n\n<span class="hljs-variable">@section</span>(<span class="hljs-string">\'content\'</span>)\n    &lt;example-component&gt;&lt;/example-component&gt;\n<span class="hljs-variable">@endsection</span></code></pre>\n  <blockquote>\n<p>{tip} Remember, you should run the <code>npm run dev</code> command each time you change a Vue component. Or, you may run the <code>npm run watch</code> command to monitor and automatically recompile your components each time they are modified.</p>\n</blockquote>\n<p>If you are interested in learning more about writing Vue components, you should read the <router-link to="https://vuejs.org/guide/">Vue documentation</router-link>, which provides a thorough, easy-to-read overview of the entire Vue framework.</p>\n<p><a name="using-react"></a></p>\n\n          <p><a name="using-react"></a></p>\n          <h3>\n            <a href="#using-react">\n              Using React\n            </a>\n          </h3><p>If you prefer to use React to build your JavaScript application, Laravel makes it a cinch to swap the Vue scaffolding with React scaffolding:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">composer require laravel/ui <span class="hljs-params">--dev</span>\n\nphp artisan ui react\n\n<span class="hljs-string">//</span> Generate login / registration scaffolding.<span class="hljs-string">..</span>\nphp artisan ui react <span class="hljs-params">--auth</span></code></pre>\n  <p><a name="adding-presets"></a></p>\n\n          <p><a name="adding-presets"></a></p>\n          <h2>\n            <a href="#adding-presets">\n              Adding Presets\n            </a>\n          </h2><p>Presets are &quot;macroable&quot;, which allows you to add additional methods to the <code>UiCommand</code> class at runtime. For example, the following code adds a <code>nextjs</code> method to the <code>UiCommand</code> class. Typically, you should declare preset macros in a <router-link to="/docs/{{version}}/providers">service provider</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Ui</span>\\<span class="hljs-title">UiCommand</span>;\n\nUiCommand::macro(<span class="hljs-string">\'nextjs\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(UiCommand $command)</span> </span>{\n    <span class="hljs-comment">// Scaffold your frontend...</span>\n});</code></pre>\n  <p>Then, you may call the new preset via the <code>ui</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">php artisan ui nextjs</span></code></pre>\n  '},c187:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="eloquent-getting-started"></a></p>\n          <h1>\n            <a href="#eloquent-getting-started">\n              Eloquent: Getting Started\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#retrieving-models">Retrieving Models</a><ul>\n<li><a href="#collections">Collections</a></li>\n<li><a href="#chunking-results">Chunking Results</a></li>\n<li><a href="#advanced-subqueries">Advanced Subqueries</a></li>\n</ul>\n</li>\n<li><a href="#retrieving-single-models">Retrieving Single Models / Aggregates</a><ul>\n<li><a href="#retrieving-aggregates">Retrieving Aggregates</a></li>\n</ul>\n</li>\n<li><a href="#inserting-and-updating-models">Inserting &amp; Updating Models</a><ul>\n<li><a href="#inserts">Inserts</a></li>\n<li><a href="#updates">Updates</a></li>\n<li><a href="#mass-assignment">Mass Assignment</a></li>\n<li><a href="#other-creation-methods">Other Creation Methods</a></li>\n</ul>\n</li>\n<li><a href="#deleting-models">Deleting Models</a><ul>\n<li><a href="#soft-deleting">Soft Deleting</a></li>\n<li><a href="#querying-soft-deleted-models">Querying Soft Deleted Models</a></li>\n</ul>\n</li>\n<li><a href="#query-scopes">Query Scopes</a><ul>\n<li><a href="#global-scopes">Global Scopes</a></li>\n<li><a href="#local-scopes">Local Scopes</a></li>\n</ul>\n</li>\n<li><a href="#comparing-models">Comparing Models</a></li>\n<li><a href="#events">Events</a><ul>\n<li><a href="#observers">Observers</a></li>\n</ul>\n</li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>The Eloquent ORM included with Laravel provides a beautiful, simple ActiveRecord implementation for working with your database. Each database table has a corresponding &quot;Model&quot; which is used to interact with that table. Models allow you to query for data in your tables, as well as insert new records into the table.</p>\n<p>Before getting started, be sure to configure a database connection in <code>config/database.php</code>. For more information on configuring your database, check out <router-link to="/docs/database#configuration">the documentation</router-link>.</p>\n<p><a name="retrieving-models"></a></p>\n\n          <p><a name="retrieving-models"></a></p>\n          <h2>\n            <a href="#retrieving-models">\n              Retrieving Models\n            </a>\n          </h2><p>Once you have created a model and <router-link to="/docs/migrations#writing-migrations">its associated database table</router-link>, you are ready to start retrieving data from your database. Think of each Eloquent model as a powerful <router-link to="/docs/queries">query builder</router-link> allowing you to fluently query the database table associated with the model. For example:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IlxuU2NoZW1hOjpjcmVhdGUoJ2ZsaWdodHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCduYW1lJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ251bWJlcicpO1xuICAgICR0YWJsZS0+dGltZXN0YW1wcygpO1xufSk7XG5cbmNsYXNzIEZsaWdodCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwge1xuXG59XG5cbkZsaWdodDo6Zm9yY2VDcmVhdGUoW1xuICAgICduYW1lJyA9PiAnRmxpZ2h0IDEnLFxuICAgICdudW1iZXInID0+ICdBQjY2NTAnXG5dKTtcblxuJGZsaWdodHMgPSBGbGlnaHQ6OmFsbCgpO1xuXG5mb3JlYWNoICgkZmxpZ2h0cyBhcyAkZmxpZ2h0KSB7XG4gICAgZWNobyAkZmxpZ2h0LT5uYW1lO1xufVxuIiwiaGFzaCI6ImVsb3F1ZW50LXJldHJpZXZpbmctbW9kZWxzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n$flights = App\\Flight::all();\n\n<span class="hljs-keyword">foreach</span> ($flights <span class="hljs-keyword">as</span> $flight) {\n    <span class="hljs-keyword">echo</span> $flight-&gt;name;\n}</span></code></pre>\n  \n          <p><a name="adding-additional-constraints"></a></p>\n          <h4>\n            <a href="#adding-additional-constraints">\n              Adding Additional Constraints\n            </a>\n          </h4><p>The Eloquent <code>all</code> method will return all of the results in the model&#39;s table. Since each Eloquent model serves as a <router-link to="/docs/queries">query builder</router-link>, you may also add constraints to queries, and then use the <code>get</code> method to retrieve the results:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hXG5TY2hlbWE6OmNyZWF0ZSgnZmxpZ2h0cycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ25hbWUnKTtcbiAgICAkdGFibGUtPnN0cmluZygnbnVtYmVyJyk7XG4gICAgJHRhYmxlLT5ib29sZWFuKCdhY3RpdmUnKS0+ZGVmYXVsdCh0cnVlKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5jbGFzcyBGbGlnaHQgZXh0ZW5kcyBJbGx1bWluYXRlXFxEYXRhYmFzZVxcRWxvcXVlbnRcXE1vZGVsIHtcblxufVxuXG4vLyBJbnNlcnQgZHVtbXkgbW9kZWxzXG5GbGlnaHQ6OmZvcmNlQ3JlYXRlKFtcbiAgICAnbmFtZScgPT4gJ0luYWN0aXZlIEZsaWdodCcsXG4gICAgJ251bWJlcicgPT4gJ0FCNjY1MCcsXG4gICAgJ2FjdGl2ZScgPT4gZmFsc2UsXG5dKTtcblxuRmxpZ2h0Ojpmb3JjZUNyZWF0ZShbXG4gICAgJ25hbWUnID0+ICdBY3RpdmUgRmxpZ2h0JyxcbiAgICAnbnVtYmVyJyA9PiAnQUI2NjUwJyxcbiAgICAnYWN0aXZlJyA9PiB0cnVlLFxuXSk7XG5cbi8vIFJldHJpZXZlIG1vZGVsc1xuJGZsaWdodHMgPSBGbGlnaHQ6OndoZXJlKCdhY3RpdmUnLCAxKVxuICAgICAgICAgICAgICAgLT5vcmRlckJ5KCduYW1lJywgJ2Rlc2MnKVxuICAgICAgICAgICAgICAgLT50YWtlKDEwKVxuICAgICAgICAgICAgICAgLT5nZXQoKTtcbiIsImhhc2giOiJlbG9xdWVudC1hZGRpbmctYWRkaXRpb25hbC1jb25zdHJhaW50cyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$flights = App<span class="hljs-string">\\Flight::where(\'active\',</span> <span class="hljs-number">1</span>)<span class="hljs-function">\n               -&gt;</span>orderBy<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'desc\'</span>)</span>\n               -&gt;</span>take<span class="hljs-function"><span class="hljs-params">(<span class="hljs-number">10</span>)</span>\n               -&gt;</span>get();</code></pre>\n  \n          <p><a name="refreshing-models"></a></p>\n          <h4>\n            <a href="#refreshing-models">\n              Refreshing Models\n            </a>\n          </h4><p>You can refresh models using the <code>fresh</code> and <code>refresh</code> methods. The <code>fresh</code> method will re-retrieve the model from the database. The existing model instance will not be affected:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$flight</span> = App\\Flight::where(<span class="hljs-string">\'number\'</span>, <span class="hljs-string">\'FR 900\'</span>)-&gt;first();\n\n<span class="hljs-variable">$freshFlight</span> = <span class="hljs-variable">$flight</span>-&gt;fresh();</code></pre>\n  <p>The <code>refresh</code> method will re-hydrate the existing model using fresh data from the database. In addition, all of its loaded relationships will be refreshed as well:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hXG5TY2hlbWE6OmNyZWF0ZSgnZmxpZ2h0cycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ25hbWUnKTtcbiAgICAkdGFibGUtPnN0cmluZygnbnVtYmVyJyk7XG4gICAgJHRhYmxlLT5ib29sZWFuKCdhY3RpdmUnKS0+ZGVmYXVsdCh0cnVlKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5jbGFzcyBGbGlnaHQgZXh0ZW5kcyBJbGx1bWluYXRlXFxEYXRhYmFzZVxcRWxvcXVlbnRcXE1vZGVsIHtcblxufVxuXG4vLyBJbnNlcnQgZHVtbXkgbW9kZWxzXG5GbGlnaHQ6OmZvcmNlQ3JlYXRlKFtcbiAgICAnbmFtZScgPT4gJ0luYWN0aXZlIEZsaWdodCcsXG4gICAgJ251bWJlcicgPT4gJ0ZSIDkwMCcsXG5dKTtcblxuJGZsaWdodCA9IEZsaWdodDo6d2hlcmUoJ251bWJlcicsICdGUiA5MDAnKS0+Zmlyc3QoKTtcblxuJGZsaWdodC0+bnVtYmVyID0gJ0ZSIDQ1Nic7XG5cbiRmbGlnaHQtPnJlZnJlc2goKTtcblxuJGZsaWdodC0+bnVtYmVyO1xuIiwiaGFzaCI6ImVsb3F1ZW50LXJlZnJlc2hpbmctbW9kZWxzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$flight</span> = App\\Flight::where(<span class="hljs-string">\'number\'</span>, <span class="hljs-string">\'FR 900\'</span>)-&gt;first();\n\n<span class="hljs-variable">$flight</span>-&gt;number = <span class="hljs-string">\'FR 456\'</span>;\n\n<span class="hljs-variable">$flight</span>-&gt;refresh();\n\n<span class="hljs-variable">$flight</span>-&gt;number; <span class="hljs-regexp">//</span> <span class="hljs-string">"FR 900"</span></code></pre>\n  <p><a name="collections"></a></p>\n\n          <p><a name="collections"></a></p>\n          <h3>\n            <a href="#collections">\n              Collections\n            </a>\n          </h3><p>For Eloquent methods like <code>all</code> and <code>get</code> which retrieve multiple results, an instance of <code>Illuminate\\Database\\Eloquent\\Collection</code> will be returned. The <code>Collection</code> class provides <router-link to="/docs/eloquent-collections#available-methods">a variety of helpful methods</router-link> for working with your Eloquent results:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hXG5TY2hlbWE6OmNyZWF0ZSgnZmxpZ2h0cycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ25hbWUnKTtcbiAgICAkdGFibGUtPnN0cmluZygnbnVtYmVyJyk7XG4gICAgJHRhYmxlLT5ib29sZWFuKCdjYW5jZWxsZWQnKS0+ZGVmYXVsdChmYWxzZSk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuY2xhc3MgRmxpZ2h0IGV4dGVuZHMgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxNb2RlbCB7XG5cbn1cblxuLy8gSW5zZXJ0IGR1bW15IG1vZGVsc1xuRmxpZ2h0Ojpmb3JjZUNyZWF0ZShbXG4gICAgJ25hbWUnID0+ICdSZWd1bGFyIEZsaWdodCcsXG4gICAgJ251bWJlcicgPT4gJ0ZSIDkwMCcsXG5dKTtcbkZsaWdodDo6Zm9yY2VDcmVhdGUoW1xuICAgICduYW1lJyA9PiAnQ2FuY2VsbGVkIEZsaWdodCcsXG4gICAgJ251bWJlcicgPT4gJ0ZSIDkwMCcsXG4gICAgJ2NhbmNlbGxlZCcgPT4gdHJ1ZSxcbl0pO1xuXG4kZmxpZ2h0cyA9IEZsaWdodDo6YWxsKCk7XG5cbiRmbGlnaHRzID0gJGZsaWdodHMtPnJlamVjdChmdW5jdGlvbiAoJGZsaWdodCkge1xuICAgIHJldHVybiAkZmxpZ2h0LT5jYW5jZWxsZWQ7XG59KTtcbiIsImhhc2giOiJlbG9xdWVudC1jb2xsZWN0aW9ucyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$flights = $flights-&gt;reject(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($flight)</span> </span>{\n    <span class="hljs-keyword">return</span> $flight-&gt;cancelled;\n});</code></pre>\n  <p>You may also loop over the collection like an array:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">foreach</span> ($flights <span class="hljs-keyword">as</span> $flight) {\n    <span class="hljs-keyword">echo</span> $flight-&gt;name;\n}</code></pre>\n  <p><a name="chunking-results"></a></p>\n\n          <p><a name="chunking-results"></a></p>\n          <h3>\n            <a href="#chunking-results">\n              Chunking Results\n            </a>\n          </h3><p>If you need to process thousands of Eloquent records, use the <code>chunk</code> command. The <code>chunk</code> method will retrieve a &quot;chunk&quot; of Eloquent models, feeding them to a given <code>Closure</code> for processing. Using the <code>chunk</code> method will conserve memory when working with large result sets:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Flight::chunk(<span class="hljs-number">200</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($flights)</span> </span>{\n    <span class="hljs-keyword">foreach</span> ($flights <span class="hljs-keyword">as</span> $flight) {\n        <span class="hljs-comment">//</span>\n    }\n});</code></pre>\n  <p>The first argument passed to the method is the number of records you wish to receive per &quot;chunk&quot;. The Closure passed as the second argument will be called for each chunk that is retrieved from the database. A database query will be executed to retrieve each chunk of records passed to the Closure.</p>\n\n          <p><a name="using-cursors"></a></p>\n          <h4>\n            <a href="#using-cursors">\n              Using Cursors\n            </a>\n          </h4><p>The <code>cursor</code> method allows you to iterate through your database records using a cursor, which will only execute a single query. When processing large amounts of data, the <code>cursor</code> method may be used to greatly reduce your memory usage:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">foreach</span> (Flight::where(<span class="hljs-string">\'foo\'</span>, <span class="hljs-string">\'bar\'</span>)-&gt;cursor() <span class="hljs-keyword">as</span> $flight) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p>The <code>cursor</code> returns an <code>Illuminate\\Support\\LazyCollection</code> instance. <router-link to="/docs/collections#lazy-collections">Lazy collections</router-link> allow you to use many of collection methods available on typical Laravel collections while only loading a single model into memory at a time:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = App\\User::cursor()-&gt;filter(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($user)</span> </span>{\n    <span class="hljs-keyword">return</span> $user-&gt;id &gt; <span class="hljs-number">500</span>;\n});\n\n<span class="hljs-keyword">foreach</span> ($users <span class="hljs-keyword">as</span> $user) {\n    <span class="hljs-keyword">echo</span> $user-&gt;id;\n}</code></pre>\n  <p><a name="advanced-subqueries"></a></p>\n\n          <p><a name="advanced-subqueries"></a></p>\n          <h3>\n            <a href="#advanced-subqueries">\n              Advanced Subqueries\n            </a>\n          </h3>\n          <p><a name="subquery-selects"></a></p>\n          <h4>\n            <a href="#subquery-selects">\n              Subquery Selects\n            </a>\n          </h4><p>Eloquent also offers advanced subquery support, which allows you to pull information from related tables in a single query. For example, let&#39;s imagine that we have a table of flight <code>destinations</code> and a table of <code>flights</code> to destinations. The <code>flights</code> table contains an <code>arrived_at</code> column which indicates when the flight arrived at the destination.</p>\n<p>Using the subquery functionality available to the <code>select</code> and <code>addSelect</code> methods, we can select all of the <code>destinations</code> and the name of the flight that most recently arrived at that destination using a single query:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2ZsaWdodHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+aW50ZWdlcignZGVzdGluYXRpb25faWQnKTtcbiAgICAkdGFibGUtPnN0cmluZygnbmFtZScpO1xuICAgICR0YWJsZS0+c3RyaW5nKCdudW1iZXInKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5TY2hlbWE6OmNyZWF0ZSgnZGVzdGluYXRpb25zJywgZnVuY3Rpb24gKCR0YWJsZSkge1xuICAgICR0YWJsZS0+YmlnSW5jcmVtZW50cygnaWQnKTtcbiAgICAkdGFibGUtPnN0cmluZygnbmFtZScpO1xuICAgICR0YWJsZS0+dGltZXN0YW1wcygpO1xufSk7XG5cbmNsYXNzIERlc3RpbmF0aW9uIGV4dGVuZHMgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxNb2RlbCB7XG5cbn1cblxuY2xhc3MgRmxpZ2h0IGV4dGVuZHMgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxNb2RlbCB7XG5cbn1cblxuLy8gSW5zZXJ0IGR1bW15IG1vZGVsc1xuRGVzdGluYXRpb246OmZvcmNlQ3JlYXRlKFtcbiAgICAnbmFtZScgPT4gJ0F0bGFudGEnLFxuXSk7XG5GbGlnaHQ6OmZvcmNlQ3JlYXRlKFtcbiAgICAnZGVzdGluYXRpb25faWQnID0+IDEsXG4gICAgJ25hbWUnID0+ICdGbGlnaHQgdG8gQXRsYW50YScsXG4gICAgJ251bWJlcicgPT4gJ0ZSIDkwMCcsXG5dKTtcblxuRGVzdGluYXRpb246OmFkZFNlbGVjdChbJ2xhc3RfZmxpZ2h0JyA9PiBGbGlnaHQ6OnNlbGVjdCgnbmFtZScpXG4gICAgLT53aGVyZUNvbHVtbignZGVzdGluYXRpb25faWQnLCAnZGVzdGluYXRpb25zLmlkJylcbiAgICAtPm9yZGVyQnkoJ2Fycml2ZWRfYXQnLCAnZGVzYycpXG4gICAgLT5saW1pdCgxKVxuXSktPmdldCgpO1xuXG4iLCJoYXNoIjoiZWxvcXVlbnQtc3VicXVlcnktc2VsZWN0cyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Destination</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Flight</span>;\n\n<span class="hljs-keyword">return</span> Destination::addSelect([<span class="hljs-string">\'last_flight\'</span> =&gt; Flight::select(<span class="hljs-string">\'name\'</span>)\n    -&gt;whereColumn(<span class="hljs-string">\'destination_id\'</span>, <span class="hljs-string">\'destinations.id\'</span>)\n    -&gt;orderBy(<span class="hljs-string">\'arrived_at\'</span>, <span class="hljs-string">\'desc\'</span>)\n    -&gt;limit(<span class="hljs-number">1</span>)\n])-&gt;get();</code></pre>\n  \n          <p><a name="subquery-ordering"></a></p>\n          <h4>\n            <a href="#subquery-ordering">\n              Subquery Ordering\n            </a>\n          </h4><p>In addition, the query builder&#39;s <code>orderBy</code> function supports subqueries. We may use this functionality to sort all destinations based on when the last flight arrived at that destination. Again, this may be done while executing a single query against the database:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> Destination::orderByDesc(\n    Flight::select<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'arrived_at\'</span>)</span>\n        -&gt;</span>whereColumn<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'destination_id\'</span>, <span class="hljs-string">\'destinations.id\'</span>)</span>\n        -&gt;</span>orderBy<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'arrived_at\'</span>, <span class="hljs-string">\'desc\'</span>)</span>\n        -&gt;</span>limit(<span class="hljs-number">1</span>)\n)<span class="hljs-function">-&gt;</span>get();</code></pre>\n  <p><a name="retrieving-single-models"></a></p>\n\n          <p><a name="retrieving-single-models-aggregates"></a></p>\n          <h2>\n            <a href="#retrieving-single-models-aggregates">\n              Retrieving Single Models / Aggregates\n            </a>\n          </h2><p>In addition to retrieving all of the records for a given table, you may also retrieve single records using <code>find</code> or <code>first</code>. Instead of returning a collection of models, these methods return a single model instance:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2ZsaWdodHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCduYW1lJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ251bWJlcicpO1xuICAgICR0YWJsZS0+dGltZXN0YW1wcygpO1xufSk7XG5cbmNsYXNzIEZsaWdodCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwge1xuXG59XG5cbi8vIEluc2VydCBkdW1teSBtb2RlbHNcbkZsaWdodDo6Zm9yY2VDcmVhdGUoW1xuICAgICduYW1lJyA9PiAnRmxpZ2h0IHRvIEF0bGFudGEnLFxuICAgICdudW1iZXInID0+ICdGUiA5MDAnLFxuXSk7XG5cbiRmbGlnaHQgPSBGbGlnaHQ6OmZpbmQoMSk7XG4iLCJoYXNoIjoiZWxvcXVlbnQtcmV0cmlldmluZy1zaW5nbGUtbW9kZWxzLS8tYWdncmVnYXRlcyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Retrieve a model by its primary key...</span>\n$flight = App\\Flight::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-comment">// Retrieve the first model matching the query constraints...</span>\n$flight = App\\Flight::where(<span class="hljs-string">\'active\'</span>, <span class="hljs-number">1</span>)-&gt;first();</code></pre>\n  <p>You may also call the <code>find</code> method with an array of primary keys, which will return a collection of the matching records:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2ZsaWdodHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCduYW1lJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ251bWJlcicpO1xuICAgICR0YWJsZS0+dGltZXN0YW1wcygpO1xufSk7XG5cbmNsYXNzIEZsaWdodCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwge1xuXG59XG5cbi8vIEluc2VydCBkdW1teSBtb2RlbHNcbkZsaWdodDo6Zm9yY2VDcmVhdGUoW1xuICAgICduYW1lJyA9PiAnRmxpZ2h0IHRvIEF0bGFudGEnLFxuICAgICdudW1iZXInID0+ICdGUiA5MDAnLFxuXSk7XG5GbGlnaHQ6OmZvcmNlQ3JlYXRlKFtcbiAgICAnbmFtZScgPT4gJ0ZsaWdodCB0byBOZXcgWW9yaycsXG4gICAgJ251bWJlcicgPT4gJ0FGIDkyMCcsXG5dKTtcblxuJGZsaWdodCA9IEZsaWdodDo6ZmluZChbMSwgMl0pO1xuIiwiaGFzaCI6ImVsb3F1ZW50LXJldHJpZXZpbmctc2luZ2xlLW1vZGVscy0vLWFnZ3JlZ2F0ZXMifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$flights = App\\Flight::find([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);</code></pre>\n  \n          <p><a name="not-found-exceptions"></a></p>\n          <h4>\n            <a href="#not-found-exceptions">\n              Not Found Exceptions\n            </a>\n          </h4><p>Sometimes you may wish to throw an exception if a model is not found. This is particularly useful in routes or controllers. The <code>findOrFail</code> and <code>firstOrFail</code> methods will retrieve the first result of the query; however, if no result is found, a <code>Illuminate\\Database\\Eloquent\\ModelNotFoundException</code> will be thrown:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2ZsaWdodHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCduYW1lJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ251bWJlcicpO1xuICAgICR0YWJsZS0+dGltZXN0YW1wcygpO1xufSk7XG5cbmNsYXNzIEZsaWdodCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwge1xuXG59XG5cbiRmbGlnaHQgPSBGbGlnaHQ6OmZpbmRPckZhaWwoMSk7XG4iLCJoYXNoIjoiZWxvcXVlbnQtbm90LWZvdW5kLWV4Y2VwdGlvbnMifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$model</span> = App\\Flight::findOrFail(<span class="hljs-number">1</span>);\n\n<span class="hljs-variable">$model</span> = App\\Flight::where(<span class="hljs-string">\'legs\'</span>, <span class="hljs-string">\'&gt;\'</span>, <span class="hljs-number">100</span>)-&gt;firstOrFail();</code></pre>\n  <p>If the exception is not caught, a <code>404</code> HTTP response is automatically sent back to the user. It is not necessary to write explicit checks to return <code>404</code> responses when using these methods:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'/api/flights/{id}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($id)</span> </span>{\n    <span class="hljs-keyword">return</span> App\\Flight::findOrFail($id);\n});</code></pre>\n  <p><a name="retrieving-aggregates"></a></p>\n\n          <p><a name="retrieving-aggregates"></a></p>\n          <h3>\n            <a href="#retrieving-aggregates">\n              Retrieving Aggregates\n            </a>\n          </h3><p>You may also use the <code>count</code>, <code>sum</code>, <code>max</code>, and other <router-link to="/docs/queries#aggregates">aggregate methods</router-link> provided by the <router-link to="/docs/queries">query builder</router-link>. These methods return the appropriate scalar value instead of a full model instance:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2ZsaWdodHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCduYW1lJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ251bWJlcicpO1xuICAgICR0YWJsZS0+Ym9vbGVhbignYWN0aXZlJyktPmRlZmF1bHQodHJ1ZSk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuY2xhc3MgRmxpZ2h0IGV4dGVuZHMgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxNb2RlbCB7XG5cbn1cblxuLy8gSW5zZXJ0IGR1bW15IG1vZGVsc1xuRmxpZ2h0Ojpmb3JjZUNyZWF0ZShbXG4gICAgJ25hbWUnID0+ICdGbGlnaHQgdG8gQXRsYW50YScsXG4gICAgJ251bWJlcicgPT4gJ0ZSIDkwMCcsXG4gICAgJ2FjdGl2ZScgPT4gdHJ1ZSxcbl0pO1xuXG4kY291bnQgPSBGbGlnaHQ6OndoZXJlKCdhY3RpdmUnLCAxKS0+Y291bnQoKTtcbiIsImhhc2giOiJlbG9xdWVudC1yZXRyaWV2aW5nLWFnZ3JlZ2F0ZXMifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$count</span> = App\\Flight::where(<span class="hljs-string">\'active\'</span>, <span class="hljs-number">1</span>)-&gt;count();\n\n<span class="hljs-variable">$max</span> = App\\Flight::where(<span class="hljs-string">\'active\'</span>, <span class="hljs-number">1</span>)-&gt;max(<span class="hljs-string">\'price\'</span>);</code></pre>\n  <p><a name="inserting-and-updating-models"></a></p>\n\n          <p><a name="inserting-amp-updating-models"></a></p>\n          <h2>\n            <a href="#inserting-amp-updating-models">\n              Inserting &amp; Updating Models\n            </a>\n          </h2><p><a name="inserts"></a></p>\n\n          <p><a name="inserts"></a></p>\n          <h3>\n            <a href="#inserts">\n              Inserts\n            </a>\n          </h3><p>To create a new record in the database, create a new model instance, set attributes on the model, then call the <code>save</code> method:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2ZsaWdodHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCduYW1lJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ251bWJlcicpO1xuICAgICR0YWJsZS0+Ym9vbGVhbignYWN0aXZlJyktPmRlZmF1bHQodHJ1ZSk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuY2xhc3MgRmxpZ2h0IGV4dGVuZHMgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxNb2RlbCB7XG5cbn1cblxuJGZsaWdodCA9IG5ldyBGbGlnaHQoKTtcblxuJGZsaWdodC0+bmFtZSA9IFwiRmxpZ2h0IE5hbWVcIjtcblxuJGZsaWdodC0+c2F2ZSgpO1xuIiwiaGFzaCI6ImVsb3F1ZW50LWluc2VydHMifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">Controller</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Flight</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Request</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlightController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Create a new flight instance.\n     *\n     * <span class="hljs-doctag">@param</span>  Request  $request\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span><span class="hljs-params">(Request $request)</span>\n    </span>{\n        <span class="hljs-comment">// Validate the request...</span>\n\n        $flight = <span class="hljs-keyword">new</span> Flight;\n\n        $flight-&gt;name = $request-&gt;name;\n\n        $flight-&gt;save();\n    }\n}</span></code></pre>\n  <p>In this example, we assign the <code>name</code> parameter from the incoming HTTP request to the <code>name</code> attribute of the <code>App\\Flight</code> model instance. When we call the <code>save</code> method, a record will be inserted into the database. The <code>created_at</code> and <code>updated_at</code> timestamps will automatically be set when the <code>save</code> method is called, so there is no need to set them manually.</p>\n<p><a name="updates"></a></p>\n\n          <p><a name="updates"></a></p>\n          <h3>\n            <a href="#updates">\n              Updates\n            </a>\n          </h3><p>The <code>save</code> method may also be used to update models that already exist in the database. To update a model, you should retrieve it, set any attributes you wish to update, and then call the <code>save</code> method. Again, the <code>updated_at</code> timestamp will automatically be updated, so there is no need to manually set its value:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2ZsaWdodHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCduYW1lJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ251bWJlcicpO1xuICAgICR0YWJsZS0+Ym9vbGVhbignYWN0aXZlJyktPmRlZmF1bHQodHJ1ZSk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuY2xhc3MgRmxpZ2h0IGV4dGVuZHMgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxNb2RlbCB7XG5cbn1cblxuLy8gSW5zZXJ0IGR1bW15IG1vZGVsc1xuRmxpZ2h0Ojpmb3JjZUNyZWF0ZShbXG4gICAgJ25hbWUnID0+ICdGbGlnaHQgdG8gQXRsYW50YScsXG4gICAgJ251bWJlcicgPT4gJ0ZSIDkwMCcsXG4gICAgJ2FjdGl2ZScgPT4gdHJ1ZSxcbl0pO1xuXG4kZmxpZ2h0ID0gRmxpZ2h0OjpmaW5kKDEpO1xuXG4kZmxpZ2h0LT5uYW1lID0gJ05ldyBGbGlnaHQgTmFtZSc7XG5cbiRmbGlnaHQtPnNhdmUoKTtcblxuJGZsaWdodDtcbiIsImhhc2giOiJlbG9xdWVudC11cGRhdGVzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$flight</span> = App\\Flight::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-variable">$flight</span>-&gt;name = <span class="hljs-string">\'New Flight Name\'</span>;\n\n<span class="hljs-variable">$flight</span>-&gt;save();</code></pre>\n  \n          <p><a name="mass-updates"></a></p>\n          <h4>\n            <a href="#mass-updates">\n              Mass Updates\n            </a>\n          </h4><p>Updates can also be performed against any number of models that match a given query. In this example, all flights that are <code>active</code> and have a <code>destination</code> of <code>San Diego</code> will be marked as delayed:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">App\\Flight::<span class="hljs-keyword">where</span>(<span class="hljs-symbol">\'active</span>\', <span class="hljs-number">1</span>)\n          -&gt;<span class="hljs-keyword">where</span>(<span class="hljs-symbol">\'destination</span>\', <span class="hljs-symbol">\'San</span> Diego\')\n          -&gt;update([<span class="hljs-symbol">\'delayed</span>\' =&gt; <span class="hljs-number">1</span>]);</code></pre>\n  <p>The <code>update</code> method expects an array of column and value pairs representing the columns that should be updated.</p>\n<blockquote>\n<p>{note} When issuing a mass update via Eloquent, the <code>saving</code>, <code>saved</code>, <code>updating</code>, and <code>updated</code> model events will not be fired for the updated models. This is because the models are never actually retrieved when issuing a mass update.</p>\n</blockquote>\n<p><a name="mass-assignment"></a></p>\n\n          <p><a name="mass-assignment"></a></p>\n          <h3>\n            <a href="#mass-assignment">\n              Mass Assignment\n            </a>\n          </h3><p>You may also use the <code>create</code> method to save a new model in a single line. The inserted model instance will be returned to you from the method. However, before doing so, you will need to specify either a <code>fillable</code> or <code>guarded</code> attribute on the model, as all Eloquent models protect against mass-assignment by default.</p>\n<p>A mass-assignment vulnerability occurs when a user passes an unexpected HTTP parameter through a request, and that parameter changes a column in your database you did not expect. For example, a malicious user might send an <code>is_admin</code> parameter through an HTTP request, which is then passed into your model&#39;s <code>create</code> method, allowing the user to escalate themselves to an administrator.</p>\n<p>So, to get started, you should define which model attributes you want to make mass assignable. You may do this using the <code>$fillable</code> property on the model. For example, let&#39;s make the <code>name</code> attribute of our <code>Flight</code> model mass assignable:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2ZsaWdodHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCduYW1lJyk7XG4gICAgJHRhYmxlLT5ib29sZWFuKCdhY3RpdmUnKS0+ZGVmYXVsdCh0cnVlKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5jbGFzcyBGbGlnaHQgZXh0ZW5kcyBJbGx1bWluYXRlXFxEYXRhYmFzZVxcRWxvcXVlbnRcXE1vZGVsIFxue1xuICAgIC8qKlxuICAgICAqIFRoZSBhdHRyaWJ1dGVzIHRoYXQgYXJlIG1hc3MgYXNzaWduYWJsZS5cbiAgICAgKlxuICAgICAqIEB2YXIgYXJyYXlcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgJGZpbGxhYmxlID0gWyduYW1lJ107XG59XG5cbiRmbGlnaHQgPSBGbGlnaHQ6OmNyZWF0ZShbJ25hbWUnID0+ICdGbGlnaHQgMTAnXSk7XG4iLCJoYXNoIjoiZWxvcXVlbnQtbWFzcy1hc3NpZ25tZW50In0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">&lt;?php\n\nnamespace <span class="hljs-type">App</span>;\n\nuse <span class="hljs-type">Illuminate</span>\\<span class="hljs-type">Database</span>\\<span class="hljs-type">Eloquent</span>\\<span class="hljs-type">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flight</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span>\n{\n    <span class="hljs-comment">/**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */</span>\n    <span class="hljs-keyword">protected</span> $fillable = [<span class="hljs-symbol">\'nam</span>e\'];\n}</code></pre>\n  <p>Once we have made the attributes mass assignable, we can use the <code>create</code> method to insert a new record in the database. The <code>create</code> method returns the saved model instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$flight = App\\Flight::create([<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Flight 10\'</span>]);</code></pre>\n  <p>If you already have a model instance, you may use the <code>fill</code> method to populate it with an array of attributes:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$flight-&gt;fill([<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Flight 22\'</span>]);</code></pre>\n  \n          <p><a name="guarding-attributes"></a></p>\n          <h4>\n            <a href="#guarding-attributes">\n              Guarding Attributes\n            </a>\n          </h4><p>While <code>$fillable</code> serves as a &quot;white list&quot; of attributes that should be mass assignable, you may also choose to use <code>$guarded</code>. The <code>$guarded</code> property should contain an array of attributes that you do not want to be mass assignable. All other attributes not in the array will be mass assignable. So, <code>$guarded</code> functions like a &quot;black list&quot;. Importantly, you should use either <code>$fillable</code> or <code>$guarded</code> - not both. In the example below, all attributes <strong>except for <code>price</code></strong> will be mass assignable:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">&lt;?php\n\nnamespace <span class="hljs-type">App</span>;\n\nuse <span class="hljs-type">Illuminate</span>\\<span class="hljs-type">Database</span>\\<span class="hljs-type">Eloquent</span>\\<span class="hljs-type">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flight</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span>\n{\n    <span class="hljs-comment">/**\n     * The attributes that aren\'t mass assignable.\n     *\n     * @var array\n     */</span>\n    <span class="hljs-keyword">protected</span> $guarded = [<span class="hljs-symbol">\'pric</span>e\'];\n}</code></pre>\n  <p>If you would like to make all attributes mass assignable, you may define the <code>$guarded</code> property as an empty array:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">/**\n * The attributes that aren\'t mass assignable.\n *\n * @var<span class="hljs-built_in"> array\n</span> */<span class="hljs-keyword">\nprotected</span> $guarded = [];</code></pre>\n  <p><a name="other-creation-methods"></a></p>\n\n          <p><a name="other-creation-methods"></a></p>\n          <h3>\n            <a href="#other-creation-methods">\n              Other Creation Methods\n            </a>\n          </h3>\n          <p><a name="-code-firstorcreate-code-code-firstornew-code-"></a></p>\n          <h4>\n            <a href="#-code-firstorcreate-code-code-firstornew-code-">\n              <code>firstOrCreate</code>/ <code>firstOrNew</code>\n            </a>\n          </h4><p>There are two other methods you may use to create models by mass assigning attributes: <code>firstOrCreate</code> and <code>firstOrNew</code>. The <code>firstOrCreate</code> method will attempt to locate a database record using the given column / value pairs. If the model can not be found in the database, a record will be inserted with the attributes from the first parameter, along with those in the optional second parameter.</p>\n<p>The <code>firstOrNew</code> method, like <code>firstOrCreate</code> will attempt to locate a record in the database matching the given attributes. However, if a model is not found, a new model instance will be returned. Note that the model returned by <code>firstOrNew</code> has not yet been persisted to the database. You will need to call <code>save</code> manually to persist it:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2ZsaWdodHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCduYW1lJyk7XG4gICAgJHRhYmxlLT5ib29sZWFuKCdhY3RpdmUnKS0+ZGVmYXVsdCh0cnVlKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5jbGFzcyBGbGlnaHQgZXh0ZW5kcyBJbGx1bWluYXRlXFxEYXRhYmFzZVxcRWxvcXVlbnRcXE1vZGVsIFxue1xuICAgIHByb3RlY3RlZCAkZmlsbGFibGUgPSBbJ25hbWUnXTtcbn1cblxuJGZsaWdodCA9IEZsaWdodDo6Zmlyc3RPckNyZWF0ZShbJ25hbWUnID0+ICdGbGlnaHQgMTAnXSk7XG5cbiRmbGlnaHQtPndhc1JlY2VudGx5Q3JlYXRlZDtcbiIsImhhc2giOiJlbG9xdWVudC1maXJzdG9yY3JlYXRlLy1maXJzdG9ybmV3In0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">// Retrieve flight <span class="hljs-keyword">by</span> <span class="hljs-type">name</span>, <span class="hljs-keyword">or</span> <span class="hljs-keyword">create</span> it <span class="hljs-keyword">if</span> it doesn<span class="hljs-string">\'t exist...\n$flight = App\\Flight::firstOrCreate([\'</span><span class="hljs-type">name</span><span class="hljs-string">\' =&gt; \'</span>Flight <span class="hljs-number">10</span><span class="hljs-string">\']);\n\n// Retrieve flight by name, or create it with the name, delayed, and arrival_time attributes...\n$flight = App\\Flight::firstOrCreate(\n    [\'</span><span class="hljs-type">name</span><span class="hljs-string">\' =&gt; \'</span>Flight <span class="hljs-number">10</span><span class="hljs-string">\'],\n    [\'</span>delayed<span class="hljs-string">\' =&gt; 1, \'</span>arrival_tim<span class="hljs-string">e\' =&gt; \'</span><span class="hljs-number">11</span>:<span class="hljs-number">30</span><span class="hljs-string">\']\n);\n\n// Retrieve by name, or instantiate...\n$flight = App\\Flight::firstOrNew([\'</span><span class="hljs-type">name</span><span class="hljs-string">\' =&gt; \'</span>Flight <span class="hljs-number">10</span><span class="hljs-string">\']);\n\n// Retrieve by name, or instantiate with the name, delayed, and arrival_time attributes...\n$flight = App\\Flight::firstOrNew(\n    [\'</span><span class="hljs-type">name</span><span class="hljs-string">\' =&gt; \'</span>Flight <span class="hljs-number">10</span><span class="hljs-string">\'],\n    [\'</span>delayed<span class="hljs-string">\' =&gt; 1, \'</span>arrival_tim<span class="hljs-string">e\' =&gt; \'</span><span class="hljs-number">11</span>:<span class="hljs-number">30</span><span class="hljs-string">\']\n);</span></code></pre>\n  \n          <p><a name="-code-updateorcreate-code-"></a></p>\n          <h4>\n            <a href="#-code-updateorcreate-code-">\n              <code>updateOrCreate</code>\n            </a>\n          </h4><p>You may also come across situations where you want to update an existing model or create a new model if none exists. Laravel provides an <code>updateOrCreate</code> method to do this in one step. Like the <code>firstOrCreate</code> method, <code>updateOrCreate</code> persists the model, so there&#39;s no need to call <code>save()</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">// <span class="hljs-keyword">If</span> ther<span class="hljs-string">e\'s a flight from Oakland to San Diego, set the price to $99.\n// If no matching model exists, create one.\n$flight = App\\Flight::updateOrCreate(\n    [\'</span>departur<span class="hljs-string">e\' =&gt; \'</span>Oakland<span class="hljs-string">\', \'</span>destination<span class="hljs-string">\' =&gt; \'</span>San Diego<span class="hljs-string">\'],\n    [\'</span>pric<span class="hljs-string">e\' =&gt; 99, \'</span>discounted<span class="hljs-string">\' =&gt; 1]\n);</span></code></pre>\n  <p><a name="deleting-models"></a></p>\n\n          <p><a name="deleting-models"></a></p>\n          <h2>\n            <a href="#deleting-models">\n              Deleting Models\n            </a>\n          </h2><p>To delete a model, call the <code>delete</code> method on a model instance:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2ZsaWdodHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCduYW1lJyk7XG4gICAgJHRhYmxlLT5ib29sZWFuKCdhY3RpdmUnKS0+ZGVmYXVsdCh0cnVlKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5jbGFzcyBGbGlnaHQgZXh0ZW5kcyBJbGx1bWluYXRlXFxEYXRhYmFzZVxcRWxvcXVlbnRcXE1vZGVsIFxue1xuICAgIHByb3RlY3RlZCAkZmlsbGFibGUgPSBbJ25hbWUnXTtcbn1cblxuJGZsaWdodCA9IEZsaWdodDo6Y3JlYXRlKFsnbmFtZScgPT4gJ0ZsaWdodCAxMCddKTtcblxuJGZsaWdodCA9IEZsaWdodDo6ZmluZCgxKTtcblxuJGZsaWdodC0+ZGVsZXRlKCk7XG4iLCJoYXNoIjoiZWxvcXVlbnQtZGVsZXRpbmctbW9kZWxzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$flight</span> = App\\Flight::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-variable">$flight</span>-&gt;delete();</code></pre>\n  \n          <p><a name="deleting-an-existing-model-by-key"></a></p>\n          <h4>\n            <a href="#deleting-an-existing-model-by-key">\n              Deleting An Existing Model By Key\n            </a>\n          </h4><p>In the example above, we are retrieving the model from the database before calling the <code>delete</code> method. However, if you know the primary key of the model, you may delete the model without retrieving it by calling the <code>destroy</code> method.  In addition to a single primary key as its argument, the <code>destroy</code> method will accept multiple primary keys, an array of primary keys, or a <router-link to="/docs/collections">collection</router-link> of primary keys:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">App\\Flight::destroy(<span class="hljs-number">1</span>);\n\nApp\\Flight::destroy(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);\n\nApp\\Flight::destroy([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);\n\nApp\\Flight::destroy(collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]));</code></pre>\n  \n          <p><a name="deleting-models-by-query"></a></p>\n          <h4>\n            <a href="#deleting-models-by-query">\n              Deleting Models By Query\n            </a>\n          </h4><p>You can also run a delete statement on a set of models. In this example, we will delete all flights that are marked as inactive. Like mass updates, mass deletes will not fire any model events for the models that are deleted:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$deletedRows</span> = App\\Flight::where(<span class="hljs-string">\'active\'</span>, <span class="hljs-number">0</span>)-&gt;delete();</code></pre>\n  <blockquote>\n<p>{note} When executing a mass delete statement via Eloquent, the <code>deleting</code> and <code>deleted</code> model events will not be fired for the deleted models. This is because the models are never actually retrieved when executing the delete statement.</p>\n</blockquote>\n<p><a name="soft-deleting"></a></p>\n\n          <p><a name="soft-deleting"></a></p>\n          <h3>\n            <a href="#soft-deleting">\n              Soft Deleting\n            </a>\n          </h3><p>In addition to actually removing records from your database, Eloquent can also &quot;soft delete&quot; models. When models are soft deleted, they are not actually removed from your database. Instead, a <code>deleted_at</code> attribute is set on the model and inserted into the database. If a model has a non-null <code>deleted_at</code> value, the model has been soft deleted. To enable soft deletes for a model, use the <code>Illuminate\\Database\\Eloquent\\SoftDeletes</code> trait on the model:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2ZsaWdodHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCduYW1lJyk7XG4gICAgJHRhYmxlLT5ib29sZWFuKCdhY3RpdmUnKS0+ZGVmYXVsdCh0cnVlKTtcbiAgICAkdGFibGUtPnNvZnREZWxldGVzKCk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuY2xhc3MgRmxpZ2h0IGV4dGVuZHMgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxNb2RlbCBcbntcbiAgICB1c2UgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxTb2Z0RGVsZXRlcztcblxuICAgIHByb3RlY3RlZCAkZmlsbGFibGUgPSBbJ25hbWUnXTtcbn1cblxuRmxpZ2h0OjpjcmVhdGUoWyduYW1lJyA9PiAnRmxpZ2h0IDEwJ10pO1xuXG4kZmxpZ2h0ID0gRmxpZ2h0OjpmaW5kKDEpO1xuXG4kZmxpZ2h0LT5kZWxldGUoKTtcblxuJGZsaWdodC0+dHJhc2hlZCgpO1xuIiwiaGFzaCI6ImVsb3F1ZW50LXNvZnQtZGVsZXRpbmcifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">SoftDeletes</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flight</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">SoftDeletes</span>;\n}</span></code></pre>\n  <p>You should also add the <code>deleted_at</code> column to your database table. The Laravel <router-link to="/docs/migrations">schema builder</router-link> contains a helper method to create this column:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Schema::table(<span class="hljs-string">\'flights\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Blueprint $table)</span> </span>{\n    $table-&gt;softDeletes();\n});</code></pre>\n  <p>Now, when you call the <code>delete</code> method on the model, the <code>deleted_at</code> column will be set to the current date and time. And, when querying a model that uses soft deletes, the soft deleted models will automatically be excluded from all query results.</p>\n<p>To determine if a given model instance has been soft deleted, use the <code>trashed</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> ($flight-&gt;trashed()) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p><a name="querying-soft-deleted-models"></a></p>\n\n          <p><a name="querying-soft-deleted-models"></a></p>\n          <h3>\n            <a href="#querying-soft-deleted-models">\n              Querying Soft Deleted Models\n            </a>\n          </h3>\n          <p><a name="including-soft-deleted-models"></a></p>\n          <h4>\n            <a href="#including-soft-deleted-models">\n              Including Soft Deleted Models\n            </a>\n          </h4><p>As noted above, soft deleted models will automatically be excluded from query results. However, you may force soft deleted models to appear in a result set using the <code>withTrashed</code> method on the query:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2ZsaWdodHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCduYW1lJyk7XG4gICAgJHRhYmxlLT5ib29sZWFuKCdhY3RpdmUnKS0+ZGVmYXVsdCh0cnVlKTtcbiAgICAkdGFibGUtPnNvZnREZWxldGVzKCk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuY2xhc3MgRmxpZ2h0IGV4dGVuZHMgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxNb2RlbCBcbntcbiAgICB1c2UgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxTb2Z0RGVsZXRlcztcblxuICAgIHByb3RlY3RlZCAkZmlsbGFibGUgPSBbJ25hbWUnXTtcbn1cblxuRmxpZ2h0OjpjcmVhdGUoWyduYW1lJyA9PiAnRmxpZ2h0IDEwJ10pO1xuRmxpZ2h0OjpjcmVhdGUoWyduYW1lJyA9PiAnTm90LURlbGV0ZWQgRmxpZ2h0IDEwJ10pO1xuXG4kZmxpZ2h0ID0gRmxpZ2h0OjpmaW5kKDEpO1xuXG4kZmxpZ2h0LT5kZWxldGUoKTtcblxuJGZsaWdodHMgPSBGbGlnaHQ6OndpdGhUcmFzaGVkKClcbiAgICAgICAgICAgICAgICAgICAgLT53aGVyZSgnYWN0aXZlJywgMSlcbiAgICAgICAgICAgICAgICAgICAgLT5nZXQoKTtcbiIsImhhc2giOiJlbG9xdWVudC1pbmNsdWRpbmctc29mdC1kZWxldGVkLW1vZGVscyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$flights = App<span class="hljs-string">\\Flight::withTrashed()</span>\n<span class="hljs-function">                -&gt;</span>where<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'account_id\'</span>, <span class="hljs-number">1</span>)</span>\n                -&gt;</span>get();</code></pre>\n  <p>The <code>withTrashed</code> method may also be used on a <router-link to="/docs/eloquent-relationships">relationship</router-link> query:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$flight-&gt;history<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>withTrashed<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>get();</code></pre>\n  \n          <p><a name="retrieving-only-soft-deleted-models"></a></p>\n          <h4>\n            <a href="#retrieving-only-soft-deleted-models">\n              Retrieving Only Soft Deleted Models\n            </a>\n          </h4><p>The <code>onlyTrashed</code> method will retrieve <strong>only</strong> soft deleted models:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2ZsaWdodHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCduYW1lJyk7XG4gICAgJHRhYmxlLT5ib29sZWFuKCdhY3RpdmUnKS0+ZGVmYXVsdCh0cnVlKTtcbiAgICAkdGFibGUtPnNvZnREZWxldGVzKCk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuY2xhc3MgRmxpZ2h0IGV4dGVuZHMgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxNb2RlbCBcbntcbiAgICB1c2UgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxTb2Z0RGVsZXRlcztcblxuICAgIHByb3RlY3RlZCAkZmlsbGFibGUgPSBbJ25hbWUnXTtcbn1cblxuRmxpZ2h0OjpjcmVhdGUoWyduYW1lJyA9PiAnRmxpZ2h0IDEwJ10pO1xuRmxpZ2h0OjpjcmVhdGUoWyduYW1lJyA9PiAnTm90IERlbGV0ZWQgRmxpZ2h0IDEwJ10pO1xuXG4kZmxpZ2h0ID0gRmxpZ2h0OjpmaW5kKDEpO1xuXG4kZmxpZ2h0LT5kZWxldGUoKTtcblxuJGZsaWdodHMgPSBGbGlnaHQ6Om9ubHlUcmFzaGVkKClcbiAgICAgICAgICAgICAgICAgICAgLT53aGVyZSgnYWN0aXZlJywgMSlcbiAgICAgICAgICAgICAgICAgICAgLT5nZXQoKTtcbiIsImhhc2giOiJlbG9xdWVudC1yZXRyaWV2aW5nLW9ubHktc29mdC1kZWxldGVkLW1vZGVscyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$flights = App<span class="hljs-string">\\Flight::onlyTrashed()</span>\n<span class="hljs-function">                -&gt;</span>where<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'airline_id\'</span>, <span class="hljs-number">1</span>)</span>\n                -&gt;</span>get();</code></pre>\n  \n          <p><a name="restoring-soft-deleted-models"></a></p>\n          <h4>\n            <a href="#restoring-soft-deleted-models">\n              Restoring Soft Deleted Models\n            </a>\n          </h4><p>Sometimes you may wish to &quot;un-delete&quot; a soft deleted model. To restore a soft deleted model into an active state, use the <code>restore</code> method on a model instance:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2ZsaWdodHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCduYW1lJyk7XG4gICAgJHRhYmxlLT5ib29sZWFuKCdhY3RpdmUnKS0+ZGVmYXVsdCh0cnVlKTtcbiAgICAkdGFibGUtPnNvZnREZWxldGVzKCk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuY2xhc3MgRmxpZ2h0IGV4dGVuZHMgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxNb2RlbCBcbntcbiAgICB1c2UgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxTb2Z0RGVsZXRlcztcblxuICAgIHByb3RlY3RlZCAkZmlsbGFibGUgPSBbJ25hbWUnXTtcbn1cblxuRmxpZ2h0OjpjcmVhdGUoWyduYW1lJyA9PiAnRmxpZ2h0IDEwJ10pO1xuRmxpZ2h0OjpjcmVhdGUoWyduYW1lJyA9PiAnTm90IERlbGV0ZWQgRmxpZ2h0IDEwJ10pO1xuXG4kZmxpZ2h0ID0gRmxpZ2h0OjpmaW5kKDEpO1xuXG4kZmxpZ2h0LT5kZWxldGUoKTtcblxuJGZsaWdodC0+cmVzdG9yZSgpO1xuXG4kZmxpZ2h0cyA9IEZsaWdodDo6b25seVRyYXNoZWQoKVxuICAgICAgICAgICAgICAgICAgICAtPmdldCgpO1xuIiwiaGFzaCI6ImVsb3F1ZW50LXJlc3RvcmluZy1zb2Z0LWRlbGV0ZWQtbW9kZWxzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$flight</span>-&gt;restore();</code></pre>\n  <p>You may also use the <code>restore</code> method in a query to quickly restore multiple models. Again, like other &quot;mass&quot; operations, this will not fire any model events for the models that are restored:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">App<span class="hljs-string">\\Flight::withTrashed()</span>\n<span class="hljs-function">        -&gt;</span>where<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'airline_id\'</span>, <span class="hljs-number">1</span>)</span>\n        -&gt;</span>restore();</code></pre>\n  <p>Like the <code>withTrashed</code> method, the <code>restore</code> method may also be used on <router-link to="/docs/eloquent-relationships">relationships</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-function"><span class="hljs-title">flight</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">history</span>()-&gt;</span>restore();</code></pre>\n  \n          <p><a name="permanently-deleting-models"></a></p>\n          <h4>\n            <a href="#permanently-deleting-models">\n              Permanently Deleting Models\n            </a>\n          </h4><p>Sometimes you may need to truly remove a model from your database. To permanently remove a soft deleted model from the database, use the <code>forceDelete</code> method:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2ZsaWdodHMnLCBmdW5jdGlvbiAoJHRhYmxlKSB7XG4gICAgJHRhYmxlLT5iaWdJbmNyZW1lbnRzKCdpZCcpO1xuICAgICR0YWJsZS0+c3RyaW5nKCduYW1lJyk7XG4gICAgJHRhYmxlLT5ib29sZWFuKCdhY3RpdmUnKS0+ZGVmYXVsdCh0cnVlKTtcbiAgICAkdGFibGUtPnNvZnREZWxldGVzKCk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuY2xhc3MgRmxpZ2h0IGV4dGVuZHMgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxNb2RlbCBcbntcbiAgICB1c2UgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxTb2Z0RGVsZXRlcztcblxuICAgIHByb3RlY3RlZCAkZmlsbGFibGUgPSBbJ25hbWUnXTtcbn1cblxuRmxpZ2h0OjpjcmVhdGUoWyduYW1lJyA9PiAnRmxpZ2h0IDEwJ10pO1xuXG4kZmxpZ2h0ID0gRmxpZ2h0OjpmaW5kKDEpO1xuXG4kZmxpZ2h0LT5mb3JjZURlbGV0ZSgpO1xuIiwiaGFzaCI6ImVsb3F1ZW50LXBlcm1hbmVudGx5LWRlbGV0aW5nLW1vZGVscyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Force deleting a single model instance...</span>\n$<span class="hljs-function"><span class="hljs-title">flight</span>-&gt;</span>forceDelete();\n\n<span class="hljs-comment">// Force deleting all related models...</span>\n$<span class="hljs-function"><span class="hljs-title">flight</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">history</span>()-&gt;</span>forceDelete();</code></pre>\n  <p><a name="query-scopes"></a></p>\n\n          <p><a name="query-scopes"></a></p>\n          <h2>\n            <a href="#query-scopes">\n              Query Scopes\n            </a>\n          </h2><p><a name="global-scopes"></a></p>\n\n          <p><a name="global-scopes"></a></p>\n          <h3>\n            <a href="#global-scopes">\n              Global Scopes\n            </a>\n          </h3><p>Global scopes allow you to add constraints to all queries for a given model. Laravel&#39;s own <a href="#soft-deleting">soft delete</a> functionality utilizes global scopes to only pull &quot;non-deleted&quot; models from the database. Writing your own global scopes can provide a convenient, easy way to make sure every query for a given model receives certain constraints.</p>\n\n          <p><a name="writing-global-scopes"></a></p>\n          <h4>\n            <a href="#writing-global-scopes">\n              Writing Global Scopes\n            </a>\n          </h4><p>Writing a global scope is simple. Define a class that implements the <code>Illuminate\\Database\\Eloquent\\Scope</code> interface. This interface requires you to implement one method: <code>apply</code>. The <code>apply</code> method may add <code>where</code> constraints to the query as needed:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Scopes</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Builder</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Scope</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AgeScope</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Scope</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Apply the scope to a given Eloquent query builder.\n     *\n     * <span class="hljs-doctag">@param</span>  \\Illuminate\\Database\\Eloquent\\Builder  $builder\n     * <span class="hljs-doctag">@param</span>  \\Illuminate\\Database\\Eloquent\\Model  $model\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">apply</span><span class="hljs-params">(Builder $builder, Model $model)</span>\n    </span>{\n        $builder-&gt;where(<span class="hljs-string">\'age\'</span>, <span class="hljs-string">\'&gt;\'</span>, <span class="hljs-number">200</span>);\n    }\n}</span></code></pre>\n  \n          <p><a name="applying-global-scopes"></a></p>\n          <h4>\n            <a href="#applying-global-scopes">\n              Applying Global Scopes\n            </a>\n          </h4><p>To assign a global scope to a model, you should override a given model&#39;s <code>boot</code> method and use the <code>addGlobalScope</code> method:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2d1ZXN0cycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ25hbWUnKTtcbiAgICAkdGFibGUtPmludGVnZXIoJ2FnZScpO1xuICAgICR0YWJsZS0+dGltZXN0YW1wcygpO1xufSk7XG5cbmNsYXNzIEFnZVNjb3BlIGltcGxlbWVudHMgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxTY29wZVxue1xuICAgIHB1YmxpYyBmdW5jdGlvbiBhcHBseSgkYnVpbGRlciwgJG1vZGVsKVxuICAgIHtcbiAgICAgICAgJGJ1aWxkZXItPndoZXJlKCdhZ2UnLCAnPicsIDE4KTtcbiAgICB9XG59XG5cbmNsYXNzIEd1ZXN0IGV4dGVuZHMgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxNb2RlbCBcbntcbiAgICBwcm90ZWN0ZWQgJGZpbGxhYmxlID0gWyduYW1lJywgJ2FnZSddO1xuXG4gICAgcHJvdGVjdGVkIHN0YXRpYyBmdW5jdGlvbiBib290KClcbiAgICB7XG4gICAgICAgIHBhcmVudDo6Ym9vdCgpO1xuXG4gICAgICAgIHN0YXRpYzo6YWRkR2xvYmFsU2NvcGUobmV3IEFnZVNjb3BlKTtcbiAgICB9XG59XG5cbkd1ZXN0OjpjcmVhdGUoWyduYW1lJyA9PiAnUGF1bCcsICdhZ2UnID0+IDZdKTtcbkd1ZXN0OjpjcmVhdGUoWyduYW1lJyA9PiAnTWFyY2VsJywgJ2FnZScgPT4gMzRdKTtcblxuR3Vlc3Q6OmFsbCgpO1xuIiwiaGFzaCI6ImVsb3F1ZW50LWFwcGx5aW5nLWdsb2JhbC1zY29wZXMifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Scopes</span>\\<span class="hljs-title">AgeScope</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The "booting" method of the model.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">parent</span>::boot();\n\n        <span class="hljs-keyword">static</span>::addGlobalScope(<span class="hljs-keyword">new</span> AgeScope);\n    }\n}</span></code></pre>\n  <p>After adding the scope, a query to <code>User::all()</code> will produce the following SQL:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-symbol">`users`</span> <span class="hljs-keyword">where</span> <span class="hljs-symbol">`age`</span> &gt; <span class="hljs-number">200</span></code></pre>\n  \n          <p><a name="anonymous-global-scopes"></a></p>\n          <h4>\n            <a href="#anonymous-global-scopes">\n              Anonymous Global Scopes\n            </a>\n          </h4><p>Eloquent also allows you to define global scopes using Closures, which is particularly useful for simple scopes that do not warrant a separate class:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2d1ZXN0cycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ25hbWUnKTtcbiAgICAkdGFibGUtPmludGVnZXIoJ2FnZScpO1xuICAgICR0YWJsZS0+dGltZXN0YW1wcygpO1xufSk7XG5cbmNsYXNzIEd1ZXN0IGV4dGVuZHMgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxNb2RlbCBcbntcbiAgICBwcm90ZWN0ZWQgJGZpbGxhYmxlID0gWyduYW1lJywgJ2FnZSddO1xuXG4gICAgcHJvdGVjdGVkIHN0YXRpYyBmdW5jdGlvbiBib290KClcbiAgICB7XG4gICAgICAgIHBhcmVudDo6Ym9vdCgpO1xuXG4gICAgICAgIHN0YXRpYzo6YWRkR2xvYmFsU2NvcGUoJ2FnZScsIGZ1bmN0aW9uICgkYnVpbGRlcikge1xuICAgICAgICAgICAgJGJ1aWxkZXItPndoZXJlKCdhZ2UnLCAnPicsIDE4KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5HdWVzdDo6Y3JlYXRlKFsnbmFtZScgPT4gJ1BhdWwnLCAnYWdlJyA9PiA2XSk7XG5HdWVzdDo6Y3JlYXRlKFsnbmFtZScgPT4gJ01hcmNlbCcsICdhZ2UnID0+IDM0XSk7XG5cbkd1ZXN0OjphbGwoKTtcbiIsImhhc2giOiJlbG9xdWVudC1hbm9ueW1vdXMtZ2xvYmFsLXNjb3BlcyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Builder</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The "booting" method of the model.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">parent</span>::boot();\n\n        <span class="hljs-keyword">static</span>::addGlobalScope(<span class="hljs-string">\'age\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Builder $builder)</span> </span>{\n            $builder-&gt;where(<span class="hljs-string">\'age\'</span>, <span class="hljs-string">\'&gt;\'</span>, <span class="hljs-number">200</span>);\n        });\n    }\n}</span></code></pre>\n  \n          <p><a name="removing-global-scopes"></a></p>\n          <h4>\n            <a href="#removing-global-scopes">\n              Removing Global Scopes\n            </a>\n          </h4><p>If you would like to remove a global scope for a given query, you may use the <code>withoutGlobalScope</code> method. The method accepts the class name of the global scope as its only argument:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2d1ZXN0cycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ25hbWUnKTtcbiAgICAkdGFibGUtPmludGVnZXIoJ2FnZScpO1xuICAgICR0YWJsZS0+dGltZXN0YW1wcygpO1xufSk7XG5cbmNsYXNzIEd1ZXN0IGV4dGVuZHMgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxNb2RlbCBcbntcbiAgICBwcm90ZWN0ZWQgJGZpbGxhYmxlID0gWyduYW1lJywgJ2FnZSddO1xuXG4gICAgcHJvdGVjdGVkIHN0YXRpYyBmdW5jdGlvbiBib290KClcbiAgICB7XG4gICAgICAgIHBhcmVudDo6Ym9vdCgpO1xuXG4gICAgICAgIHN0YXRpYzo6YWRkR2xvYmFsU2NvcGUoJ2FnZScsIGZ1bmN0aW9uICgkYnVpbGRlcikge1xuICAgICAgICAgICAgJGJ1aWxkZXItPndoZXJlKCdhZ2UnLCAnPicsIDE4KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5HdWVzdDo6Y3JlYXRlKFsnbmFtZScgPT4gJ1BhdWwnLCAnYWdlJyA9PiA2XSk7XG5HdWVzdDo6Y3JlYXRlKFsnbmFtZScgPT4gJ01hcmNlbCcsICdhZ2UnID0+IDM0XSk7XG5cbkd1ZXN0Ojp3aXRob3V0R2xvYmFsU2NvcGUoJ2FnZScpLT5nZXQoKTtcbiIsImhhc2giOiJlbG9xdWVudC1yZW1vdmluZy1nbG9iYWwtc2NvcGVzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">User::withoutGlobalScope(AgeScope::<span class="hljs-class"><span class="hljs-keyword">class</span>)-&gt;<span class="hljs-title">get</span>();</span></code></pre>\n  <p>Or, if you defined the global scope using a Closure:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">User::withoutGlobalScope<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'age\'</span>)</span>-&gt;</span>get();</code></pre>\n  <p>If you would like to remove several or even all of the global scopes, you may use the <code>withoutGlobalScopes</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Remove all of the global scopes...</span>\nUser::withoutGlobalScopes()-&gt;get();\n\n<span class="hljs-comment">// Remove some of the global scopes...</span>\nUser::withoutGlobalScopes([\n    FirstScope::class, SecondScope::class\n])-&gt;get();</code></pre>\n  <p><a name="local-scopes"></a></p>\n\n          <p><a name="local-scopes"></a></p>\n          <h3>\n            <a href="#local-scopes">\n              Local Scopes\n            </a>\n          </h3><p>Local scopes allow you to define common sets of constraints that you may easily re-use throughout your application. For example, you may need to frequently retrieve all users that are considered &quot;popular&quot;. To define a scope, prefix an Eloquent model method with <code>scope</code>.</p>\n<p>Scopes should always return a query builder instance:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2d1ZXN0cycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ25hbWUnKTtcbiAgICAkdGFibGUtPmludGVnZXIoJ3ZvdGVzJyk7XG4gICAgJHRhYmxlLT5ib29sZWFuKCdhY3RpdmUnKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5jbGFzcyBHdWVzdCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsnbmFtZScsICd2b3RlcycsICdhY3RpdmUnXTtcblxuXG4gICAgLyoqXG4gICAgICogU2NvcGUgYSBxdWVyeSB0byBvbmx5IGluY2x1ZGUgcG9wdWxhciB1c2Vycy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgSWxsdW1pbmF0ZURhdGFiYXNlRWxvcXVlbnRCdWlsZGVyICAkcXVlcnlcbiAgICAgKiBAcmV0dXJuIElsbHVtaW5hdGVEYXRhYmFzZUVsb3F1ZW50QnVpbGRlclxuICAgICAqL1xuICAgIHB1YmxpYyBmdW5jdGlvbiBzY29wZVBvcHVsYXIoJHF1ZXJ5KVxuICAgIHtcbiAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoJ3ZvdGVzJywgJz4nLCAxMDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNjb3BlIGEgcXVlcnkgdG8gb25seSBpbmNsdWRlIGFjdGl2ZSB1c2Vycy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgSWxsdW1pbmF0ZURhdGFiYXNlRWxvcXVlbnRCdWlsZGVyICAkcXVlcnlcbiAgICAgKiBAcmV0dXJuIElsbHVtaW5hdGVEYXRhYmFzZUVsb3F1ZW50QnVpbGRlclxuICAgICAqL1xuICAgIHB1YmxpYyBmdW5jdGlvbiBzY29wZUFjdGl2ZSgkcXVlcnkpXG4gICAge1xuICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgnYWN0aXZlJywgMSk7XG4gICAgfVxufVxuXG5HdWVzdDo6Y3JlYXRlKFsnbmFtZScgPT4gJ1BhdWwnLCAndm90ZXMnID0+IDUwMDAsICdhY3RpdmUnID0+IHRydWVdKTtcbkd1ZXN0OjpjcmVhdGUoWyduYW1lJyA9PiAnTWFyY2VsJywgJ3ZvdGVzJyA9PiAyNSwgJ2FjdGl2ZScgPT4gZmFsc2VdKTtcblxuR3Vlc3Q6OnBvcHVsYXIoKS0+YWN0aXZlKCktPm9yZGVyQnkoJ2NyZWF0ZWRfYXQnKS0+Z2V0KCk7XG4iLCJoYXNoIjoiZWxvcXVlbnQtbG9jYWwtc2NvcGVzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Scope a query to only include popular users.\n     *\n     * <span class="hljs-doctag">@param</span>  \\Illuminate\\Database\\Eloquent\\Builder  $query\n     * <span class="hljs-doctag">@return</span> \\Illuminate\\Database\\Eloquent\\Builder\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">scopePopular</span><span class="hljs-params">($query)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> $query-&gt;where(<span class="hljs-string">\'votes\'</span>, <span class="hljs-string">\'&gt;\'</span>, <span class="hljs-number">100</span>);\n    }\n\n    <span class="hljs-comment">/**\n     * Scope a query to only include active users.\n     *\n     * <span class="hljs-doctag">@param</span>  \\Illuminate\\Database\\Eloquent\\Builder  $query\n     * <span class="hljs-doctag">@return</span> \\Illuminate\\Database\\Eloquent\\Builder\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">scopeActive</span><span class="hljs-params">($query)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> $query-&gt;where(<span class="hljs-string">\'active\'</span>, <span class="hljs-number">1</span>);\n    }\n}</span></code></pre>\n  \n          <p><a name="utilizing-a-local-scope"></a></p>\n          <h4>\n            <a href="#utilizing-a-local-scope">\n              Utilizing A Local Scope\n            </a>\n          </h4><p>Once the scope has been defined, you may call the scope methods when querying the model. However, you should not include the <code>scope</code> prefix when calling the method. You can even chain calls to various scopes, for example:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$users</span> = App\\User::popular()-&gt;active()-&gt;orderBy(<span class="hljs-string">\'created_at\'</span>)-&gt;get();</code></pre>\n  <p>Combining multiple Eloquent model scopes via an <code>or</code> query operator may require the use of Closure callbacks:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = App\\User::popular()-&gt;orWhere(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Builder $query)</span> </span>{\n    $query-&gt;active();\n})-&gt;get();</code></pre>\n  <p>However, since this can be cumbersome, Laravel provides a &quot;higher order&quot; <code>orWhere</code> method that allows you to fluently chain these scopes together without the use of Closures:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-function"><span class="hljs-title">users</span> = App\\User::popular()-&gt;</span><span class="hljs-function"><span class="hljs-title">orWhere</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">active</span>()-&gt;</span>get();</code></pre>\n  \n          <p><a name="dynamic-scopes"></a></p>\n          <h4>\n            <a href="#dynamic-scopes">\n              Dynamic Scopes\n            </a>\n          </h4><p>Sometimes you may wish to define a scope that accepts parameters. To get started, just add your additional parameters to your scope. Scope parameters should be defined after the <code>$query</code> parameter:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2d1ZXN0cycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ25hbWUnKTtcbiAgICAkdGFibGUtPnN0cmluZygndHlwZScpO1xuICAgICR0YWJsZS0+dGltZXN0YW1wcygpO1xufSk7XG5cbmNsYXNzIEd1ZXN0IGV4dGVuZHMgSWxsdW1pbmF0ZVxcRGF0YWJhc2VcXEVsb3F1ZW50XFxNb2RlbCBcbntcbiAgICBwcm90ZWN0ZWQgJGZpbGxhYmxlID0gWyduYW1lJywgJ3R5cGUnXTtcblxuICAgIC8qKlxuICAgICAqIFNjb3BlIGEgcXVlcnkgdG8gb25seSBpbmNsdWRlIHVzZXJzIG9mIGEgZ2l2ZW4gdHlwZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgSWxsdW1pbmF0ZURhdGFiYXNlRWxvcXVlbnRCdWlsZGVyICAkcXVlcnlcbiAgICAgKiBAcGFyYW0gIG1peGVkICAkdHlwZVxuICAgICAqIEByZXR1cm4gSWxsdW1pbmF0ZURhdGFiYXNlRWxvcXVlbnRCdWlsZGVyXG4gICAgICovXG4gICAgcHVibGljIGZ1bmN0aW9uIHNjb3BlT2ZUeXBlKCRxdWVyeSwgJHR5cGUpXG4gICAge1xuICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgndHlwZScsICR0eXBlKTtcbiAgICB9XG59XG5cbkd1ZXN0OjpjcmVhdGUoWyduYW1lJyA9PiAnUGF1bCcsICd0eXBlJyA9PiAnYWRtaW4nXSk7XG5HdWVzdDo6Y3JlYXRlKFsnbmFtZScgPT4gJ01hcmNlbCcsICd0eXBlJyA9PiAndXNlciddKTtcblxuR3Vlc3Q6Om9mVHlwZSgnYWRtaW4nKS0+Z2V0KCk7XG4iLCJoYXNoIjoiZWxvcXVlbnQtZHluYW1pYy1zY29wZXMifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Scope a query to only include users of a given type.\n     *\n     * <span class="hljs-doctag">@param</span>  \\Illuminate\\Database\\Eloquent\\Builder  $query\n     * <span class="hljs-doctag">@param</span>  mixed  $type\n     * <span class="hljs-doctag">@return</span> \\Illuminate\\Database\\Eloquent\\Builder\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">scopeOfType</span><span class="hljs-params">($query, $type)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> $query-&gt;where(<span class="hljs-string">\'type\'</span>, $type);\n    }\n}</span></code></pre>\n  <p>Now, you may pass the parameters when calling the scope:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$users</span> = App\\User::ofType(<span class="hljs-string">\'admin\'</span>)-&gt;get();</code></pre>\n  <p><a name="comparing-models"></a></p>\n\n          <p><a name="comparing-models"></a></p>\n          <h2>\n            <a href="#comparing-models">\n              Comparing Models\n            </a>\n          </h2><p>Sometimes you may need to determine if two models are the &quot;same&quot;. The <code>is</code> method may be used to quickly verify two models have same primary key, table, and database connection:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> ($post-&gt;is($anotherPost)) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p><a name="events"></a></p>\n\n          <p><a name="events"></a></p>\n          <h2>\n            <a href="#events">\n              Events\n            </a>\n          </h2><p>Eloquent models fire several events, allowing you to hook into the following points in a model&#39;s lifecycle: <code>retrieved</code>, <code>creating</code>, <code>created</code>, <code>updating</code>, <code>updated</code>, <code>saving</code>, <code>saved</code>, <code>deleting</code>, <code>deleted</code>, <code>restoring</code>, <code>restored</code>. Events allow you to easily execute code each time a specific model class is saved or updated in the database. Each event receives the instance of the model through its constructor.</p>\n<p>The <code>retrieved</code> event will fire when an existing model is retrieved from the database. When a new model is saved for the first time, the <code>creating</code> and <code>created</code> events will fire. If a model already existed in the database and the <code>save</code> method is called, the <code>updating</code> / <code>updated</code> events will fire. However, in both cases, the <code>saving</code> / <code>saved</code> events will fire.</p>\n<blockquote>\n<p>{note} When issuing a mass update or delete via Eloquent, the <code>saved</code>, <code>updated</code>, <code>deleting</code>, and <code>deleted</code> model events will not be fired for the affected models. This is because the models are never actually retrieved when issuing a mass update or delete.</p>\n</blockquote>\n<p>To get started, define a <code>$dispatchesEvents</code> property on your Eloquent model that maps various points of the Eloquent model&#39;s lifecycle to your own <router-link to="/docs/events">event classes</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Events</span>\\<span class="hljs-title">UserDeleted</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Events</span>\\<span class="hljs-title">UserSaved</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Auth</span>\\<span class="hljs-title">User</span> <span class="hljs-title">as</span> <span class="hljs-title">Authenticatable</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Authenticatable</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">Notifiable</span>;\n\n    <span class="hljs-comment">/**\n     * The event map for the model.\n     *\n     * <span class="hljs-doctag">@var</span> array\n     */</span>\n    <span class="hljs-keyword">protected</span> $dispatchesEvents = [\n        <span class="hljs-string">\'saved\'</span> =&gt; UserSaved::class,\n        <span class="hljs-string">\'deleted\'</span> =&gt; UserDeleted::class,\n    ];\n}</span></code></pre>\n  <p>After defining and mapping your Eloquent events, you may use <router-link to="https://laravel.com/docs/events#defining-listeners">event listeners</router-link> to handle the events.</p>\n<p><a name="observers"></a></p>\n\n          <p><a name="observers"></a></p>\n          <h3>\n            <a href="#observers">\n              Observers\n            </a>\n          </h3>\n          <p><a name="defining-observers"></a></p>\n          <h4>\n            <a href="#defining-observers">\n              Defining Observers\n            </a>\n          </h4><p>If you are listening for many events on a given model, you may use observers to group all of your listeners into a single class. Observers classes have method names which reflect the Eloquent events you wish to listen for. Each of these methods receives the model as their only argument. The <code>make:observer</code> Artisan command is the easiest way to create a new observer class:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan make:observer UserObserver <span class="hljs-attribute">--model</span>=User</code></pre>\n  <p>This command will place the new observer in your <code>App/Observers</code> directory. If this directory does not exist, Artisan will create it for you. Your fresh observer will look like the following:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Observers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserObserver</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Handle the User "created" event.\n     *\n     * <span class="hljs-doctag">@param</span>  \\App\\User  $user\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">created</span><span class="hljs-params">(User $user)</span>\n    </span>{\n        <span class="hljs-comment">//</span>\n    }\n\n    <span class="hljs-comment">/**\n     * Handle the User "updated" event.\n     *\n     * <span class="hljs-doctag">@param</span>  \\App\\User  $user\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updated</span><span class="hljs-params">(User $user)</span>\n    </span>{\n        <span class="hljs-comment">//</span>\n    }\n\n    <span class="hljs-comment">/**\n     * Handle the User "deleted" event.\n     *\n     * <span class="hljs-doctag">@param</span>  \\App\\User  $user\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deleted</span><span class="hljs-params">(User $user)</span>\n    </span>{\n        <span class="hljs-comment">//</span>\n    }\n\n    <span class="hljs-comment">/**\n     * Handle the User "forceDeleted" event.\n     *\n     * <span class="hljs-doctag">@param</span>  \\App\\User  $user\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">forceDeleted</span><span class="hljs-params">(User $user)</span>\n    </span>{\n        <span class="hljs-comment">//</span>\n    }\n}</span></code></pre>\n  <p>To register an observer, use the <code>observe</code> method on the model you wish to observe. You may register observers in the <code>boot</code> method of one of your service providers. In this example, we&#39;ll register the observer in the <code>AppServiceProvider</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Providers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Observers</span>\\<span class="hljs-title">UserObserver</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">ServiceProvider</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Register any application services.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-comment">//</span>\n    }\n\n    <span class="hljs-comment">/**\n     * Bootstrap any application services.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n    </span>{\n        User::observe(UserObserver::class);\n    }\n}</span></code></pre>\n  '},c81f:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="contracts"></a></p>\n          <h1>\n            <a href="#contracts">\n              Contracts\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a><ul>\n<li><a href="#contracts-vs-facades">Contracts Vs. Facades</a></li>\n</ul>\n</li>\n<li><a href="#when-to-use-contracts">When To Use Contracts</a><ul>\n<li><a href="#loose-coupling">Loose Coupling</a></li>\n<li><a href="#simplicity">Simplicity</a></li>\n</ul>\n</li>\n<li><a href="#how-to-use-contracts">How To Use Contracts</a></li>\n<li><a href="#contract-reference">Contract Reference</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Laravel&#39;s Contracts are a set of interfaces that define the core services provided by the framework. For example, a <code>Illuminate\\Contracts\\Queue\\Queue</code> contract defines the methods needed for queueing jobs, while the <code>Illuminate\\Contracts\\Mail\\Mailer</code> contract defines the methods needed for sending e-mail.</p>\n<p>Each contract has a corresponding implementation provided by the framework. For example, Laravel provides a queue implementation with a variety of drivers, and a mailer implementation that is powered by <router-link to="https://swiftmailer.symfony.com/">SwiftMailer</router-link>.</p>\n<p>All of the Laravel contracts live in <router-link to="https://github.com/illuminate/contracts">their own GitHub repository</router-link>. This provides a quick reference point for all available contracts, as well as a single, decoupled package that may be utilized by package developers.</p>\n<p><a name="contracts-vs-facades"></a></p>\n\n          <p><a name="contracts-vs-facades"></a></p>\n          <h3>\n            <a href="#contracts-vs-facades">\n              Contracts Vs. Facades\n            </a>\n          </h3><p>Laravel&#39;s <router-link to="/docs/{{version}}/facades">facades</router-link> and helper functions provide a simple way of utilizing Laravel&#39;s services without needing to type-hint and resolve contracts out of the service container. In most cases, each facade has an equivalent contract.</p>\n<p>Unlike facades, which do not require you to require them in your class&#39; constructor, contracts allow you to define explicit dependencies for your classes. Some developers prefer to explicitly define their dependencies in this way and therefore prefer to use contracts, while other developers enjoy the convenience of facades.</p>\n<blockquote>\n<p>{tip} Most applications will be fine regardless of whether you prefer facades or contracts. However, if you are building a package, you should strongly consider using contracts since they will be easier to test in a package context.</p>\n</blockquote>\n<p><a name="when-to-use-contracts"></a></p>\n\n          <p><a name="when-to-use-contracts"></a></p>\n          <h2>\n            <a href="#when-to-use-contracts">\n              When To Use Contracts\n            </a>\n          </h2><p>As discussed elsewhere, much of the decision to use contracts or facades will come down to personal taste and the tastes of your development team. Both contracts and facades can be used to create robust, well-tested Laravel applications. As long as you are keeping your class&#39; responsibilities focused, you will notice very few practical differences between using contracts and facades.</p>\n<p>However, you may still have several questions regarding contracts. For example, why use interfaces at all? Isn&#39;t using interfaces more complicated? Let&#39;s distill the reasons for using interfaces to the following headings: loose coupling and simplicity.</p>\n<p><a name="loose-coupling"></a></p>\n\n          <p><a name="loose-coupling"></a></p>\n          <h3>\n            <a href="#loose-coupling">\n              Loose Coupling\n            </a>\n          </h3><p>First, let&#39;s review some code that is tightly coupled to a cache implementation. Consider the following:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Orders</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Repository</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The cache instance.\n     */</span>\n    <span class="hljs-keyword">protected</span> $cache;\n\n    <span class="hljs-comment">/**\n     * Create a new repository instance.\n     *\n     * <span class="hljs-doctag">@param</span>  \\SomePackage\\Cache\\Memcached  $cache\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(\\SomePackage\\Cache\\Memcached $cache)</span>\n    </span>{\n        <span class="hljs-keyword">$this</span>-&gt;cache = $cache;\n    }\n\n    <span class="hljs-comment">/**\n     * Retrieve an Order by ID.\n     *\n     * <span class="hljs-doctag">@param</span>  int  $id\n     * <span class="hljs-doctag">@return</span> Order\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">find</span><span class="hljs-params">($id)</span>\n    </span>{\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;cache-&gt;has($id)) {\n            <span class="hljs-comment">//</span>\n        }\n    }\n}</span></code></pre>\n  <p>In this class, the code is tightly coupled to a given cache implementation. It is tightly coupled because we are depending on a concrete Cache class from a package vendor. If the API of that package changes our code must change as well.</p>\n<p>Likewise, if we want to replace our underlying cache technology (Memcached) with another technology (Redis), we again will have to modify our repository. Our repository should not have so much knowledge regarding who is providing them data or how they are providing it.</p>\n<p><strong>Instead of this approach, we can improve our code by depending on a simple, vendor agnostic interface:</strong></p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Orders</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">Cache</span>\\<span class="hljs-title">Repository</span> <span class="hljs-title">as</span> <span class="hljs-title">Cache</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Repository</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The cache instance.\n     */</span>\n    <span class="hljs-keyword">protected</span> $cache;\n\n    <span class="hljs-comment">/**\n     * Create a new repository instance.\n     *\n     * <span class="hljs-doctag">@param</span>  Cache  $cache\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(Cache $cache)</span>\n    </span>{\n        <span class="hljs-keyword">$this</span>-&gt;cache = $cache;\n    }\n}</span></code></pre>\n  <p>Now the code is not coupled to any specific vendor, or even Laravel. Since the contracts package contains no implementation and no dependencies, you may easily write an alternative implementation of any given contract, allowing you to replace your cache implementation without modifying any of your cache consuming code.</p>\n<p><a name="simplicity"></a></p>\n\n          <p><a name="simplicity"></a></p>\n          <h3>\n            <a href="#simplicity">\n              Simplicity\n            </a>\n          </h3><p>When all of Laravel&#39;s services are neatly defined within simple interfaces, it is very easy to determine the functionality offered by a given service. <strong>The contracts serve as succinct documentation to the framework&#39;s features.</strong></p>\n<p>In addition, when you depend on simple interfaces, your code is easier to understand and maintain. Rather than tracking down which methods are available to you within a large, complicated class, you can refer to a simple, clean interface.</p>\n<p><a name="how-to-use-contracts"></a></p>\n\n          <p><a name="how-to-use-contracts"></a></p>\n          <h2>\n            <a href="#how-to-use-contracts">\n              How To Use Contracts\n            </a>\n          </h2><p>So, how do you get an implementation of a contract? It&#39;s actually quite simple.</p>\n<p>Many types of classes in Laravel are resolved through the <router-link to="/docs/{{version}}/container">service container</router-link>, including controllers, event listeners, middleware, queued jobs, and even route Closures. So, to get an implementation of a contract, you can just &quot;type-hint&quot; the interface in the constructor of the class being resolved.</p>\n<p>For example, take a look at this event listener:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Listeners</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Events</span>\\<span class="hljs-title">OrderWasPlaced</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">Redis</span>\\<span class="hljs-title">Factory</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CacheOrderInformation</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The Redis factory implementation.\n     */</span>\n    <span class="hljs-keyword">protected</span> $redis;\n\n    <span class="hljs-comment">/**\n     * Create a new event handler instance.\n     *\n     * <span class="hljs-doctag">@param</span>  Factory  $redis\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(Factory $redis)</span>\n    </span>{\n        <span class="hljs-keyword">$this</span>-&gt;redis = $redis;\n    }\n\n    <span class="hljs-comment">/**\n     * Handle the event.\n     *\n     * <span class="hljs-doctag">@param</span>  OrderWasPlaced  $event\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">(OrderWasPlaced $event)</span>\n    </span>{\n        <span class="hljs-comment">//</span>\n    }\n}</span></code></pre>\n  <p>When the event listener is resolved, the service container will read the type-hints on the constructor of the class, and inject the appropriate value. To learn more about registering things in the service container, check out <router-link to="/docs/{{version}}/container">its documentation</router-link>.</p>\n<p><a name="contract-reference"></a></p>\n\n          <p><a name="contract-reference"></a></p>\n          <h2>\n            <a href="#contract-reference">\n              Contract Reference\n            </a>\n          </h2><p>This table provides a quick reference to all of the Laravel contracts and their equivalent facades:</p>\n<table>\n<thead>\n<tr>\n<th>Contract</th>\n<th>References Facade</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Auth/Access/Authorizable.php">Illuminate\\Contracts\\Auth\\Access\\Authorizable</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Auth/Access/Gate.php">Illuminate\\Contracts\\Auth\\Access\\Gate</router-link></td>\n<td><code>Gate</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Auth/Authenticatable.php">Illuminate\\Contracts\\Auth\\Authenticatable</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Auth/CanResetPassword.php">Illuminate\\Contracts\\Auth\\CanResetPassword</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Auth/Factory.php">Illuminate\\Contracts\\Auth\\Factory</router-link></td>\n<td><code>Auth</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Auth/Guard.php">Illuminate\\Contracts\\Auth\\Guard</router-link></td>\n<td><code>Auth::guard()</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Auth/PasswordBroker.php">Illuminate\\Contracts\\Auth\\PasswordBroker</router-link></td>\n<td><code>Password::broker()</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Auth/PasswordBrokerFactory.php">Illuminate\\Contracts\\Auth\\PasswordBrokerFactory</router-link></td>\n<td><code>Password</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Auth/StatefulGuard.php">Illuminate\\Contracts\\Auth\\StatefulGuard</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Auth/SupportsBasicAuth.php">Illuminate\\Contracts\\Auth\\SupportsBasicAuth</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Auth/UserProvider.php">Illuminate\\Contracts\\Auth\\UserProvider</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Bus/Dispatcher.php">Illuminate\\Contracts\\Bus\\Dispatcher</router-link></td>\n<td><code>Bus</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Bus/QueueingDispatcher.php">Illuminate\\Contracts\\Bus\\QueueingDispatcher</router-link></td>\n<td><code>Bus::dispatchToQueue()</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Broadcasting/Factory.php">Illuminate\\Contracts\\Broadcasting\\Factory</router-link></td>\n<td><code>Broadcast</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Broadcasting/Broadcaster.php">Illuminate\\Contracts\\Broadcasting\\Broadcaster</router-link></td>\n<td><code>Broadcast::connection()</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Broadcasting/ShouldBroadcast.php">Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Broadcasting/ShouldBroadcastNow.php">Illuminate\\Contracts\\Broadcasting\\ShouldBroadcastNow</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Cache/Factory.php">Illuminate\\Contracts\\Cache\\Factory</router-link></td>\n<td><code>Cache</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Cache/Lock.php">Illuminate\\Contracts\\Cache\\Lock</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Cache/LockProvider.php">Illuminate\\Contracts\\Cache\\LockProvider</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Cache/Repository.php">Illuminate\\Contracts\\Cache\\Repository</router-link></td>\n<td><code>Cache::driver()</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Cache/Store.php">Illuminate\\Contracts\\Cache\\Store</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Config/Repository.php">Illuminate\\Contracts\\Config\\Repository</router-link></td>\n<td><code>Config</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Console/Application.php">Illuminate\\Contracts\\Console\\Application</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Console/Kernel.php">Illuminate\\Contracts\\Console\\Kernel</router-link></td>\n<td><code>Artisan</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Container/Container.php">Illuminate\\Contracts\\Container\\Container</router-link></td>\n<td><code>App</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Cookie/Factory.php">Illuminate\\Contracts\\Cookie\\Factory</router-link></td>\n<td><code>Cookie</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Cookie/QueueingFactory.php">Illuminate\\Contracts\\Cookie\\QueueingFactory</router-link></td>\n<td><code>Cookie::queue()</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Database/ModelIdentifier.php">Illuminate\\Contracts\\Database\\ModelIdentifier</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Debug/ExceptionHandler.php">Illuminate\\Contracts\\Debug\\ExceptionHandler</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Encryption/Encrypter.php">Illuminate\\Contracts\\Encryption\\Encrypter</router-link></td>\n<td><code>Crypt</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Events/Dispatcher.php">Illuminate\\Contracts\\Events\\Dispatcher</router-link></td>\n<td><code>Event</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Filesystem/Cloud.php">Illuminate\\Contracts\\Filesystem\\Cloud</router-link></td>\n<td><code>Storage::cloud()</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Filesystem/Factory.php">Illuminate\\Contracts\\Filesystem\\Factory</router-link></td>\n<td><code>Storage</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Filesystem/Filesystem.php">Illuminate\\Contracts\\Filesystem\\Filesystem</router-link></td>\n<td><code>Storage::disk()</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Foundation/Application.php">Illuminate\\Contracts\\Foundation\\Application</router-link></td>\n<td><code>App</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Hashing/Hasher.php">Illuminate\\Contracts\\Hashing\\Hasher</router-link></td>\n<td><code>Hash</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Http/Kernel.php">Illuminate\\Contracts\\Http\\Kernel</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Mail/MailQueue.php">Illuminate\\Contracts\\Mail\\MailQueue</router-link></td>\n<td><code>Mail::queue()</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Mail/Mailable.php">Illuminate\\Contracts\\Mail\\Mailable</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Mail/Mailer.php">Illuminate\\Contracts\\Mail\\Mailer</router-link></td>\n<td><code>Mail</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Notifications/Dispatcher.php">Illuminate\\Contracts\\Notifications\\Dispatcher</router-link></td>\n<td><code>Notification</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Notifications/Factory.php">Illuminate\\Contracts\\Notifications\\Factory</router-link></td>\n<td><code>Notification</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Pagination/LengthAwarePaginator.php">Illuminate\\Contracts\\Pagination\\LengthAwarePaginator</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Pagination/Paginator.php">Illuminate\\Contracts\\Pagination\\Paginator</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Pipeline/Hub.php">Illuminate\\Contracts\\Pipeline\\Hub</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Pipeline/Pipeline.php">Illuminate\\Contracts\\Pipeline\\Pipeline</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Queue/EntityResolver.php">Illuminate\\Contracts\\Queue\\EntityResolver</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Queue/Factory.php">Illuminate\\Contracts\\Queue\\Factory</router-link></td>\n<td><code>Queue</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Queue/Job.php">Illuminate\\Contracts\\Queue\\Job</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Queue/Monitor.php">Illuminate\\Contracts\\Queue\\Monitor</router-link></td>\n<td><code>Queue</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Queue/Queue.php">Illuminate\\Contracts\\Queue\\Queue</router-link></td>\n<td><code>Queue::connection()</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Queue/QueueableCollection.php">Illuminate\\Contracts\\Queue\\QueueableCollection</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Queue/QueueableEntity.php">Illuminate\\Contracts\\Queue\\QueueableEntity</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Queue/ShouldQueue.php">Illuminate\\Contracts\\Queue\\ShouldQueue</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Redis/Factory.php">Illuminate\\Contracts\\Redis\\Factory</router-link></td>\n<td><code>Redis</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Routing/BindingRegistrar.php">Illuminate\\Contracts\\Routing\\BindingRegistrar</router-link></td>\n<td><code>Route</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Routing/Registrar.php">Illuminate\\Contracts\\Routing\\Registrar</router-link></td>\n<td><code>Route</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Routing/ResponseFactory.php">Illuminate\\Contracts\\Routing\\ResponseFactory</router-link></td>\n<td><code>Response</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Routing/UrlGenerator.php">Illuminate\\Contracts\\Routing\\UrlGenerator</router-link></td>\n<td><code>URL</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Routing/UrlRoutable.php">Illuminate\\Contracts\\Routing\\UrlRoutable</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Session/Session.php">Illuminate\\Contracts\\Session\\Session</router-link></td>\n<td><code>Session::driver()</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Support/Arrayable.php">Illuminate\\Contracts\\Support\\Arrayable</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Support/Htmlable.php">Illuminate\\Contracts\\Support\\Htmlable</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Support/Jsonable.php">Illuminate\\Contracts\\Support\\Jsonable</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Support/MessageBag.php">Illuminate\\Contracts\\Support\\MessageBag</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Support/MessageProvider.php">Illuminate\\Contracts\\Support\\MessageProvider</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Support/Renderable.php">Illuminate\\Contracts\\Support\\Renderable</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Support/Responsable.php">Illuminate\\Contracts\\Support\\Responsable</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Translation/Loader.php">Illuminate\\Contracts\\Translation\\Loader</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Translation/Translator.php">Illuminate\\Contracts\\Translation\\Translator</router-link></td>\n<td><code>Lang</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Validation/Factory.php">Illuminate\\Contracts\\Validation\\Factory</router-link></td>\n<td><code>Validator</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Validation/ImplicitRule.php">Illuminate\\Contracts\\Validation\\ImplicitRule</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Validation/Rule.php">Illuminate\\Contracts\\Validation\\Rule</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Validation/ValidatesWhenResolved.php">Illuminate\\Contracts\\Validation\\ValidatesWhenResolved</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/Validation/Validator.php">Illuminate\\Contracts\\Validation\\Validator</router-link></td>\n<td><code>Validator::make()</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/View/Engine.php">Illuminate\\Contracts\\View\\Engine</router-link></td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/View/Factory.php">Illuminate\\Contracts\\View\\Factory</router-link></td>\n<td><code>View</code></td>\n</tr>\n<tr>\n<td><router-link to="https://github.com/illuminate/contracts/blob/{{version}}/View/View.php">Illuminate\\Contracts\\View\\View</router-link></td>\n<td><code>View::make()</code></td>\n</tr>\n</tbody></table>\n'},c825:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="broadcasting"></a></p>\n          <h1>\n            <a href="#broadcasting">\n              Broadcasting\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a><ul>\n<li><a href="#configuration">Configuration</a></li>\n<li><a href="#driver-prerequisites">Driver Prerequisites</a></li>\n</ul>\n</li>\n<li><a href="#concept-overview">Concept Overview</a><ul>\n<li><a href="#using-example-application">Using An Example Application</a></li>\n</ul>\n</li>\n<li><a href="#defining-broadcast-events">Defining Broadcast Events</a><ul>\n<li><a href="#broadcast-name">Broadcast Name</a></li>\n<li><a href="#broadcast-data">Broadcast Data</a></li>\n<li><a href="#broadcast-queue">Broadcast Queue</a></li>\n<li><a href="#broadcast-conditions">Broadcast Conditions</a></li>\n</ul>\n</li>\n<li><a href="#authorizing-channels">Authorizing Channels</a><ul>\n<li><a href="#defining-authorization-routes">Defining Authorization Routes</a></li>\n<li><a href="#defining-authorization-callbacks">Defining Authorization Callbacks</a></li>\n<li><a href="#defining-channel-classes">Defining Channel Classes</a></li>\n</ul>\n</li>\n<li><a href="#broadcasting-events">Broadcasting Events</a><ul>\n<li><a href="#only-to-others">Only To Others</a></li>\n</ul>\n</li>\n<li><a href="#receiving-broadcasts">Receiving Broadcasts</a><ul>\n<li><a href="#installing-laravel-echo">Installing Laravel Echo</a></li>\n<li><a href="#listening-for-events">Listening For Events</a></li>\n<li><a href="#leaving-a-channel">Leaving A Channel</a></li>\n<li><a href="#namespaces">Namespaces</a></li>\n</ul>\n</li>\n<li><a href="#presence-channels">Presence Channels</a><ul>\n<li><a href="#authorizing-presence-channels">Authorizing Presence Channels</a></li>\n<li><a href="#joining-presence-channels">Joining Presence Channels</a></li>\n<li><a href="#broadcasting-to-presence-channels">Broadcasting To Presence Channels</a></li>\n</ul>\n</li>\n<li><a href="#client-events">Client Events</a></li>\n<li><a href="#notifications">Notifications</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>In many modern web applications, WebSockets are used to implement realtime, live-updating user interfaces. When some data is updated on the server, a message is typically sent over a WebSocket connection to be handled by the client. This provides a more robust, efficient alternative to continually polling your application for changes.</p>\n<p>To assist you in building these types of applications, Laravel makes it easy to &quot;broadcast&quot; your <router-link to="/docs/{{version}}/events">events</router-link> over a WebSocket connection. Broadcasting your Laravel events allows you to share the same event names between your server-side code and your client-side JavaScript application.</p>\n<blockquote>\n<p>{tip} Before diving into event broadcasting, make sure you have read all of the documentation regarding Laravel <router-link to="/docs/{{version}}/events">events and listeners</router-link>.</p>\n</blockquote>\n<p><a name="configuration"></a></p>\n\n          <p><a name="configuration"></a></p>\n          <h3>\n            <a href="#configuration">\n              Configuration\n            </a>\n          </h3><p>All of your application&#39;s event broadcasting configuration is stored in the <code>config/broadcasting.php</code> configuration file. Laravel supports several broadcast drivers out of the box: <router-link to="https://pusher.com/channels">Pusher Channels</router-link>, <router-link to="/docs/{{version}}/redis">Redis</router-link>, and a <code>log</code> driver for local development and debugging. Additionally, a <code>null</code> driver is included which allows you to totally disable broadcasting. A configuration example is included for each of these drivers in the <code>config/broadcasting.php</code> configuration file.</p>\n\n          <p><a name="broadcast-service-provider"></a></p>\n          <h4>\n            <a href="#broadcast-service-provider">\n              Broadcast Service Provider\n            </a>\n          </h4><p>Before broadcasting any events, you will first need to register the <code>App\\Providers\\BroadcastServiceProvider</code>. In fresh Laravel applications, you only need to uncomment this provider in the <code>providers</code> array of your <code>config/app.php</code> configuration file. This provider will allow you to register the broadcast authorization routes and callbacks.</p>\n\n          <p><a name="csrf-token"></a></p>\n          <h4>\n            <a href="#csrf-token">\n              CSRF Token\n            </a>\n          </h4><p><a href="#installing-laravel-echo">Laravel Echo</a> will need access to the current session&#39;s CSRF token. You should verify that your application&#39;s <code>head</code> HTML element defines a <code>meta</code> tag containing the CSRF token:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">&lt;meta <span class="hljs-attribute">name</span>=<span class="hljs-string">"csrf-token"</span> <span class="hljs-attribute">content</span>=<span class="hljs-string">"{{ csrf_token() }}"</span>&gt;</code></pre>\n  <p><a name="driver-prerequisites"></a></p>\n\n          <p><a name="driver-prerequisites"></a></p>\n          <h3>\n            <a href="#driver-prerequisites">\n              Driver Prerequisites\n            </a>\n          </h3>\n          <p><a name="pusher-channels"></a></p>\n          <h4>\n            <a href="#pusher-channels">\n              Pusher Channels\n            </a>\n          </h4><p>If you are broadcasting your events over <router-link to="https://pusher.com/channels">Pusher Channels</router-link>, you should install the Pusher Channels PHP SDK using the Composer package manager:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">composer</span> <span class="hljs-meta">require</span> <span class="hljs-keyword">pusher/pusher-php-server </span><span class="hljs-string">"~4.0"</span></code></pre>\n  <p>Next, you should configure your Channels credentials in the <code>config/broadcasting.php</code> configuration file. An example Channels configuration is already included in this file, allowing you to quickly specify your Channels key, secret, and application ID. The <code>config/broadcasting.php</code> file&#39;s <code>pusher</code> configuration also allows you to specify additional <code>options</code> that are supported by Channels, such as the cluster:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'options\'</span> =&gt; [\n    <span class="hljs-string">\'cluster\'</span> =&gt; <span class="hljs-string">\'eu\'</span>,\n    <span class="hljs-string">\'useTLS\'</span> =&gt; <span class="hljs-keyword">true</span>\n],</code></pre>\n  <p>When using Channels and <a href="#installing-laravel-echo">Laravel Echo</a>, you should specify <code>pusher</code> as your desired broadcaster when instantiating the Echo instance in your <code>resources/js/bootstrap.js</code> file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">import</span> Echo <span class="hljs-keyword">from</span> <span class="hljs-string">"laravel-echo"</span>;\n\n<span class="hljs-built_in">window</span>.Pusher = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'pusher-js\'</span>);\n\n<span class="hljs-built_in">window</span>.Echo = <span class="hljs-keyword">new</span> Echo({\n    broadcaster: <span class="hljs-string">\'pusher\'</span>,\n    key: <span class="hljs-string">\'your-pusher-channels-key\'</span>\n});</code></pre>\n  \n          <p><a name="redis"></a></p>\n          <h4>\n            <a href="#redis">\n              Redis\n            </a>\n          </h4><p>If you are using the Redis broadcaster, you should either install the phpredis PHP extension via PECL or install the Predis library via Composer:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">composer</span> <span class="hljs-meta">require</span> predis/predis</code></pre>\n  <p>The Redis broadcaster will broadcast messages using Redis&#39; pub / sub feature; however, you will need to pair this with a WebSocket server that can receive the messages from Redis and broadcast them to your WebSocket channels.</p>\n<p>When the Redis broadcaster publishes an event, it will be published on the event&#39;s specified channel names and the payload will be a JSON encoded string containing the event name, a <code>data</code> payload, and the user that generated the event&#39;s socket ID (if applicable).</p>\n\n          <p><a name="socket-io"></a></p>\n          <h4>\n            <a href="#socket-io">\n              Socket.IO\n            </a>\n          </h4><p>If you are going to pair the Redis broadcaster with a Socket.IO server, you will need to include the Socket.IO JavaScript client library in your application. You may install it via the NPM package manager:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">npm <span class="hljs-keyword">install</span> <span class="hljs-comment">--save socket.io-client</span></code></pre>\n  <p>Next, you will need to instantiate Echo with the <code>socket.io</code> connector and a <code>host</code>.</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">import</span> Echo <span class="hljs-keyword">from</span> <span class="hljs-string">"laravel-echo"</span>\n\n<span class="hljs-built_in">window</span>.io = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'socket.io-client\'</span>);\n\n<span class="hljs-built_in">window</span>.Echo = <span class="hljs-keyword">new</span> Echo({\n    broadcaster: <span class="hljs-string">\'socket.io\'</span>,\n    host: <span class="hljs-built_in">window</span>.location.hostname + <span class="hljs-string">\':6001\'</span>\n});</code></pre>\n  <p>Finally, you will need to run a compatible Socket.IO server. Laravel does not include a Socket.IO server implementation; however, a community driven Socket.IO server is currently maintained at the <router-link to="https://github.com/tlaverdure/laravel-echo-server">tlaverdure/laravel-echo-server</router-link> GitHub repository.</p>\n\n          <p><a name="queue-prerequisites"></a></p>\n          <h4>\n            <a href="#queue-prerequisites">\n              Queue Prerequisites\n            </a>\n          </h4><p>Before broadcasting events, you will also need to configure and run a <router-link to="/docs/{{version}}/queues">queue listener</router-link>. All event broadcasting is done via queued jobs so that the response time of your application is not seriously affected.</p>\n<p><a name="concept-overview"></a></p>\n\n          <p><a name="concept-overview"></a></p>\n          <h2>\n            <a href="#concept-overview">\n              Concept Overview\n            </a>\n          </h2><p>Laravel&#39;s event broadcasting allows you to broadcast your server-side Laravel events to your client-side JavaScript application using a driver-based approach to WebSockets. Currently, Laravel ships with <router-link to="https://pusher.com/channels">Pusher Channels</router-link> and Redis drivers. The events may be easily consumed on the client-side using the <a href="#installing-laravel-echo">Laravel Echo</a> Javascript package.</p>\n<p>Events are broadcast over &quot;channels&quot;, which may be specified as public or private. Any visitor to your application may subscribe to a public channel without any authentication or authorization; however, in order to subscribe to a private channel, a user must be authenticated and authorized to listen on that channel.</p>\n<p><a name="using-example-application"></a></p>\n\n          <p><a name="using-an-example-application"></a></p>\n          <h3>\n            <a href="#using-an-example-application">\n              Using An Example Application\n            </a>\n          </h3><p>Before diving into each component of event broadcasting, let&#39;s take a high level overview using an e-commerce store as an example. We won&#39;t discuss the details of configuring <router-link to="https://pusher.com/channels">Pusher Channels</router-link> or <a href="#installing-laravel-echo">Laravel Echo</a> since that will be discussed in detail in other sections of this documentation.</p>\n<p>In our application, let&#39;s assume we have a page that allows users to view the shipping status for their orders. Let&#39;s also assume that a <code>ShippingStatusUpdated</code> event is fired when a shipping status update is processed by the application:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">event(<span class="hljs-name">new</span> ShippingStatusUpdated($update))<span class="hljs-comment">;</span></code></pre>\n  \n          <p><a name="the-code-shouldbroadcast-code-interface"></a></p>\n          <h4>\n            <a href="#the-code-shouldbroadcast-code-interface">\n              The <code>ShouldBroadcast</code> Interface\n            </a>\n          </h4><p>When a user is viewing one of their orders, we don&#39;t want them to have to refresh the page to view status updates. Instead, we want to broadcast the updates to the application as they are created. So, we need to mark the <code>ShippingStatusUpdated</code> event with the <code>ShouldBroadcast</code> interface. This will instruct Laravel to broadcast the event when it is fired:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Events</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Broadcasting</span>\\<span class="hljs-title">Channel</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Broadcasting</span>\\<span class="hljs-title">InteractsWithSockets</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Broadcasting</span>\\<span class="hljs-title">PresenceChannel</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Broadcasting</span>\\<span class="hljs-title">PrivateChannel</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">Broadcasting</span>\\<span class="hljs-title">ShouldBroadcast</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Queue</span>\\<span class="hljs-title">SerializesModels</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShippingStatusUpdated</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ShouldBroadcast</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Information about the shipping status update.\n     *\n     * <span class="hljs-doctag">@var</span> string\n     */</span>\n    <span class="hljs-keyword">public</span> $update;\n}</span></code></pre>\n  <p>The <code>ShouldBroadcast</code> interface requires our event to define a <code>broadcastOn</code> method. This method is responsible for returning the channels that the event should broadcast on. An empty stub of this method is already defined on generated event classes, so we only need to fill in its details. We only want the creator of the order to be able to view status updates, so we will broadcast the event on a private channel that is tied to the order:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the channels the event should broadcast on.\n *\n * <span class="hljs-doctag">@return</span> \\Illuminate\\Broadcasting\\PrivateChannel\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">broadcastOn</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PrivateChannel(<span class="hljs-string">\'order.\'</span>.<span class="hljs-keyword">$this</span>-&gt;update-&gt;order_id);\n}</code></pre>\n  \n          <p><a name="authorizing-channels"></a></p>\n          <h4>\n            <a href="#authorizing-channels">\n              Authorizing Channels\n            </a>\n          </h4><p>Remember, users must be authorized to listen on private channels. We may define our channel authorization rules in the <code>routes/channels.php</code> file. In this example, we need to verify that any user attempting to listen on the private <code>order.1</code> channel is actually the creator of the order:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Broadcast::channel(<span class="hljs-string">\'order.{orderId}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($user, $orderId)</span> </span>{\n    <span class="hljs-keyword">return</span> $user-&gt;id === Order::findOrNew($orderId)-&gt;user_id;\n});</code></pre>\n  <p>The <code>channel</code> method accepts two arguments: the name of the channel and a callback which returns <code>true</code> or <code>false</code> indicating whether the user is authorized to listen on the channel.</p>\n<p>All authorization callbacks receive the currently authenticated user as their first argument and any additional wildcard parameters as their subsequent arguments. In this example, we are using the <code>{orderId}</code> placeholder to indicate that the &quot;ID&quot; portion of the channel name is a wildcard.</p>\n\n          <p><a name="listening-for-event-broadcasts"></a></p>\n          <h4>\n            <a href="#listening-for-event-broadcasts">\n              Listening For Event Broadcasts\n            </a>\n          </h4><p>Next, all that remains is to listen for the event in our JavaScript application. We can do this using Laravel Echo. First, we&#39;ll use the <code>private</code> method to subscribe to the private channel. Then, we may use the <code>listen</code> method to listen for the <code>ShippingStatusUpdated</code> event. By default, all of the event&#39;s public properties will be included on the broadcast event:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Echo.private(`<span class="hljs-meta">order</span>.${orderId}`)\n    .<span class="hljs-meta">list</span><span class="hljs-meta">en(</span><span class="hljs-string">\'ShippingStatusUpdated\'</span>, (e) =&gt; {\n        console<span class="hljs-meta">.log(</span>e.<span class="hljs-meta">update</span>);\n    });</code></pre>\n  <p><a name="defining-broadcast-events"></a></p>\n\n          <p><a name="defining-broadcast-events"></a></p>\n          <h2>\n            <a href="#defining-broadcast-events">\n              Defining Broadcast Events\n            </a>\n          </h2><p>To inform Laravel that a given event should be broadcast, implement the <code>Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast</code> interface on the event class. This interface is already imported into all event classes generated by the framework so you may easily add it to any of your events.</p>\n<p>The <code>ShouldBroadcast</code> interface requires you to implement a single method: <code>broadcastOn</code>. The <code>broadcastOn</code> method should return a channel or array of channels that the event should broadcast on. The channels should be instances of <code>Channel</code>, <code>PrivateChannel</code>, or <code>PresenceChannel</code>. Instances of <code>Channel</code> represent public channels that any user may subscribe to, while <code>PrivateChannels</code> and <code>PresenceChannels</code> represent private channels that require <a href="#authorizing-channels">channel authorization</a>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Events</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Broadcasting</span>\\<span class="hljs-title">Channel</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Broadcasting</span>\\<span class="hljs-title">InteractsWithSockets</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Broadcasting</span>\\<span class="hljs-title">PresenceChannel</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Broadcasting</span>\\<span class="hljs-title">PrivateChannel</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">Broadcasting</span>\\<span class="hljs-title">ShouldBroadcast</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Queue</span>\\<span class="hljs-title">SerializesModels</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServerCreated</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ShouldBroadcast</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">SerializesModels</span>;\n\n    <span class="hljs-keyword">public</span> $user;\n\n    <span class="hljs-comment">/**\n     * Create a new event instance.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(User $user)</span>\n    </span>{\n        <span class="hljs-keyword">$this</span>-&gt;user = $user;\n    }\n\n    <span class="hljs-comment">/**\n     * Get the channels the event should broadcast on.\n     *\n     * <span class="hljs-doctag">@return</span> Channel|array\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">broadcastOn</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PrivateChannel(<span class="hljs-string">\'user.\'</span>.<span class="hljs-keyword">$this</span>-&gt;user-&gt;id);\n    }\n}</span></code></pre>\n  <p>Then, you only need to <router-link to="/docs/{{version}}/events">fire the event</router-link> as you normally would. Once the event has been fired, a <router-link to="/docs/{{version}}/queues">queued job</router-link> will automatically broadcast the event over your specified broadcast driver.</p>\n<p><a name="broadcast-name"></a></p>\n\n          <p><a name="broadcast-name"></a></p>\n          <h3>\n            <a href="#broadcast-name">\n              Broadcast Name\n            </a>\n          </h3><p>By default, Laravel will broadcast the event using the event&#39;s class name. However, you may customize the broadcast name by defining a <code>broadcastAs</code> method on the event:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * The event\'s broadcast name.\n *\n * <span class="hljs-doctag">@return</span> string\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">broadcastAs</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-string">\'server.created\'</span>;\n}</code></pre>\n  <p>If you customize the broadcast name using the <code>broadcastAs</code> method, you should make sure to register your listener with a leading <code>.</code> character. This will instruct Echo to not prepend the application&#39;s namespace to the event:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">.listen(<span class="hljs-string">\'.server.created\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(e)</span> </span>{\n    ....\n});</code></pre>\n  <p><a name="broadcast-data"></a></p>\n\n          <p><a name="broadcast-data"></a></p>\n          <h3>\n            <a href="#broadcast-data">\n              Broadcast Data\n            </a>\n          </h3><p>When an event is broadcast, all of its <code>public</code> properties are automatically serialized and broadcast as the event&#39;s payload, allowing you to access any of its public data from your JavaScript application. So, for example, if your event has a single public <code>$user</code> property that contains an Eloquent model, the event&#39;s broadcast payload would be:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">{\n    <span class="hljs-attr">"user"</span>: {\n        <span class="hljs-attr">"id"</span>: <span class="hljs-number">1</span>,\n        <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Patrick Stewart"</span>\n        ...\n    }\n}</code></pre>\n  <p>However, if you wish to have more fine-grained control over your broadcast payload, you may add a <code>broadcastWith</code> method to your event. This method should return the array of data that you wish to broadcast as the event payload:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the data to broadcast.\n *\n * <span class="hljs-doctag">@return</span> array\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">broadcastWith</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> [<span class="hljs-string">\'id\'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;user-&gt;id];\n}</code></pre>\n  <p><a name="broadcast-queue"></a></p>\n\n          <p><a name="broadcast-queue"></a></p>\n          <h3>\n            <a href="#broadcast-queue">\n              Broadcast Queue\n            </a>\n          </h3><p>By default, each broadcast event is placed on the default queue for the default queue connection specified in your <code>queue.php</code> configuration file. You may customize the queue used by the broadcaster by defining a <code>broadcastQueue</code> property on your event class. This property should specify the name of the queue you wish to use when broadcasting:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * The name of the queue on which to place the event.\n *\n * <span class="hljs-doctag">@var</span> string\n */</span>\n<span class="hljs-keyword">public</span> $broadcastQueue = <span class="hljs-string">\'your-queue-name\'</span>;</code></pre>\n  <p>If you want to broadcast your event using the <code>sync</code> queue instead of the default queue driver, you can implement the <code>ShouldBroadcastNow</code> interface instead of <code>ShouldBroadcast</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">Broadcasting</span>\\<span class="hljs-title">ShouldBroadcastNow</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShippingStatusUpdated</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ShouldBroadcastNow</span>\n</span>{\n    <span class="hljs-comment">//</span>\n}</span></code></pre>\n  <p><a name="broadcast-conditions"></a></p>\n\n          <p><a name="broadcast-conditions"></a></p>\n          <h3>\n            <a href="#broadcast-conditions">\n              Broadcast Conditions\n            </a>\n          </h3><p>Sometimes you want to broadcast your event only if a given condition is true. You may define these conditions by adding a <code>broadcastWhen</code> method to your event class:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Determine if this event should broadcast.\n *\n * <span class="hljs-doctag">@return</span> bool\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">broadcastWhen</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;value &gt; <span class="hljs-number">100</span>;\n}</code></pre>\n  <p><a name="authorizing-channels"></a></p>\n\n          <p><a name="authorizing-channels"></a></p>\n          <h2>\n            <a href="#authorizing-channels">\n              Authorizing Channels\n            </a>\n          </h2><p>Private channels require you to authorize that the currently authenticated user can actually listen on the channel. This is accomplished by making an HTTP request to your Laravel application with the channel name and allowing your application to determine if the user can listen on that channel. When using <a href="#installing-laravel-echo">Laravel Echo</a>, the HTTP request to authorize subscriptions to private channels will be made automatically; however, you do need to define the proper routes to respond to these requests.</p>\n<p><a name="defining-authorization-routes"></a></p>\n\n          <p><a name="defining-authorization-routes"></a></p>\n          <h3>\n            <a href="#defining-authorization-routes">\n              Defining Authorization Routes\n            </a>\n          </h3><p>Thankfully, Laravel makes it easy to define the routes to respond to channel authorization requests. In the <code>BroadcastServiceProvider</code> included with your Laravel application, you will see a call to the <code>Broadcast::routes</code> method. This method will register the <code>/broadcasting/auth</code> route to handle authorization requests:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Broadcast::routes();</code></pre>\n  <p>The <code>Broadcast::routes</code> method will automatically place its routes within the <code>web</code> middleware group; however, you may pass an array of route attributes to the method if you would like to customize the assigned attributes:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Broadcast::routes(<span class="hljs-variable">$attributes</span>);</code></pre>\n  \n          <p><a name="customizing-the-authorization-endpoint"></a></p>\n          <h4>\n            <a href="#customizing-the-authorization-endpoint">\n              Customizing The Authorization Endpoint\n            </a>\n          </h4><p>By default, Echo will use the <code>/broadcasting/auth</code> endpoint to authorize channel access. However, you may specify your own authorization endpoint by passing the <code>authEndpoint</code> configuration option to your Echo instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">window.<span class="hljs-keyword">Echo</span> = <span class="hljs-keyword">new</span> <span class="hljs-keyword">Echo</span>({\n    broadcaster: <span class="hljs-string">\'pusher\'</span>,\n    key: <span class="hljs-string">\'your-pusher-channels-key\'</span>,\n    authEndpoint: <span class="hljs-string">\'/custom/endpoint/auth\'</span>\n});</code></pre>\n  <p><a name="defining-authorization-callbacks"></a></p>\n\n          <p><a name="defining-authorization-callbacks"></a></p>\n          <h3>\n            <a href="#defining-authorization-callbacks">\n              Defining Authorization Callbacks\n            </a>\n          </h3><p>Next, we need to define the logic that will actually perform the channel authorization. This is done in the <code>routes/channels.php</code> file that is included with your application. In this file, you may use the <code>Broadcast::channel</code> method to register channel authorization callbacks:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Broadcast::channel(<span class="hljs-string">\'order.{orderId}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($user, $orderId)</span> </span>{\n    <span class="hljs-keyword">return</span> $user-&gt;id === Order::findOrNew($orderId)-&gt;user_id;\n});</code></pre>\n  <p>The <code>channel</code> method accepts two arguments: the name of the channel and a callback which returns <code>true</code> or <code>false</code> indicating whether the user is authorized to listen on the channel.</p>\n<p>All authorization callbacks receive the currently authenticated user as their first argument and any additional wildcard parameters as their subsequent arguments. In this example, we are using the <code>{orderId}</code> placeholder to indicate that the &quot;ID&quot; portion of the channel name is a wildcard.</p>\n\n          <p><a name="authorization-callback-model-binding"></a></p>\n          <h4>\n            <a href="#authorization-callback-model-binding">\n              Authorization Callback Model Binding\n            </a>\n          </h4><p>Just like HTTP routes, channel routes may also take advantage of implicit and explicit <router-link to="/docs/{{version}}/routing#route-model-binding">route model binding</router-link>. For example, instead of receiving the string or numeric order ID, you may request an actual <code>Order</code> model instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Order</span>;\n\nBroadcast::channel(<span class="hljs-string">\'order.{order}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($user, Order $order)</span> </span>{\n    <span class="hljs-keyword">return</span> $user-&gt;id === $order-&gt;user_id;\n});</code></pre>\n  \n          <p><a name="authorization-callback-authentication"></a></p>\n          <h4>\n            <a href="#authorization-callback-authentication">\n              Authorization Callback Authentication\n            </a>\n          </h4><p>Private and presence broadcast channels authenticate the current user via your application&#39;s default authentication guard. If the user is not authenticated, channel authorization is automatically denied and the authorization callback is never executed. However, you may assign multiple, custom guards that should authenticate the incoming request if necessary:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Broadcast::channel(<span class="hljs-string">\'channel\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">// ...</span>\n}, [<span class="hljs-string">\'guards\'</span> =&gt; [<span class="hljs-string">\'web\'</span>, <span class="hljs-string">\'admin\'</span>]]);</code></pre>\n  <p><a name="defining-channel-classes"></a></p>\n\n          <p><a name="defining-channel-classes"></a></p>\n          <h3>\n            <a href="#defining-channel-classes">\n              Defining Channel Classes\n            </a>\n          </h3><p>If your application is consuming many different channels, your <code>routes/channels.php</code> file could become bulky. So, instead of using Closures to authorize channels, you may use channel classes. To generate a channel class, use the <code>make:channel</code> Artisan command. This command will place a new channel class in the <code>App/Broadcasting</code> directory.</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">make</span><span class="hljs-selector-pseudo">:channel</span> <span class="hljs-selector-tag">OrderChannel</span></code></pre>\n  <p>Next, register your channel in your <code>routes/channels.php</code> file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">use App\\Broadcasting\\OrderChannel;\n\nBroadcast::channel(<span class="hljs-string">\'order.{order}\'</span>, OrderChannel::<span class="hljs-class"><span class="hljs-keyword">class</span>);</span></code></pre>\n  <p>Finally, you may place the authorization logic for your channel in the channel class&#39; <code>join</code> method. This <code>join</code> method will house the same logic you would have typically placed in your channel authorization Closure. You may also take advantage of channel model binding:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Broadcasting</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Order</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderChannel</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Create a new channel instance.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-comment">//</span>\n    }\n\n    <span class="hljs-comment">/**\n     * Authenticate the user\'s access to the channel.\n     *\n     * <span class="hljs-doctag">@param</span>  \\App\\User  $user\n     * <span class="hljs-doctag">@param</span>  \\App\\Order  $order\n     * <span class="hljs-doctag">@return</span> array|bool\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">join</span><span class="hljs-params">(User $user, Order $order)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> $user-&gt;id === $order-&gt;user_id;\n    }\n}</span></code></pre>\n  <blockquote>\n<p>{tip} Like many other classes in Laravel, channel classes will automatically be resolved by the <router-link to="/docs/{{version}}/container">service container</router-link>. So, you may type-hint any dependencies required by your channel in its constructor.</p>\n</blockquote>\n<p><a name="broadcasting-events"></a></p>\n\n          <p><a name="broadcasting-events"></a></p>\n          <h2>\n            <a href="#broadcasting-events">\n              Broadcasting Events\n            </a>\n          </h2><p>Once you have defined an event and marked it with the <code>ShouldBroadcast</code> interface, you only need to fire the event using the <code>event</code> function. The event dispatcher will notice that the event is marked with the <code>ShouldBroadcast</code> interface and will queue the event for broadcasting:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">event(<span class="hljs-name">new</span> ShippingStatusUpdated($update))<span class="hljs-comment">;</span></code></pre>\n  <p><a name="only-to-others"></a></p>\n\n          <p><a name="only-to-others"></a></p>\n          <h3>\n            <a href="#only-to-others">\n              Only To Others\n            </a>\n          </h3><p>When building an application that utilizes event broadcasting, you may substitute the <code>event</code> function with the <code>broadcast</code> function. Like the <code>event</code> function, the <code>broadcast</code> function dispatches the event to your server-side listeners:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">broadcast(<span class="hljs-name">new</span> ShippingStatusUpdated($update))<span class="hljs-comment">;</span></code></pre>\n  <p>However, the <code>broadcast</code> function also exposes the <code>toOthers</code> method which allows you to exclude the current user from the broadcast&#39;s recipients:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">broadcast<span class="hljs-function"><span class="hljs-params">(<span class="hljs-keyword">new</span> ShippingStatusUpdated($update))</span>-&gt;</span>toOthers();</code></pre>\n  <p>To better understand when you may want to use the <code>toOthers</code> method, let&#39;s imagine a task list application where a user may create a new task by entering a task name. To create a task, your application might make a request to a <code>/task</code> end-point which broadcasts the task&#39;s creation and returns a JSON representation of the new task. When your JavaScript application receives the response from the end-point, it might directly insert the new task into its task list like so:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">axios.post(<span class="hljs-string">\'/task\'</span>, task)\n    .<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">(response)</span> =&gt;</span> {\n        <span class="hljs-keyword">this</span>.tasks.push(response.data);\n    });</code></pre>\n  <p>However, remember that we also broadcast the task&#39;s creation. If your JavaScript application is listening for this event in order to add tasks to the task list, you will have duplicate tasks in your list: one from the end-point and one from the broadcast. You may solve this by using the <code>toOthers</code> method to instruct the broadcaster to not broadcast the event to the current user.</p>\n<blockquote>\n<p>{note} Your event must use the <code>Illuminate\\Broadcasting\\InteractsWithSockets</code> trait in order to call the <code>toOthers</code> method.</p>\n</blockquote>\n\n          <p><a name="configuration"></a></p>\n          <h4>\n            <a href="#configuration">\n              Configuration\n            </a>\n          </h4><p>When you initialize a Laravel Echo instance, a socket ID is assigned to the connection. If you are using <router-link to="https://vuejs.org">Vue</router-link> and <router-link to="https://github.com/mzabriskie/axios">Axios</router-link>, the socket ID will automatically be attached to every outgoing request as a <code>X-Socket-ID</code> header. Then, when you call the <code>toOthers</code> method, Laravel will extract the socket ID from the header and instruct the broadcaster to not broadcast to any connections with that socket ID.</p>\n<p>If you are not using Vue and Axios, you will need to manually configure your JavaScript application to send the <code>X-Socket-ID</code> header. You may retrieve the socket ID using the <code>Echo.socketId</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">var socketId = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Echo</span>.</span></span>socket<span class="hljs-constructor">Id()</span>;</code></pre>\n  <p><a name="receiving-broadcasts"></a></p>\n\n          <p><a name="receiving-broadcasts"></a></p>\n          <h2>\n            <a href="#receiving-broadcasts">\n              Receiving Broadcasts\n            </a>\n          </h2><p><a name="installing-laravel-echo"></a></p>\n\n          <p><a name="installing-laravel-echo"></a></p>\n          <h3>\n            <a href="#installing-laravel-echo">\n              Installing Laravel Echo\n            </a>\n          </h3><p>Laravel Echo is a JavaScript library that makes it painless to subscribe to channels and listen for events broadcast by Laravel. You may install Echo via the NPM package manager. In this example, we will also install the <code>pusher-js</code> package since we will be using the Pusher Channels broadcaster:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">npm <span class="hljs-keyword">install</span> <span class="hljs-comment">--save laravel-echo pusher-js</span></code></pre>\n  <p>Once Echo is installed, you are ready to create a fresh Echo instance in your application&#39;s JavaScript. A great place to do this is at the bottom of the <code>resources/js/bootstrap.js</code> file that is included with the Laravel framework:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">import</span> Echo <span class="hljs-keyword">from</span> <span class="hljs-string">"laravel-echo"</span>\n\n<span class="hljs-built_in">window</span>.Echo = <span class="hljs-keyword">new</span> Echo({\n    broadcaster: <span class="hljs-string">\'pusher\'</span>,\n    key: <span class="hljs-string">\'your-pusher-channels-key\'</span>\n});</code></pre>\n  <p>When creating an Echo instance that uses the <code>pusher</code> connector, you may also specify a <code>cluster</code> as well as whether the connection must be made over TLS (by default, when <code>forceTLS</code> is <code>false</code>, a non-TLS connection will be made if the page was loaded over HTTP, or as a fallback if a TLS connection fails):</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">window</span>.Echo = <span class="hljs-built_in">new</span> Echo({\n    broadcaster: <span class="hljs-string">\'pusher\'</span>,\n    key: <span class="hljs-string">\'your-pusher-channels-key\'</span>,\n    <span class="hljs-keyword">cluster</span>: <span class="hljs-string">\'eu\'</span>,\n    forceTLS: <span class="hljs-keyword">true</span>\n});</code></pre>\n  \n          <p><a name="using-an-existing-client-instance"></a></p>\n          <h4>\n            <a href="#using-an-existing-client-instance">\n              Using An Existing Client Instance\n            </a>\n          </h4><p>If you already have a Pusher Channels or Socket.io client instance that you would like Echo to utilize, you may pass it to Echo via the <code>client</code> configuration option:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">const</span> client = <span class="hljs-keyword">require</span>(<span class="hljs-string">\'pusher-js\'</span>);\n\nwindow.<span class="hljs-keyword">Echo</span> = <span class="hljs-keyword">new</span> <span class="hljs-keyword">Echo</span>({\n    broadcaster: <span class="hljs-string">\'pusher\'</span>,\n    key: <span class="hljs-string">\'your-pusher-channels-key\'</span>,\n    client: client\n});</code></pre>\n  <p><a name="listening-for-events"></a></p>\n\n          <p><a name="listening-for-events"></a></p>\n          <h3>\n            <a href="#listening-for-events">\n              Listening For Events\n            </a>\n          </h3><p>Once you have installed and instantiated Echo, you are ready to start listening for event broadcasts. First, use the <code>channel</code> method to retrieve an instance of a channel, then call the <code>listen</code> method to listen for a specified event:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Echo.channel(<span class="hljs-string">\'orders\'</span>)\n    .listen(<span class="hljs-string">\'OrderShipped\'</span>, <span class="hljs-function"><span class="hljs-params">(e)</span> =&gt;</span> {\n        <span class="hljs-built_in">console</span>.log(e.order.name);\n    });</code></pre>\n  <p>If you would like to listen for events on a private channel, use the <code>private</code> method instead. You may continue to chain calls to the <code>listen</code> method to listen for multiple events on a single channel:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Echo.private(<span class="hljs-string">\'orders\'</span>)\n    .<span class="hljs-meta">list</span><span class="hljs-meta">en(</span>...)\n    .<span class="hljs-meta">list</span><span class="hljs-meta">en(</span>...)\n    .<span class="hljs-meta">list</span><span class="hljs-meta">en(</span>...);</code></pre>\n  <p><a name="leaving-a-channel"></a></p>\n\n          <p><a name="leaving-a-channel"></a></p>\n          <h3>\n            <a href="#leaving-a-channel">\n              Leaving A Channel\n            </a>\n          </h3><p>To leave a channel, you may call the <code>leaveChannel</code> method on your Echo instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Echo</span>.</span></span>leave<span class="hljs-constructor">Channel(\'<span class="hljs-params">orders</span>\')</span>;</code></pre>\n  <p>If you would like to leave a channel and also its associated private and presence channels, you may call the <code>leave</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">Echo</span><span class="hljs-selector-class">.leave</span>(<span class="hljs-string">\'orders\'</span>);</code></pre>\n  <p><a name="namespaces"></a></p>\n\n          <p><a name="namespaces"></a></p>\n          <h3>\n            <a href="#namespaces">\n              Namespaces\n            </a>\n          </h3><p>You may have noticed in the examples above that we did not specify the full namespace for the event classes. This is because Echo will automatically assume the events are located in the <code>App\\Events</code> namespace. However, you may configure the root namespace when you instantiate Echo by passing a <code>namespace</code> configuration option:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-built_in">window</span>.Echo = <span class="hljs-keyword">new</span> Echo({\n    broadcaster: <span class="hljs-string">\'pusher\'</span>,\n    key: <span class="hljs-string">\'your-pusher-channels-key\'</span>,\n    <span class="hljs-keyword">namespace</span>: <span class="hljs-string">\'App.Other.Namespace\'</span>\n});</code></pre>\n  <p>Alternatively, you may prefix event classes with a <code>.</code> when subscribing to them using Echo. This will allow you to always specify the fully-qualified class name:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">Echo</span><span class="hljs-selector-class">.channel</span>(<span class="hljs-string">\'orders\'</span>)\n    <span class="hljs-selector-class">.listen</span>(<span class="hljs-string">\'.Namespace\\\\Event\\\\Class\'</span>, (e) =&gt; {\n        <span class="hljs-comment">//</span>\n    });</code></pre>\n  <p><a name="presence-channels"></a></p>\n\n          <p><a name="presence-channels"></a></p>\n          <h2>\n            <a href="#presence-channels">\n              Presence Channels\n            </a>\n          </h2><p>Presence channels build on the security of private channels while exposing the additional feature of awareness of who is subscribed to the channel. This makes it easy to build powerful, collaborative application features such as notifying users when another user is viewing the same page.</p>\n<p><a name="authorizing-presence-channels"></a></p>\n\n          <p><a name="authorizing-presence-channels"></a></p>\n          <h3>\n            <a href="#authorizing-presence-channels">\n              Authorizing Presence Channels\n            </a>\n          </h3><p>All presence channels are also private channels; therefore, users must be <a href="#authorizing-channels">authorized to access them</a>. However, when defining authorization callbacks for presence channels, you will not return <code>true</code> if the user is authorized to join the channel. Instead, you should return an array of data about the user.</p>\n<p>The data returned by the authorization callback will be made available to the presence channel event listeners in your JavaScript application. If the user is not authorized to join the presence channel, you should return <code>false</code> or <code>null</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Broadcast::channel(<span class="hljs-string">\'chat.{roomId}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($user, $roomId)</span> </span>{\n    <span class="hljs-keyword">if</span> ($user-&gt;canJoinRoom($roomId)) {\n        <span class="hljs-keyword">return</span> [<span class="hljs-string">\'id\'</span> =&gt; $user-&gt;id, <span class="hljs-string">\'name\'</span> =&gt; $user-&gt;name];\n    }\n});</code></pre>\n  <p><a name="joining-presence-channels"></a></p>\n\n          <p><a name="joining-presence-channels"></a></p>\n          <h3>\n            <a href="#joining-presence-channels">\n              Joining Presence Channels\n            </a>\n          </h3><p>To join a presence channel, you may use Echo&#39;s <code>join</code> method. The <code>join</code> method will return a <code>PresenceChannel</code> implementation which, along with exposing the <code>listen</code> method, allows you to subscribe to the <code>here</code>, <code>joining</code>, and <code>leaving</code> events.</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Echo.join(`<span class="javascript">chat.${roomId}</span>`)\n    .here(<span class="hljs-function"><span class="hljs-params">(users)</span> =&gt;</span> {\n        <span class="hljs-regexp">//</span>\n    })\n    .joining(<span class="hljs-function"><span class="hljs-params">(user)</span> =&gt;</span> {\n        <span class="hljs-built_in">console</span>.log(user.name);\n    })\n    .leaving(<span class="hljs-function"><span class="hljs-params">(user)</span> =&gt;</span> {\n        <span class="hljs-built_in">console</span>.log(user.name);\n    });</code></pre>\n  <p>The <code>here</code> callback will be executed immediately once the channel is joined successfully, and will receive an array containing the user information for all of the other users currently subscribed to the channel. The <code>joining</code> method will be executed when a new user joins a channel, while the <code>leaving</code> method will be executed when a user leaves the channel.</p>\n<p><a name="broadcasting-to-presence-channels"></a></p>\n\n          <p><a name="broadcasting-to-presence-channels"></a></p>\n          <h3>\n            <a href="#broadcasting-to-presence-channels">\n              Broadcasting To Presence Channels\n            </a>\n          </h3><p>Presence channels may receive events just like public or private channels. Using the example of a chatroom, we may want to broadcast <code>NewMessage</code> events to the room&#39;s presence channel. To do so, we&#39;ll return an instance of <code>PresenceChannel</code> from the event&#39;s <code>broadcastOn</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the channels the event should broadcast on.\n *\n * <span class="hljs-doctag">@return</span> Channel|array\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">broadcastOn</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PresenceChannel(<span class="hljs-string">\'room.\'</span>.<span class="hljs-keyword">$this</span>-&gt;message-&gt;room_id);\n}</code></pre>\n  <p>Like public or private events, presence channel events may be broadcast using the <code>broadcast</code> function. As with other events, you may use the <code>toOthers</code> method to exclude the current user from receiving the broadcast:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">broadcast(<span class="hljs-keyword">new</span> <span class="hljs-constructor">NewMessage($<span class="hljs-params">message</span>)</span>);\n\nbroadcast(<span class="hljs-keyword">new</span> <span class="hljs-constructor">NewMessage($<span class="hljs-params">message</span>)</span>)-&gt;<span class="hljs-keyword">to</span><span class="hljs-constructor">Others()</span>;</code></pre>\n  <p>You may listen for the join event via Echo&#39;s <code>listen</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">Echo</span><span class="hljs-selector-class">.join</span>(<span class="hljs-built_in">`chat.${roomId}`</span>)\n    <span class="hljs-selector-class">.here</span>(...)\n    <span class="hljs-selector-class">.joining</span>(...)\n    <span class="hljs-selector-class">.leaving</span>(...)\n    <span class="hljs-selector-class">.listen</span>(<span class="hljs-string">\'NewMessage\'</span>, (e) =&gt; {\n        <span class="hljs-comment">//</span>\n    });</code></pre>\n  <p><a name="client-events"></a></p>\n\n          <p><a name="client-events"></a></p>\n          <h2>\n            <a href="#client-events">\n              Client Events\n            </a>\n          </h2><blockquote>\n<p>{tip} When using <router-link to="https://pusher.com/channels">Pusher Channels</router-link>, you must enable the &quot;Client Events&quot; option in the &quot;App Settings&quot; section of your <router-link to="https://dashboard.pusher.com/">application dashboard</router-link> in order to send client events.</p>\n</blockquote>\n<p>Sometimes you may wish to broadcast an event to other connected clients without hitting your Laravel application at all. This can be particularly useful for things like &quot;typing&quot; notifications, where you want to alert users of your application that another user is typing a message on a given screen.</p>\n<p>To broadcast client events, you may use Echo&#39;s <code>whisper</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-built_in">Echo</span>.<span class="hljs-keyword">private</span>(<span class="hljs-string">\'chat\'</span>)\n    .whisper(<span class="hljs-string">\'typing\'</span>, {\n        <span class="hljs-built_in">name</span>: this.user.<span class="hljs-built_in">name</span>\n    });</code></pre>\n  <p>To listen for client events, you may use the <code>listenForWhisper</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Echo.private(<span class="hljs-string">\'chat\'</span>)\n    .listenForWhisper(<span class="hljs-string">\'typing\'</span>, <span class="hljs-function"><span class="hljs-params">(e)</span> =&gt;</span> {\n        <span class="hljs-built_in">console</span>.log(e.name);\n    });</code></pre>\n  <p><a name="notifications"></a></p>\n\n          <p><a name="notifications"></a></p>\n          <h2>\n            <a href="#notifications">\n              Notifications\n            </a>\n          </h2><p>By pairing event broadcasting with <router-link to="/docs/{{version}}/notifications">notifications</router-link>, your JavaScript application may receive new notifications as they occur without needing to refresh the page. First, be sure to read over the documentation on using <router-link to="/docs/{{version}}/notifications#broadcast-notifications">the broadcast notification channel</router-link>.</p>\n<p>Once you have configured a notification to use the broadcast channel, you may listen for the broadcast events using Echo&#39;s <code>notification</code> method. Remember, the channel name should match the class name of the entity receiving the notifications:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Echo.private(<span class="hljs-string">`App.User.<span class="hljs-subst">${userId}</span>`</span>)\n    .notification(<span class="hljs-function">(<span class="hljs-params">notification</span>) =&gt;</span> {\n        <span class="hljs-built_in">console</span>.log(notification.type);\n    });</code></pre>\n  <p>In this example, all notifications sent to <code>App\\User</code> instances via the <code>broadcast</code> channel would be received by the callback. A channel authorization callback for the <code>App.User.{id}</code> channel is included in the default <code>BroadcastServiceProvider</code> that ships with the Laravel framework.</p>\n'},c889:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="eloquent-mutators"></a></p>\n          <h1>\n            <a href="#eloquent-mutators">\n              Eloquent: Mutators\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#accessors-and-mutators">Accessors &amp; Mutators</a><ul>\n<li><a href="#defining-an-accessor">Defining An Accessor</a></li>\n<li><a href="#defining-a-mutator">Defining A Mutator</a></li>\n</ul>\n</li>\n<li><a href="#date-mutators">Date Mutators</a></li>\n<li><a href="#attribute-casting">Attribute Casting</a><ul>\n<li><a href="#array-and-json-casting">Array &amp; JSON Casting</a></li>\n<li><a href="#date-casting">Date Casting</a></li>\n</ul>\n</li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Accessors and mutators allow you to format Eloquent attribute values when you retrieve or set them on model instances. For example, you may want to use the <router-link to="/docs/{{version}}/encryption">Laravel encrypter</router-link> to encrypt a value while it is stored in the database, and then automatically decrypt the attribute when you access it on an Eloquent model.</p>\n<p>In addition to custom accessors and mutators, Eloquent can also automatically cast date fields to <router-link to="https://github.com/briannesbitt/Carbon">Carbon</router-link> instances or even <a href="#attribute-casting">cast text fields to JSON</a>.</p>\n<p><a name="accessors-and-mutators"></a></p>\n\n          <p><a name="accessors-amp-mutators"></a></p>\n          <h2>\n            <a href="#accessors-amp-mutators">\n              Accessors &amp; Mutators\n            </a>\n          </h2><p><a name="defining-an-accessor"></a></p>\n\n          <p><a name="defining-an-accessor"></a></p>\n          <h3>\n            <a href="#defining-an-accessor">\n              Defining An Accessor\n            </a>\n          </h3><p>To define an accessor, create a <code>getFooAttribute</code> method on your model where <code>Foo</code> is the &quot;studly&quot; cased name of the column you wish to access. In this example, we&#39;ll define an accessor for the <code>first_name</code> attribute. The accessor will automatically be called by Eloquent when attempting to retrieve the value of the <code>first_name</code> attribute:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2d1ZXN0cycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ2ZpcnN0X25hbWUnKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5jbGFzcyBHdWVzdCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsnZmlyc3RfbmFtZSddO1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB1c2VyJ3MgZmlyc3QgbmFtZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgc3RyaW5nICAkdmFsdWVcbiAgICAgKiBAcmV0dXJuIHN0cmluZ1xuICAgICAqL1xuICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRGaXJzdE5hbWVBdHRyaWJ1dGUoJHZhbHVlKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHVjZmlyc3QoJHZhbHVlKTtcbiAgICB9XG59XG5cbiRndWVzdCA9IEd1ZXN0OjpjcmVhdGUoWydmaXJzdF9uYW1lJyA9PiAncGF1bCddKTtcblxuJGd1ZXN0LT5maXJzdF9uYW1lO1xuIiwiaGFzaCI6ImVsb3F1ZW50LW11dGF0b3JzLWRlZmluaW5nLWFuLWFjY2Vzc29yIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Get the user\'s first name.\n     *\n     * <span class="hljs-doctag">@param</span>  string  $value\n     * <span class="hljs-doctag">@return</span> string\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFirstNameAttribute</span><span class="hljs-params">($value)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> ucfirst($value);\n    }\n}</span></code></pre>\n  <p>As you can see, the original value of the column is passed to the accessor, allowing you to manipulate and return the value. To access the value of the accessor, you may access the <code>first_name</code> attribute on a model instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span> = App\\User::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-variable">$firstName</span> = <span class="hljs-variable">$user</span>-&gt;first_name;</code></pre>\n  <p>You may also use accessors to return new, computed values from existing attributes:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2d1ZXN0cycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ2ZpcnN0X25hbWUnKTtcbiAgICAkdGFibGUtPnN0cmluZygnbGFzdF9uYW1lJyk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuY2xhc3MgR3Vlc3QgZXh0ZW5kcyBJbGx1bWluYXRlXFxEYXRhYmFzZVxcRWxvcXVlbnRcXE1vZGVsIFxue1xuICAgIHByb3RlY3RlZCAkZmlsbGFibGUgPSBbJ2ZpcnN0X25hbWUnLCAnbGFzdF9uYW1lJ107XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHVzZXIncyBmaXJzdCBuYW1lLlxuICAgICAqXG4gICAgICogQHBhcmFtICBzdHJpbmcgICR2YWx1ZVxuICAgICAqIEByZXR1cm4gc3RyaW5nXG4gICAgICovXG4gICAgcHVibGljIGZ1bmN0aW9uIGdldEZ1bGxOYW1lQXR0cmlidXRlKCR2YWx1ZSlcbiAgICB7XG4gICAgICAgIHJldHVybiBcInskdGhpcy0+Zmlyc3RfbmFtZX0geyR0aGlzLT5sYXN0X25hbWV9XCI7XG4gICAgfVxufVxuXG4kZ3Vlc3QgPSBHdWVzdDo6Y3JlYXRlKFsnZmlyc3RfbmFtZScgPT4gJ1BhdWwnLCAnbGFzdF9uYW1lJyA9PiAnUG9jaW90J10pO1xuXG4kZ3Vlc3QtPmZ1bGxfbmFtZTtcbiIsImhhc2giOiJlbG9xdWVudC1tdXRhdG9ycy1kZWZpbmluZy1hbi1hY2Nlc3NvciJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the user\'s full name.\n *\n * <span class="hljs-doctag">@return</span> string\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFullNameAttribute</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-string">"{$this-&gt;first_name} {$this-&gt;last_name}"</span>;\n}</code></pre>\n  <p><a name="defining-a-mutator"></a></p>\n\n          <p><a name="defining-a-mutator"></a></p>\n          <h3>\n            <a href="#defining-a-mutator">\n              Defining A Mutator\n            </a>\n          </h3><p>To define a mutator, define a <code>setFooAttribute</code> method on your model where <code>Foo</code> is the &quot;studly&quot; cased name of the column you wish to access. So, again, let&#39;s define a mutator for the <code>first_name</code> attribute. This mutator will be automatically called when we attempt to set the value of the <code>first_name</code> attribute on the model:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2d1ZXN0cycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ2ZpcnN0X25hbWUnKTtcbiAgICAkdGFibGUtPnN0cmluZygnbGFzdF9uYW1lJyk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuY2xhc3MgR3Vlc3QgZXh0ZW5kcyBJbGx1bWluYXRlXFxEYXRhYmFzZVxcRWxvcXVlbnRcXE1vZGVsIFxue1xuICAgIHByb3RlY3RlZCAkZmlsbGFibGUgPSBbJ2ZpcnN0X25hbWUnLCAnbGFzdF9uYW1lJ107XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHVzZXIncyBmaXJzdCBuYW1lLlxuICAgICAqXG4gICAgICogQHBhcmFtICBzdHJpbmcgICR2YWx1ZVxuICAgICAqIEByZXR1cm4gdm9pZFxuICAgICAqL1xuICAgIHB1YmxpYyBmdW5jdGlvbiBzZXRGaXJzdE5hbWVBdHRyaWJ1dGUoJHZhbHVlKVxuICAgIHtcbiAgICAgICAgJHRoaXMtPmF0dHJpYnV0ZXNbJ2ZpcnN0X25hbWUnXSA9IHN0cnRvbG93ZXIoJHZhbHVlKTtcbiAgICB9XG59XG5cbiRndWVzdCA9IEd1ZXN0OjpjcmVhdGUoWydmaXJzdF9uYW1lJyA9PiAnUGF1bCcsICdsYXN0X25hbWUnID0+ICdQb2Npb3QnXSk7XG5cbiRndWVzdC0+Zmlyc3RfbmFtZSA9ICdNYXJjZWwnO1xuXG4kZ3Vlc3QtPmZpcnN0X25hbWU7XG4iLCJoYXNoIjoiZWxvcXVlbnQtbXV0YXRvcnMtZGVmaW5pbmctYS1tdXRhdG9yIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Set the user\'s first name.\n     *\n     * <span class="hljs-doctag">@param</span>  string  $value\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setFirstNameAttribute</span><span class="hljs-params">($value)</span>\n    </span>{\n        <span class="hljs-keyword">$this</span>-&gt;attributes[<span class="hljs-string">\'first_name\'</span>] = strtolower($value);\n    }\n}</span></code></pre>\n  <p>The mutator will receive the value that is being set on the attribute, allowing you to manipulate the value and set the manipulated value on the Eloquent model&#39;s internal <code>$attributes</code> property. So, for example, if we attempt to set the <code>first_name</code> attribute to <code>Sally</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span> = App\\User::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-variable">$user</span>-&gt;first_name = <span class="hljs-string">\'Sally\'</span>;</code></pre>\n  <p>In this example, the <code>setFirstNameAttribute</code> function will be called with the value <code>Sally</code>. The mutator will then apply the <code>strtolower</code> function to the name and set its resulting value in the internal <code>$attributes</code> array.</p>\n<p><a name="date-mutators"></a></p>\n\n          <p><a name="date-mutators"></a></p>\n          <h2>\n            <a href="#date-mutators">\n              Date Mutators\n            </a>\n          </h2><p>By default, Eloquent will convert the <code>created_at</code> and <code>updated_at</code> columns to instances of <router-link to="https://github.com/briannesbitt/Carbon">Carbon</router-link>, which extends the PHP <code>DateTime</code> class and provides an assortment of helpful methods. You may add additional date attributes by setting the <code>$dates</code> property of your model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">&lt;?php\n\nnamespace <span class="hljs-type">App</span>;\n\nuse <span class="hljs-type">Illuminate</span>\\<span class="hljs-type">Database</span>\\<span class="hljs-type">Eloquent</span>\\<span class="hljs-type">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span>\n{\n    <span class="hljs-comment">/**\n     * The attributes that should be mutated to dates.\n     *\n     * @var array\n     */</span>\n    <span class="hljs-keyword">protected</span> $dates = [\n        <span class="hljs-symbol">\'seen_a</span>t\',\n    ];\n}</code></pre>\n  <p>When a column is considered a date, you may set its value to a UNIX timestamp, date string (<code>Y-m-d</code>), date-time string, or a <code>DateTime</code> / <code>Carbon</code> instance. The date&#39;s value will be correctly converted and stored in your database:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span> = App\\User::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-variable">$user</span>-&gt;deleted_at = now();\n\n<span class="hljs-variable">$user</span>-&gt;save();</code></pre>\n  <p>As noted above, when retrieving attributes that are listed in your <code>$dates</code> property, they will automatically be cast to <router-link to="https://github.com/briannesbitt/Carbon">Carbon</router-link> instances, allowing you to use any of Carbon&#39;s methods on your attributes:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span> = App\\User::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-keyword">return</span> <span class="hljs-variable">$user</span>-&gt;deleted_at-&gt;getTimestamp();</code></pre>\n  \n          <p><a name="date-formats"></a></p>\n          <h4>\n            <a href="#date-formats">\n              Date Formats\n            </a>\n          </h4><p>By default, timestamps are formatted as <code>&#39;Y-m-d H:i:s&#39;</code>. If you need to customize the timestamp format, set the <code>$dateFormat</code> property on your model. This property determines how date attributes are stored in the database, as well as their format when the model is serialized to an array or JSON:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flight</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The storage format of the model\'s date columns.\n     *\n     * <span class="hljs-doctag">@var</span> string\n     */</span>\n    <span class="hljs-keyword">protected</span> $dateFormat = <span class="hljs-string">\'U\'</span>;\n}</span></code></pre>\n  <p><a name="attribute-casting"></a></p>\n\n          <p><a name="attribute-casting"></a></p>\n          <h2>\n            <a href="#attribute-casting">\n              Attribute Casting\n            </a>\n          </h2><p>The <code>$casts</code> property on your model provides a convenient method of converting attributes to common data types. The <code>$casts</code> property should be an array where the key is the name of the attribute being cast and the value is the type you wish to cast the column to. The supported cast types are: <code>integer</code>, <code>real</code>, <code>float</code>, <code>double</code>, <code>decimal:&lt;digits&gt;</code>, <code>string</code>, <code>boolean</code>, <code>object</code>, <code>array</code>, <code>collection</code>, <code>date</code>, <code>datetime</code>, and <code>timestamp</code>. When casting to <code>decimal</code>, you must define the number of digits (<code>decimal:2</code>).</p>\n<p>To demonstrate attribute casting, let&#39;s cast the <code>is_admin</code> attribute, which is stored in our database as an integer (<code>0</code> or <code>1</code>) to a boolean value:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2d1ZXN0cycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ2ZpcnN0X25hbWUnKTtcbiAgICAkdGFibGUtPmJvb2xlYW4oJ2lzX2FkbWluJyktPmRlZmF1bHQodHJ1ZSk7XG4gICAgJHRhYmxlLT50aW1lc3RhbXBzKCk7XG59KTtcblxuY2xhc3MgR3Vlc3QgZXh0ZW5kcyBJbGx1bWluYXRlXFxEYXRhYmFzZVxcRWxvcXVlbnRcXE1vZGVsIFxue1xuICAgIHByb3RlY3RlZCAkZmlsbGFibGUgPSBbJ2ZpcnN0X25hbWUnXTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIGNhc3QgdG8gbmF0aXZlIHR5cGVzLlxuICAgICAqXG4gICAgICogQHZhciBhcnJheVxuICAgICAqL1xuICAgIHByb3RlY3RlZCAkY2FzdHMgPSBbXG4gICAgICAgICdpc19hZG1pbicgPT4gJ2Jvb2xlYW4nLFxuICAgIF07XG59XG5cbkd1ZXN0OjpjcmVhdGUoWydmaXJzdF9uYW1lJyA9PiAnTWFyY2VsJ10pO1xuXG4kZ3Vlc3QgPSBHdWVzdDo6ZmluZCgxKTtcblxuJGd1ZXN0LT5pc19hZG1pbjtcbiIsImhhc2giOiJlbG9xdWVudC1tdXRhdG9ycy1hdHRyaWJ1dGUtY2FzdGluZyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The attributes that should be cast to native types.\n     *\n     * <span class="hljs-doctag">@var</span> array\n     */</span>\n    <span class="hljs-keyword">protected</span> $casts = [\n        <span class="hljs-string">\'is_admin\'</span> =&gt; <span class="hljs-string">\'boolean\'</span>,\n    ];\n}</span></code></pre>\n  <p>Now the <code>is_admin</code> attribute will always be cast to a boolean when you access it, even if the underlying value is stored in the database as an integer:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user = App\\User::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-keyword">if</span> ($user-&gt;is_admin) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p><a name="array-and-json-casting"></a></p>\n\n          <p><a name="array-amp-json-casting"></a></p>\n          <h3>\n            <a href="#array-amp-json-casting">\n              Array &amp; JSON Casting\n            </a>\n          </h3><p>The <code>array</code> cast type is particularly useful when working with columns that are stored as serialized JSON. For example, if your database has a <code>JSON</code> or <code>TEXT</code> field type that contains serialized JSON, adding the <code>array</code> cast to that attribute will automatically deserialize the attribute to a PHP array when you access it on your Eloquent model:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6Ii8vIENyZWF0ZSBvdXIgbW9kZWwgZGF0YWJhc2Ugc2NoZW1hc1xuU2NoZW1hOjpjcmVhdGUoJ2d1ZXN0cycsIGZ1bmN0aW9uICgkdGFibGUpIHtcbiAgICAkdGFibGUtPmJpZ0luY3JlbWVudHMoJ2lkJyk7XG4gICAgJHRhYmxlLT5zdHJpbmcoJ2ZpcnN0X25hbWUnKTtcbiAgICAkdGFibGUtPnRleHQoJ29wdGlvbnMnKS0+bnVsbGFibGUoKTtcbiAgICAkdGFibGUtPnRpbWVzdGFtcHMoKTtcbn0pO1xuXG5jbGFzcyBHdWVzdCBleHRlbmRzIElsbHVtaW5hdGVcXERhdGFiYXNlXFxFbG9xdWVudFxcTW9kZWwgXG57XG4gICAgcHJvdGVjdGVkICRmaWxsYWJsZSA9IFsnZmlyc3RfbmFtZSddO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYmUgY2FzdCB0byBuYXRpdmUgdHlwZXMuXG4gICAgICpcbiAgICAgKiBAdmFyIGFycmF5XG4gICAgICovXG4gICAgcHJvdGVjdGVkICRjYXN0cyA9IFtcbiAgICAgICAgJ29wdGlvbnMnID0+ICdhcnJheScsXG4gICAgXTtcbn1cblxuR3Vlc3Q6OmNyZWF0ZShbJ2ZpcnN0X25hbWUnID0+ICdNYXJjZWwnXSk7XG5cbiRndWVzdCA9IEd1ZXN0OjpmaW5kKDEpO1xuXG4kb3B0aW9ucyA9ICRndWVzdC0+b3B0aW9ucztcblxuJG9wdGlvbnNbJ2tleSddID0gJ3ZhbHVlJztcblxuJGd1ZXN0LT5vcHRpb25zID0gJG9wdGlvbnM7XG5cbiRndWVzdC0+c2F2ZSgpO1xuXG4kZ3Vlc3QtPm9wdGlvbnM7XG4iLCJoYXNoIjoiZWxvcXVlbnQtbXV0YXRvcnMtYXJyYXktYW5kYW1wOy1qc29uLWNhc3RpbmcifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Database</span>\\<span class="hljs-title">Eloquent</span>\\<span class="hljs-title">Model</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The attributes that should be cast to native types.\n     *\n     * <span class="hljs-doctag">@var</span> array\n     */</span>\n    <span class="hljs-keyword">protected</span> $casts = [\n        <span class="hljs-string">\'options\'</span> =&gt; <span class="hljs-string">\'array\'</span>,\n    ];\n}</span></code></pre>\n  <p>Once the cast is defined, you may access the <code>options</code> attribute and it will automatically be deserialized from JSON into a PHP array. When you set the value of the <code>options</code> attribute, the given array will automatically be serialized back into JSON for storage:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span> = App\\User::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-variable">$options</span> = <span class="hljs-variable">$user</span>-&gt;options;\n\n<span class="hljs-variable">$options</span>[<span class="hljs-string">\'key\'</span>] = <span class="hljs-string">\'value\'</span>;\n\n<span class="hljs-variable">$user</span>-&gt;options = <span class="hljs-variable">$options</span>;\n\n<span class="hljs-variable">$user</span>-&gt;save();</code></pre>\n  <p><a name="date-casting"></a></p>\n\n          <p><a name="date-casting"></a></p>\n          <h3>\n            <a href="#date-casting">\n              Date Casting\n            </a>\n          </h3><p>When using the <code>date</code> or <code>datetime</code> cast type, you may specify the date&#39;s format. This format will be used when the <router-link to="/docs/{{version}}/eloquent-serialization">model is serialized to an array or JSON</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">/**\n * The attributes that should be cast to native types.\n *\n * @var<span class="hljs-built_in"> array\n</span> */<span class="hljs-keyword">\nprotected</span> $casts = [\n    \'created_at\' =&gt; \'datetime:Y-m-d\',\n];</code></pre>\n  '},c909:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="error-handling"></a></p>\n          <h1>\n            <a href="#error-handling">\n              Error Handling\n            </a>\n          </h1><ul>\n<li><a href="#http-exceptions">HTTP Exceptions</a><ul>\n<li><a href="#custom-http-error-pages">Custom HTTP Error Pages</a></li>\n</ul>\n</li>\n</ul>\n<p><a name="http-exceptions"></a></p>\n\n          <p><a name="http-exceptions"></a></p>\n          <h2>\n            <a href="#http-exceptions">\n              HTTP Exceptions\n            </a>\n          </h2><p>Some exceptions describe HTTP error codes from the server. For example, this may be a &quot;page not found&quot; error (404), an &quot;unauthorized error&quot; (401) or even a developer generated 500 error. In order to generate such a response from anywhere in your application, you may use the <code>abort</code> helper:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoiY2xhc3MgVGlua2Vyd2VsbENvbnRyb2xsZXIge1xuXG4gIHB1YmxpYyBmdW5jdGlvbiBpbmRleCgpIHtcbiAgICBhYm9ydCg0MDQpO1xuXG4gICAgLy8gYWJvcnQoNDAzLCAnVW5hdXRob3JpemVkIGFjdGlvbi4nKTtcbiAgfVxuXG59Iiwidmlld0NvZGUiOiI8aHRtbD5cbiAgICA8Ym9keT5cbiAgICAgICAgPGgxPkhlbGxvLCB7eyAkbmFtZSB9fTwvaDE+XG4gICAgPC9ib2R5PlxuPC9odG1sPiIsImhhc2giOiJlcnJvcnMtaHR0cC1leGNlcHRpb25zIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">abort(<span class="hljs-number">404</span>)<span class="hljs-comment">;</span></code></pre>\n  <p>The <code>abort</code> helper will immediately raise an exception which will be rendered by the exception handler. Optionally, you may provide the response text:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">abort</span>(<span class="hljs-number">403</span>, <span class="hljs-symbol">\'Unauthorized</span> action.\');</code></pre>\n  <p><a name="custom-http-error-pages"></a></p>\n\n          <p><a name="custom-http-error-pages"></a></p>\n          <h3>\n            <a href="#custom-http-error-pages">\n              Custom HTTP Error Pages\n            </a>\n          </h3><p>Laravel makes it easy to display custom error pages for various HTTP status codes. For example, if you wish to customize the error page for 404 HTTP status codes, create a <code>resources/views/errors/404.blade.php</code>. This file will be served on all 404 errors generated by your application. The views within this directory should be named to match the HTTP status code they correspond to. The <code>HttpException</code> instance raised by the <code>abort</code> function will be passed to the view as an <code>$exception</code> variable:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span></span><span class="hljs-template-variable">{{ $exception-&gt;getMessage() }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></code></pre>\n  <p>You may publish Laravel&#39;s error page templates using the <code>vendor:publish</code> Artisan command. Once the templates have been published, you may customize them to your liking:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan vendor:publish <span class="hljs-attribute">--tag</span>=laravel-errors</code></pre>\n  '},cb29:function(s,e,a){"use strict";var n=a("53a7"),t=a.n(n);t.a},cbde:function(s,e,a){"use strict";a.d(e,"a",(function(){return h}));a("ac6a"),a("96cf");var n=a("3b8d"),t=a("d225"),l=a("b0b4"),o=a("bc3a"),p=a.n(o),c=a("3d20"),r=a.n(c),i=r.a.mixin({toast:!0,position:"top-end",showConfirmButton:!1,timer:3e3,timerProgressBar:!1}),h=function(){function s(){Object(t["a"])(this,s)}return Object(l["a"])(s,null,[{key:"loadGist",value:function(){var s=Object(n["a"])(regeneratorRuntime.mark((function s(e){var a,n,t,l,o;return regeneratorRuntime.wrap((function(s){while(1)switch(s.prev=s.next){case 0:return s.prev=0,s.next=3,p.a.get("https://api.github.com/gists/".concat(e));case 3:a=s.sent,n=a.data,t={},s.t0=regeneratorRuntime.keys(n.files);case 7:if((s.t1=s.t0()).done){s.next=15;break}return l=s.t1.value,s.next=11,p.a.get(n.files[l].raw_url);case 11:o=s.sent,t[l]={filename:l,content:o.data},s.next=7;break;case 15:return s.abrupt("return",{mode:"preload",cliCode:null,controllerCode:null,viewCode:null,files:t});case 18:return s.prev=18,s.t2=s["catch"](0),i.fire({icon:"error",title:"Something went wrong while loading the Gist. Make sure it is publicly accessible."}),s.abrupt("return",null);case 22:case"end":return s.stop()}}),s,null,[[0,18]])})));function e(e){return s.apply(this,arguments)}return e}()},{key:"load",value:function(){var s=Object(n["a"])(regeneratorRuntime.mark((function s(e){var a,n,t;return regeneratorRuntime.wrap((function(s){while(1)switch(s.prev=s.next){case 0:return a="https://api.tinkerwell.app/api/snippets",s.prev=1,s.next=4,p.a.get("".concat(a,"/").concat(e));case 4:return n=s.sent,t=n.data,s.abrupt("return",t);case 9:return s.prev=9,s.t0=s["catch"](1),i.fire({icon:"error",title:"Something went wrong while loading the snippet."}),s.abrupt("return",null);case 13:case"end":return s.stop()}}),s,null,[[1,9]])})));function e(e){return s.apply(this,arguments)}return e}()},{key:"delete",value:function(){var s=Object(n["a"])(regeneratorRuntime.mark((function s(e,a){var n,t,l;return regeneratorRuntime.wrap((function(s){while(1)switch(s.prev=s.next){case 0:return n="https://api.tinkerwell.app/api/snippets",s.prev=1,s.next=4,p.a.delete("".concat(n,"/").concat(e),{data:{deletePassword:a}});case 4:return t=s.sent,l=t.data,i.fire({icon:"success",title:"Your playground was deleted."}),s.abrupt("return",l);case 10:return s.prev=10,s.t0=s["catch"](1),i.fire({icon:"error",title:"Unable to delete your playground. Check the password."}),s.abrupt("return",null);case 14:case"end":return s.stop()}}),s,null,[[1,10]])})));function e(e,a){return s.apply(this,arguments)}return e}()},{key:"save",value:function(){var s=Object(n["a"])(regeneratorRuntime.mark((function s(e,a,n,t,l,o,c){var r,h,d;return regeneratorRuntime.wrap((function(s){while(1)switch(s.prev=s.next){case 0:return r="https://api.tinkerwell.app/api/snippets",s.prev=1,s.next=4,p.a.post(r,{deletePassword:e,mode:a,cliCode:n,controllerCode:t,viewCode:l,output:o,files:c});case 4:return h=s.sent,d=h.data,i.fire({icon:"success",title:"Your playground was saved."}),s.abrupt("return",d.hash);case 10:return s.prev=10,s.t0=s["catch"](1),i.fire({icon:"error",title:"Something went wrong while saving your playground."}),s.abrupt("return",null);case 14:case"end":return s.stop()}}),s,null,[[1,10]])})));function e(e,a,n,t,l,o,p){return s.apply(this,arguments)}return e}()},{key:"storeFiles",value:function(){var s=Object(n["a"])(regeneratorRuntime.mark((function s(e){var a,n,t,l,o,c=arguments;return regeneratorRuntime.wrap((function(s){while(1)switch(s.prev=s.next){case 0:return a=c.length>1&&void 0!==c[1]?c[1]:null,n=c.length>2&&void 0!==c[2]&&c[2],t="https://api.laravelplayground.com/api/files",a&&(t+="/".concat(a)),s.next=6,p.a.post(t,{files:e,prefill:n});case 6:return l=s.sent,o=l.data,s.abrupt("return",o);case 9:case"end":return s.stop()}}),s)})));function e(e){return s.apply(this,arguments)}return e}()},{key:"loadPrefill",value:function(){var s=Object(n["a"])(regeneratorRuntime.mark((function s(e){var a,n,t;return regeneratorRuntime.wrap((function(s){while(1)switch(s.prev=s.next){case 0:return a="https://api.laravelplayground.com/api/files",e&&(a+="/".concat(e)),s.next=4,p.a.get(a);case 4:return n=s.sent,t=n.data,s.abrupt("return",t);case 7:case"end":return s.stop()}}),s)})));function e(e){return s.apply(this,arguments)}return e}()}]),s}()},cdd6:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="laravel-envoy"></a></p>\n          <h1>\n            <a href="#laravel-envoy">\n              Laravel Envoy\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a><ul>\n<li><a href="#installation">Installation</a></li>\n</ul>\n</li>\n<li><a href="#writing-tasks">Writing Tasks</a><ul>\n<li><a href="#setup">Setup</a></li>\n<li><a href="#variables">Variables</a></li>\n<li><a href="#stories">Stories</a></li>\n<li><a href="#multiple-servers">Multiple Servers</a></li>\n</ul>\n</li>\n<li><a href="#running-tasks">Running Tasks</a><ul>\n<li><a href="#confirming-task-execution">Confirming Task Execution</a></li>\n</ul>\n</li>\n<li><a href="#notifications">Notifications</a><ul>\n<li><a href="#slack">Slack</a></li>\n<li><a href="#discord">Discord</a></li>\n</ul>\n</li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p><router-link to="https://github.com/laravel/envoy">Laravel Envoy</router-link> provides a clean, minimal syntax for defining common tasks you run on your remote servers. Using Blade style syntax, you can easily setup tasks for deployment, Artisan commands, and more. Currently, Envoy only supports the Mac and Linux operating systems.</p>\n<p><a name="installation"></a></p>\n\n          <p><a name="installation"></a></p>\n          <h3>\n            <a href="#installation">\n              Installation\n            </a>\n          </h3><p>First, install Envoy using the Composer <code>global require</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">composer</span> <span class="hljs-meta">global</span> <span class="hljs-meta">require</span> laravel/envoy</code></pre>\n  <p>Since global Composer libraries can sometimes cause package version conflicts, you may wish to consider using <code>cgr</code>, which is a drop-in replacement for the <code>composer global require</code> command. The <code>cgr</code> library&#39;s installation instructions can be <router-link to="https://github.com/consolidation-org/cgr">found on GitHub</router-link>.</p>\n<blockquote>\n<p>{note} Make sure to place the <code>~/.composer/vendor/bin</code> directory in your PATH so the <code>envoy</code> executable is found when running the <code>envoy</code> command in your terminal.</p>\n</blockquote>\n\n          <p><a name="updating-envoy"></a></p>\n          <h4>\n            <a href="#updating-envoy">\n              Updating Envoy\n            </a>\n          </h4><p>You may also use Composer to keep your Envoy installation up to date. Issuing the <code>composer global update</code> command will update all of your globally installed Composer packages:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">composer <span class="hljs-keyword">global</span> <span class="hljs-keyword">update</span></code></pre>\n  <p><a name="writing-tasks"></a></p>\n\n          <p><a name="writing-tasks"></a></p>\n          <h2>\n            <a href="#writing-tasks">\n              Writing Tasks\n            </a>\n          </h2><p>All of your Envoy tasks should be defined in an <code>Envoy.blade.php</code> file in the root of your project. Here&#39;s an example to get you started:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@servers</span>([<span class="hljs-string">\'web\'</span> =&gt; [<span class="hljs-string">\'user@192.168.1.1\'</span>]])\n\n<span class="hljs-variable">@task</span>(<span class="hljs-string">\'foo\'</span>, [<span class="hljs-string">\'on\'</span> =&gt; <span class="hljs-string">\'web\'</span>])\n    ls -la\n<span class="hljs-variable">@endtask</span></code></pre>\n  <p>As you can see, an array of <code>@servers</code> is defined at the top of the file, allowing you to reference these servers in the <code>on</code> option of your task declarations. Within your <code>@task</code> declarations, you should place the Bash code that should run on your server when the task is executed.</p>\n<p>You can force a script to run locally by specifying the server&#39;s IP address as <code>127.0.0.1</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-meta">@servers</span>([<span class="hljs-string">\'localhost\'</span> =&gt; <span class="hljs-string">\'127.0.0.1\'</span>])</code></pre>\n  <p><a name="setup"></a></p>\n\n          <p><a name="setup"></a></p>\n          <h3>\n            <a href="#setup">\n              Setup\n            </a>\n          </h3><p>Sometimes, you may need to execute some PHP code before executing your Envoy tasks. You may use the <code>@setup</code> directive to declare variables and do other general PHP work before any of your other tasks are executed:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">@setup</span>\n    $now = new DateTime()<span class="hljs-comment">;</span>\n\n    $environment = isset($env) ? $env : <span class="hljs-string">"testing"</span><span class="hljs-comment">;</span>\n<span class="hljs-symbol">@endsetup</span></code></pre>\n  <p>If you need to require other PHP files before your task is executed, you may use the <code>@include</code> directive at the top of your <code>Envoy.blade.php</code> file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@include</span>(<span class="hljs-string">\'vendor/autoload.php\'</span>)\n\n<span class="hljs-variable">@task</span>(<span class="hljs-string">\'foo\'</span>)\n    # ...\n<span class="hljs-variable">@endtask</span></code></pre>\n  <p>You may also import other Envoy files so their stories and tasks are added to yours. After they have been imported, you may execute the tasks in those files as if they were defined in your own. You should use the <code>@import</code> directive at the top of your <code>Envoy.blade.php</code> file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">@<span class="hljs-keyword">import</span>(\'<span class="hljs-keyword">package</span>/<span class="hljs-keyword">Envoy</span>.<span class="hljs-keyword">blade</span>.<span class="hljs-keyword">php</span>\')</code></pre>\n  <p><a name="variables"></a></p>\n\n          <p><a name="variables"></a></p>\n          <h3>\n            <a href="#variables">\n              Variables\n            </a>\n          </h3><p>If needed, you may pass option values into Envoy tasks using the command line:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">envoy <span class="hljs-builtin-name">run</span> deploy <span class="hljs-attribute">--branch</span>=master</code></pre>\n  <p>You may access the options in your tasks via Blade&#39;s &quot;echo&quot; syntax. You may also use <code>if</code> statements and loops within your tasks. For example, let&#39;s verify the presence of the <code>$branch</code> variable before executing the <code>git pull</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@servers</span>([<span class="hljs-string">\'web\'</span> =&gt; <span class="hljs-string">\'192.168.1.1\'</span>])\n\n<span class="hljs-variable">@task</span>(<span class="hljs-string">\'deploy\'</span>, [<span class="hljs-string">\'on\'</span> =&gt; <span class="hljs-string">\'web\'</span>])\n    cd site\n\n    <span class="hljs-variable">@if</span> ($branch)\n        git pull origin {{ $<span class="hljs-selector-tag">branch</span> }}\n    @<span class="hljs-selector-tag">endif</span>\n\n    <span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">migrate</span>\n@<span class="hljs-selector-tag">endtask</span></code></pre>\n  <p><a name="stories"></a></p>\n\n          <p><a name="stories"></a></p>\n          <h3>\n            <a href="#stories">\n              Stories\n            </a>\n          </h3><p>Stories group a set of tasks under a single, convenient name, allowing you to group small, focused tasks into large tasks. For instance, a <code>deploy</code> story may run the <code>git</code> and <code>composer</code> tasks by listing the task names within its definition:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@servers</span>([<span class="hljs-string">\'web\'</span> =&gt; <span class="hljs-string">\'192.168.1.1\'</span>])\n\n<span class="hljs-variable">@story</span>(<span class="hljs-string">\'deploy\'</span>)\n    git\n    composer\n<span class="hljs-variable">@endstory</span>\n\n<span class="hljs-variable">@task</span>(<span class="hljs-string">\'git\'</span>)\n    git pull origin master\n<span class="hljs-variable">@endtask</span>\n\n<span class="hljs-variable">@task</span>(<span class="hljs-string">\'composer\'</span>)\n    composer install\n<span class="hljs-variable">@endtask</span></code></pre>\n  <p>Once the story has been written, you may run it just like a typical task:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">envoy <span class="hljs-keyword">run</span><span class="bash"> deploy</span></code></pre>\n  <p><a name="multiple-servers"></a></p>\n\n          <p><a name="multiple-servers"></a></p>\n          <h3>\n            <a href="#multiple-servers">\n              Multiple Servers\n            </a>\n          </h3><p>Envoy allows you to easily run a task across multiple servers. First, add additional servers to your <code>@servers</code> declaration. Each server should be assigned a unique name. Once you have defined your additional servers, list each of the servers in the task&#39;s <code>on</code> array:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@servers</span>([<span class="hljs-string">\'web-1\'</span> =&gt; <span class="hljs-string">\'192.168.1.1\'</span>, <span class="hljs-string">\'web-2\'</span> =&gt; <span class="hljs-string">\'192.168.1.2\'</span>])\n\n<span class="hljs-variable">@task</span>(<span class="hljs-string">\'deploy\'</span>, [<span class="hljs-string">\'on\'</span> =&gt; [<span class="hljs-string">\'web-1\'</span>, <span class="hljs-string">\'web-2\'</span>]])\n    cd site\n    git pull origin {{ $<span class="hljs-selector-tag">branch</span> }}\n    <span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">migrate</span>\n@<span class="hljs-selector-tag">endtask</span></code></pre>\n  \n          <p><a name="parallel-execution"></a></p>\n          <h4>\n            <a href="#parallel-execution">\n              Parallel Execution\n            </a>\n          </h4><p>By default, tasks will be executed on each server serially. In other words, a task will finish running on the first server before proceeding to execute on the second server. If you would like to run a task across multiple servers in parallel, add the <code>parallel</code> option to your task declaration:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@servers</span>([<span class="hljs-string">\'web-1\'</span> =&gt; <span class="hljs-string">\'192.168.1.1\'</span>, <span class="hljs-string">\'web-2\'</span> =&gt; <span class="hljs-string">\'192.168.1.2\'</span>])\n\n<span class="hljs-variable">@task</span>(<span class="hljs-string">\'deploy\'</span>, [<span class="hljs-string">\'on\'</span> =&gt; [<span class="hljs-string">\'web-1\'</span>, <span class="hljs-string">\'web-2\'</span>], <span class="hljs-string">\'parallel\'</span> =&gt; true])\n    cd site\n    git pull origin {{ $<span class="hljs-selector-tag">branch</span> }}\n    <span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">migrate</span>\n@<span class="hljs-selector-tag">endtask</span></code></pre>\n  <p><a name="running-tasks"></a></p>\n\n          <p><a name="running-tasks"></a></p>\n          <h2>\n            <a href="#running-tasks">\n              Running Tasks\n            </a>\n          </h2><p>To run a task or story that is defined in your <code>Envoy.blade.php</code> file, execute Envoy&#39;s <code>run</code> command, passing the name of the task or story you would like to execute. Envoy will run the task and display the output from the servers as the task is running:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">envoy <span class="hljs-keyword">run</span><span class="bash"> deploy</span></code></pre>\n  <p><a name="confirming-task-execution"></a></p>\n\n          <p><a name="confirming-task-execution"></a></p>\n          <h3>\n            <a href="#confirming-task-execution">\n              Confirming Task Execution\n            </a>\n          </h3><p>If you would like to be prompted for confirmation before running a given task on your servers, you should add the <code>confirm</code> directive to your task declaration. This option is particularly useful for destructive operations:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-meta">@task</span>(<span class="hljs-string">\'deploy\'</span>, [<span class="hljs-string">\'on\'</span> =&gt; <span class="hljs-string">\'web\'</span>, <span class="hljs-string">\'confirm\'</span> =&gt; <span class="hljs-keyword">true</span>])\n    cd site\n    git pull origin {{ $branch }}\n    php artisan migrate\n<span class="hljs-meta">@endtask</span></code></pre>\n  <p><a name="notifications"></a></p>\n\n          <p><a name="notifications"></a></p>\n          <h2>\n            <a href="#notifications">\n              Notifications\n            </a>\n          </h2><p><a name="slack"></a></p>\n\n          <p><a name="slack"></a></p>\n          <h3>\n            <a href="#slack">\n              Slack\n            </a>\n          </h3><p>Envoy also supports sending notifications to <router-link to="https://slack.com">Slack</router-link> after each task is executed. The <code>@slack</code> directive accepts a Slack hook URL and a channel name. You may retrieve your webhook URL by creating an &quot;Incoming WebHooks&quot; integration in your Slack control panel. You should pass the entire webhook URL into the <code>@slack</code> directive:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@finished</span>\n    <span class="hljs-variable">@slack</span>(<span class="hljs-string">\'webhook-url\'</span>, <span class="hljs-string">\'#bots\'</span>)\n<span class="hljs-variable">@endfinished</span></code></pre>\n  <p>You may provide one of the following as the channel argument:</p>\n<div class="content-list" markdown="1">\n- To send the notification to a channel: `#channel`\n- To send the notification to a user: `@user`\n</div>\n\n<p>In addition you can also send Slack updates for specific tasks so you get the context of which task was run. You can do this by adding the <code>@slack</code> directive inside the <code>@task</code> directive:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-meta">@task</span>(<span class="hljs-string">\'deploy\'</span>, [<span class="hljs-string">\'on\'</span> =&gt; <span class="hljs-string">\'web\'</span>, <span class="hljs-string">\'confirm\'</span> =&gt; <span class="hljs-keyword">true</span>])\n    cd site\n    git pull origin {{ $branch }}\n    php artisan migrate\n\n    <span class="hljs-meta">@slack</span>(<span class="hljs-string">\'webhook-url\'</span>, <span class="hljs-string">\'#deployments\'</span>)\n<span class="hljs-meta">@endtask</span></code></pre>\n  <p><a name="discord"></a></p>\n\n          <p><a name="discord"></a></p>\n          <h3>\n            <a href="#discord">\n              Discord\n            </a>\n          </h3><p>Envoy also supports sending notifications to <router-link to="https://discord.com">Discord</router-link> after each task is executed. The <code>@discord</code> directive accepts a Discord hook URL and a message. You may retrieve your webhook URL by creating a &quot;Webhook&quot; in your Server Settings and choosing which channel the webhook should post to. You should pass the entire Webhook URL into the <code>@discord</code> directive:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">@finished</span>\n    <span class="hljs-variable">@discord</span>(<span class="hljs-string">\'discord-webhook-url\'</span>)\n<span class="hljs-variable">@endfinished</span></code></pre>\n  <p>In addition you can also send Discord updates for specific tasks so you get the context of which task was run. You can do this by adding the <code>@discord</code> directive inside the <code>@task</code> directive:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-meta">@task</span>(<span class="hljs-string">\'deploy\'</span>, [<span class="hljs-string">\'on\'</span> =&gt; <span class="hljs-string">\'web\'</span>, <span class="hljs-string">\'confirm\'</span> =&gt; <span class="hljs-keyword">true</span>])\n    cd site\n    git pull origin {{ $branch }}\n    php artisan migrate\n\n    <span class="hljs-meta">@discord</span>(<span class="hljs-string">\'discord-webhook-url\'</span>)\n<span class="hljs-meta">@endtask</span></code></pre>\n  '},cee2:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="release-notes"></a></p>\n          <h1>\n            <a href="#release-notes">\n              Release Notes\n            </a>\n          </h1><ul>\n<li><a href="#versioning-scheme">Versioning Scheme</a></li>\n<li><a href="#support-policy">Support Policy</a></li>\n<li><a href="#laravel-6">Laravel 6</a></li>\n</ul>\n<p><a name="versioning-scheme"></a></p>\n\n          <p><a name="versioning-scheme"></a></p>\n          <h2>\n            <a href="#versioning-scheme">\n              Versioning Scheme\n            </a>\n          </h2><p>Laravel and its other first-party packages follow <router-link to="https://semver.org">Semantic Versioning</router-link>. Major framework releases are released every six months (February and August), while minor and patch releases may be released as often as every week. Minor and patch releases should <strong>never</strong> contain breaking changes.</p>\n<p>When referencing the Laravel framework or its components from your application or package, you should always use a version constraint such as <code>^6.0</code>, since major releases of Laravel do include breaking changes. However, we strive to always ensure you may update to a new major release in one day or less.</p>\n<p><a name="support-policy"></a></p>\n\n          <p><a name="support-policy"></a></p>\n          <h2>\n            <a href="#support-policy">\n              Support Policy\n            </a>\n          </h2><p>For LTS releases, such as Laravel 6, bug fixes are provided for 2 years and security fixes are provided for 3 years. These releases provide the longest window of support and maintenance. For general releases, bug fixes are provided for 6 months and security fixes are provided for 1 year. For all additional libraries, including Lumen, only the latest release receives bug fixes. In addition, please review the database versions <router-link to="/docs/{{version}}/database#introduction">supported by Laravel</router-link>.</p>\n<table>\n<thead>\n<tr>\n<th>Version</th>\n<th>Release</th>\n<th>Bug Fixes Until</th>\n<th>Security Fixes Until</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>5.5 (LTS)</td>\n<td>August 30th, 2017</td>\n<td>August 30th, 2019</td>\n<td>August 30th, 2020</td>\n</tr>\n<tr>\n<td>5.6</td>\n<td>February 7th, 2018</td>\n<td>August 7th, 2018</td>\n<td>February 7th, 2019</td>\n</tr>\n<tr>\n<td>5.7</td>\n<td>September 4th, 2018</td>\n<td>March 4th, 2019</td>\n<td>September 4th, 2019</td>\n</tr>\n<tr>\n<td>5.8</td>\n<td>February 26th, 2019</td>\n<td>August 26th, 2019</td>\n<td>February 26th, 2020</td>\n</tr>\n<tr>\n<td>6 (LTS)</td>\n<td>September 3rd, 2019</td>\n<td>September 3rd, 2021</td>\n<td>September 3rd, 2022</td>\n</tr>\n</tbody></table>\n<p><a name="laravel-6"></a></p>\n\n          <p><a name="laravel-6"></a></p>\n          <h2>\n            <a href="#laravel-6">\n              Laravel 6\n            </a>\n          </h2><p>Laravel 6 (LTS) continues the improvements made in Laravel 5.8 by introducing semantic versioning, compatibility with <router-link to="https://vapor.laravel.com">Laravel Vapor</router-link>, improved authorization responses, job middleware, lazy collections, sub-query improvements, the extraction of frontend scaffolding to the <code>laravel/ui</code> Composer package, and a variety of other bug fixes and usability improvements.</p>\n\n          <p><a name="semantic-versioning"></a></p>\n          <h3>\n            <a href="#semantic-versioning">\n              Semantic Versioning\n            </a>\n          </h3><p>The Laravel framework (<code>laravel/framework</code>) package now follows the <router-link to="https://semver.org/">semantic versioning</router-link> standard. This makes the framework consistent with the other first-party Laravel packages which already followed this versioning standard. The Laravel release cycle will remain unchanged.</p>\n\n          <p><a name="laravel-vapor-compatibility"></a></p>\n          <h3>\n            <a href="#laravel-vapor-compatibility">\n              Laravel Vapor Compatibility\n            </a>\n          </h3><p><em>Laravel Vapor was built by <router-link to="https://github.com/taylorotwell">Taylor Otwell</router-link></em>.</p>\n<p>Laravel 6 provides compatibility with <router-link to="https://vapor.laravel.com">Laravel Vapor</router-link>, an auto-scaling serverless deployment platform for Laravel. Vapor abstracts the complexity of managing Laravel applications on AWS Lambda, as well as interfacing those applications with SQS queues, databases, Redis clusters, networks, CloudFront CDN, and more.</p>\n\n          <p><a name="improved-exceptions-via-ignition"></a></p>\n          <h3>\n            <a href="#improved-exceptions-via-ignition">\n              Improved Exceptions Via Ignition\n            </a>\n          </h3><p>Laravel 6 ships with <router-link to="https://github.com/facade/ignition">Ignition</router-link>, a new open source exception detail page created by Freek Van der Herten and Marcel Pociot. Ignition offers many benefits over previous releases, such as improved Blade error file and line number handling, runnable solutions for common problems, code editing, exception sharing, and an improved UX.</p>\n\n          <p><a name="improved-authorization-responses"></a></p>\n          <h3>\n            <a href="#improved-authorization-responses">\n              Improved Authorization Responses\n            </a>\n          </h3><p><em>Improved authorization responses were implemented by <router-link to="https://github.com/garygreen">Gary Green</router-link></em>.</p>\n<p>In previous releases of Laravel, it was difficult to retrieve and expose custom authorization messages to end users. This made it difficult to explain to end-users exactly why a particular request was denied. In Laravel 6, this is now much easier using authorization response messages and the new <code>Gate::inspect</code> method. For example, given the following policy method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Determine if the user can view the given flight.\n *\n * <span class="hljs-doctag">@param</span>  \\App\\User  $user\n * <span class="hljs-doctag">@param</span>  \\App\\Flight  $flight\n * <span class="hljs-doctag">@return</span> mixed\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">view</span><span class="hljs-params">(User $user, Flight $flight)</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;deny(<span class="hljs-string">\'Explanation of denial.\'</span>);\n}</code></pre>\n  <p>The authorization policy&#39;s response and message may be easily retrieved using the <code>Gate::inspect</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$response = Gate::inspect(<span class="hljs-string">\'view\'</span>, $flight);\n\n<span class="hljs-keyword">if</span> ($response-&gt;allowed()) {\n    <span class="hljs-comment">// User is authorized to view the flight...</span>\n}\n\n<span class="hljs-keyword">if</span> ($response-&gt;denied()) {\n    <span class="hljs-keyword">echo</span> $response-&gt;message();\n}</code></pre>\n  <p>In addition, these custom messages will automatically be returned to your frontend when using helper methods such as <code>$this-&gt;authorize</code> or <code>Gate::authorize</code> from your routes or controllers.</p>\n\n          <p><a name="job-middleware"></a></p>\n          <h3>\n            <a href="#job-middleware">\n              Job Middleware\n            </a>\n          </h3><p><em>Job middleware were implemented by <router-link to="https://github.com/taylorotwell">Taylor Otwell</router-link></em>.</p>\n<p>Job middleware allow you to wrap custom logic around the execution of queued jobs, reducing boilerplate in the jobs themselves. For example, in previous releases of Laravel, you may have wrapped the logic of a job&#39;s <code>handle</code> method within a rate-limited callback:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Execute the job.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span>\n</span>{\n    Redis::throttle(<span class="hljs-string">\'key\'</span>)-&gt;block(<span class="hljs-number">0</span>)-&gt;allow(<span class="hljs-number">1</span>)-&gt;every(<span class="hljs-number">5</span>)-&gt;then(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n        info(<span class="hljs-string">\'Lock obtained...\'</span>);\n\n        <span class="hljs-comment">// Handle job...</span>\n    }, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n        <span class="hljs-comment">// Could not obtain lock...</span>\n\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;release(<span class="hljs-number">5</span>);\n    });\n}</code></pre>\n  <p>In Laravel 6, this logic may be extracted into a job middleware, allowing you to keep your job&#39;s <code>handle</code> method free of any rate limiting responsibilities:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Jobs</span>\\<span class="hljs-title">Middleware</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Redis</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RateLimited</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Process the queued job.\n     *\n     * <span class="hljs-doctag">@param</span>  mixed  $job\n     * <span class="hljs-doctag">@param</span>  callable  $next\n     * <span class="hljs-doctag">@return</span> mixed\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">($job, $next)</span>\n    </span>{\n        Redis::throttle(<span class="hljs-string">\'key\'</span>)\n                -&gt;block(<span class="hljs-number">0</span>)-&gt;allow(<span class="hljs-number">1</span>)-&gt;every(<span class="hljs-number">5</span>)\n                -&gt;then(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> <span class="hljs-title">use</span> <span class="hljs-params">($job, $next)</span> </span>{\n                    <span class="hljs-comment">// Lock obtained...</span>\n\n                    $next($job);\n                }, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> <span class="hljs-title">use</span> <span class="hljs-params">($job)</span> </span>{\n                    <span class="hljs-comment">// Could not obtain lock...</span>\n\n                    $job-&gt;release(<span class="hljs-number">5</span>);\n                });\n    }\n}</span></code></pre>\n  <p>After creating middleware, they may be attached to a job by returning them from the job&#39;s <code>middleware</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Jobs</span>\\<span class="hljs-title">Middleware</span>\\<span class="hljs-title">RateLimited</span>;\n\n<span class="hljs-comment">/**\n * Get the middleware the job should pass through.\n *\n * <span class="hljs-doctag">@return</span> array\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">middleware</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> [<span class="hljs-keyword">new</span> RateLimited];\n}</code></pre>\n  \n          <p><a name="lazy-collections"></a></p>\n          <h3>\n            <a href="#lazy-collections">\n              Lazy Collections\n            </a>\n          </h3><p><em>Lazy collections were implemented by <router-link to="https://github.com/JosephSilber">Joseph Silber</router-link></em>.</p>\n<p>Many developers already enjoy Laravel&#39;s powerful <router-link to="https://laravel.com/docs/collections">Collection methods</router-link>. To supplement the already powerful <code>Collection</code> class, Laravel 6 introduces a <code>LazyCollection</code>, which leverages PHP&#39;s <router-link to="https://www.php.net/manual/en/language.generators.overview.php">generators</router-link> to allow you to work with very large datasets while keeping memory usage low.</p>\n<p>For example, imagine your application needs to process a multi-gigabyte log file while taking advantage of Laravel&#39;s collection methods to parse the logs. Instead of reading the entire file into memory at once, lazy collections may be used to keep only a small part of the file in memory at a given time:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">LogEntry</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">LazyCollection</span>;\n\nLazyCollection::make(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    $handle = fopen(<span class="hljs-string">\'log.txt\'</span>, <span class="hljs-string">\'r\'</span>);\n\n    <span class="hljs-keyword">while</span> (($line = fgets($handle)) !== <span class="hljs-keyword">false</span>) {\n        <span class="hljs-keyword">yield</span> $line;\n    }\n})\n-&gt;chunk(<span class="hljs-number">4</span>)\n-&gt;map(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($lines)</span> </span>{\n    <span class="hljs-keyword">return</span> LogEntry::fromLines($lines);\n})\n-&gt;each(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(LogEntry $logEntry)</span> </span>{\n    <span class="hljs-comment">// Process the log entry...</span>\n});</code></pre>\n  <p>Or, imagine you need to iterate through 10,000 Eloquent models. When using traditional Laravel collections, all 10,000 Eloquent models must be loaded into memory at the same time:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = App\\User::all()-&gt;filter(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($user)</span> </span>{\n    <span class="hljs-keyword">return</span> $user-&gt;id &gt; <span class="hljs-number">500</span>;\n});</code></pre>\n  <p>However, beginning in Laravel 6, the query builder&#39;s <code>cursor</code> method has been updated to return a <code>LazyCollection</code> instance. This allows you to still only run a single query against the database but also only keep one Eloquent model loaded in memory at a time. In this example, the <code>filter</code> callback is not executed until we actually iterate over each user individually, allowing for a drastic reduction in memory usage:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = App\\User::cursor()-&gt;filter(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($user)</span> </span>{\n    <span class="hljs-keyword">return</span> $user-&gt;id &gt; <span class="hljs-number">500</span>;\n});\n\n<span class="hljs-keyword">foreach</span> ($users <span class="hljs-keyword">as</span> $user) {\n    <span class="hljs-keyword">echo</span> $user-&gt;id;\n}</code></pre>\n  \n          <p><a name="eloquent-subquery-enhancements"></a></p>\n          <h3>\n            <a href="#eloquent-subquery-enhancements">\n              Eloquent Subquery Enhancements\n            </a>\n          </h3><p><em>Eloquent subquery enhancements were implemented by <router-link to="https://github.com/reinink">Jonathan Reinink</router-link></em>.</p>\n<p>Laravel 6 introduces several new enhancements and improvements to database subquery support. For example, let&#39;s imagine that we have a table of flight <code>destinations</code> and a table of <code>flights</code> to destinations. The <code>flights</code> table contains an <code>arrived_at</code> column which indicates when the flight arrived at the destination.</p>\n<p>Using the new subquery select functionality in Laravel 6, we can select all of the <code>destinations</code> and the name of the flight that most recently arrived at that destination using a single query:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> Destination::addSelect<span class="hljs-function"><span class="hljs-params">([<span class="hljs-string">\'last_flight\'</span> =&gt; Flight::select(<span class="hljs-string">\'name\'</span>)\n    -&gt;whereColumn(<span class="hljs-string">\'destination_id\'</span>, <span class="hljs-string">\'destinations.id\'</span>)\n    -&gt;orderBy(<span class="hljs-string">\'arrived_at\'</span>, <span class="hljs-string">\'desc\'</span>)\n    -&gt;limit(<span class="hljs-number">1</span>)\n])</span>-&gt;</span>get();</code></pre>\n  <p>In addition, we can use new subquery features added to the query builder&#39;s <code>orderBy</code> function to sort all destinations based on when the last flight arrived at that destination. Again, this may be done while executing a single query against the database:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> Destination::orderByDesc(\n    Flight::select<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'arrived_at\'</span>)</span>\n        -&gt;</span>whereColumn<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'destination_id\'</span>, <span class="hljs-string">\'destinations.id\'</span>)</span>\n        -&gt;</span>orderBy<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'arrived_at\'</span>, <span class="hljs-string">\'desc\'</span>)</span>\n        -&gt;</span>limit(<span class="hljs-number">1</span>)\n)<span class="hljs-function">-&gt;</span>get();</code></pre>\n  \n          <p><a name="laravel-ui"></a></p>\n          <h3>\n            <a href="#laravel-ui">\n              Laravel UI\n            </a>\n          </h3><p>The frontend scaffolding typically provided with previous releases of Laravel has been extracted into a <code>laravel/ui</code> Composer package. This allows the first-party UI scaffolding to be developed and versioned separately from the primary framework. As a result of this change, no Bootstrap or Vue code is present in default framework scaffolding, and the <code>make:auth</code> command has been extracted from the framework as well.</p>\n<p>In order to restore the traditional Vue / Bootstrap scaffolding present in previous releases of Laravel, you may install the <code>laravel/ui</code> package and use the <code>ui</code> Artisan command to install the frontend scaffolding:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">composer <span class="hljs-built_in">require</span> laravel/ui <span class="hljs-comment">--dev</span>\n\nphp artisan ui vue <span class="hljs-comment">--auth</span></code></pre>\n  '},d307:function(s,e,a){var n={"./Code.js":"e83a","./index.js":"2a74"};function t(s){var e=l(s);return a(e)}function l(s){if(!a.o(n,s)){var e=new Error("Cannot find module '"+s+"'");throw e.code="MODULE_NOT_FOUND",e}return n[s]}t.keys=function(){return Object.keys(n)},t.resolve=l,s.exports=t,t.id="d307"},d35c:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="queues"></a></p>\n          <h1>\n            <a href="#queues">\n              Queues\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a><ul>\n<li><a href="#connections-vs-queues">Connections Vs. Queues</a></li>\n<li><a href="#driver-prerequisites">Driver Notes &amp; Prerequisites</a></li>\n</ul>\n</li>\n<li><a href="#creating-jobs">Creating Jobs</a><ul>\n<li><a href="#generating-job-classes">Generating Job Classes</a></li>\n<li><a href="#class-structure">Class Structure</a></li>\n<li><a href="#job-middleware">Job Middleware</a></li>\n</ul>\n</li>\n<li><a href="#dispatching-jobs">Dispatching Jobs</a><ul>\n<li><a href="#delayed-dispatching">Delayed Dispatching</a></li>\n<li><a href="#synchronous-dispatching">Synchronous Dispatching</a></li>\n<li><a href="#job-chaining">Job Chaining</a></li>\n<li><a href="#customizing-the-queue-and-connection">Customizing The Queue &amp; Connection</a></li>\n<li><a href="#max-job-attempts-and-timeout">Specifying Max Job Attempts / Timeout Values</a></li>\n<li><a href="#rate-limiting">Rate Limiting</a></li>\n<li><a href="#error-handling">Error Handling</a></li>\n</ul>\n</li>\n<li><a href="#queueing-closures">Queueing Closures</a></li>\n<li><a href="#running-the-queue-worker">Running The Queue Worker</a><ul>\n<li><a href="#queue-priorities">Queue Priorities</a></li>\n<li><a href="#queue-workers-and-deployment">Queue Workers &amp; Deployment</a></li>\n<li><a href="#job-expirations-and-timeouts">Job Expirations &amp; Timeouts</a></li>\n</ul>\n</li>\n<li><a href="#supervisor-configuration">Supervisor Configuration</a></li>\n<li><a href="#dealing-with-failed-jobs">Dealing With Failed Jobs</a><ul>\n<li><a href="#cleaning-up-after-failed-jobs">Cleaning Up After Failed Jobs</a></li>\n<li><a href="#failed-job-events">Failed Job Events</a></li>\n<li><a href="#retrying-failed-jobs">Retrying Failed Jobs</a></li>\n<li><a href="#ignoring-missing-models">Ignoring Missing Models</a></li>\n</ul>\n</li>\n<li><a href="#job-events">Job Events</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><blockquote>\n<p>{tip} Laravel now offers Horizon, a beautiful dashboard and configuration system for your Redis powered queues. Check out the full <router-link to="/docs/{{version}}/horizon">Horizon documentation</router-link> for more information.</p>\n</blockquote>\n<p>Laravel queues provide a unified API across a variety of different queue backends, such as Beanstalk, Amazon SQS, Redis, or even a relational database. Queues allow you to defer the processing of a time consuming task, such as sending an email, until a later time. Deferring these time consuming tasks drastically speeds up web requests to your application.</p>\n<p>The queue configuration file is stored in <code>config/queue.php</code>. In this file you will find connection configurations for each of the queue drivers that are included with the framework, which includes a database, <router-link to="https://kr.github.io/beanstalkd/">Beanstalkd</router-link>, <router-link to="https://aws.amazon.com/sqs/">Amazon SQS</router-link>, <router-link to="https://redis.io">Redis</router-link>,  and a synchronous driver that will execute jobs immediately (for local use). A <code>null</code> queue driver is also included which discards queued jobs.</p>\n<p><a name="connections-vs-queues"></a></p>\n\n          <p><a name="connections-vs-queues"></a></p>\n          <h3>\n            <a href="#connections-vs-queues">\n              Connections Vs. Queues\n            </a>\n          </h3><p>Before getting started with Laravel queues, it is important to understand the distinction between &quot;connections&quot; and &quot;queues&quot;. In your <code>config/queue.php</code> configuration file, there is a <code>connections</code> configuration option. This option defines a particular connection to a backend service such as Amazon SQS, Beanstalk, or Redis. However, any given queue connection may have multiple &quot;queues&quot; which may be thought of as different stacks or piles of queued jobs.</p>\n<p>Note that each connection configuration example in the <code>queue</code> configuration file contains a <code>queue</code> attribute. This is the default queue that jobs will be dispatched to when they are sent to a given connection. In other words, if you dispatch a job without explicitly defining which queue it should be dispatched to, the job will be placed on the queue that is defined in the <code>queue</code> attribute of the connection configuration:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// This job is sent to the default queue...</span>\n<span class="hljs-variable"><span class="hljs-class">Job</span></span>::<span class="hljs-function"><span class="hljs-title">dispatch</span>();\n\n<span class="hljs-comment">// This job is sent to the "emails" queue...</span>\n<span class="hljs-variable"><span class="hljs-class">Job</span></span>::<span class="hljs-title">dispatch</span>()-&gt;<span class="hljs-title">onQueue</span>(<span class="hljs-string">\'emails\'</span>);</span></code></pre>\n  <p>Some applications may not need to ever push jobs onto multiple queues, instead preferring to have one simple queue. However, pushing jobs to multiple queues can be especially useful for applications that wish to prioritize or segment how jobs are processed, since the Laravel queue worker allows you to specify which queues it should process by priority. For example, if you push jobs to a <code>high</code> queue, you may run a worker that gives them higher processing priority:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan <span class="hljs-built_in">queue</span>:work --<span class="hljs-built_in">queue</span>=high,<span class="hljs-keyword">default</span></code></pre>\n  <p><a name="driver-prerequisites"></a></p>\n\n          <p><a name="driver-notes-amp-prerequisites"></a></p>\n          <h3>\n            <a href="#driver-notes-amp-prerequisites">\n              Driver Notes &amp; Prerequisites\n            </a>\n          </h3>\n          <p><a name="database"></a></p>\n          <h4>\n            <a href="#database">\n              Database\n            </a>\n          </h4><p>In order to use the <code>database</code> queue driver, you will need a database table to hold the jobs. To generate a migration that creates this table, run the <code>queue:table</code> Artisan command. Once the migration has been created, you may migrate your database using the <code>migrate</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan queue:<span class="hljs-keyword">table</span>\n\nphp artisan migrate</code></pre>\n  \n          <p><a name="redis"></a></p>\n          <h4>\n            <a href="#redis">\n              Redis\n            </a>\n          </h4><p>In order to use the <code>redis</code> queue driver, you should configure a Redis database connection in your <code>config/database.php</code> configuration file.</p>\n<p><strong>Redis Cluster</strong></p>\n<p>If your Redis queue connection uses a Redis Cluster, your queue names must contain a <router-link to="https://redis.io/topics/cluster-spec#keys-hash-tags">key hash tag</router-link>. This is required in order to ensure all of the Redis keys for a given queue are placed into the same hash slot:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'redis\'</span> =&gt; [\n    <span class="hljs-string">\'driver\'</span> =&gt; <span class="hljs-string">\'redis\'</span>,\n    <span class="hljs-string">\'connection\'</span> =&gt; <span class="hljs-string">\'default\'</span>,\n    <span class="hljs-string">\'queue\'</span> =&gt; <span class="hljs-string">\'{default}\'</span>,\n    <span class="hljs-string">\'retry_after\'</span> =&gt; <span class="hljs-number">90</span>,\n],</code></pre>\n  <p><strong>Blocking</strong></p>\n<p>When using the Redis queue, you may use the <code>block_for</code> configuration option to specify how long the driver should wait for a job to become available before iterating through the worker loop and re-polling the Redis database.</p>\n<p>Adjusting this value based on your queue load can be more efficient than continually polling the Redis database for new jobs. For instance, you may set the value to <code>5</code> to indicate that the driver should block for five seconds while waiting for a job to become available:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'redis\'</span> =&gt; [\n    <span class="hljs-string">\'driver\'</span> =&gt; <span class="hljs-string">\'redis\'</span>,\n    <span class="hljs-string">\'connection\'</span> =&gt; <span class="hljs-string">\'default\'</span>,\n    <span class="hljs-string">\'queue\'</span> =&gt; <span class="hljs-string">\'default\'</span>,\n    <span class="hljs-string">\'retry_after\'</span> =&gt; <span class="hljs-number">90</span>,\n    <span class="hljs-string">\'block_for\'</span> =&gt; <span class="hljs-number">5</span>,\n],</code></pre>\n  <blockquote>\n<p>{note} Setting <code>block_for</code> to <code>0</code> will cause queue workers to block indefinitely until a job is available. This will also prevent signals such as <code>SIGTERM</code> from being handled until the next job has been processed.</p>\n</blockquote>\n\n          <p><a name="other-driver-prerequisites"></a></p>\n          <h4>\n            <a href="#other-driver-prerequisites">\n              Other Driver Prerequisites\n            </a>\n          </h4><p>The following dependencies are needed for the listed queue drivers:</p>\n<div class="content-list" markdown="1">\n- Amazon SQS: `aws/aws-sdk-php ~3.0`\n- Beanstalkd: `pda/pheanstalk ~4.0`\n- Redis: `predis/predis ~1.0` or phpredis PHP extension\n</div>\n\n<p><a name="creating-jobs"></a></p>\n\n          <p><a name="creating-jobs"></a></p>\n          <h2>\n            <a href="#creating-jobs">\n              Creating Jobs\n            </a>\n          </h2><p><a name="generating-job-classes"></a></p>\n\n          <p><a name="generating-job-classes"></a></p>\n          <h3>\n            <a href="#generating-job-classes">\n              Generating Job Classes\n            </a>\n          </h3><p>By default, all of the queueable jobs for your application are stored in the <code>app/Jobs</code> directory. If the <code>app/Jobs</code> directory doesn&#39;t exist, it will be created when you run the <code>make:job</code> Artisan command. You may generate a new queued job using the Artisan CLI:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan make:<span class="hljs-keyword">job</span> ProcessPodcast</code></pre>\n  <p>The generated class will implement the <code>Illuminate\\Contracts\\Queue\\ShouldQueue</code> interface, indicating to Laravel that the job should be pushed onto the queue to run asynchronously.</p>\n<p><a name="class-structure"></a></p>\n\n          <p><a name="class-structure"></a></p>\n          <h3>\n            <a href="#class-structure">\n              Class Structure\n            </a>\n          </h3><p>Job classes are very simple, normally containing only a <code>handle</code> method which is called when the job is processed by the queue. To get started, let&#39;s take a look at an example job class. In this example, we&#39;ll pretend we manage a podcast publishing service and need to process the uploaded podcast files before they are published:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Jobs</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">AudioProcessor</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Podcast</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Bus</span>\\<span class="hljs-title">Queueable</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">Queue</span>\\<span class="hljs-title">ShouldQueue</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Bus</span>\\<span class="hljs-title">Dispatchable</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Queue</span>\\<span class="hljs-title">InteractsWithQueue</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Queue</span>\\<span class="hljs-title">SerializesModels</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProcessPodcast</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ShouldQueue</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">Dispatchable</span>, <span class="hljs-title">InteractsWithQueue</span>, <span class="hljs-title">Queueable</span>, <span class="hljs-title">SerializesModels</span>;\n\n    <span class="hljs-keyword">protected</span> $podcast;\n\n    <span class="hljs-comment">/**\n     * Create a new job instance.\n     *\n     * <span class="hljs-doctag">@param</span>  Podcast  $podcast\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(Podcast $podcast)</span>\n    </span>{\n        <span class="hljs-keyword">$this</span>-&gt;podcast = $podcast;\n    }\n\n    <span class="hljs-comment">/**\n     * Execute the job.\n     *\n     * <span class="hljs-doctag">@param</span>  AudioProcessor  $processor\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">(AudioProcessor $processor)</span>\n    </span>{\n        <span class="hljs-comment">// Process uploaded podcast...</span>\n    }\n}</span></code></pre>\n  <p>In this example, note that we were able to pass an <router-link to="/docs/{{version}}/eloquent">Eloquent model</router-link> directly into the queued job&#39;s constructor. Because of the <code>SerializesModels</code> trait that the job is using, Eloquent models and their loaded relationships will be gracefully serialized and unserialized when the job is processing. If your queued job accepts an Eloquent model in its constructor, only the identifier for the model will be serialized onto the queue. When the job is actually handled, the queue system will automatically re-retrieve the full model instance and its loaded relationships from the database. It&#39;s all totally transparent to your application and prevents issues that can arise from serializing full Eloquent model instances.</p>\n<p>The <code>handle</code> method is called when the job is processed by the queue. Note that we are able to type-hint dependencies on the <code>handle</code> method of the job. The Laravel <router-link to="/docs/{{version}}/container">service container</router-link> automatically injects these dependencies.</p>\n<p>If you would like to take total control over how the container injects dependencies into the <code>handle</code> method, you may use the container&#39;s <code>bindMethod</code> method. The <code>bindMethod</code> method accepts a callback which receives the job and the container. Within the callback, you are free to invoke the <code>handle</code> method however you wish. Typically, you should call this method from a <router-link to="/docs/{{version}}/providers">service provider</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Jobs</span>\\<span class="hljs-title">ProcessPodcast</span>;\n\n<span class="hljs-keyword">$this</span>-&gt;app-&gt;bindMethod(ProcessPodcast::class.<span class="hljs-string">\'@handle\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($job, $app)</span> </span>{\n    <span class="hljs-keyword">return</span> $job-&gt;handle($app-&gt;make(AudioProcessor::class));\n});</code></pre>\n  <blockquote>\n<p>{note} Binary data, such as raw image contents, should be passed through the <code>base64_encode</code> function before being passed to a queued job. Otherwise, the job may not properly serialize to JSON when being placed on the queue.</p>\n</blockquote>\n\n          <p><a name="handling-relationships"></a></p>\n          <h4>\n            <a href="#handling-relationships">\n              Handling Relationships\n            </a>\n          </h4><p>Because loaded relationships also get serialized, the serialized job string can become quite large. To prevent relations from being serialized, you can call the <code>withoutRelations</code> method on the model when setting a property value. This method will return an instance of the model with no loaded relationships:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Create a new job instance.\n *\n * <span class="hljs-doctag">@param</span>  \\App\\Podcast  $podcast\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(Podcast $podcast)</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;podcast = $podcast-&gt;withoutRelations();\n}</code></pre>\n  <p><a name="job-middleware"></a></p>\n\n          <p><a name="job-middleware"></a></p>\n          <h3>\n            <a href="#job-middleware">\n              Job Middleware\n            </a>\n          </h3><p>Job middleware allow you wrap custom logic around the execution of queued jobs, reducing boilerplate in the jobs themselves. For example, consider the following <code>handle</code> method which leverages Laravel&#39;s Redis rate limiting features to allow only one job to process every five seconds:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Execute the job.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span>\n</span>{\n    Redis::throttle(<span class="hljs-string">\'key\'</span>)-&gt;block(<span class="hljs-number">0</span>)-&gt;allow(<span class="hljs-number">1</span>)-&gt;every(<span class="hljs-number">5</span>)-&gt;then(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n        info(<span class="hljs-string">\'Lock obtained...\'</span>);\n\n        <span class="hljs-comment">// Handle job...</span>\n    }, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n        <span class="hljs-comment">// Could not obtain lock...</span>\n\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;release(<span class="hljs-number">5</span>);\n    });\n}</code></pre>\n  <p>While this code is valid, the structure of the <code>handle</code> method becomes noisy since it is cluttered with Redis rate limiting logic. In addition, this rate limiting logic must be duplicated for any other jobs that we want to rate limit.</p>\n<p>Instead of rate limiting in the handle method, we could define a job middleware that handles rate limiting. Laravel does not have a default location for job middleware, so you are welcome to place job middleware anywhere in your application. In this example, we will place the middleware in a <code>app/Jobs/Middleware</code> directory:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Jobs</span>\\<span class="hljs-title">Middleware</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Redis</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RateLimited</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Process the queued job.\n     *\n     * <span class="hljs-doctag">@param</span>  mixed  $job\n     * <span class="hljs-doctag">@param</span>  callable  $next\n     * <span class="hljs-doctag">@return</span> mixed\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">($job, $next)</span>\n    </span>{\n        Redis::throttle(<span class="hljs-string">\'key\'</span>)\n                -&gt;block(<span class="hljs-number">0</span>)-&gt;allow(<span class="hljs-number">1</span>)-&gt;every(<span class="hljs-number">5</span>)\n                -&gt;then(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> <span class="hljs-title">use</span> <span class="hljs-params">($job, $next)</span> </span>{\n                    <span class="hljs-comment">// Lock obtained...</span>\n\n                    $next($job);\n                }, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> <span class="hljs-title">use</span> <span class="hljs-params">($job)</span> </span>{\n                    <span class="hljs-comment">// Could not obtain lock...</span>\n\n                    $job-&gt;release(<span class="hljs-number">5</span>);\n                });\n    }\n}</span></code></pre>\n  <p>As you can see, like <router-link to="/docs/{{version}}/middleware">route middleware</router-link>, job middleware receive the job being processed and a callback that should be invoked to continue processing the job.</p>\n<p>After creating job middleware, they may be attached to a job by returning them from the job&#39;s <code>middleware</code> method. This method does not exist on jobs scaffolded by the <code>make:job</code> Artisan command, so you will need to add it to your own job class definition:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Jobs</span>\\<span class="hljs-title">Middleware</span>\\<span class="hljs-title">RateLimited</span>;\n\n<span class="hljs-comment">/**\n * Get the middleware the job should pass through.\n *\n * <span class="hljs-doctag">@return</span> array\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">middleware</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> [<span class="hljs-keyword">new</span> RateLimited];\n}</code></pre>\n  <p><a name="dispatching-jobs"></a></p>\n\n          <p><a name="dispatching-jobs"></a></p>\n          <h2>\n            <a href="#dispatching-jobs">\n              Dispatching Jobs\n            </a>\n          </h2><p>Once you have written your job class, you may dispatch it using the <code>dispatch</code> method on the job itself. The arguments passed to the <code>dispatch</code> method will be given to the job&#39;s constructor:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">Controller</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Jobs</span>\\<span class="hljs-title">ProcessPodcast</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Request</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PodcastController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Store a new podcast.\n     *\n     * <span class="hljs-doctag">@param</span>  Request  $request\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span><span class="hljs-params">(Request $request)</span>\n    </span>{\n        <span class="hljs-comment">// Create podcast...</span>\n\n        ProcessPodcast::dispatch($podcast);\n    }\n}</span></code></pre>\n  <p><a name="delayed-dispatching"></a></p>\n\n          <p><a name="delayed-dispatching"></a></p>\n          <h3>\n            <a href="#delayed-dispatching">\n              Delayed Dispatching\n            </a>\n          </h3><p>If you would like to delay the execution of a queued job, you may use the <code>delay</code> method when dispatching a job. For example, let&#39;s specify that a job should not be available for processing until 10 minutes after it has been dispatched:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">Controller</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Jobs</span>\\<span class="hljs-title">ProcessPodcast</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Request</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PodcastController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Store a new podcast.\n     *\n     * <span class="hljs-doctag">@param</span>  Request  $request\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span><span class="hljs-params">(Request $request)</span>\n    </span>{\n        <span class="hljs-comment">// Create podcast...</span>\n\n        ProcessPodcast::dispatch($podcast)\n                -&gt;delay(now()-&gt;addMinutes(<span class="hljs-number">10</span>));\n    }\n}</span></code></pre>\n  <blockquote>\n<p>{note} The Amazon SQS queue service has a maximum delay time of 15 minutes.</p>\n</blockquote>\n<p><a name="synchronous-dispatching"></a></p>\n\n          <p><a name="synchronous-dispatching"></a></p>\n          <h3>\n            <a href="#synchronous-dispatching">\n              Synchronous Dispatching\n            </a>\n          </h3><p>If you would like to dispatch a job immediately (synchronously), you may use the <code>dispatchNow</code> method. When using this method, the job will not be queued and will be run immediately within the current process:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">Controller</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Jobs</span>\\<span class="hljs-title">ProcessPodcast</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Request</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PodcastController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Store a new podcast.\n     *\n     * <span class="hljs-doctag">@param</span>  Request  $request\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span><span class="hljs-params">(Request $request)</span>\n    </span>{\n        <span class="hljs-comment">// Create podcast...</span>\n\n        ProcessPodcast::dispatchNow($podcast);\n    }\n}</span></code></pre>\n  <p><a name="job-chaining"></a></p>\n\n          <p><a name="job-chaining"></a></p>\n          <h3>\n            <a href="#job-chaining">\n              Job Chaining\n            </a>\n          </h3><p>Job chaining allows you to specify a list of queued jobs that should be run in sequence after the primary job has executed successfully. If one job in the sequence fails, the rest of the jobs will not be run. To execute a queued job chain, you may use the <code>withChain</code> method on any of your dispatchable jobs:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">ProcessPodcast:<span class="hljs-type"></span>:withChain([\n    <span class="hljs-keyword">new</span> <span class="hljs-type">OptimizePodcast</span>,\n    <span class="hljs-keyword">new</span> <span class="hljs-type">ReleasePodcast</span>\n])-&gt;dispatch();</code></pre>\n  <blockquote>\n<p>{note} Deleting jobs using the <code>$this-&gt;delete()</code> method will not prevent chained jobs from being processed. The chain will only stop executing if a job in the chain fails.</p>\n</blockquote>\n\n          <p><a name="chain-connection-amp-queue"></a></p>\n          <h4>\n            <a href="#chain-connection-amp-queue">\n              Chain Connection &amp; Queue\n            </a>\n          </h4><p>If you would like to specify the default connection and queue that should be used for the chained jobs, you may use the <code>allOnConnection</code> and <code>allOnQueue</code> methods. These methods specify the queue connection and queue name that should be used unless the queued job is explicitly assigned a different connection / queue:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">ProcessPodcast::withChain([\n    <span class="hljs-keyword">new</span> OptimizePodcast,\n    <span class="hljs-keyword">new</span> ReleasePodcast\n])<span class="hljs-function">-&gt;</span>dispatch<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>allOnConnection<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'redis\'</span>)</span>-&gt;</span>allOnQueue(<span class="hljs-string">\'podcasts\'</span>);</code></pre>\n  <p><a name="customizing-the-queue-and-connection"></a></p>\n\n          <p><a name="customizing-the-queue-amp-connection"></a></p>\n          <h3>\n            <a href="#customizing-the-queue-amp-connection">\n              Customizing The Queue &amp; Connection\n            </a>\n          </h3>\n          <p><a name="dispatching-to-a-particular-queue"></a></p>\n          <h4>\n            <a href="#dispatching-to-a-particular-queue">\n              Dispatching To A Particular Queue\n            </a>\n          </h4><p>By pushing jobs to different queues, you may &quot;categorize&quot; your queued jobs and even prioritize how many workers you assign to various queues. Keep in mind, this does not push jobs to different queue &quot;connections&quot; as defined by your queue configuration file, but only to specific queues within a single connection. To specify the queue, use the <code>onQueue</code> method when dispatching the job:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">Controller</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Jobs</span>\\<span class="hljs-title">ProcessPodcast</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Request</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PodcastController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Store a new podcast.\n     *\n     * <span class="hljs-doctag">@param</span>  Request  $request\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span><span class="hljs-params">(Request $request)</span>\n    </span>{\n        <span class="hljs-comment">// Create podcast...</span>\n\n        ProcessPodcast::dispatch($podcast)-&gt;onQueue(<span class="hljs-string">\'processing\'</span>);\n    }\n}</span></code></pre>\n  \n          <p><a name="dispatching-to-a-particular-connection"></a></p>\n          <h4>\n            <a href="#dispatching-to-a-particular-connection">\n              Dispatching To A Particular Connection\n            </a>\n          </h4><p>If you are working with multiple queue connections, you may specify which connection to push a job to. To specify the connection, use the <code>onConnection</code> method when dispatching the job:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">Controller</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Jobs</span>\\<span class="hljs-title">ProcessPodcast</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Request</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PodcastController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Store a new podcast.\n     *\n     * <span class="hljs-doctag">@param</span>  Request  $request\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span><span class="hljs-params">(Request $request)</span>\n    </span>{\n        <span class="hljs-comment">// Create podcast...</span>\n\n        ProcessPodcast::dispatch($podcast)-&gt;onConnection(<span class="hljs-string">\'sqs\'</span>);\n    }\n}</span></code></pre>\n  <p>You may chain the <code>onConnection</code> and <code>onQueue</code> methods to specify the connection and the queue for a job:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">ProcessPodcast::dispatch<span class="hljs-function"><span class="hljs-params">($podcast)</span>\n              -&gt;</span>onConnection<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'sqs\'</span>)</span>\n              -&gt;</span>onQueue(<span class="hljs-string">\'processing\'</span>);</code></pre>\n  <p>Alternatively, you may specify the <code>connection</code> as a property on the job class:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Jobs</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProcessPodcast</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ShouldQueue</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The queue connection that should handle the job.\n     *\n     * <span class="hljs-doctag">@var</span> string\n     */</span>\n    <span class="hljs-keyword">public</span> $connection = <span class="hljs-string">\'sqs\'</span>;\n}</span></code></pre>\n  <p><a name="max-job-attempts-and-timeout"></a></p>\n\n          <p><a name="specifying-max-job-attempts-timeout-values"></a></p>\n          <h3>\n            <a href="#specifying-max-job-attempts-timeout-values">\n              Specifying Max Job Attempts / Timeout Values\n            </a>\n          </h3>\n          <p><a name="max-attempts"></a></p>\n          <h4>\n            <a href="#max-attempts">\n              Max Attempts\n            </a>\n          </h4><p>One approach to specifying the maximum number of times a job may be attempted is via the <code>--tries</code> switch on the Artisan command line:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan queue:<span class="hljs-keyword">work</span> <span class="hljs-comment">--tries=3</span></code></pre>\n  <p>However, you may take a more granular approach by defining the maximum number of attempts on the job class itself. If the maximum number of attempts is specified on the job, it will take precedence over the value provided on the command line:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Jobs</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProcessPodcast</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ShouldQueue</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The number of times the job may be attempted.\n     *\n     * <span class="hljs-doctag">@var</span> int\n     */</span>\n    <span class="hljs-keyword">public</span> $tries = <span class="hljs-number">5</span>;\n}</span></code></pre>\n  <p><a name="time-based-attempts"></a></p>\n\n          <p><a name="time-based-attempts"></a></p>\n          <h4>\n            <a href="#time-based-attempts">\n              Time Based Attempts\n            </a>\n          </h4><p>As an alternative to defining how many times a job may be attempted before it fails, you may define a time at which the job should timeout. This allows a job to be attempted any number of times within a given time frame. To define the time at which a job should timeout, add a <code>retryUntil</code> method to your job class:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Determine the time at which the job should timeout.\n *\n * <span class="hljs-doctag">@return</span> \\DateTime\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">retryUntil</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> now()-&gt;addSeconds(<span class="hljs-number">5</span>);\n}</code></pre>\n  <blockquote>\n<p>{tip} You may also define a <code>retryUntil</code> method on your queued event listeners.</p>\n</blockquote>\n\n          <p><a name="timeout"></a></p>\n          <h4>\n            <a href="#timeout">\n              Timeout\n            </a>\n          </h4><blockquote>\n<p>{note} The <code>timeout</code> feature is optimized for PHP 7.1+ and the <code>pcntl</code> PHP extension.</p>\n</blockquote>\n<p>Likewise, the maximum number of seconds that jobs can run may be specified using the <code>--timeout</code> switch on the Artisan command line:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan queue:<span class="hljs-keyword">work</span> <span class="hljs-comment">--timeout=30</span></code></pre>\n  <p>However, you may also define the maximum number of seconds a job should be allowed to run on the job class itself. If the timeout is specified on the job, it will take precedence over any timeout specified on the command line:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Jobs</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProcessPodcast</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ShouldQueue</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The number of seconds the job can run before timing out.\n     *\n     * <span class="hljs-doctag">@var</span> int\n     */</span>\n    <span class="hljs-keyword">public</span> $timeout = <span class="hljs-number">120</span>;\n}</span></code></pre>\n  <p><a name="rate-limiting"></a></p>\n\n          <p><a name="rate-limiting"></a></p>\n          <h3>\n            <a href="#rate-limiting">\n              Rate Limiting\n            </a>\n          </h3><blockquote>\n<p>{note} This feature requires that your application can interact with a <router-link to="/docs/{{version}}/redis">Redis server</router-link>.</p>\n</blockquote>\n<p>If your application interacts with Redis, you may throttle your queued jobs by time or concurrency. This feature can be of assistance when your queued jobs are interacting with APIs that are also rate limited.</p>\n<p>For example, using the <code>throttle</code> method, you may throttle a given type of job to only run 10 times every 60 seconds. If a lock can not be obtained, you should typically release the job back onto the queue so it can be retried later:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Redis::throttle<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'key\'</span>)</span>-&gt;</span>allow<span class="hljs-function"><span class="hljs-params">(<span class="hljs-number">10</span>)</span>-&gt;</span>every<span class="hljs-function"><span class="hljs-params">(<span class="hljs-number">60</span>)</span>-&gt;</span><span class="hljs-keyword">then</span>(<span class="hljs-keyword">function</span> () {\n    <span class="hljs-regexp">// Job logic...\n}, function () {\n    //</span> Could <span class="hljs-keyword">not</span> obtain lock...\n\n    <span class="hljs-keyword">return</span> $<span class="hljs-keyword">this</span>-&gt;release(<span class="hljs-number">10</span>);\n});</code></pre>\n  <blockquote>\n<p>{tip} In the example above, the <code>key</code> may be any string that uniquely identifies the type of job you would like to rate limit. For example, you may wish to construct the key based on the class name of the job and the IDs of the Eloquent models it operates on.</p>\n</blockquote>\n<blockquote>\n<p>{note}  Releasing a throttled job back onto the queue will still increment the job&#39;s total number of <code>attempts</code>.</p>\n</blockquote>\n<p>Alternatively, you may specify the maximum number of workers that may simultaneously process a given job. This can be helpful when a queued job is modifying a resource that should only be modified by one job at a time. For example, using the <code>funnel</code> method, you may limit jobs of a given type to only be processed by one worker at a time:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Redis::funnel(<span class="hljs-string">\'key\'</span>)-&gt;limit(<span class="hljs-number">1</span>)-&gt;then(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">// Job logic...</span>\n}, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">// Could not obtain lock...</span>\n\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;release(<span class="hljs-number">10</span>);\n});</code></pre>\n  <blockquote>\n<p>{tip} When using rate limiting, the number of attempts your job will need to run successfully can be hard to determine. Therefore, it is useful to combine rate limiting with <a href="#time-based-attempts">time based attempts</a>.</p>\n</blockquote>\n<p><a name="error-handling"></a></p>\n\n          <p><a name="error-handling"></a></p>\n          <h3>\n            <a href="#error-handling">\n              Error Handling\n            </a>\n          </h3><p>If an exception is thrown while the job is being processed, the job will automatically be released back onto the queue so it may be attempted again. The job will continue to be released until it has been attempted the maximum number of times allowed by your application. The maximum number of attempts is defined by the <code>--tries</code> switch used on the <code>queue:work</code> Artisan command. Alternatively, the maximum number of attempts may be defined on the job class itself. More information on running the queue worker <a href="#running-the-queue-worker">can be found below</a>.</p>\n<p><a name="queueing-closures"></a></p>\n\n          <p><a name="queueing-closures"></a></p>\n          <h2>\n            <a href="#queueing-closures">\n              Queueing Closures\n            </a>\n          </h2><p>Instead of dispatching a job class to the queue, you may also dispatch a Closure. This is great for quick, simple tasks that need to be executed outside of the current request cycle:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$podcast = App\\Podcast::find(<span class="hljs-number">1</span>);\n\ndispatch(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> <span class="hljs-title">use</span> <span class="hljs-params">($podcast)</span> </span>{\n    $podcast-&gt;publish();\n});</code></pre>\n  <p>When dispatching Closures to the queue, the Closure&#39;s code contents is cryptographically signed so it can not be modified in transit.</p>\n<p><a name="running-the-queue-worker"></a></p>\n\n          <p><a name="running-the-queue-worker"></a></p>\n          <h2>\n            <a href="#running-the-queue-worker">\n              Running The Queue Worker\n            </a>\n          </h2><p>Laravel includes a queue worker that will process new jobs as they are pushed onto the queue. You may run the worker using the <code>queue:work</code> Artisan command. Note that once the <code>queue:work</code> command has started, it will continue to run until it is manually stopped or you close your terminal:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan <span class="hljs-built_in">queue</span>:work</code></pre>\n  <blockquote>\n<p>{tip} To keep the <code>queue:work</code> process running permanently in the background, you should use a process monitor such as <a href="#supervisor-configuration">Supervisor</a> to ensure that the queue worker does not stop running.</p>\n</blockquote>\n<p>Remember, queue workers are long-lived processes and store the booted application state in memory. As a result, they will not notice changes in your code base after they have been started. So, during your deployment process, be sure to <a href="#queue-workers-and-deployment">restart your queue workers</a>.</p>\n<p>Alternatively, you may run the <code>queue:listen</code> command. When using the <code>queue:listen</code> command, you don&#39;t have to manually restart the worker after your code is changed; however, this command is not as efficient as <code>queue:work</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan <span class="hljs-built_in">queue</span>:listen</code></pre>\n  \n          <p><a name="specifying-the-connection-amp-queue"></a></p>\n          <h4>\n            <a href="#specifying-the-connection-amp-queue">\n              Specifying The Connection &amp; Queue\n            </a>\n          </h4><p>You may also specify which queue connection the worker should utilize. The connection name passed to the <code>work</code> command should correspond to one of the connections defined in your <code>config/queue.php</code> configuration file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan <span class="hljs-built_in">queue</span>:work redis</code></pre>\n  <p>You may customize your queue worker even further by only processing particular queues for a given connection. For example, if all of your emails are processed in an <code>emails</code> queue on your <code>redis</code> queue connection, you may issue the following command to start a worker that only processes only that queue:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan <span class="hljs-built_in">queue</span>:work redis --<span class="hljs-built_in">queue</span>=emails</code></pre>\n  \n          <p><a name="processing-a-single-job"></a></p>\n          <h4>\n            <a href="#processing-a-single-job">\n              Processing A Single Job\n            </a>\n          </h4><p>The <code>--once</code> option may be used to instruct the worker to only process a single job from the queue:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan queue:<span class="hljs-keyword">work</span> <span class="hljs-comment">--once</span></code></pre>\n  \n          <p><a name="processing-all-queued-jobs-amp-then-exiting"></a></p>\n          <h4>\n            <a href="#processing-all-queued-jobs-amp-then-exiting">\n              Processing All Queued Jobs &amp; Then Exiting\n            </a>\n          </h4><p>The <code>--stop-when-empty</code> option may be used to instruct the worker to process all jobs and then exit gracefully. This option can be useful when working Laravel queues within a Docker container if you wish to shutdown the container after the queue is empty:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan queue:<span class="hljs-keyword">work</span> <span class="hljs-comment">--stop-when-empty</span></code></pre>\n  \n          <p><a name="resource-considerations"></a></p>\n          <h4>\n            <a href="#resource-considerations">\n              Resource Considerations\n            </a>\n          </h4><p>Daemon queue workers do not &quot;reboot&quot; the framework before processing each job. Therefore, you should free any heavy resources after each job completes. For example, if you are doing image manipulation with the GD library, you should free the memory with <code>imagedestroy</code> when you are done.</p>\n<p><a name="queue-priorities"></a></p>\n\n          <p><a name="queue-priorities"></a></p>\n          <h3>\n            <a href="#queue-priorities">\n              Queue Priorities\n            </a>\n          </h3><p>Sometimes you may wish to prioritize how your queues are processed. For example, in your <code>config/queue.php</code> you may set the default <code>queue</code> for your <code>redis</code> connection to <code>low</code>. However, occasionally you may wish to push a job to a <code>high</code> priority queue like so:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">dispatch<span class="hljs-function"><span class="hljs-params">((<span class="hljs-keyword">new</span> Job)-&gt;onQueue(<span class="hljs-string">\'high\'</span>))</span>;</span></code></pre>\n  <p>To start a worker that verifies that all of the <code>high</code> queue jobs are processed before continuing to any jobs on the <code>low</code> queue, pass a comma-delimited list of queue names to the <code>work</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan <span class="hljs-built_in">queue</span>:work --<span class="hljs-built_in">queue</span>=high,low</code></pre>\n  <p><a name="queue-workers-and-deployment"></a></p>\n\n          <p><a name="queue-workers-amp-deployment"></a></p>\n          <h3>\n            <a href="#queue-workers-amp-deployment">\n              Queue Workers &amp; Deployment\n            </a>\n          </h3><p>Since queue workers are long-lived processes, they will not pick up changes to your code without being restarted. So, the simplest way to deploy an application using queue workers is to restart the workers during your deployment process. You may gracefully restart all of the workers by issuing the <code>queue:restart</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan <span class="hljs-built_in">queue</span>:restart</code></pre>\n  <p>This command will instruct all queue workers to gracefully &quot;die&quot; after they finish processing their current job so that no existing jobs are lost. Since the queue workers will die when the <code>queue:restart</code> command is executed, you should be running a process manager such as <a href="#supervisor-configuration">Supervisor</a> to automatically restart the queue workers.</p>\n<blockquote>\n<p>{tip} The queue uses the <router-link to="/docs/{{version}}/cache">cache</router-link> to store restart signals, so you should verify a cache driver is properly configured for your application before using this feature.</p>\n</blockquote>\n<p><a name="job-expirations-and-timeouts"></a></p>\n\n          <p><a name="job-expirations-amp-timeouts"></a></p>\n          <h3>\n            <a href="#job-expirations-amp-timeouts">\n              Job Expirations &amp; Timeouts\n            </a>\n          </h3>\n          <p><a name="job-expiration"></a></p>\n          <h4>\n            <a href="#job-expiration">\n              Job Expiration\n            </a>\n          </h4><p>In your <code>config/queue.php</code> configuration file, each queue connection defines a <code>retry_after</code> option. This option specifies how many seconds the queue connection should wait before retrying a job that is being processed. For example, if the value of <code>retry_after</code> is set to <code>90</code>, the job will be released back onto the queue if it has been processing for 90 seconds without being deleted. Typically, you should set the <code>retry_after</code> value to the maximum number of seconds your jobs should reasonably take to complete processing.</p>\n<blockquote>\n<p>{note} The only queue connection which does not contain a <code>retry_after</code> value is Amazon SQS. SQS will retry the job based on the <router-link to="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/AboutVT.html">Default Visibility Timeout</router-link> which is managed within the AWS console.</p>\n</blockquote>\n\n          <p><a name="worker-timeouts"></a></p>\n          <h4>\n            <a href="#worker-timeouts">\n              Worker Timeouts\n            </a>\n          </h4><p>The <code>queue:work</code> Artisan command exposes a <code>--timeout</code> option. The <code>--timeout</code> option specifies how long the Laravel queue master process will wait before killing off a child queue worker that is processing a job. Sometimes a child queue process can become &quot;frozen&quot; for various reasons, such as an external HTTP call that is not responding. The <code>--timeout</code> option removes frozen processes that have exceeded that specified time limit:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan queue:<span class="hljs-keyword">work</span> <span class="hljs-comment">--timeout=60</span></code></pre>\n  <p>The <code>retry_after</code> configuration option and the <code>--timeout</code> CLI option are different, but work together to ensure that jobs are not lost and that jobs are only successfully processed once.</p>\n<blockquote>\n<p>{note} The <code>--timeout</code> value should always be at least several seconds shorter than your <code>retry_after</code> configuration value. This will ensure that a worker processing a given job is always killed before the job is retried. If your <code>--timeout</code> option is longer than your <code>retry_after</code> configuration value, your jobs may be processed twice.</p>\n</blockquote>\n\n          <p><a name="worker-sleep-duration"></a></p>\n          <h4>\n            <a href="#worker-sleep-duration">\n              Worker Sleep Duration\n            </a>\n          </h4><p>When jobs are available on the queue, the worker will keep processing jobs with no delay in between them. However, the <code>sleep</code> option determines how long (in seconds) the worker will &quot;sleep&quot; if there are no new jobs available. While sleeping, the worker will not process any new jobs - the jobs will be processed after the worker wakes up again.</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan queue:<span class="hljs-keyword">work</span> <span class="hljs-comment">--sleep=3</span></code></pre>\n  <p><a name="supervisor-configuration"></a></p>\n\n          <p><a name="supervisor-configuration"></a></p>\n          <h2>\n            <a href="#supervisor-configuration">\n              Supervisor Configuration\n            </a>\n          </h2>\n          <p><a name="installing-supervisor"></a></p>\n          <h4>\n            <a href="#installing-supervisor">\n              Installing Supervisor\n            </a>\n          </h4><p>Supervisor is a process monitor for the Linux operating system, and will automatically restart your <code>queue:work</code> process if it fails. To install Supervisor on Ubuntu, you may use the following command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">sudo apt-<span class="hljs-builtin-name">get</span> install supervisor</code></pre>\n  <blockquote>\n<p>{tip} If configuring Supervisor yourself sounds overwhelming, consider using <router-link to="https://forge.laravel.com">Laravel Forge</router-link>, which will automatically install and configure Supervisor for your Laravel projects.</p>\n</blockquote>\n\n          <p><a name="configuring-supervisor"></a></p>\n          <h4>\n            <a href="#configuring-supervisor">\n              Configuring Supervisor\n            </a>\n          </h4><p>Supervisor configuration files are typically stored in the <code>/etc/supervisor/conf.d</code> directory. Within this directory, you may create any number of configuration files that instruct supervisor how your processes should be monitored. For example, let&#39;s create a <code>laravel-worker.conf</code> file that starts and monitors a <code>queue:work</code> process:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-section">[program:laravel-worker]</span>\n<span class="hljs-attr">process_name</span>=%(program_name)s_%(process_num)<span class="hljs-number">02</span>d\n<span class="hljs-attr">command</span>=php /home/forge/app.com/artisan queue:work sqs --sleep=<span class="hljs-number">3</span> --tries=<span class="hljs-number">3</span>\n<span class="hljs-attr">autostart</span>=<span class="hljs-literal">true</span>\n<span class="hljs-attr">autorestart</span>=<span class="hljs-literal">true</span>\n<span class="hljs-attr">user</span>=forge\n<span class="hljs-attr">numprocs</span>=<span class="hljs-number">8</span>\n<span class="hljs-attr">redirect_stderr</span>=<span class="hljs-literal">true</span>\n<span class="hljs-attr">stdout_logfile</span>=/home/forge/app.com/worker.log</code></pre>\n  <p>In this example, the <code>numprocs</code> directive will instruct Supervisor to run 8 <code>queue:work</code> processes and monitor all of them, automatically restarting them if they fail. You should change the <code>queue:work sqs</code> portion of the <code>command</code> directive to reflect your desired queue connection.</p>\n\n          <p><a name="starting-supervisor"></a></p>\n          <h4>\n            <a href="#starting-supervisor">\n              Starting Supervisor\n            </a>\n          </h4><p>Once the configuration file has been created, you may update the Supervisor configuration and start the processes using the following commands:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">sudo supervisorctl reread\n\nsudo supervisorctl <span class="hljs-keyword">update</span>\n\nsudo supervisorctl <span class="hljs-keyword">start</span> laravel-worker:*</code></pre>\n  <p>For more information on Supervisor, consult the <router-link to="http://supervisord.org/index.html">Supervisor documentation</router-link>.</p>\n<p><a name="dealing-with-failed-jobs"></a></p>\n\n          <p><a name="dealing-with-failed-jobs"></a></p>\n          <h2>\n            <a href="#dealing-with-failed-jobs">\n              Dealing With Failed Jobs\n            </a>\n          </h2><p>Sometimes your queued jobs will fail. Don&#39;t worry, things don&#39;t always go as planned! Laravel includes a convenient way to specify the maximum number of times a job should be attempted. After a job has exceeded this amount of attempts, it will be inserted into the <code>failed_jobs</code> database table. To create a migration for the <code>failed_jobs</code> table, you may use the <code>queue:failed-table</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan queue:failed-<span class="hljs-keyword">table</span>\n\nphp artisan migrate</code></pre>\n  <p>Then, when running your <a href="#running-the-queue-worker">queue worker</a>, you can specify the maximum number of times a job should be attempted using the <code>--tries</code> switch on the <code>queue:work</code> command. If you do not specify a value for the <code>--tries</code> option, jobs will only be attempted once:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan queue:<span class="hljs-keyword">work</span> redis <span class="hljs-comment">--tries=3</span></code></pre>\n  <p>In addition, you may specify how many seconds Laravel should wait before retrying a job that has failed using the <code>--delay</code> option. By default, a job is retried immediately:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan queue:work redis <span class="hljs-attribute">--tries</span>=3 <span class="hljs-attribute">--delay</span>=3</code></pre>\n  <p>If you would like to configure the failed job retry delay on a per-job basis, you may do so by defining a <code>retryAfter</code> property on your queued job class:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * The number of seconds to wait before retrying the job.\n *\n * <span class="hljs-doctag">@var</span> int\n */</span>\n<span class="hljs-keyword">public</span> $retryAfter = <span class="hljs-number">3</span>;</code></pre>\n  <p><a name="cleaning-up-after-failed-jobs"></a></p>\n\n          <p><a name="cleaning-up-after-failed-jobs"></a></p>\n          <h3>\n            <a href="#cleaning-up-after-failed-jobs">\n              Cleaning Up After Failed Jobs\n            </a>\n          </h3><p>You may define a <code>failed</code> method directly on your job class, allowing you to perform job specific clean-up when a failure occurs. This is the perfect location to send an alert to your users or revert any actions performed by the job. The <code>Exception</code> that caused the job to fail will be passed to the <code>failed</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Jobs</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">AudioProcessor</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Podcast</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Exception</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Bus</span>\\<span class="hljs-title">Queueable</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">Queue</span>\\<span class="hljs-title">ShouldQueue</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Queue</span>\\<span class="hljs-title">InteractsWithQueue</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Queue</span>\\<span class="hljs-title">SerializesModels</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProcessPodcast</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ShouldQueue</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">InteractsWithQueue</span>, <span class="hljs-title">Queueable</span>, <span class="hljs-title">SerializesModels</span>;\n\n    <span class="hljs-keyword">protected</span> $podcast;\n\n    <span class="hljs-comment">/**\n     * Create a new job instance.\n     *\n     * <span class="hljs-doctag">@param</span>  Podcast  $podcast\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(Podcast $podcast)</span>\n    </span>{\n        <span class="hljs-keyword">$this</span>-&gt;podcast = $podcast;\n    }\n\n    <span class="hljs-comment">/**\n     * Execute the job.\n     *\n     * <span class="hljs-doctag">@param</span>  AudioProcessor  $processor\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">(AudioProcessor $processor)</span>\n    </span>{\n        <span class="hljs-comment">// Process uploaded podcast...</span>\n    }\n\n    <span class="hljs-comment">/**\n     * The job failed to process.\n     *\n     * <span class="hljs-doctag">@param</span>  Exception  $exception\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">failed</span><span class="hljs-params">(Exception $exception)</span>\n    </span>{\n        <span class="hljs-comment">// Send user notification of failure, etc...</span>\n    }\n}</span></code></pre>\n  <p><a name="failed-job-events"></a></p>\n\n          <p><a name="failed-job-events"></a></p>\n          <h3>\n            <a href="#failed-job-events">\n              Failed Job Events\n            </a>\n          </h3><p>If you would like to register an event that will be called when a job fails, you may use the <code>Queue::failing</code> method. This event is a great opportunity to notify your team via email or <router-link to="https://www.slack.com">Slack</router-link>. For example, we may attach a callback to this event from the <code>AppServiceProvider</code> that is included with Laravel:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Providers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Queue</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">ServiceProvider</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Queue</span>\\<span class="hljs-title">Events</span>\\<span class="hljs-title">JobFailed</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Register any application services.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-comment">//</span>\n    }\n\n    <span class="hljs-comment">/**\n     * Bootstrap any application services.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n    </span>{\n        Queue::failing(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(JobFailed $event)</span> </span>{\n            <span class="hljs-comment">// $event-&gt;connectionName</span>\n            <span class="hljs-comment">// $event-&gt;job</span>\n            <span class="hljs-comment">// $event-&gt;exception</span>\n        });\n    }\n}</span></code></pre>\n  <p><a name="retrying-failed-jobs"></a></p>\n\n          <p><a name="retrying-failed-jobs"></a></p>\n          <h3>\n            <a href="#retrying-failed-jobs">\n              Retrying Failed Jobs\n            </a>\n          </h3><p>To view all of your failed jobs that have been inserted into your <code>failed_jobs</code> database table, you may use the <code>queue:failed</code> Artisan command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan <span class="hljs-built_in">queue</span>:failed</code></pre>\n  <p>The <code>queue:failed</code> command will list the job ID, connection, queue, and failure time. The job ID may be used to retry the failed job. For instance, to retry a failed job that has an ID of <code>5</code>, issue the following command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan queue:retry <span class="hljs-number">5</span></code></pre>\n  <p>To retry all of your failed jobs, execute the <code>queue:retry</code> command and pass <code>all</code> as the ID:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan <span class="hljs-built_in">queue</span>:retry <span class="hljs-literal">all</span></code></pre>\n  <p>If you would like to delete a failed job, you may use the <code>queue:forget</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan queue:forget <span class="hljs-number">5</span></code></pre>\n  <p>To delete all of your failed jobs, you may use the <code>queue:flush</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan <span class="hljs-built_in">queue</span>:flush</code></pre>\n  <p><a name="ignoring-missing-models"></a></p>\n\n          <p><a name="ignoring-missing-models"></a></p>\n          <h3>\n            <a href="#ignoring-missing-models">\n              Ignoring Missing Models\n            </a>\n          </h3><p>When injecting an Eloquent model into a job, it is automatically serialized before being placed on the queue and restored when the job is processed. However, if the model has been deleted while the job was waiting to be processed by a worker, your job may fail with a <code>ModelNotFoundException</code>.</p>\n<p>For convenience, you may choose to automatically delete jobs with missing models by setting your job&#39;s <code>deleteWhenMissingModels</code> property to <code>true</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Delete the job if its models no longer exist.\n *\n * <span class="hljs-doctag">@var</span> bool\n */</span>\n<span class="hljs-keyword">public</span> $deleteWhenMissingModels = <span class="hljs-keyword">true</span>;</code></pre>\n  <p><a name="job-events"></a></p>\n\n          <p><a name="job-events"></a></p>\n          <h2>\n            <a href="#job-events">\n              Job Events\n            </a>\n          </h2><p>Using the <code>before</code> and <code>after</code> methods on the <code>Queue</code> <router-link to="/docs/{{version}}/facades">facade</router-link>, you may specify callbacks to be executed before or after a queued job is processed. These callbacks are a great opportunity to perform additional logging or increment statistics for a dashboard. Typically, you should call these methods from a <router-link to="/docs/{{version}}/providers">service provider</router-link>. For example, we may use the <code>AppServiceProvider</code> that is included with Laravel:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Providers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Queue</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">ServiceProvider</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Queue</span>\\<span class="hljs-title">Events</span>\\<span class="hljs-title">JobProcessed</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Queue</span>\\<span class="hljs-title">Events</span>\\<span class="hljs-title">JobProcessing</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Register any application services.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-comment">//</span>\n    }\n\n    <span class="hljs-comment">/**\n     * Bootstrap any application services.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n    </span>{\n        Queue::before(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(JobProcessing $event)</span> </span>{\n            <span class="hljs-comment">// $event-&gt;connectionName</span>\n            <span class="hljs-comment">// $event-&gt;job</span>\n            <span class="hljs-comment">// $event-&gt;job-&gt;payload()</span>\n        });\n\n        Queue::after(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(JobProcessed $event)</span> </span>{\n            <span class="hljs-comment">// $event-&gt;connectionName</span>\n            <span class="hljs-comment">// $event-&gt;job</span>\n            <span class="hljs-comment">// $event-&gt;job-&gt;payload()</span>\n        });\n    }\n}</span></code></pre>\n  <p>Using the <code>looping</code> method on the <code>Queue</code> <router-link to="/docs/{{version}}/facades">facade</router-link>, you may specify callbacks that execute before the worker attempts to fetch a job from a queue. For example, you might register a Closure to rollback any transactions that were left open by a previously failed job:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Queue::looping(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">while</span> (DB::transactionLevel() &gt; <span class="hljs-number">0</span>) {\n        DB::rollBack();\n    }\n});</code></pre>\n  '},d43f:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="laravel-cashier"></a></p>\n          <h1>\n            <a href="#laravel-cashier">\n              Laravel Cashier\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#upgrading-cashier">Upgrading Cashier</a></li>\n<li><a href="#installation">Installation</a></li>\n<li><a href="#configuration">Configuration</a><ul>\n<li><a href="#billable-model">Billable Model</a></li>\n<li><a href="#api-keys">API Keys</a></li>\n<li><a href="#currency-configuration">Currency Configuration</a></li>\n<li><a href="#logging">Logging</a></li>\n</ul>\n</li>\n<li><a href="#customers">Customers</a><ul>\n<li><a href="#creating-customers">Creating Customers</a></li>\n</ul>\n</li>\n<li><a href="#payment-methods">Payment Methods</a><ul>\n<li><a href="#storing-payment-methods">Storing Payment Methods</a></li>\n<li><a href="#retrieving-payment-methods">Retrieving Payment Methods</a></li>\n<li><a href="#check-for-a-payment-method">Determining If A User Has A Payment Method</a></li>\n<li><a href="#updating-the-default-payment-method">Updating The Default Payment Method</a></li>\n<li><a href="#adding-payment-methods">Adding Payment Methods</a></li>\n<li><a href="#deleting-payment-methods">Deleting Payment Methods</a></li>\n</ul>\n</li>\n<li><a href="#subscriptions">Subscriptions</a><ul>\n<li><a href="#creating-subscriptions">Creating Subscriptions</a></li>\n<li><a href="#checking-subscription-status">Checking Subscription Status</a></li>\n<li><a href="#changing-plans">Changing Plans</a></li>\n<li><a href="#subscription-quantity">Subscription Quantity</a></li>\n<li><a href="#subscription-taxes">Subscription Taxes</a></li>\n<li><a href="#subscription-anchor-date">Subscription Anchor Date</a></li>\n<li><a href="#cancelling-subscriptions">Cancelling Subscriptions</a></li>\n<li><a href="#resuming-subscriptions">Resuming Subscriptions</a></li>\n</ul>\n</li>\n<li><a href="#subscription-trials">Subscription Trials</a><ul>\n<li><a href="#with-payment-method-up-front">With Payment Method Up Front</a></li>\n<li><a href="#without-payment-method-up-front">Without Payment Method Up Front</a></li>\n</ul>\n</li>\n<li><a href="#handling-stripe-webhooks">Handling Stripe Webhooks</a><ul>\n<li><a href="#defining-webhook-event-handlers">Defining Webhook Event Handlers</a></li>\n<li><a href="#handling-failed-subscriptions">Failed Subscriptions</a></li>\n<li><a href="#verifying-webhook-signatures">Verifying Webhook Signatures</a></li>\n</ul>\n</li>\n<li><a href="#single-charges">Single Charges</a><ul>\n<li><a href="#simple-charge">Simple Charge</a></li>\n<li><a href="#charge-with-invoice">Charge With Invoice</a></li>\n<li><a href="#refunding-charges">Refunding Charges</a></li>\n</ul>\n</li>\n<li><a href="#invoices">Invoices</a><ul>\n<li><a href="#generating-invoice-pdfs">Generating Invoice PDFs</a></li>\n</ul>\n</li>\n<li><a href="#strong-customer-authentication">Strong Customer Authentication (SCA)</a><ul>\n<li><a href="#payments-requiring-additional-confirmation">Payments Requiring Additional Confirmation</a></li>\n<li><a href="#off-session-payment-notifications">Off-session Payment Notifications</a></li>\n</ul>\n</li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Laravel Cashier provides an expressive, fluent interface to <router-link to="https://stripe.com">Stripe&#39;s</router-link> subscription billing services. It handles almost all of the boilerplate subscription billing code you are dreading writing. In addition to basic subscription management, Cashier can handle coupons, swapping subscription, subscription &quot;quantities&quot;, cancellation grace periods, and even generate invoice PDFs.</p>\n<p><a name="upgrading-cashier"></a></p>\n\n          <p><a name="upgrading-cashier"></a></p>\n          <h2>\n            <a href="#upgrading-cashier">\n              Upgrading Cashier\n            </a>\n          </h2><p>When upgrading to a new version of Cashier, it&#39;s important that you carefully review <router-link to="https://github.com/laravel/cashier/blob/master/UPGRADE.md">the upgrade guide</router-link>.</p>\n<blockquote>\n<p>{note} To prevent breaking changes, Cashier uses a fixed Stripe API version. Cashier 10.1 utilizes Stripe API version <code>2019-08-14</code>. The Stripe API version will be updated on minor releases in order to make use of new Stripe features and improvements.</p>\n</blockquote>\n<p><a name="installation"></a></p>\n\n          <p><a name="installation"></a></p>\n          <h2>\n            <a href="#installation">\n              Installation\n            </a>\n          </h2><p>First, require the Cashier package for Stripe with Composer:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">composer</span> <span class="hljs-meta">require</span> laravel/cashier</code></pre>\n  <blockquote>\n<p>{note} To ensure Cashier properly handles all Stripe events, remember to <a href="#handling-stripe-webhooks">set up Cashier&#39;s webhook handling</a>.</p>\n</blockquote>\n\n          <p><a name="database-migrations"></a></p>\n          <h4>\n            <a href="#database-migrations">\n              Database Migrations\n            </a>\n          </h4><p>The Cashier service provider registers its own database migration directory, so remember to migrate your database after installing the package. The Cashier migrations will add several columns to your <code>users</code> table as well as create a new <code>subscriptions</code> table to hold all of your customer&#39;s subscriptions:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">php artisan migrate</span></code></pre>\n  <p>If you need to overwrite the migrations that ship with the Cashier package, you can publish them using the <code>vendor:publish</code> Artisan command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan <span class="hljs-string">vendor:</span>publish --tag=<span class="hljs-string">"cashier-migrations"</span></code></pre>\n  <p>If you would like to prevent Cashier&#39;s migrations from running entirely, you may use the <code>ignoreMigrations</code> provided by Cashier. Typically, this method should be called in the <code>register</code> method of your <code>AppServiceProvider</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Cashier</span>\\<span class="hljs-title">Cashier</span>;\n\nCashier::ignoreMigrations();</code></pre>\n  <blockquote>\n<p>{note} Stripe recommends that any column used for storing Stripe identifiers should be case-sensitive. Therefore, you should ensure the column collation for the <code>stripe_id</code> column is set to, for example, <code>utf8_bin</code> in MySQL. More info can be found <router-link to="https://stripe.com/docs/upgrades#what-changes-does-stripe-consider-to-be-backwards-compatible">in the Stripe documentation</router-link>.</p>\n</blockquote>\n<p><a name="configuration"></a></p>\n\n          <p><a name="configuration"></a></p>\n          <h2>\n            <a href="#configuration">\n              Configuration\n            </a>\n          </h2><p><a name="billable-model"></a></p>\n\n          <p><a name="billable-model"></a></p>\n          <h3>\n            <a href="#billable-model">\n              Billable Model\n            </a>\n          </h3><p>Before using Cashier, add the <code>Billable</code> trait to your model definition. This trait provides various methods to allow you to perform common billing tasks, such as creating subscriptions, applying coupons, and updating payment method information:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">use <span class="hljs-type">Laravel</span>\\<span class="hljs-type">Cashier</span>\\<span class="hljs-type">Billable</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Authenticatable</span></span>\n{\n    use <span class="hljs-type">Billable</span>;\n}</code></pre>\n  <p>Cashier assumes your Billable model will be the <code>App\\User</code> class that ships with Laravel. If you wish to change this you can specify a different model in your <code>.env</code> file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attr">CASHIER_MODEL</span>=App\\User</code></pre>\n  <blockquote>\n<p>{note} If you&#39;re using a model other than Laravel&#39;s supplied <code>App\\User</code> model, you&#39;ll need to publish and alter the <a href="#installation">migrations</a> provided to match your alternative model&#39;s table name.</p>\n</blockquote>\n<p><a name="api-keys"></a></p>\n\n          <p><a name="api-keys"></a></p>\n          <h3>\n            <a href="#api-keys">\n              API Keys\n            </a>\n          </h3><p>Next, you should configure your Stripe key in your <code>.env</code> file. You can retrieve your Stripe API keys from the Stripe control panel.</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attr">STRIPE_KEY</span>=your-stripe-key\n<span class="hljs-attr">STRIPE_SECRET</span>=your-stripe-secret</code></pre>\n  <p><a name="currency-configuration"></a></p>\n\n          <p><a name="currency-configuration"></a></p>\n          <h3>\n            <a href="#currency-configuration">\n              Currency Configuration\n            </a>\n          </h3><p>The default Cashier currency is United States Dollars (USD). You can change the default currency by setting the <code>CASHIER_CURRENCY</code> environment variable:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attr">CASHIER_CURRENCY</span>=eur</code></pre>\n  <p>In addition to configuring Cashier&#39;s currency, you may also specify a locale to be used when formatting money values for display on invoices. Internally, Cashier utilizes <router-link to="https://www.php.net/manual/en/class.numberformatter.php">PHP&#39;s <code>NumberFormatter</code> class</router-link> to set the currency locale:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attr">CASHIER_CURRENCY_LOCALE</span>=nl_BE</code></pre>\n  <blockquote>\n<p>{note} In order to use locales other than <code>en</code>, ensure the <code>ext-intl</code> PHP extension is installed and configured on your server.</p>\n</blockquote>\n<p><a name="logging"></a></p>\n\n          <p><a name="logging"></a></p>\n          <h4>\n            <a href="#logging">\n              Logging\n            </a>\n          </h4><p>Cashier allows you to specify the log channel to be used when logging all Stripe related exceptions. You may specify the log channel using the <code>CASHIER_LOGGER</code> environment variable:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-type">CASHIER_LOGGER</span>=<span class="hljs-keyword">default</span></code></pre>\n  <p><a name="customers"></a></p>\n\n          <p><a name="customers"></a></p>\n          <h2>\n            <a href="#customers">\n              Customers\n            </a>\n          </h2><p><a name="creating-customers"></a></p>\n\n          <p><a name="creating-customers"></a></p>\n          <h3>\n            <a href="#creating-customers">\n              Creating Customers\n            </a>\n          </h3><p>Occasionally, you may wish to create a Stripe customer without beginning a subscription. You may accomplish this using the <code>createAsStripeCustomer</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span>-&gt;createAsStripeCustomer();</code></pre>\n  <p>Once the customer has been created in Stripe, you may begin a subscription at a later date.</p>\n<p><a name="payment-methods"></a></p>\n\n          <p><a name="payment-methods"></a></p>\n          <h2>\n            <a href="#payment-methods">\n              Payment Methods\n            </a>\n          </h2><p><a name="storing-payment-methods"></a></p>\n\n          <p><a name="storing-payment-methods"></a></p>\n          <h3>\n            <a href="#storing-payment-methods">\n              Storing Payment Methods\n            </a>\n          </h3><p>In order to create subscriptions or perform &quot;one off&quot; charges with Stripe, you will need to store a payment method and retrieve its identifier from Stripe. The approach used to accomplish differs based on whether you plan to use the payment method for subscriptions or single charges, so we will examine both below.</p>\n\n          <p><a name="payment-methods-for-subscriptions"></a></p>\n          <h4>\n            <a href="#payment-methods-for-subscriptions">\n              Payment Methods For Subscriptions\n            </a>\n          </h4><p>When storing credit cards to a customer for future use, the Stripe Setup Intents API must be used to securely gather the customer&#39;s payment method details. A &quot;Setup Intent&quot; indicates to Stripe the intention to charge a customer&#39;s payment method. Cashier&#39;s <code>Billable</code> trait includes the <code>createSetupIntent</code> to easily create a new Setup Intent. You should call this method from the route or controller that will render the form which gathers your customer&#39;s payment method details:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">return</span> view(<span class="hljs-string">\'update-payment-method\'</span>, [\n    <span class="hljs-string">\'intent\'</span> =&gt; $user-&gt;createSetupIntent()\n]);</code></pre>\n  <p>After you have created the Setup Intent and passed it to the view, you should attach its secret to the element that will gather the payment method. For example, consider this &quot;update payment method&quot; form:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"card-holder-name"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- Stripe Elements Placeholder --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"card-element"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"card-button"</span> <span class="hljs-attr">data-secret</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ $intent-&gt;client_secret }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span>\n    Update Payment Method\n<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></code></pre>\n  <p>Next, the Stripe.js library may be used to attach a Stripe Element to the form and securely gather the customer&#39;s payment details:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://js.stripe.com/v3/"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">\n    <span class="hljs-keyword">const</span> stripe = Stripe(<span class="hljs-string">\'stripe-public-key\'</span>);\n\n    <span class="hljs-keyword">const</span> elements = stripe.elements();\n    <span class="hljs-keyword">const</span> cardElement = elements.create(<span class="hljs-string">\'card\'</span>);\n\n    cardElement.mount(<span class="hljs-string">\'#card-element\'</span>);\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre>\n  <p>Next, the card can be verified and a secure &quot;payment method identifier&quot; can be retrieved from Stripe using <router-link to="https://stripe.com/docs/stripe-js/reference#stripe-handle-card-setup">Stripe&#39;s <code>handleCardSetup</code> method</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">const</span> cardHolderName = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'card-holder-name\'</span>);\n<span class="hljs-keyword">const</span> cardButton = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'card-button\'</span>);\n<span class="hljs-keyword">const</span> clientSecret = cardButton.dataset.secret;\n\ncardButton.addEventListener(<span class="hljs-string">\'click\'</span>, <span class="hljs-keyword">async</span> (e) =&gt; {\n    <span class="hljs-keyword">const</span> { setupIntent, error } = <span class="hljs-keyword">await</span> stripe.handleCardSetup(\n        clientSecret, cardElement, {\n            payment_method_data: {\n                billing_details: { name: cardHolderName.value }\n            }\n        }\n    );\n\n    <span class="hljs-keyword">if</span> (error) {\n        <span class="hljs-comment">// Display "error.message" to the user...</span>\n    } <span class="hljs-keyword">else</span> {\n        <span class="hljs-comment">// The card has been verified successfully...</span>\n    }\n});</code></pre>\n  <p>After the card has been verified by Stripe, you may pass the resulting <code>setupIntent.payment_method</code> identifier to your Laravel application, where it can be attached to the customer. The payment method can either be <a href="#adding-payment-methods">added as a new payment method</a> or <a href="#updating-the-default-payment-method">used to update the default payment method</a>. You can also immediately use the payment method identifier to <a href="#creating-subscriptions">create a new subscription</a>.</p>\n<blockquote>\n<p>{tip} If you would like more information about Setup Intents and gathering customer payment details please <router-link to="https://stripe.com/docs/payments/cards/saving-cards#saving-card-without-payment">review this overview provided by Stripe</router-link>.</p>\n</blockquote>\n\n          <p><a name="payment-methods-for-single-charges"></a></p>\n          <h4>\n            <a href="#payment-methods-for-single-charges">\n              Payment Methods For Single Charges\n            </a>\n          </h4><p>Of course, when making a single charge against a customer&#39;s payment method we&#39;ll only need to use a payment method identifier a single time. Due to Stripe limitations, you may not use the stored default payment method of a customer for single charges. You must allow the customer to enter their payment method details using the Stripe.js library. For example, consider the following form:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"card-holder-name"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- Stripe Elements Placeholder --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"card-element"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"card-button"</span>&gt;</span>\n    Process Payment\n<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></code></pre>\n  <p>Next, the Stripe.js library may be used to attach a Stripe Element to the form and securely gather the customer&#39;s payment details:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://js.stripe.com/v3/"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">\n    <span class="hljs-keyword">const</span> stripe = Stripe(<span class="hljs-string">\'stripe-public-key\'</span>);\n\n    <span class="hljs-keyword">const</span> elements = stripe.elements();\n    <span class="hljs-keyword">const</span> cardElement = elements.create(<span class="hljs-string">\'card\'</span>);\n\n    cardElement.mount(<span class="hljs-string">\'#card-element\'</span>);\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre>\n  <p>Next, the card can be verified and a secure &quot;payment method identifier&quot; can be retrieved from Stripe using <router-link to="https://stripe.com/docs/stripe-js/reference#stripe-create-payment-method">Stripe&#39;s <code>createPaymentMethod</code> method</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">const</span> cardHolderName = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'card-holder-name\'</span>);\n<span class="hljs-keyword">const</span> cardButton = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'card-button\'</span>);\n\ncardButton.addEventListener(<span class="hljs-string">\'click\'</span>, <span class="hljs-keyword">async</span> (e) =&gt; {\n    <span class="hljs-keyword">const</span> { paymentMethod, error } = <span class="hljs-keyword">await</span> stripe.createPaymentMethod(\n        <span class="hljs-string">\'card\'</span>, cardElement, {\n            billing_details: { name: cardHolderName.value }\n        }\n    );\n\n    <span class="hljs-keyword">if</span> (error) {\n        <span class="hljs-comment">// Display "error.message" to the user...</span>\n    } <span class="hljs-keyword">else</span> {\n        <span class="hljs-comment">// The card has been verified successfully...</span>\n    }\n});</code></pre>\n  <p>If the card is verified successfully, you may pass the <code>paymentMethod.id</code> to your Laravel application and process a <a href="#simple-charge">single charge</a>.</p>\n<p><a name="retrieving-payment-methods"></a></p>\n\n          <p><a name="retrieving-payment-methods"></a></p>\n          <h3>\n            <a href="#retrieving-payment-methods">\n              Retrieving Payment Methods\n            </a>\n          </h3><p>The <code>paymentMethods</code> method on the Billable model instance returns a collection of <code>Laravel\\Cashier\\PaymentMethod</code> instances:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$paymentMethods</span> = <span class="hljs-variable">$user</span>-&gt;paymentMethods();</code></pre>\n  <p>To retrieve the default payment method, the <code>defaultPaymentMethod</code> method may be used:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$paymentMethod</span> = <span class="hljs-variable">$user</span>-&gt;defaultPaymentMethod();</code></pre>\n  <p>You can also retrieve a specific payment method that is owned by the Billable model using the <code>findPaymentMethod</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$paymentMethod</span> = <span class="hljs-variable">$user</span>-&gt;findPaymentMethod(<span class="hljs-variable">$paymentMethodId</span>);</code></pre>\n  <p><a name="check-for-a-payment-method"></a></p>\n\n          <p><a name="determining-if-a-user-has-a-payment-method"></a></p>\n          <h3>\n            <a href="#determining-if-a-user-has-a-payment-method">\n              Determining If A User Has A Payment Method\n            </a>\n          </h3><p>To determine if a Billable model has a payment method attached to their account, use the <code>hasPaymentMethod</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> ($user-&gt;hasPaymentMethod()) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p><a name="updating-the-default-payment-method"></a></p>\n\n          <p><a name="updating-the-default-payment-method"></a></p>\n          <h3>\n            <a href="#updating-the-default-payment-method">\n              Updating The Default Payment Method\n            </a>\n          </h3><p>The <code>updateDefaultPaymentMethod</code> method may be used to update a customer&#39;s default payment method information. This method accepts a Stripe payment method identifier and will assign the new payment method as the default billing payment method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span>-&gt;updateDefaultPaymentMethod(<span class="hljs-variable">$paymentMethod</span>);</code></pre>\n  <p>To sync your default payment method information with the customer&#39;s default payment method information in Stripe, you may use the <code>updateDefaultPaymentMethodFromStripe</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span>-&gt;updateDefaultPaymentMethodFromStripe();</code></pre>\n  <blockquote>\n<p>{note} The default payment method on a customer can only be used for invoicing and creating new subscriptions. Due to limitations from Stripe, it may not be used for single charges.</p>\n</blockquote>\n<p><a name="adding-payment-methods"></a></p>\n\n          <p><a name="adding-payment-methods"></a></p>\n          <h3>\n            <a href="#adding-payment-methods">\n              Adding Payment Methods\n            </a>\n          </h3><p>To add a new payment method, you may call the <code>addPaymentMethod</code> method on the billable user, passing the payment method identifier:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span>-&gt;addPaymentMethod(<span class="hljs-variable">$paymentMethod</span>);</code></pre>\n  <blockquote>\n<p>{tip} To learn how to retrieve payment method identifiers please review the <a href="#storing-payment-methods">payment method storage documentation</a>.</p>\n</blockquote>\n<p><a name="deleting-payment-methods"></a></p>\n\n          <p><a name="deleting-payment-methods"></a></p>\n          <h3>\n            <a href="#deleting-payment-methods">\n              Deleting Payment Methods\n            </a>\n          </h3><p>To delete a payment method, you may call the <code>delete</code> method on the <code>Laravel\\Cashier\\PaymentMethod</code> instance you wish to delete:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$paymentMethod</span>-&gt;<span class="hljs-keyword">delete</span>();</code></pre>\n  <p>The <code>deletePaymentMethods</code> method will delete all of the payment method information for the Billable model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span>-&gt;deletePaymentMethods();</code></pre>\n  <blockquote>\n<p>{note} If a user has an active subscription, you should prevent them from deleting their default payment method.</p>\n</blockquote>\n<p><a name="subscriptions"></a></p>\n\n          <p><a name="subscriptions"></a></p>\n          <h2>\n            <a href="#subscriptions">\n              Subscriptions\n            </a>\n          </h2><p><a name="creating-subscriptions"></a></p>\n\n          <p><a name="creating-subscriptions"></a></p>\n          <h3>\n            <a href="#creating-subscriptions">\n              Creating Subscriptions\n            </a>\n          </h3><p>To create a subscription, first retrieve an instance of your billable model, which typically will be an instance of <code>App\\User</code>. Once you have retrieved the model instance, you may use the <code>newSubscription</code> method to create the model&#39;s subscription:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span> = User::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-variable">$user</span>-&gt;newSubscription(<span class="hljs-string">\'default\'</span>, <span class="hljs-string">\'premium\'</span>)-&gt;create(<span class="hljs-variable">$paymentMethod</span>);</code></pre>\n  <p>The first argument passed to the <code>newSubscription</code> method should be the name of the subscription. If your application only offers a single subscription, you might call this <code>default</code> or <code>primary</code>. The second argument is the specific plan the user is subscribing to. This value should correspond to the plan&#39;s identifier in Stripe.</p>\n<p>The <code>create</code> method, which accepts <a href="#storing-payment-methods">a Stripe payment method identifier</a> or Stripe <code>PaymentMethod</code> object, will begin the subscription as well as update your database with the customer ID and other relevant billing information.</p>\n<blockquote>\n<p>{note} Passing a payment method identifier directly to the <code>create()</code> subscription method will also automatically add it to the user&#39;s stored payment methods.</p>\n</blockquote>\n\n          <p><a name="additional-user-details"></a></p>\n          <h4>\n            <a href="#additional-user-details">\n              Additional User Details\n            </a>\n          </h4><p>If you would like to specify additional customer details, you may do so by passing them as the second argument to the <code>create</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user-&gt;newSubscription(<span class="hljs-string">\'default\'</span>, <span class="hljs-string">\'monthly\'</span>)-&gt;create($paymentMethod, [\n    <span class="hljs-string">\'email\'</span> =&gt; $email,\n]);</code></pre>\n  <p>To learn more about the additional fields supported by Stripe, check out Stripe&#39;s <router-link to="https://stripe.com/docs/api#create_customer">documentation on customer creation</router-link>.</p>\n\n          <p><a name="coupons"></a></p>\n          <h4>\n            <a href="#coupons">\n              Coupons\n            </a>\n          </h4><p>If you would like to apply a coupon when creating the subscription, you may use the <code>withCoupon</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user-&gt;newSubscription<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'default\'</span>, <span class="hljs-string">\'monthly\'</span>)</span>\n     -&gt;</span>withCoupon<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'code\'</span>)</span>\n     -&gt;</span>create($paymentMethod);</code></pre>\n  <p><a name="checking-subscription-status"></a></p>\n\n          <p><a name="checking-subscription-status"></a></p>\n          <h3>\n            <a href="#checking-subscription-status">\n              Checking Subscription Status\n            </a>\n          </h3><p>Once a user is subscribed to your application, you may easily check their subscription status using a variety of convenient methods. First, the <code>subscribed</code> method returns <code>true</code> if the user has an active subscription, even if the subscription is currently within its trial period:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> ($user-&gt;subscribed(<span class="hljs-string">\'default\'</span>)) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p>The <code>subscribed</code> method also makes a great candidate for a <router-link to="/docs/{{version}}/middleware">route middleware</router-link>, allowing you to filter access to routes and controllers based on the user&#39;s subscription status:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">($request, Closure $next)</span>\n</span>{\n    <span class="hljs-keyword">if</span> ($request-&gt;user() &amp;&amp; ! $request-&gt;user()-&gt;subscribed(<span class="hljs-string">\'default\'</span>)) {\n        <span class="hljs-comment">// This user is not a paying customer...</span>\n        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">\'billing\'</span>);\n    }\n\n    <span class="hljs-keyword">return</span> $next($request);\n}</code></pre>\n  <p>If you would like to determine if a user is still within their trial period, you may use the <code>onTrial</code> method. This method can be useful for displaying a warning to the user that they are still on their trial period:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> <span class="hljs-function"><span class="hljs-params">($user-&gt;subscription(<span class="hljs-string">\'default\'</span>)-&gt;onTrial())</span> {\n    //\n}</span></code></pre>\n  <p>The <code>subscribedToPlan</code> method may be used to determine if the user is subscribed to a given plan based on a given Stripe plan ID. In this example, we will determine if the user&#39;s <code>default</code> subscription is actively subscribed to the <code>monthly</code> plan:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> ($user-&gt;subscribedToPlan(<span class="hljs-string">\'monthly\'</span>, <span class="hljs-string">\'default\'</span>)) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p>By passing an array to the <code>subscribedToPlan</code> method, you may determine if the user&#39;s <code>default</code> subscription is actively subscribed to the <code>monthly</code> or the <code>yearly</code> plan:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> ($user-&gt;subscribedToPlan([<span class="hljs-string">\'monthly\'</span>, <span class="hljs-string">\'yearly\'</span>], <span class="hljs-string">\'default\'</span>)) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p>The <code>recurring</code> method may be used to determine if the user is currently subscribed and is no longer within their trial period:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> <span class="hljs-function"><span class="hljs-params">($user-&gt;subscription(<span class="hljs-string">\'default\'</span>)-&gt;recurring())</span> {\n    //\n}</span></code></pre>\n  \n          <p><a name="cancelled-subscription-status"></a></p>\n          <h4>\n            <a href="#cancelled-subscription-status">\n              Cancelled Subscription Status\n            </a>\n          </h4><p>To determine if the user was once an active subscriber, but has cancelled their subscription, you may use the <code>cancelled</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> <span class="hljs-function"><span class="hljs-params">($user-&gt;subscription(<span class="hljs-string">\'default\'</span>)-&gt;cancelled())</span> {\n    //\n}</span></code></pre>\n  <p>You may also determine if a user has cancelled their subscription, but are still on their &quot;grace period&quot; until the subscription fully expires. For example, if a user cancels a subscription on March 5th that was originally scheduled to expire on March 10th, the user is on their &quot;grace period&quot; until March 10th. Note that the <code>subscribed</code> method still returns <code>true</code> during this time:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> <span class="hljs-function"><span class="hljs-params">($user-&gt;subscription(<span class="hljs-string">\'default\'</span>)-&gt;onGracePeriod())</span> {\n    //\n}</span></code></pre>\n  <p>To determine if the user has cancelled their subscription and is no longer within their &quot;grace period&quot;, you may use the <code>ended</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> <span class="hljs-function"><span class="hljs-params">($user-&gt;subscription(<span class="hljs-string">\'default\'</span>)-&gt;ended())</span> {\n    //\n}</span></code></pre>\n  <p><a name="incomplete-and-past-due-status"></a></p>\n\n          <p><a name="incomplete-and-past-due-status"></a></p>\n          <h4>\n            <a href="#incomplete-and-past-due-status">\n              Incomplete and Past Due Status\n            </a>\n          </h4><p>If a subscription requires a secondary payment action after creation the subscription will be marked as <code>incomplete</code>. Subscription statuses are stored in the <code>stripe_status</code> column of Cashier&#39;s <code>subscriptions</code> database table.</p>\n<p>Similarly, if a secondary payment action is required when swapping plans the subscription will be marked as <code>past_due</code>. When your subscription is in either of these states it will not be active until the customer has confirmed their payment. Checking if a subscription has an incomplete payment can be done using the <code>hasIncompletePayment</code> method on the Billable model or a subscription instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> ($user-&gt;hasIncompletePayment(<span class="hljs-string">\'default\'</span>)) {\n    <span class="hljs-comment">//</span>\n}\n\n<span class="hljs-keyword">if</span> ($user-&gt;subscription(<span class="hljs-string">\'default\'</span>)-&gt;hasIncompletePayment()) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p>When a subscription has an incomplete payment, you should direct the user to Cashier&#39;s payment confirmation page, passing the <code>latestPayment</code> identifier. You may use the <code>latestPayment</code> method available on subscription instance to retrieve this identifier:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ route(\'cashier.payment\', $subscription-&gt;latestPayment()-&gt;id) }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span>\n    Please confirm your payment.\n<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></code></pre>\n  <p>If you would like the subscription to still be considered active when it&#39;s in a <code>past_due</code> state, you may use the <code>keepPastDueSubscriptionsActive</code> method provided by Cashier. Typically, this method should be called in the <code>register</code> method of your <code>AppServiceProvider</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Cashier</span>\\<span class="hljs-title">Cashier</span>;\n\n<span class="hljs-comment">/**\n * Register any application services.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span>\n</span>{\n    Cashier::keepPastDueSubscriptionsActive();\n}</code></pre>\n  <blockquote>\n<p>{note} When a subscription is in an <code>incomplete</code> state it cannot be changed until the payment is confirmed. Therefore, the <code>swap</code> and <code>updateQuantity</code> methods will throw an exception when the subscription is in an <code>incomplete</code> state.</p>\n</blockquote>\n<p><a name="changing-plans"></a></p>\n\n          <p><a name="changing-plans"></a></p>\n          <h3>\n            <a href="#changing-plans">\n              Changing Plans\n            </a>\n          </h3><p>After a user is subscribed to your application, they may occasionally want to change to a new subscription plan. To swap a user to a new subscription, pass the plan&#39;s identifier to the <code>swap</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span> = App\\User::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-variable">$user</span>-&gt;subscription(<span class="hljs-string">\'default\'</span>)-&gt;swap(<span class="hljs-string">\'provider-plan-id\'</span>);</code></pre>\n  <p>If the user is on trial, the trial period will be maintained. Also, if a &quot;quantity&quot; exists for the subscription, that quantity will also be maintained.</p>\n<p>If you would like to swap plans and cancel any trial period the user is currently on, you may use the <code>skipTrial</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user-&gt;subscription<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'default\'</span>)</span>\n        -&gt;</span>skipTrial<span class="hljs-function"><span class="hljs-params">()</span>\n        -&gt;</span>swap(<span class="hljs-string">\'provider-plan-id\'</span>);</code></pre>\n  <p>If you would like to swap plans and immediately invoice the user instead of waiting for their next billing cycle, you may use the <code>swapAndInvoice</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span> = App\\User::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-variable">$user</span>-&gt;subscription(<span class="hljs-string">\'default\'</span>)-&gt;swapAndInvoice(<span class="hljs-string">\'provider-plan-id\'</span>);</code></pre>\n  \n          <p><a name="prorations"></a></p>\n          <h4>\n            <a href="#prorations">\n              Prorations\n            </a>\n          </h4><p>By default, Stripe prorates charges when swapping between plans. The <code>noProrate</code> method may be used to update the subscription&#39;s without prorating the charges:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user-&gt;subscription<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'default\'</span>)</span>-&gt;</span>noProrate<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>swap(<span class="hljs-string">\'provider-plan-id\'</span>);</code></pre>\n  <p>For more information on subscription proration, consult the <router-link to="https://stripe.com/docs/billing/subscriptions/prorations">Stripe documentation</router-link>.</p>\n<p><a name="subscription-quantity"></a></p>\n\n          <p><a name="subscription-quantity"></a></p>\n          <h3>\n            <a href="#subscription-quantity">\n              Subscription Quantity\n            </a>\n          </h3><p>Sometimes subscriptions are affected by &quot;quantity&quot;. For example, your application might charge $10 per month <strong>per user</strong> on an account. To easily increment or decrement your subscription quantity, use the <code>incrementQuantity</code> and <code>decrementQuantity</code> methods:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user = User::find(<span class="hljs-number">1</span>);\n\n$user-&gt;subscription(<span class="hljs-string">\'default\'</span>)-&gt;incrementQuantity();\n\n<span class="hljs-comment">// Add five to the subscription\'s current quantity...</span>\n$user-&gt;subscription(<span class="hljs-string">\'default\'</span>)-&gt;incrementQuantity(<span class="hljs-number">5</span>);\n\n$user-&gt;subscription(<span class="hljs-string">\'default\'</span>)-&gt;decrementQuantity();\n\n<span class="hljs-comment">// Subtract five to the subscription\'s current quantity...</span>\n$user-&gt;subscription(<span class="hljs-string">\'default\'</span>)-&gt;decrementQuantity(<span class="hljs-number">5</span>);</code></pre>\n  <p>Alternatively, you may set a specific quantity using the <code>updateQuantity</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span>-&gt;subscription(<span class="hljs-string">\'default\'</span>)-&gt;updateQuantity(<span class="hljs-number">10</span>);</code></pre>\n  <p>The <code>noProrate</code> method may be used to update the subscription&#39;s quantity without prorating the charges:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user-&gt;subscription<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'default\'</span>)</span>-&gt;</span>noProrate<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>updateQuantity(<span class="hljs-number">10</span>);</code></pre>\n  <p>For more information on subscription quantities, consult the <router-link to="https://stripe.com/docs/subscriptions/quantities">Stripe documentation</router-link>.</p>\n<p><a name="subscription-taxes"></a></p>\n\n          <p><a name="subscription-taxes"></a></p>\n          <h3>\n            <a href="#subscription-taxes">\n              Subscription Taxes\n            </a>\n          </h3><p>To specify the tax percentage a user pays on a subscription, implement the <code>taxPercentage</code> method on your billable model, and return a numeric value between 0 and 100, with no more than 2 decimal places.</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">taxPercentage</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-number">20</span>;\n}</code></pre>\n  <p>The <code>taxPercentage</code> method enables you to apply a tax rate on a model-by-model basis, which may be helpful for a user base that spans multiple countries and tax rates.</p>\n<blockquote>\n<p>{note} The <code>taxPercentage</code> method only applies to subscription charges. If you use Cashier to make &quot;one off&quot; charges, you will need to manually specify the tax rate at that time.</p>\n</blockquote>\n\n          <p><a name="syncing-tax-percentages"></a></p>\n          <h4>\n            <a href="#syncing-tax-percentages">\n              Syncing Tax Percentages\n            </a>\n          </h4><p>When changing the hard-coded value returned by the <code>taxPercentage</code> method, the tax settings on any existing subscriptions for the user will remain the same. If you wish to update the tax value for existing subscriptions with the returned <code>taxPercentage</code> value, you should call the <code>syncTaxPercentage</code> method on the user&#39;s subscription instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span>-&gt;subscription(<span class="hljs-string">\'default\'</span>)-&gt;syncTaxPercentage();</code></pre>\n  <p><a name="subscription-anchor-date"></a></p>\n\n          <p><a name="subscription-anchor-date"></a></p>\n          <h3>\n            <a href="#subscription-anchor-date">\n              Subscription Anchor Date\n            </a>\n          </h3><p>By default, the billing cycle anchor is the date the subscription was created, or if a trial period is used, the date that the trial ends. If you would like to modify the billing anchor date, you may use the <code>anchorBillingCycleOn</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Carbon</span>\\<span class="hljs-title">Carbon</span>;\n\n$user = User::find(<span class="hljs-number">1</span>);\n\n$anchor = Carbon::parse(<span class="hljs-string">\'first day of next month\'</span>);\n\n$user-&gt;newSubscription(<span class="hljs-string">\'default\'</span>, <span class="hljs-string">\'premium\'</span>)\n            -&gt;anchorBillingCycleOn($anchor-&gt;startOfDay())\n            -&gt;create($paymentMethod);</code></pre>\n  <p>For more information on managing subscription billing cycles, consult the <router-link to="https://stripe.com/docs/billing/subscriptions/billing-cycle">Stripe billing cycle documentation</router-link></p>\n<p><a name="cancelling-subscriptions"></a></p>\n\n          <p><a name="cancelling-subscriptions"></a></p>\n          <h3>\n            <a href="#cancelling-subscriptions">\n              Cancelling Subscriptions\n            </a>\n          </h3><p>To cancel a subscription, call the <code>cancel</code> method on the user&#39;s subscription:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span>-&gt;subscription(<span class="hljs-string">\'default\'</span>)-&gt;cancel();</code></pre>\n  <p>When a subscription is cancelled, Cashier will automatically set the <code>ends_at</code> column in your database. This column is used to know when the <code>subscribed</code> method should begin returning <code>false</code>. For example, if a customer cancels a subscription on March 1st, but the subscription was not scheduled to end until March 5th, the <code>subscribed</code> method will continue to return <code>true</code> until March 5th.</p>\n<p>You may determine if a user has cancelled their subscription but are still on their &quot;grace period&quot; using the <code>onGracePeriod</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> <span class="hljs-function"><span class="hljs-params">($user-&gt;subscription(<span class="hljs-string">\'default\'</span>)-&gt;onGracePeriod())</span> {\n    //\n}</span></code></pre>\n  <p>If you wish to cancel a subscription immediately, call the <code>cancelNow</code> method on the user&#39;s subscription:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span>-&gt;subscription(<span class="hljs-string">\'default\'</span>)-&gt;cancelNow();</code></pre>\n  <p><a name="resuming-subscriptions"></a></p>\n\n          <p><a name="resuming-subscriptions"></a></p>\n          <h3>\n            <a href="#resuming-subscriptions">\n              Resuming Subscriptions\n            </a>\n          </h3><p>If a user has cancelled their subscription and you wish to resume it, use the <code>resume</code> method. The user <strong>must</strong> still be on their grace period in order to resume a subscription:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span>-&gt;subscription(<span class="hljs-string">\'default\'</span>)-&gt;resume();</code></pre>\n  <p>If the user cancels a subscription and then resumes that subscription before the subscription has fully expired, they will not be billed immediately. Instead, their subscription will be re-activated, and they will be billed on the original billing cycle.</p>\n<p><a name="subscription-trials"></a></p>\n\n          <p><a name="subscription-trials"></a></p>\n          <h2>\n            <a href="#subscription-trials">\n              Subscription Trials\n            </a>\n          </h2><p><a name="with-payment-method-up-front"></a></p>\n\n          <p><a name="with-payment-method-up-front"></a></p>\n          <h3>\n            <a href="#with-payment-method-up-front">\n              With Payment Method Up Front\n            </a>\n          </h3><p>If you would like to offer trial periods to your customers while still collecting payment method information up front, you should use the <code>trialDays</code> method when creating your subscriptions:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span> = User::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-variable">$user</span>-&gt;newSubscription(<span class="hljs-string">\'default\'</span>, <span class="hljs-string">\'monthly\'</span>)\n            -&gt;trialDays(<span class="hljs-number">10</span>)\n            -&gt;create(<span class="hljs-variable">$paymentMethod</span>);</code></pre>\n  <p>This method will set the trial period ending date on the subscription record within the database, as well as instruct Stripe to not begin billing the customer until after this date. When using the <code>trialDays</code> method, Cashier will overwrite any default trial period configured for the plan in Stripe.</p>\n<blockquote>\n<p>{note} If the customer&#39;s subscription is not cancelled before the trial ending date they will be charged as soon as the trial expires, so you should be sure to notify your users of their trial ending date.</p>\n</blockquote>\n<p>The <code>trialUntil</code> method allows you to provide a <code>DateTime</code> instance to specify when the trial period should end:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">use Carbon<span class="hljs-string">\\Carbon;</span>\n\n$user-&gt;newSubscription<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'default\'</span>, <span class="hljs-string">\'monthly\'</span>)</span>\n            -&gt;</span>trialUntil<span class="hljs-function"><span class="hljs-params">(Carbon::now()-&gt;addDays(<span class="hljs-number">10</span>))</span>\n            -&gt;</span>create($paymentMethod);</code></pre>\n  <p>You may determine if the user is within their trial period using either the <code>onTrial</code> method of the user instance, or the <code>onTrial</code> method of the subscription instance. The two examples below are identical:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> ($user-&gt;onTrial(<span class="hljs-string">\'default\'</span>)) {\n    <span class="hljs-comment">//</span>\n}\n\n<span class="hljs-keyword">if</span> ($user-&gt;subscription(<span class="hljs-string">\'default\'</span>)-&gt;onTrial()) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p><a name="without-payment-method-up-front"></a></p>\n\n          <p><a name="without-payment-method-up-front"></a></p>\n          <h3>\n            <a href="#without-payment-method-up-front">\n              Without Payment Method Up Front\n            </a>\n          </h3><p>If you would like to offer trial periods without collecting the user&#39;s payment method information up front, you may set the <code>trial_ends_at</code> column on the user record to your desired trial ending date. This is typically done during user registration:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-keyword">user</span> <span class="hljs-title">= User</span>::create([\n    // Populate other <span class="hljs-keyword">user</span> <span class="hljs-title">properties</span>...\n    \'trial_ends_at\' =&gt; now()-&gt;addDays(<span class="hljs-number">10</span>),\n]);</code></pre>\n  <blockquote>\n<p>{note} Be sure to add a <router-link to="/docs/{{version}}/eloquent-mutators#date-mutators">date mutator</router-link> for <code>trial_ends_at</code> to your model definition.</p>\n</blockquote>\n<p>Cashier refers to this type of trial as a &quot;generic trial&quot;, since it is not attached to any existing subscription. The <code>onTrial</code> method on the <code>User</code> instance will return <code>true</code> if the current date is not past the value of <code>trial_ends_at</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> ($user-&gt;onTrial()) {\n    <span class="hljs-comment">// User is within their trial period...</span>\n}</code></pre>\n  <p>You may also use the <code>onGenericTrial</code> method if you wish to know specifically that the user is within their &quot;generic&quot; trial period and has not created an actual subscription yet:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$user</span>-&gt;onGenericTrial()) {\n    <span class="hljs-regexp">//</span> User is within their <span class="hljs-string">"generic"</span> trial period...\n}</code></pre>\n  <p>Once you are ready to create an actual subscription for the user, you may use the <code>newSubscription</code> method as usual:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$user</span> = User::find(<span class="hljs-number">1</span>);\n\n<span class="hljs-variable">$user</span>-&gt;newSubscription(<span class="hljs-string">\'default\'</span>, <span class="hljs-string">\'monthly\'</span>)-&gt;create(<span class="hljs-variable">$paymentMethod</span>);</code></pre>\n  <p><a name="handling-stripe-webhooks"></a></p>\n\n          <p><a name="handling-stripe-webhooks"></a></p>\n          <h2>\n            <a href="#handling-stripe-webhooks">\n              Handling Stripe Webhooks\n            </a>\n          </h2><blockquote>\n<p>{tip} You may use <router-link to="/docs/{{version}}/valet">Laravel Valet&#39;s</router-link> <code>valet share</code> command to help test webhooks during local development.</p>\n</blockquote>\n<p>Stripe can notify your application of a variety of events via webhooks. By default, a route that points to Cashier&#39;s webhook controller is configured through the Cashier service provider. This controller will handle all incoming webhook requests.</p>\n<p>By default, this controller will automatically handle cancelling subscriptions that have too many failed charges (as defined by your Stripe settings), customer updates, customer deletions, subscription updates, and payment method changes; however, as we&#39;ll soon discover, you can extend this controller to handle any webhook event you like.</p>\n<p>To ensure your application can handle Stripe webhooks, be sure to configure the webhook URL in the Stripe control panel. The full list of all webhooks you should configure in the Stripe control panel are:</p>\n<ul>\n<li><code>customer.subscription.updated</code></li>\n<li><code>customer.subscription.deleted</code></li>\n<li><code>customer.updated</code></li>\n<li><code>customer.deleted</code></li>\n<li><code>invoice.payment_action_required</code></li>\n</ul>\n<blockquote>\n<p>{note} Make sure you protect incoming requests with Cashier&#39;s included <router-link to="/docs/{{version}}/billing#verifying-webhook-signatures">webhook signature verification</router-link> middleware.</p>\n</blockquote>\n\n          <p><a name="webhooks-amp-csrf-protection"></a></p>\n          <h4>\n            <a href="#webhooks-amp-csrf-protection">\n              Webhooks &amp; CSRF Protection\n            </a>\n          </h4><p>Since Stripe webhooks need to bypass Laravel&#39;s <router-link to="/docs/{{version}}/csrf">CSRF protection</router-link>, be sure to list the URI as an exception in your <code>VerifyCsrfToken</code> middleware or list the route outside of the <code>web</code> middleware group:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">protected</span> $<span class="hljs-keyword">except</span> = [\n    <span class="hljs-string">\'stripe/*\'</span>,\n];</code></pre>\n  <p><a name="defining-webhook-event-handlers"></a></p>\n\n          <p><a name="defining-webhook-event-handlers"></a></p>\n          <h3>\n            <a href="#defining-webhook-event-handlers">\n              Defining Webhook Event Handlers\n            </a>\n          </h3><p>Cashier automatically handles subscription cancellation on failed charges, but if you have additional webhook events you would like to handle, extend the Webhook controller. Your method names should correspond to Cashier&#39;s expected convention, specifically, methods should be prefixed with <code>handle</code> and the &quot;camel case&quot; name of the webhook you wish to handle. For example, if you wish to handle the <code>invoice.payment_succeeded</code> webhook, you should add a <code>handleInvoicePaymentSucceeded</code> method to the controller:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Cashier</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">WebhookController</span> <span class="hljs-title">as</span> <span class="hljs-title">CashierController</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebhookController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CashierController</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Handle invoice payment succeeded.\n     *\n     * <span class="hljs-doctag">@param</span>  array  $payload\n     * <span class="hljs-doctag">@return</span> \\Symfony\\Component\\HttpFoundation\\Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleInvoicePaymentSucceeded</span><span class="hljs-params">($payload)</span>\n    </span>{\n        <span class="hljs-comment">// Handle The Event</span>\n    }\n}</span></code></pre>\n  <p>Next, define a route to your Cashier controller within your <code>routes/web.php</code> file. This will overwrite the default shipped route:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::post(\n    \'stripe/webhook\',\n    \'<span class="hljs-symbol">\\A</span>pp<span class="hljs-symbol">\\H</span>ttp<span class="hljs-symbol">\\C</span>ontrollers<span class="hljs-symbol">\\W</span>ebhookController@handleWebhook\'\n);</code></pre>\n  <p>Cashier emits a <code>Laravel\\Cashier\\Events\\WebhookReceived</code> event when a webhook is received, and a <code>Laravel\\Cashier\\Events\\WebhookHandled</code> event when a webhook was handled by Cashier. Both events contain the full payload of the Stripe webhook.</p>\n<p><a name="handling-failed-subscriptions"></a></p>\n\n          <p><a name="failed-subscriptions"></a></p>\n          <h3>\n            <a href="#failed-subscriptions">\n              Failed Subscriptions\n            </a>\n          </h3><p>What if a customer&#39;s credit card expires? No worries - Cashier&#39;s Webhook controller will cancel the customer&#39;s subscription for you. Failed payments will automatically be captured and handled by the controller. The controller will cancel the customer&#39;s subscription when Stripe determines the subscription has failed (normally after three failed payment attempts).</p>\n<p><a name="verifying-webhook-signatures"></a></p>\n\n          <p><a name="verifying-webhook-signatures"></a></p>\n          <h3>\n            <a href="#verifying-webhook-signatures">\n              Verifying Webhook Signatures\n            </a>\n          </h3><p>To secure your webhooks, you may use <router-link to="https://stripe.com/docs/webhooks/signatures">Stripe&#39;s webhook signatures</router-link>. For convenience, Cashier automatically includes a middleware which validates that the incoming Stripe webhook request is valid.</p>\n<p>To enable webhook verification, ensure that the <code>STRIPE_WEBHOOK_SECRET</code> environment variable is set in your <code>.env</code> file. The webhook <code>secret</code> may be retrieved from your Stripe account dashboard.</p>\n<p><a name="single-charges"></a></p>\n\n          <p><a name="single-charges"></a></p>\n          <h2>\n            <a href="#single-charges">\n              Single Charges\n            </a>\n          </h2><p><a name="simple-charge"></a></p>\n\n          <p><a name="simple-charge"></a></p>\n          <h3>\n            <a href="#simple-charge">\n              Simple Charge\n            </a>\n          </h3><blockquote>\n<p>{note} The <code>charge</code> method accepts the amount you would like to charge in the <strong>lowest denominator of the currency used by your application</strong>.</p>\n</blockquote>\n<p>If you would like to make a &quot;one off&quot; charge against a subscribed customer&#39;s payment method, you may use the <code>charge</code> method on a billable model instance. You&#39;ll need to <a href="#storing-payment-methods">provide a payment method identifier</a> as the second argument:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Stripe Accepts Charges In Cents...</span>\n$stripeCharge = $user-&gt;charge(<span class="hljs-number">100</span>, $paymentMethod);</code></pre>\n  <p>The <code>charge</code> method accepts an array as its third argument, allowing you to pass any options you wish to the underlying Stripe charge creation. Consult the Stripe documentation regarding the options available to you when creating charges:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user-&gt;charge(<span class="hljs-number">100</span>, $paymentMethod, [\n    <span class="hljs-string">\'custom_option\'</span> =&gt; $value,\n]);</code></pre>\n  <p>The <code>charge</code> method will throw an exception if the charge fails. If the charge is successful, an instance of <code>Laravel\\Cashier\\Payment</code> will be returned from the method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">try</span> {\n    $payment = $user-&gt;charge(<span class="hljs-number">100</span>, $paymentMethod);\n} <span class="hljs-keyword">catch</span> (<span class="hljs-keyword">Exception</span> $e) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p><a name="charge-with-invoice"></a></p>\n\n          <p><a name="charge-with-invoice"></a></p>\n          <h3>\n            <a href="#charge-with-invoice">\n              Charge With Invoice\n            </a>\n          </h3><p>Sometimes you may need to make a one-time charge but also generate an invoice for the charge so that you may offer a PDF receipt to your customer. The <code>invoiceFor</code> method lets you do just that. For example, let&#39;s invoice the customer $5.00 for a &quot;One Time Fee&quot;:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Stripe Accepts Charges In Cents...</span>\n$user-&gt;invoiceFor(<span class="hljs-string">\'One Time Fee\'</span>, <span class="hljs-number">500</span>);</code></pre>\n  <p>The invoice will be charged immediately against the user&#39;s default payment method. The <code>invoiceFor</code> method also accepts an array as its third argument. This array contains the billing options for the invoice item. The fourth argument accepted by the method is also an array. This final argument accepts the billing options for the invoice itself:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$user-&gt;invoiceFor(<span class="hljs-string">\'Stickers\'</span>, <span class="hljs-number">500</span>, [\n    <span class="hljs-string">\'quantity\'</span> =&gt; <span class="hljs-number">50</span>,\n], [\n    <span class="hljs-string">\'tax_percent\'</span> =&gt; <span class="hljs-number">21</span>,\n]);</code></pre>\n  <blockquote>\n<p>{note} The <code>invoiceFor</code> method will create a Stripe invoice which will retry failed billing attempts. If you do not want invoices to retry failed charges, you will need to close them using the Stripe API after the first failed charge.</p>\n</blockquote>\n<p><a name="refunding-charges"></a></p>\n\n          <p><a name="refunding-charges"></a></p>\n          <h3>\n            <a href="#refunding-charges">\n              Refunding Charges\n            </a>\n          </h3><p>If you need to refund a Stripe charge, you may use the <code>refund</code> method. This method accepts the Stripe Payment Intent ID as its first argument:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$payment</span> = <span class="hljs-variable">$user</span>-&gt;charge(<span class="hljs-number">100</span>, <span class="hljs-variable">$paymentMethod</span>);\n\n<span class="hljs-variable">$user</span>-&gt;refund(<span class="hljs-variable">$payment</span>-&gt;id);</code></pre>\n  <p><a name="invoices"></a></p>\n\n          <p><a name="invoices"></a></p>\n          <h2>\n            <a href="#invoices">\n              Invoices\n            </a>\n          </h2><p>You may easily retrieve an array of a billable model&#39;s invoices using the <code>invoices</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$invoices</span> = <span class="hljs-variable">$user</span>-&gt;invoices();\n\n<span class="hljs-regexp">//</span> Include pending invoices <span class="hljs-keyword">in</span> the results...\n<span class="hljs-variable">$invoices</span> = <span class="hljs-variable">$user</span>-&gt;invoicesIncludingPending();</code></pre>\n  <p>When listing the invoices for the customer, you may use the invoice&#39;s helper methods to display the relevant invoice information. For example, you may wish to list every invoice in a table, allowing the user to easily download any of them:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span>\n    @foreach ($invoices as $invoice)\n        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="hljs-template-variable">{{ $invoice-&gt;<span class="hljs-name">date</span><span class="hljs-params">()</span>-&gt;toFormattedDateString() }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="hljs-template-variable">{{ $invoice-&gt;total() }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/user/invoice/</span></span></span><span class="hljs-template-variable">{{ $invoice-&gt;id }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span>Download<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>\n    @endforeach\n<span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span></code></pre>\n  <p><a name="generating-invoice-pdfs"></a></p>\n\n          <p><a name="generating-invoice-pdfs"></a></p>\n          <h3>\n            <a href="#generating-invoice-pdfs">\n              Generating Invoice PDFs\n            </a>\n          </h3><p>From within a route or controller, use the <code>downloadInvoice</code> method to generate a PDF download of the invoice. This method will automatically generate the proper HTTP response to send the download to the browser:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Request</span>;\n\nRoute::get(<span class="hljs-string">\'user/invoice/{invoice}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Request $request, $invoiceId)</span> </span>{\n    <span class="hljs-keyword">return</span> $request-&gt;user()-&gt;downloadInvoice($invoiceId, [\n        <span class="hljs-string">\'vendor\'</span> =&gt; <span class="hljs-string">\'Your Company\'</span>,\n        <span class="hljs-string">\'product\'</span> =&gt; <span class="hljs-string">\'Your Product\'</span>,\n    ]);\n});</code></pre>\n  <p><a name="strong-customer-authentication"></a></p>\n\n          <p><a name="strong-customer-authentication"></a></p>\n          <h2>\n            <a href="#strong-customer-authentication">\n              Strong Customer Authentication\n            </a>\n          </h2><p>If your business is based in Europe you will need to abide by the Strong Customer Authentication (SCA) regulations. These regulations were imposed in September 2019 by the European Union to prevent payment fraud. Luckily, Stripe and Cashier are prepared for building SCA compliant applications.</p>\n<blockquote>\n<p>{note} Before getting started, review <router-link to="https://stripe.com/en-be/guides/strong-customer-authentication">Stripe&#39;s guide on PSD2 and SCA</router-link> as well as their <router-link to="https://stripe.com/docs/strong-customer-authentication">documentation on the new SCA API&#39;s</router-link>.</p>\n</blockquote>\n<p><a name="payments-requiring-additional-confirmation"></a></p>\n\n          <p><a name="payments-requiring-additional-confirmation"></a></p>\n          <h3>\n            <a href="#payments-requiring-additional-confirmation">\n              Payments Requiring Additional Confirmation\n            </a>\n          </h3><p>SCA regulations often require extra verification in order to confirm and process a payment. When this happens, Cashier will throw an <code>IncompletePayment</code> exception that informs you that this extra verification is needed. After catching this exception, you have two options on how to proceed.</p>\n<p>First, you could redirect your customer to the dedicated payment confirmation page which is included with Cashier. This page already has an associated route that is registered via Cashier&#39;s service provider. So, you may catch the <code>IncompletePayment</code> exception and redirect to the payment confirmation page:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Cashier</span>\\<span class="hljs-title">Exceptions</span>\\<span class="hljs-title">IncompletePayment</span>;\n\n<span class="hljs-keyword">try</span> {\n    $subscription = $user-&gt;newSubscription(<span class="hljs-string">\'default\'</span>, $planId)\n                            -&gt;create($paymentMethod);\n} <span class="hljs-keyword">catch</span> (IncompletePayment $exception) {\n    <span class="hljs-keyword">return</span> redirect()-&gt;route(\n        <span class="hljs-string">\'cashier.payment\'</span>,\n        [$exception-&gt;payment-&gt;id, <span class="hljs-string">\'redirect\'</span> =&gt; route(<span class="hljs-string">\'home\'</span>)]\n    );\n}</code></pre>\n  <p>On the payment confirmation page, the customer will be prompted to enter their credit card info again and perform any additional actions required by Stripe, such as &quot;3D Secure&quot; confirmation. After confirming their payment, the user will be redirected to the URL provided by the <code>redirect</code> parameter specified above.</p>\n<p>Alternatively, you could allow Stripe to handle the payment confirmation for you. In this case, instead of redirecting to the payment confirmation page, you may <router-link to="https://dashboard.stripe.com/account/billing/automatic">setup Stripe&#39;s automatic billing emails</router-link> in your Stripe dashboard. However, if an <code>IncompletePayment</code> exception is caught, you should still inform the user they will receive an email with further payment confirmation instructions.</p>\n<p>Incomplete payment exceptions may be thrown for the following methods: <code>charge</code>, <code>invoiceFor</code>, and <code>invoice</code> on the <code>Billable</code> user. When handling subscriptions, the <code>create</code> method on the <code>SubscriptionBuilder</code>, and the <code>incrementAndInvoice</code> and <code>swapAndInvoice</code> methods on the <code>Subscription</code> model may throw exceptions.</p>\n\n          <p><a name="incomplete-and-past-due-state"></a></p>\n          <h4>\n            <a href="#incomplete-and-past-due-state">\n              Incomplete and Past Due State\n            </a>\n          </h4><p>When a payment needs additional confirmation, the subscription will remain in an <code>incomplete</code> or <code>past_due</code> state as indicated by its <code>stripe_status</code> database column. Cashier will make automatically activate the customer&#39;s subscription via a webhook as soon as payment confirmation is complete.</p>\n<p>For more information on <code>incomplete</code> and <code>past_due</code> states, please refer to <a href="#incomplete-and-past-due-status">our additional documentation</a>.</p>\n<p><a name="off-session-payment-notifications"></a></p>\n\n          <p><a name="off-session-payment-notifications"></a></p>\n          <h3>\n            <a href="#off-session-payment-notifications">\n              Off-Session Payment Notifications\n            </a>\n          </h3><p>Since SCA regulations require customers to occasionally verify their payment details even while their subscription is active, Cashier can send a payment notification to the customer when off-session payment confirmation is required. For example, this may occur when a subscription is renewing. Cashier&#39;s payment notification can be enabled by setting the <code>CASHIER_PAYMENT_NOTIFICATION</code> environment variable to a notification class. By default, this notification is disabled. Of course, Cashier includes a notification class you may use for this purpose, but you are free to provide your own notification class if desired:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">CASHIER_PAYMENT_NOTIFICATION=Laravel<span class="hljs-symbol">\\C</span>ashier<span class="hljs-symbol">\\N</span>otifications<span class="hljs-symbol">\\C</span>onfirmPayment</code></pre>\n  <p>To ensure that off-session payment confirmation notifications are delivered, verify that <a href="#handling-stripe-webhooks">Stripe webhooks are configured</a> for your application and the <code>invoice.payment_action_required</code> webhook is enabled in your Stripe dashboard. In addition, your <code>Billable</code> model should also use Laravel&#39;s <code>Illuminate\\Notifications\\Notifiable</code> trait.</p>\n<blockquote>\n<p>{note} Notifications will be sent even when customers are manually making a payment that requires additional confirmation. Unfortunately, there is no way for Stripe to know that the payment was done manually or &quot;off-session&quot;. But, a customer will simply see a &quot;Payment Successful&quot; message if they visit the payment page after already confirming their payment. The customer will not be allowed to accidentally confirm the same payment twice and incur an accidental second charge.</p>\n</blockquote>\n'},d964:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="collections"></a></p>\n          <h1>\n            <a href="#collections">\n              Collections\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a><ul>\n<li><a href="#creating-collections">Creating Collections</a></li>\n<li><a href="#extending-collections">Extending Collections</a></li>\n</ul>\n</li>\n<li><a href="#available-methods">Available Methods</a></li>\n<li><a href="#higher-order-messages">Higher Order Messages</a></li>\n<li><a href="#lazy-collections">Lazy Collections</a><ul>\n<li><a href="#lazy-collection-introduction">Introduction</a></li>\n<li><a href="#the-enumerable-contract">The Enumerable Contract</a></li>\n<li><a href="#lazy-collection-methods">Lazy Collection Methods</a></li>\n</ul>\n</li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>The <code>Illuminate\\Support\\Collection</code> class provides a fluent, convenient wrapper for working with arrays of data. For example, check out the following code. We&#39;ll use the <code>collect</code> helper to create a new collection instance from the array, run the <code>strtoupper</code> function on each element, and then remove all empty elements:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ3RheWxvcicsICdhYmlnYWlsJywgbnVsbF0pLT5tYXAoZnVuY3Rpb24gKCRuYW1lKSB7XG4gICAgcmV0dXJuIHN0cnRvdXBwZXIoJG5hbWUpO1xufSlcbi0+cmVqZWN0KGZ1bmN0aW9uICgkbmFtZSkge1xuICAgIHJldHVybiBlbXB0eSgkbmFtZSk7XG59KTsiLCJoYXNoIjoiY29sbGVjdGlvbnMtaW50cm9kdWN0aW9uIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-string">\'taylor\'</span>, <span class="hljs-string">\'abigail\'</span>, <span class="hljs-keyword">null</span>])-&gt;map(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($name)</span> </span>{\n    <span class="hljs-keyword">return</span> strtoupper($name);\n})\n-&gt;reject(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($name)</span> </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">empty</span>($name);\n});</code></pre>\n  <p>As you can see, the <code>Collection</code> class allows you to chain its methods to perform fluent mapping and reducing of the underlying array. In general, collections are immutable, meaning every <code>Collection</code> method returns an entirely new <code>Collection</code> instance.</p>\n<p><a name="creating-collections"></a></p>\n\n          <p><a name="creating-collections"></a></p>\n          <h3>\n            <a href="#creating-collections">\n              Creating Collections\n            </a>\n          </h3><p>As mentioned above, the <code>collect</code> helper returns a new <code>Illuminate\\Support\\Collection</code> instance for the given array. So, creating a collection is as simple as:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgM10pOyIsImhhc2giOiJjb2xsZWN0aW9ucy1jcmVhdGluZy1jb2xsZWN0aW9ucyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);</code></pre>\n  <p><a name="extending-collections"></a></p>\n\n          <p><a name="extending-collections"></a></p>\n          <h3>\n            <a href="#extending-collections">\n              Extending Collections\n            </a>\n          </h3><p>Collections are &quot;macroable&quot;, which allows you to add additional methods to the <code>Collection</code> class at run time. For example, the following code adds a <code>toUpper</code> method to the <code>Collection</code> class:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlXFxTdXBwb3J0XFxDb2xsZWN0aW9uO1xudXNlIElsbHVtaW5hdGVcXFN1cHBvcnRcXFN0cjtcblxuQ29sbGVjdGlvbjo6bWFjcm8oJ3RvVXBwZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICR0aGlzLT5tYXAoZnVuY3Rpb24gKCR2YWx1ZSkge1xuICAgICAgICByZXR1cm4gU3RyOjp1cHBlcigkdmFsdWUpO1xuICAgIH0pO1xufSk7XG5cbiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ2ZpcnN0JywgJ3NlY29uZCddKTtcblxuJHVwcGVyID0gJGNvbGxlY3Rpb24tPnRvVXBwZXIoKTsiLCJoYXNoIjoiY29sbGVjdGlvbnMtZXh0ZW5kaW5nLWNvbGxlY3Rpb25zIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Collection</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Str</span>;\n\nCollection::macro(<span class="hljs-string">\'toUpper\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;map(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($value)</span> </span>{\n        <span class="hljs-keyword">return</span> Str::upper($value);\n    });\n});\n\n$collection = collect([<span class="hljs-string">\'first\'</span>, <span class="hljs-string">\'second\'</span>]);\n\n$upper = $collection-&gt;toUpper();\n\n<span class="hljs-comment">// [\'FIRST\', \'SECOND\']</span></code></pre>\n  <p>Typically, you should declare collection macros in a <router-link to="/docs/providers">service provider</router-link>.</p>\n<p><a name="available-methods"></a></p>\n\n          <p><a name="available-methods"></a></p>\n          <h2>\n            <a href="#available-methods">\n              Available Methods\n            </a>\n          </h2><p>For the remainder of this documentation, we&#39;ll discuss each method available on the <code>Collection</code> class. Remember, all of these methods may be chained to fluently manipulate the underlying array. Furthermore, almost every method returns a new <code>Collection</code> instance, allowing you to preserve the original copy of the collection when necessary:</p>\n<div id="collection-method-list" markdown="1">\n\n<p><a href="#method-all">all</a>\n<a href="#method-average">average</a>\n<a href="#method-avg">avg</a>\n<a href="#method-chunk">chunk</a>\n<a href="#method-collapse">collapse</a>\n<a href="#method-collect">collect</a>\n<a href="#method-combine">combine</a>\n<a href="#method-concat">concat</a>\n<a href="#method-contains">contains</a>\n<a href="#method-containsstrict">containsStrict</a>\n<a href="#method-count">count</a>\n<a href="#method-countBy">countBy</a>\n<a href="#method-crossjoin">crossJoin</a>\n<a href="#method-dd">dd</a>\n<a href="#method-diff">diff</a>\n<a href="#method-diffassoc">diffAssoc</a>\n<a href="#method-diffkeys">diffKeys</a>\n<a href="#method-dump">dump</a>\n<a href="#method-duplicates">duplicates</a>\n<a href="#method-duplicatesstrict">duplicatesStrict</a>\n<a href="#method-each">each</a>\n<a href="#method-eachspread">eachSpread</a>\n<a href="#method-every">every</a>\n<a href="#method-except">except</a>\n<a href="#method-filter">filter</a>\n<a href="#method-first">first</a>\n<a href="#method-first-where">firstWhere</a>\n<a href="#method-flatmap">flatMap</a>\n<a href="#method-flatten">flatten</a>\n<a href="#method-flip">flip</a>\n<a href="#method-forget">forget</a>\n<a href="#method-forpage">forPage</a>\n<a href="#method-get">get</a>\n<a href="#method-groupby">groupBy</a>\n<a href="#method-has">has</a>\n<a href="#method-implode">implode</a>\n<a href="#method-intersect">intersect</a>\n<a href="#method-intersectbykeys">intersectByKeys</a>\n<a href="#method-isempty">isEmpty</a>\n<a href="#method-isnotempty">isNotEmpty</a>\n<a href="#method-join">join</a>\n<a href="#method-keyby">keyBy</a>\n<a href="#method-keys">keys</a>\n<a href="#method-last">last</a>\n<a href="#method-macro">macro</a>\n<a href="#method-make">make</a>\n<a href="#method-map">map</a>\n<a href="#method-mapinto">mapInto</a>\n<a href="#method-mapspread">mapSpread</a>\n<a href="#method-maptogroups">mapToGroups</a>\n<a href="#method-mapwithkeys">mapWithKeys</a>\n<a href="#method-max">max</a>\n<a href="#method-median">median</a>\n<a href="#method-merge">merge</a>\n<a href="#method-mergerecursive">mergeRecursive</a>\n<a href="#method-min">min</a>\n<a href="#method-mode">mode</a>\n<a href="#method-nth">nth</a>\n<a href="#method-only">only</a>\n<a href="#method-pad">pad</a>\n<a href="#method-partition">partition</a>\n<a href="#method-pipe">pipe</a>\n<a href="#method-pluck">pluck</a>\n<a href="#method-pop">pop</a>\n<a href="#method-prepend">prepend</a>\n<a href="#method-pull">pull</a>\n<a href="#method-push">push</a>\n<a href="#method-put">put</a>\n<a href="#method-random">random</a>\n<a href="#method-reduce">reduce</a>\n<a href="#method-reject">reject</a>\n<a href="#method-replace">replace</a>\n<a href="#method-replacerecursive">replaceRecursive</a>\n<a href="#method-reverse">reverse</a>\n<a href="#method-search">search</a>\n<a href="#method-shift">shift</a>\n<a href="#method-shuffle">shuffle</a>\n<a href="#method-skip">skip</a>\n<a href="#method-slice">slice</a>\n<a href="#method-some">some</a>\n<a href="#method-sort">sort</a>\n<a href="#method-sortby">sortBy</a>\n<a href="#method-sortbydesc">sortByDesc</a>\n<a href="#method-sortkeys">sortKeys</a>\n<a href="#method-sortkeysdesc">sortKeysDesc</a>\n<a href="#method-splice">splice</a>\n<a href="#method-split">split</a>\n<a href="#method-sum">sum</a>\n<a href="#method-take">take</a>\n<a href="#method-tap">tap</a>\n<a href="#method-times">times</a>\n<a href="#method-toarray">toArray</a>\n<a href="#method-tojson">toJson</a>\n<a href="#method-transform">transform</a>\n<a href="#method-union">union</a>\n<a href="#method-unique">unique</a>\n<a href="#method-uniquestrict">uniqueStrict</a>\n<a href="#method-unless">unless</a>\n<a href="#method-unlessempty">unlessEmpty</a>\n<a href="#method-unlessnotempty">unlessNotEmpty</a>\n<a href="#method-unwrap">unwrap</a>\n<a href="#method-values">values</a>\n<a href="#method-when">when</a>\n<a href="#method-whenempty">whenEmpty</a>\n<a href="#method-whennotempty">whenNotEmpty</a>\n<a href="#method-where">where</a>\n<a href="#method-wherestrict">whereStrict</a>\n<a href="#method-wherebetween">whereBetween</a>\n<a href="#method-wherein">whereIn</a>\n<a href="#method-whereinstrict">whereInStrict</a>\n<a href="#method-whereinstanceof">whereInstanceOf</a>\n<a href="#method-wherenotbetween">whereNotBetween</a>\n<a href="#method-wherenotin">whereNotIn</a>\n<a href="#method-wherenotinstrict">whereNotInStrict</a>\n<a href="#method-wrap">wrap</a>\n<a href="#method-zip">zip</a></p>\n</div>\n\n<p><a name="method-listing"></a></p>\n\n          <p><a name="method-listing"></a></p>\n          <h2>\n            <a href="#method-listing">\n              Method Listing\n            </a>\n          </h2><p><a name="method-all"></a></p>\n\n          <p><a name="-code-all-code-"></a></p>\n          <h4>\n            <a href="#-code-all-code-">\n              <code>all()</code>\n            </a>\n          </h4><p>The <code>all</code> method returns the underlying array represented by the collection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImNvbGxlY3QoWzEsIDIsIDNdKS0+YWxsKCk7IiwiaGFzaCI6ImNvbGxlY3Rpb25zLWFsbCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])-&gt;all();\n\n<span class="hljs-comment">// [1, 2, 3]</span></code></pre>\n  <p><a name="method-average"></a></p>\n\n          <p><a name="-code-average-code-"></a></p>\n          <h4>\n            <a href="#-code-average-code-">\n              <code>average()</code>\n            </a>\n          </h4><p>Alias for the <a href="#method-avg"><code>avg</code></a> method.</p>\n<p><a name="method-avg"></a></p>\n\n          <p><a name="-code-avg-code-"></a></p>\n          <h4>\n            <a href="#-code-avg-code-">\n              <code>avg()</code>\n            </a>\n          </h4><p>The <code>avg</code> method returns the <router-link to="https://en.wikipedia.org/wiki/Average">average value</router-link> of a given key:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRhdmVyYWdlID0gY29sbGVjdChbWydmb28nID0+IDEwXSwgWydmb28nID0+IDEwXSwgWydmb28nID0+IDIwXSwgWydmb28nID0+IDQwXV0pLT5hdmcoJ2ZvbycpO1xuXG5lY2hvICRhdmVyYWdlIC4gUEhQX0VPTDtcblxuJGF2ZXJhZ2UgPSBjb2xsZWN0KFsxLCAxLCAyLCA0XSktPmF2ZygpO1xuXG5lY2hvICRhdmVyYWdlIC4gUEhQX0VPTDsiLCJoYXNoIjoiY29sbGVjdGlvbnMtYXZnIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$average = collect([[<span class="hljs-string">\'foo\'</span> =&gt; <span class="hljs-number">10</span>], [<span class="hljs-string">\'foo\'</span> =&gt; <span class="hljs-number">10</span>], [<span class="hljs-string">\'foo\'</span> =&gt; <span class="hljs-number">20</span>], [<span class="hljs-string">\'foo\'</span> =&gt; <span class="hljs-number">40</span>]])-&gt;avg(<span class="hljs-string">\'foo\'</span>);\n\n<span class="hljs-comment">// 20</span>\n\n$average = collect([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>])-&gt;avg();\n\n<span class="hljs-comment">// 2</span></code></pre>\n  <p><a name="method-chunk"></a></p>\n\n          <p><a name="-code-chunk-code-"></a></p>\n          <h4>\n            <a href="#-code-chunk-code-">\n              <code>chunk()</code>\n            </a>\n          </h4><p>The <code>chunk</code> method breaks the collection into multiple, smaller collections of a given size:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgMywgNCwgNSwgNiwgN10pO1xuXG4kY2h1bmtzID0gJGNvbGxlY3Rpb24tPmNodW5rKDQpO1xuXG4kY2h1bmtzLT50b0FycmF5KCk7IiwiaGFzaCI6ImNvbGxlY3Rpb25zLWNodW5rIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]);\n\n$chunks = $collection-&gt;chunk(<span class="hljs-number">4</span>);\n\n$chunks-&gt;toArray();\n\n<span class="hljs-comment">// [[1, 2, 3, 4], [5, 6, 7]]</span></code></pre>\n  <p>This method is especially useful in <router-link to="/docs/views">views</router-link> when working with a grid system such as <router-link to="https://getbootstrap.com/docs/4.1/layout/grid/">Bootstrap</router-link>. Imagine you have a collection of <router-link to="/docs/eloquent">Eloquent</router-link> models you want to display in a grid:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">@<span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$products</span>-&gt;chunk(3) <span class="hljs-keyword">as</span> <span class="hljs-variable">$chunk</span>)\n    &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">"row"</span>&gt;\n        @<span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$chunk</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$product</span>)\n            &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">"col-xs-4"</span>&gt;{{ <span class="hljs-variable">$product</span>-&gt;name }}&lt;/div&gt;\n        @endforeach\n    &lt;/div&gt;\n@endforeach</code></pre>\n  <p><a name="method-collapse"></a></p>\n\n          <p><a name="-code-collapse-code-"></a></p>\n          <h4>\n            <a href="#-code-collapse-code-">\n              <code>collapse()</code>\n            </a>\n          </h4><p>The <code>collapse</code> method collapses a collection of arrays into a single, flat collection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbWzEsIDIsIDNdLCBbNCwgNSwgNl0sIFs3LCA4LCA5XV0pO1xuXG4kY29sbGFwc2VkID0gJGNvbGxlY3Rpb24tPmNvbGxhcHNlKCk7XG5cbiRjb2xsYXBzZWQtPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLWNvbGxhcHNlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]]);\n\n$collapsed = $collection-&gt;collapse();\n\n$collapsed-&gt;all();\n\n<span class="hljs-comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></code></pre>\n  <p><a name="method-combine"></a></p>\n\n          <p><a name="-code-combine-code-"></a></p>\n          <h4>\n            <a href="#-code-combine-code-">\n              <code>combine()</code>\n            </a>\n          </h4><p>The <code>combine</code> method combines the values of the collection, as keys, with the values of another array or collection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ25hbWUnLCAnYWdlJ10pO1xuXG4kY29tYmluZWQgPSAkY29sbGVjdGlvbi0+Y29tYmluZShbJ0dlb3JnZScsIDI5XSk7XG5cbiRjb21iaW5lZC0+YWxsKCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtY29tYmluZSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = collect([<span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'age\'</span>]);\n\n<span class="hljs-variable">$combined</span> = <span class="hljs-variable">$collection</span>-&gt;combine([<span class="hljs-string">\'George\'</span>, <span class="hljs-number">29</span>]);\n\n<span class="hljs-variable">$combined</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'George\'</span>, <span class="hljs-string">\'age\'</span> =&gt; <span class="hljs-number">29</span>]</code></pre>\n  <p><a name="method-collect"></a></p>\n\n          <p><a name="-code-collect-code-"></a></p>\n          <h4>\n            <a href="#-code-collect-code-">\n              <code>collect()</code>\n            </a>\n          </h4><p>The <code>collect</code> method returns a new <code>Collection</code> instance with the items currently in the collection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uQSA9IGNvbGxlY3QoWzEsIDIsIDNdKTtcblxuJGNvbGxlY3Rpb25CID0gJGNvbGxlY3Rpb25BLT5jb2xsZWN0KCk7XG5cbiRjb2xsZWN0aW9uQi0+YWxsKCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtY29sbGVjdCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collectionA</span> = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);\n\n<span class="hljs-variable">$collectionB</span> = <span class="hljs-variable">$collectionA</span>-&gt;collect();\n\n<span class="hljs-variable">$collectionB</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]</code></pre>\n  <p>The <code>collect</code> method is primarily useful for converting <a href="#lazy-collections">lazy collections</a> into standard <code>Collection</code> instances:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlXFxTdXBwb3J0XFxMYXp5Q29sbGVjdGlvbjtcblxuJGxhenlDb2xsZWN0aW9uID0gTGF6eUNvbGxlY3Rpb246Om1ha2UoZnVuY3Rpb24gKCkge1xuICAgIHlpZWxkIDE7XG4gICAgeWllbGQgMjtcbiAgICB5aWVsZCAzO1xufSk7XG5cbiRjb2xsZWN0aW9uID0gJGxhenlDb2xsZWN0aW9uLT5jb2xsZWN0KCk7XG5cbiRjb2xsZWN0aW9uLT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1jb2xsZWN0In0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$lazyCollection = LazyCollection::make(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;\n    <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;\n    <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>;\n});\n\n$collection = $lazyCollection-&gt;collect();\n\nget_class($collection);\n\n<span class="hljs-comment">// \'Illuminate\\Support\\Collection\'</span>\n\n$collection-&gt;all();\n\n<span class="hljs-comment">// [1, 2, 3]</span></code></pre>\n  <blockquote>\n<p>{tip} The <code>collect</code> method is especially useful when you have an instance of <code>Enumerable</code> and need a non-lazy collection instance. Since <code>collect()</code> is part of the <code>Enumerable</code> contract, you can safely use it to get a <code>Collection</code> instance.</p>\n</blockquote>\n<p><a name="method-concat"></a></p>\n\n          <p><a name="-code-concat-code-"></a></p>\n          <h4>\n            <a href="#-code-concat-code-">\n              <code>concat()</code>\n            </a>\n          </h4><p>The <code>concat</code> method appends the given <code>array</code> or collection values onto the end of the collection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ0pvaG4gRG9lJ10pO1xuXG4kY29uY2F0ZW5hdGVkID0gJGNvbGxlY3Rpb24tPmNvbmNhdChbJ0phbmUgRG9lJ10pLT5jb25jYXQoWyduYW1lJyA9PiAnSm9obm55IERvZSddKTtcblxuJGNvbmNhdGVuYXRlZC0+YWxsKCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtY29uY2F0In0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = collect([<span class="hljs-string">\'John Doe\'</span>]);\n\n<span class="hljs-variable">$concatenated</span> = <span class="hljs-variable">$collection</span>-&gt;concat([<span class="hljs-string">\'Jane Doe\'</span>])-&gt;concat([<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Johnny Doe\'</span>]);\n\n<span class="hljs-variable">$concatenated</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'John Doe\'</span>, <span class="hljs-string">\'Jane Doe\'</span>, <span class="hljs-string">\'Johnny Doe\'</span>]</code></pre>\n  <p><a name="method-contains"></a></p>\n\n          <p><a name="-code-contains-code-"></a></p>\n          <h4>\n            <a href="#-code-contains-code-">\n              <code>contains()</code>\n            </a>\n          </h4><p>The <code>contains</code> method determines whether the collection contains a given item:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ25hbWUnID0+ICdEZXNrJywgJ3ByaWNlJyA9PiAxMDBdKTtcblxudmFyX2R1bXAoJGNvbGxlY3Rpb24tPmNvbnRhaW5zKCdEZXNrJykpO1xuXG4kY29sbGVjdGlvbi0+Y29udGFpbnMoJ05ldyBZb3JrJyk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtY29udGFpbnMifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = collect([<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Desk\'</span>, <span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">100</span>]);\n\n<span class="hljs-variable">$collection</span>-&gt;contains(<span class="hljs-string">\'Desk\'</span>);\n\n<span class="hljs-regexp">//</span> <span class="hljs-keyword">true</span>\n\n<span class="hljs-variable">$collection</span>-&gt;contains(<span class="hljs-string">\'New York\'</span>);\n\n<span class="hljs-regexp">//</span> <span class="hljs-keyword">false</span></code></pre>\n  <p>You may also pass a key / value pair to the <code>contains</code> method, which will determine if the given pair exists in the collection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgWydwcm9kdWN0JyA9PiAnRGVzaycsICdwcmljZScgPT4gMjAwXSxcbiAgICBbJ3Byb2R1Y3QnID0+ICdDaGFpcicsICdwcmljZScgPT4gMTAwXSxcbl0pO1xuXG4kY29sbGVjdGlvbi0+Y29udGFpbnMoJ3Byb2R1Y3QnLCAnQm9va2Nhc2UnKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1jb250YWlucyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([\n    [<span class="hljs-string">\'product\'</span> =&gt; <span class="hljs-string">\'Desk\'</span>, <span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">200</span>],\n    [<span class="hljs-string">\'product\'</span> =&gt; <span class="hljs-string">\'Chair\'</span>, <span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">100</span>],\n]);\n\n$collection-&gt;contains(<span class="hljs-string">\'product\'</span>, <span class="hljs-string">\'Bookcase\'</span>);\n\n<span class="hljs-comment">// false</span></code></pre>\n  <p>Finally, you may also pass a callback to the <code>contains</code> method to perform your own truth test:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);\n\n$collection-&gt;contains(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($value, $key)</span> </span>{\n    <span class="hljs-keyword">return</span> $value &gt; <span class="hljs-number">5</span>;\n});\n\n<span class="hljs-comment">// false</span></code></pre>\n  <p>The <code>contains</code> method uses &quot;loose&quot; comparisons when checking item values, meaning a string with an integer value will be considered equal to an integer of the same value. Use the <a href="#method-containsstrict"><code>containsStrict</code></a> method to filter using &quot;strict&quot; comparisons.</p>\n<p><a name="method-containsstrict"></a></p>\n\n          <p><a name="-code-containsstrict-code-"></a></p>\n          <h4>\n            <a href="#-code-containsstrict-code-">\n              <code>containsStrict()</code>\n            </a>\n          </h4><p>This method has the same signature as the <a href="#method-contains"><code>contains</code></a> method; however, all values are compared using &quot;strict&quot; comparisons.</p>\n<p><a name="method-count"></a></p>\n\n          <p><a name="-code-count-code-"></a></p>\n          <h4>\n            <a href="#-code-count-code-">\n              <code>count()</code>\n            </a>\n          </h4><p>The <code>count</code> method returns the total number of items in the collection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgMywgNF0pO1xuXG4kY29sbGVjdGlvbi0+Y291bnQoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1jb3VudCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]);\n\n$collection-&gt;count();\n\n<span class="hljs-comment">// 4</span></code></pre>\n  <p><a name="method-countBy"></a></p>\n\n          <p><a name="-code-countby-code-"></a></p>\n          <h4>\n            <a href="#-code-countby-code-">\n              <code>countBy()</code>\n            </a>\n          </h4><p>The <code>countBy</code> method counts the occurrences of values in the collection. By default, the method counts the occurrences of every element:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgMiwgMiwgM10pO1xuXG4kY291bnRlZCA9ICRjb2xsZWN0aW9uLT5jb3VudEJ5KCk7XG5cbiRjb3VudGVkLT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1jb3VudGJ5In0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);\n\n<span class="hljs-variable">$counted</span> = <span class="hljs-variable">$collection</span>-&gt;countBy();\n\n<span class="hljs-variable">$counted</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-number">1</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-number">2</span> =&gt; <span class="hljs-number">3</span>, <span class="hljs-number">3</span> =&gt; <span class="hljs-number">1</span>]</code></pre>\n  <p>However, you pass a callback to the <code>countBy</code> method to count all items by a custom value:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ2FsaWNlQGdtYWlsLmNvbScsICdib2JAeWFob28uY29tJywgJ2Nhcmxvc0BnbWFpbC5jb20nXSk7XG5cbiRjb3VudGVkID0gJGNvbGxlY3Rpb24tPmNvdW50QnkoZnVuY3Rpb24gKCRlbWFpbCkge1xuICAgIHJldHVybiBzdWJzdHIoc3RycmNocigkZW1haWwsIFwiQFwiKSwgMSk7XG59KTtcblxuJGNvdW50ZWQtPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLWNvdW50YnkifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-string">\'alice@gmail.com\'</span>, <span class="hljs-string">\'bob@yahoo.com\'</span>, <span class="hljs-string">\'carlos@gmail.com\'</span>]);\n\n$counted = $collection-&gt;countBy(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($email)</span> </span>{\n    <span class="hljs-keyword">return</span> substr(strrchr($email, <span class="hljs-string">"@"</span>), <span class="hljs-number">1</span>);\n});\n\n$counted-&gt;all();\n\n<span class="hljs-comment">// [\'gmail.com\' =&gt; 2, \'yahoo.com\' =&gt; 1]</span></code></pre>\n  <p><a name="method-crossjoin"></a></p>\n\n          <p><a name="-code-crossjoin-code-"></a></p>\n          <h4>\n            <a href="#-code-crossjoin-code-">\n              <code>crossJoin()</code>\n            </a>\n          </h4><p>The <code>crossJoin</code> method cross joins the collection&#39;s values among the given arrays or collections, returning a Cartesian product with all possible permutations:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMl0pO1xuXG4kbWF0cml4ID0gJGNvbGxlY3Rpb24tPmNyb3NzSm9pbihbJ2EnLCAnYiddKTtcblxuJG1hdHJpeC0+YWxsKCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtY3Jvc3Nqb2luIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = collect([1, 2]);\n\n<span class="hljs-variable">$matrix</span> = <span class="hljs-variable">$collection</span>-&gt;crossJoin([<span class="hljs-string">\'a\'</span>, <span class="hljs-string">\'b\'</span>]);\n\n<span class="hljs-variable">$matrix</span>-&gt;all();\n\n/*\n    [\n        [1, <span class="hljs-string">\'a\'</span>],\n        [1, <span class="hljs-string">\'b\'</span>],\n        [2, <span class="hljs-string">\'a\'</span>],\n        [2, <span class="hljs-string">\'b\'</span>],\n    ]\n*/\n\n<span class="hljs-variable">$collection</span> = collect([1, 2]);\n\n<span class="hljs-variable">$matrix</span> = <span class="hljs-variable">$collection</span>-&gt;crossJoin([<span class="hljs-string">\'a\'</span>, <span class="hljs-string">\'b\'</span>], [<span class="hljs-string">\'I\'</span>, <span class="hljs-string">\'II\'</span>]);\n\n<span class="hljs-variable">$matrix</span>-&gt;all();\n\n/*\n    [\n        [1, <span class="hljs-string">\'a\'</span>, <span class="hljs-string">\'I\'</span>],\n        [1, <span class="hljs-string">\'a\'</span>, <span class="hljs-string">\'II\'</span>],\n        [1, <span class="hljs-string">\'b\'</span>, <span class="hljs-string">\'I\'</span>],\n        [1, <span class="hljs-string">\'b\'</span>, <span class="hljs-string">\'II\'</span>],\n        [2, <span class="hljs-string">\'a\'</span>, <span class="hljs-string">\'I\'</span>],\n        [2, <span class="hljs-string">\'a\'</span>, <span class="hljs-string">\'II\'</span>],\n        [2, <span class="hljs-string">\'b\'</span>, <span class="hljs-string">\'I\'</span>],\n        [2, <span class="hljs-string">\'b\'</span>, <span class="hljs-string">\'II\'</span>],\n    ]\n*/</code></pre>\n  <p><a name="method-dd"></a></p>\n\n          <p><a name="-code-dd-code-"></a></p>\n          <h4>\n            <a href="#-code-dd-code-">\n              <code>dd()</code>\n            </a>\n          </h4><p>The <code>dd</code> method dumps the collection&#39;s items and ends execution of the script:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ0pvaG4gRG9lJywgJ0phbmUgRG9lJ10pO1xuXG4kY29sbGVjdGlvbi0+ZGQoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1kZCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-symbol">\'John</span> <span class="hljs-type">Doe\'</span>, <span class="hljs-symbol">\'Jane</span> <span class="hljs-type">Doe\'</span>]);\n\n$collection-&gt;dd<span class="hljs-literal">()</span>;\n\n/*\n    <span class="hljs-type">Collection</span> {\n        #items: <span class="hljs-built_in">array</span>:<span class="hljs-number">2</span> [\n            <span class="hljs-number">0</span> =&gt; <span class="hljs-string">"John Doe"</span>\n            <span class="hljs-number">1</span> =&gt; <span class="hljs-string">"Jane Doe"</span>\n        ]\n    }\n*/</code></pre>\n  <p>If you do not want to stop executing the script, use the <a href="#method-dump"><code>dump</code></a> method instead.</p>\n<p><a name="method-diff"></a></p>\n\n          <p><a name="-code-diff-code-"></a></p>\n          <h4>\n            <a href="#-code-diff-code-">\n              <code>diff()</code>\n            </a>\n          </h4><p>The <code>diff</code> method compares the collection against another collection or a plain PHP <code>array</code> based on its values. This method will return the values in the original collection that are not present in the given collection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgMywgNCwgNV0pO1xuXG4kZGlmZiA9ICRjb2xsZWN0aW9uLT5kaWZmKFsyLCA0LCA2LCA4XSk7XG5cbiRkaWZmLT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1kaWZmIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);\n\n$diff = $collection-&gt;diff([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]);\n\n$diff-&gt;all();\n\n<span class="hljs-comment">// [1, 3, 5]</span></code></pre>\n  <p><a name="method-diffassoc"></a></p>\n\n          <p><a name="-code-diffassoc-code-"></a></p>\n          <h4>\n            <a href="#-code-diffassoc-code-">\n              <code>diffAssoc()</code>\n            </a>\n          </h4><p>The <code>diffAssoc</code> method compares the collection against another collection or a plain PHP <code>array</code> based on its keys and values. This method will return the key / value pairs in the original collection that are not present in the given collection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgJ2NvbG9yJyA9PiAnb3JhbmdlJyxcbiAgICAndHlwZScgPT4gJ2ZydWl0JyxcbiAgICAncmVtYWluJyA9PiA2XG5dKTtcblxuJGRpZmYgPSAkY29sbGVjdGlvbi0+ZGlmZkFzc29jKFtcbiAgICAnY29sb3InID0+ICd5ZWxsb3cnLFxuICAgICd0eXBlJyA9PiAnZnJ1aXQnLFxuICAgICdyZW1haW4nID0+IDMsXG4gICAgJ3VzZWQnID0+IDYsXG5dKTtcblxuJGRpZmYtPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLWRpZmZhc3NvYyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([\n    <span class="hljs-string">\'color\'</span> =&gt; <span class="hljs-string">\'orange\'</span>,\n    <span class="hljs-string">\'type\'</span> =&gt; <span class="hljs-string">\'fruit\'</span>,\n    <span class="hljs-string">\'remain\'</span> =&gt; <span class="hljs-number">6</span>\n]);\n\n$diff = $collection-&gt;diffAssoc([\n    <span class="hljs-string">\'color\'</span> =&gt; <span class="hljs-string">\'yellow\'</span>,\n    <span class="hljs-string">\'type\'</span> =&gt; <span class="hljs-string">\'fruit\'</span>,\n    <span class="hljs-string">\'remain\'</span> =&gt; <span class="hljs-number">3</span>,\n    <span class="hljs-string">\'used\'</span> =&gt; <span class="hljs-number">6</span>,\n]);\n\n$diff-&gt;all();\n\n<span class="hljs-comment">// [\'color\' =&gt; \'orange\', \'remain\' =&gt; 6]</span></code></pre>\n  <p><a name="method-diffkeys"></a></p>\n\n          <p><a name="-code-diffkeys-code-"></a></p>\n          <h4>\n            <a href="#-code-diffkeys-code-">\n              <code>diffKeys()</code>\n            </a>\n          </h4><p>The <code>diffKeys</code> method compares the collection against another collection or a plain PHP <code>array</code> based on its keys. This method will return the key / value pairs in the original collection that are not present in the given collection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgJ29uZScgPT4gMTAsXG4gICAgJ3R3bycgPT4gMjAsXG4gICAgJ3RocmVlJyA9PiAzMCxcbiAgICAnZm91cicgPT4gNDAsXG4gICAgJ2ZpdmUnID0+IDUwLFxuXSk7XG5cbiRkaWZmID0gJGNvbGxlY3Rpb24tPmRpZmZLZXlzKFtcbiAgICAndHdvJyA9PiAyLFxuICAgICdmb3VyJyA9PiA0LFxuICAgICdzaXgnID0+IDYsXG4gICAgJ2VpZ2h0JyA9PiA4LFxuXSk7XG5cbiRkaWZmLT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1kaWZma2V5cyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([\n    <span class="hljs-string">\'one\'</span> =&gt; <span class="hljs-number">10</span>,\n    <span class="hljs-string">\'two\'</span> =&gt; <span class="hljs-number">20</span>,\n    <span class="hljs-string">\'three\'</span> =&gt; <span class="hljs-number">30</span>,\n    <span class="hljs-string">\'four\'</span> =&gt; <span class="hljs-number">40</span>,\n    <span class="hljs-string">\'five\'</span> =&gt; <span class="hljs-number">50</span>,\n]);\n\n$diff = $collection-&gt;diffKeys([\n    <span class="hljs-string">\'two\'</span> =&gt; <span class="hljs-number">2</span>,\n    <span class="hljs-string">\'four\'</span> =&gt; <span class="hljs-number">4</span>,\n    <span class="hljs-string">\'six\'</span> =&gt; <span class="hljs-number">6</span>,\n    <span class="hljs-string">\'eight\'</span> =&gt; <span class="hljs-number">8</span>,\n]);\n\n$diff-&gt;all();\n\n<span class="hljs-comment">// [\'one\' =&gt; 10, \'three\' =&gt; 30, \'five\' =&gt; 50]</span></code></pre>\n  <p><a name="method-dump"></a></p>\n\n          <p><a name="-code-dump-code-"></a></p>\n          <h4>\n            <a href="#-code-dump-code-">\n              <code>dump()</code>\n            </a>\n          </h4><p>The <code>dump</code> method dumps the collection&#39;s items:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ0pvaG4gRG9lJywgJ0phbmUgRG9lJ10pO1xuXG4kY29sbGVjdGlvbi0+ZHVtcCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLWR1bXAifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-symbol">\'John</span> <span class="hljs-type">Doe\'</span>, <span class="hljs-symbol">\'Jane</span> <span class="hljs-type">Doe\'</span>]);\n\n$collection-&gt;dump<span class="hljs-literal">()</span>;\n\n/*\n    <span class="hljs-type">Collection</span> {\n        #items: <span class="hljs-built_in">array</span>:<span class="hljs-number">2</span> [\n            <span class="hljs-number">0</span> =&gt; <span class="hljs-string">"John Doe"</span>\n            <span class="hljs-number">1</span> =&gt; <span class="hljs-string">"Jane Doe"</span>\n        ]\n    }\n*/</code></pre>\n  <p>If you want to stop executing the script after dumping the collection, use the <a href="#method-dd"><code>dd</code></a> method instead.</p>\n<p><a name="method-duplicates"></a></p>\n\n          <p><a name="-code-duplicates-code-"></a></p>\n          <h4>\n            <a href="#-code-duplicates-code-">\n              <code>duplicates()</code>\n            </a>\n          </h4><p>The <code>duplicates</code> method retrieves and returns duplicate values from the collection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ2EnLCAnYicsICdhJywgJ2MnLCAnYiddKTtcblxuJGNvbGxlY3Rpb24tPmR1cGxpY2F0ZXMoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1kdXBsaWNhdGVzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = collect([<span class="hljs-string">\'a\'</span>, <span class="hljs-string">\'b\'</span>, <span class="hljs-string">\'a\'</span>, <span class="hljs-string">\'c\'</span>, <span class="hljs-string">\'b\'</span>]);\n\n<span class="hljs-variable">$collection</span>-&gt;duplicates();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-number">2</span> =&gt; <span class="hljs-string">\'a\'</span>, <span class="hljs-number">4</span> =&gt; <span class="hljs-string">\'b\'</span>]</code></pre>\n  <p>If the collection contains arrays or objects, you can pass the key of the attributes that you wish to check for duplicate values:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRlbXBsb3llZXMgPSBjb2xsZWN0KFtcbiAgICBbJ2VtYWlsJyA9PiAnYWJpZ2FpbEBleGFtcGxlLmNvbScsICdwb3NpdGlvbicgPT4gJ0RldmVsb3BlciddLFxuICAgIFsnZW1haWwnID0+ICdqYW1lc0BleGFtcGxlLmNvbScsICdwb3NpdGlvbicgPT4gJ0Rlc2lnbmVyJ10sXG4gICAgWydlbWFpbCcgPT4gJ3ZpY3RvcmlhQGV4YW1wbGUuY29tJywgJ3Bvc2l0aW9uJyA9PiAnRGV2ZWxvcGVyJ10sXG5dKTtcblxuJGVtcGxveWVlcy0+ZHVwbGljYXRlcygncG9zaXRpb24nKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1kdXBsaWNhdGVzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$employees = collect([\n    [<span class="hljs-string">\'email\'</span> =&gt; <span class="hljs-string">\'abigail@example.com\'</span>, <span class="hljs-string">\'position\'</span> =&gt; <span class="hljs-string">\'Developer\'</span>],\n    [<span class="hljs-string">\'email\'</span> =&gt; <span class="hljs-string">\'james@example.com\'</span>, <span class="hljs-string">\'position\'</span> =&gt; <span class="hljs-string">\'Designer\'</span>],\n    [<span class="hljs-string">\'email\'</span> =&gt; <span class="hljs-string">\'victoria@example.com\'</span>, <span class="hljs-string">\'position\'</span> =&gt; <span class="hljs-string">\'Developer\'</span>],\n])\n\n$employees-&gt;duplicates(<span class="hljs-string">\'position\'</span>);\n\n<span class="hljs-comment">// [2 =&gt; \'Developer\']</span></code></pre>\n  <p><a name="method-duplicatesstrict"></a></p>\n\n          <p><a name="-code-duplicatesstrict-code-"></a></p>\n          <h4>\n            <a href="#-code-duplicatesstrict-code-">\n              <code>duplicatesStrict()</code>\n            </a>\n          </h4><p>This method has the same signature as the <a href="#method-duplicates"><code>duplicates</code></a> method; however, all values are compared using &quot;strict&quot; comparisons.</p>\n<p><a name="method-each"></a></p>\n\n          <p><a name="-code-each-code-"></a></p>\n          <h4>\n            <a href="#-code-each-code-">\n              <code>each()</code>\n            </a>\n          </h4><p>The <code>each</code> method iterates over the items in the collection and passes each item to a callback:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$collection-&gt;each(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($item, $key)</span> </span>{\n    <span class="hljs-comment">//</span>\n});</code></pre>\n  <p>If you would like to stop iterating through the items, you may return <code>false</code> from your callback:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$collection-&gt;each(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($item, $key)</span> </span>{\n    <span class="hljs-keyword">if</span> (<span class="hljs-comment">/* some condition */</span>) {\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;\n    }\n});</code></pre>\n  <p><a name="method-eachspread"></a></p>\n\n          <p><a name="-code-eachspread-code-"></a></p>\n          <h4>\n            <a href="#-code-eachspread-code-">\n              <code>eachSpread()</code>\n            </a>\n          </h4><p>The <code>eachSpread</code> method iterates over the collection&#39;s items, passing each nested item value into the given callback:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([[<span class="hljs-string">\'John Doe\'</span>, <span class="hljs-number">35</span>], [<span class="hljs-string">\'Jane Doe\'</span>, <span class="hljs-number">33</span>]]);\n\n$collection-&gt;eachSpread(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($name, $age)</span> </span>{\n    <span class="hljs-comment">//</span>\n});</code></pre>\n  <p>You may stop iterating through the items by returning <code>false</code> from the callback:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$collection-&gt;eachSpread(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($name, $age)</span> </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;\n});</code></pre>\n  <p><a name="method-every"></a></p>\n\n          <p><a name="-code-every-code-"></a></p>\n          <h4>\n            <a href="#-code-every-code-">\n              <code>every()</code>\n            </a>\n          </h4><p>The <code>every</code> method may be used to verify that all elements of a collection pass a given truth test:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImNvbGxlY3QoWzEsIDIsIDMsIDRdKS0+ZXZlcnkoZnVuY3Rpb24gKCR2YWx1ZSwgJGtleSkge1xuICAgIHJldHVybiAkdmFsdWUgPiAyO1xufSk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtZXZlcnkifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])-&gt;every(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($value, $key)</span> </span>{\n    <span class="hljs-keyword">return</span> $value &gt; <span class="hljs-number">2</span>;\n});\n\n<span class="hljs-comment">// false</span></code></pre>\n  <p>If the collection is empty, <code>every</code> will return true:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([]);\n\n$collection-&gt;every(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($value, $key)</span> </span>{\n    <span class="hljs-keyword">return</span> $value &gt; <span class="hljs-number">2</span>;\n});\n\n<span class="hljs-comment">// true</span></code></pre>\n  <p><a name="method-except"></a></p>\n\n          <p><a name="-code-except-code-"></a></p>\n          <h4>\n            <a href="#-code-except-code-">\n              <code>except()</code>\n            </a>\n          </h4><p>The <code>except</code> method returns all items in the collection except for those with the specified keys:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ3Byb2R1Y3RfaWQnID0+IDEsICdwcmljZScgPT4gMTAwLCAnZGlzY291bnQnID0+IGZhbHNlXSk7XG5cbiRmaWx0ZXJlZCA9ICRjb2xsZWN0aW9uLT5leGNlcHQoWydwcmljZScsICdkaXNjb3VudCddKTtcblxuJGZpbHRlcmVkLT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1leGNlcHQifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-string">\'product_id\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">100</span>, <span class="hljs-string">\'discount\'</span> =&gt; <span class="hljs-keyword">false</span>]);\n\n$filtered = $collection-&gt;except([<span class="hljs-string">\'price\'</span>, <span class="hljs-string">\'discount\'</span>]);\n\n$filtered-&gt;all();\n\n<span class="hljs-comment">// [\'product_id\' =&gt; 1]</span></code></pre>\n  <p>For the inverse of <code>except</code>, see the <a href="#method-only">only</a> method.</p>\n<p><a name="method-filter"></a></p>\n\n          <p><a name="-code-filter-code-"></a></p>\n          <h4>\n            <a href="#-code-filter-code-">\n              <code>filter()</code>\n            </a>\n          </h4><p>The <code>filter</code> method filters the collection using the given callback, keeping only those items that pass a given truth test:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgMywgNF0pO1xuXG4kZmlsdGVyZWQgPSAkY29sbGVjdGlvbi0+ZmlsdGVyKGZ1bmN0aW9uICgkdmFsdWUsICRrZXkpIHtcbiAgICByZXR1cm4gJHZhbHVlID4gMjtcbn0pO1xuXG4kZmlsdGVyZWQtPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLWZpbHRlciJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]);\n\n$filtered = $collection-&gt;filter(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($value, $key)</span> </span>{\n    <span class="hljs-keyword">return</span> $value &gt; <span class="hljs-number">2</span>;\n});\n\n$filtered-&gt;all();\n\n<span class="hljs-comment">// [3, 4]</span></code></pre>\n  <p>If no callback is supplied, all entries of the collection that are equivalent to <code>false</code> will be removed:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgMywgbnVsbCwgZmFsc2UsICcnLCAwLCBbXV0pO1xuXG4kY29sbGVjdGlvbi0+ZmlsdGVyKCktPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLWZpbHRlciJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">false</span>, <span class="hljs-string">\'\'</span>, <span class="hljs-number">0</span>, []]);\n\n$collection-&gt;filter()-&gt;all();\n\n<span class="hljs-comment">// [1, 2, 3]</span></code></pre>\n  <p>For the inverse of <code>filter</code>, see the <a href="#method-reject">reject</a> method.</p>\n<p><a name="method-first"></a></p>\n\n          <p><a name="-code-first-code-"></a></p>\n          <h4>\n            <a href="#-code-first-code-">\n              <code>first()</code>\n            </a>\n          </h4><p>The <code>first</code> method returns the first element in the collection that passes a given truth test:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImNvbGxlY3QoWzEsIDIsIDMsIDRdKS0+Zmlyc3QoZnVuY3Rpb24gKCR2YWx1ZSwgJGtleSkge1xuICAgIHJldHVybiAkdmFsdWUgPiAyO1xufSk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtZmlyc3QifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])-&gt;first(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($value, $key)</span> </span>{\n    <span class="hljs-keyword">return</span> $value &gt; <span class="hljs-number">2</span>;\n});\n\n<span class="hljs-comment">// 3</span></code></pre>\n  <p>You may also call the <code>first</code> method with no arguments to get the first element in the collection. If the collection is empty, <code>null</code> is returned:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImNvbGxlY3QoWzEsIDIsIDMsIDRdKS0+Zmlyc3QoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1maXJzdCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])-&gt;first();\n\n<span class="hljs-comment">// 1</span></code></pre>\n  <p><a name="method-first-where"></a></p>\n\n          <p><a name="-code-firstwhere-code-"></a></p>\n          <h4>\n            <a href="#-code-firstwhere-code-">\n              <code>firstWhere()</code>\n            </a>\n          </h4><p>The <code>firstWhere</code> method returns the first element in the collection with the given key / value pair:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgWyduYW1lJyA9PiAnUmVnZW5hJywgJ2FnZScgPT4gbnVsbF0sXG4gICAgWyduYW1lJyA9PiAnTGluZGEnLCAnYWdlJyA9PiAxNF0sXG4gICAgWyduYW1lJyA9PiAnRGllZ28nLCAnYWdlJyA9PiAyM10sXG4gICAgWyduYW1lJyA9PiAnTGluZGEnLCAnYWdlJyA9PiA4NF0sXG5dKTtcblxuJGNvbGxlY3Rpb24tPmZpcnN0V2hlcmUoJ25hbWUnLCAnTGluZGEnKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1maXJzdHdoZXJlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([\n    [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Regena\'</span>, <span class="hljs-string">\'age\'</span> =&gt; <span class="hljs-keyword">null</span>],\n    [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Linda\'</span>, <span class="hljs-string">\'age\'</span> =&gt; <span class="hljs-number">14</span>],\n    [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Diego\'</span>, <span class="hljs-string">\'age\'</span> =&gt; <span class="hljs-number">23</span>],\n    [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Linda\'</span>, <span class="hljs-string">\'age\'</span> =&gt; <span class="hljs-number">84</span>],\n]);\n\n$collection-&gt;firstWhere(<span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'Linda\'</span>);\n\n<span class="hljs-comment">// [\'name\' =&gt; \'Linda\', \'age\' =&gt; 14]</span></code></pre>\n  <p>You may also call the <code>firstWhere</code> method with an operator:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgWyduYW1lJyA9PiAnUmVnZW5hJywgJ2FnZScgPT4gbnVsbF0sXG4gICAgWyduYW1lJyA9PiAnTGluZGEnLCAnYWdlJyA9PiAxNF0sXG4gICAgWyduYW1lJyA9PiAnRGllZ28nLCAnYWdlJyA9PiAyM10sXG4gICAgWyduYW1lJyA9PiAnTGluZGEnLCAnYWdlJyA9PiA4NF0sXG5dKTtcblxuJGNvbGxlY3Rpb24tPmZpcnN0V2hlcmUoJ2FnZScsICc+PScsIDE4KTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1maXJzdHdoZXJlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span>-&gt;firstWhere(<span class="hljs-string">\'age\'</span>, <span class="hljs-string">\'&gt;=\'</span>, <span class="hljs-number">18</span>);\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Diego\'</span>, <span class="hljs-string">\'age\'</span> =&gt; <span class="hljs-number">23</span>]</code></pre>\n  <p>Like the <a href="#method-where">where</a> method, you may pass one argument to the <code>firstWhere</code> method. In this scenario, the <code>firstWhere</code> method will return the first item where the given item key&#39;s value is &quot;truthy&quot;:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span>-&gt;firstWhere(<span class="hljs-string">\'age\'</span>);\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Linda\'</span>, <span class="hljs-string">\'age\'</span> =&gt; <span class="hljs-number">14</span>]</code></pre>\n  <p><a name="method-flatmap"></a></p>\n\n          <p><a name="-code-flatmap-code-"></a></p>\n          <h4>\n            <a href="#-code-flatmap-code-">\n              <code>flatMap()</code>\n            </a>\n          </h4><p>The <code>flatMap</code> method iterates through the collection and passes each value to the given callback. The callback is free to modify the item and return it, thus forming a new collection of modified items. Then, the array is flattened by a level:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgWyduYW1lJyA9PiAnU2FsbHknXSxcbiAgICBbJ3NjaG9vbCcgPT4gJ0Fya2Fuc2FzJ10sXG4gICAgWydhZ2UnID0+IDI4XVxuXSk7XG5cbiRmbGF0dGVuZWQgPSAkY29sbGVjdGlvbi0+ZmxhdE1hcChmdW5jdGlvbiAoJHZhbHVlcykge1xuICAgIHJldHVybiBhcnJheV9tYXAoJ3N0cnRvdXBwZXInLCAkdmFsdWVzKTtcbn0pO1xuXG4kZmxhdHRlbmVkLT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1mbGF0bWFwIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = collect([\n    [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Sally\'</span>],\n    [<span class="hljs-string">\'school\'</span> =&gt; <span class="hljs-string">\'Arkansas\'</span>],\n    [<span class="hljs-string">\'age\'</span> =&gt; <span class="hljs-number">28</span>]\n]);\n\n<span class="hljs-variable">$flattened</span> = <span class="hljs-variable">$collection</span>-&gt;flatMap(function (<span class="hljs-variable">$values</span>) {\n    <span class="hljs-keyword">return</span> array_map(<span class="hljs-string">\'strtoupper\'</span>, <span class="hljs-variable">$values</span>);\n});\n\n<span class="hljs-variable">$flattened</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'SALLY\'</span>, <span class="hljs-string">\'school\'</span> =&gt; <span class="hljs-string">\'ARKANSAS\'</span>, <span class="hljs-string">\'age\'</span> =&gt; <span class="hljs-string">\'28\'</span>];</code></pre>\n  <p><a name="method-flatten"></a></p>\n\n          <p><a name="-code-flatten-code-"></a></p>\n          <h4>\n            <a href="#-code-flatten-code-">\n              <code>flatten()</code>\n            </a>\n          </h4><p>The <code>flatten</code> method flattens a multi-dimensional collection into a single dimension:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ25hbWUnID0+ICd0YXlsb3InLCAnbGFuZ3VhZ2VzJyA9PiBbJ3BocCcsICdqYXZhc2NyaXB0J11dKTtcblxuJGZsYXR0ZW5lZCA9ICRjb2xsZWN0aW9uLT5mbGF0dGVuKCk7XG5cbiRmbGF0dGVuZWQtPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLWZsYXR0ZW4ifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = collect([<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'taylor\'</span>, <span class="hljs-string">\'languages\'</span> =&gt; [<span class="hljs-string">\'php\'</span>, <span class="hljs-string">\'javascript\'</span>]]);\n\n<span class="hljs-variable">$flattened</span> = <span class="hljs-variable">$collection</span>-&gt;flatten();\n\n<span class="hljs-variable">$flattened</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'taylor\'</span>, <span class="hljs-string">\'php\'</span>, <span class="hljs-string">\'javascript\'</span>];</code></pre>\n  <p>You may optionally pass the function a &quot;depth&quot; argument:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgJ0FwcGxlJyA9PiBbXG4gICAgICAgIFsnbmFtZScgPT4gJ2lQaG9uZSA2UycsICdicmFuZCcgPT4gJ0FwcGxlJ10sXG4gICAgXSxcbiAgICAnU2Ftc3VuZycgPT4gW1xuICAgICAgICBbJ25hbWUnID0+ICdHYWxheHkgUzcnLCAnYnJhbmQnID0+ICdTYW1zdW5nJ11cbiAgICBdLFxuXSk7XG5cbiRwcm9kdWN0cyA9ICRjb2xsZWN0aW9uLT5mbGF0dGVuKDEpO1xuXG4kcHJvZHVjdHMtPnZhbHVlcygpLT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1mbGF0dGVuIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([\n    <span class="hljs-symbol">\'Apple\'</span> =&gt; [\n        [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'iPhone</span> <span class="hljs-number">6</span>S<span class="hljs-string">\', \'</span>brand\' =&gt; <span class="hljs-symbol">\'Apple\'</span>],\n    ],\n    <span class="hljs-symbol">\'Samsung\'</span> =&gt; [\n        [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Galaxy</span> <span class="hljs-type">S7\'</span>, <span class="hljs-symbol">\'brand\'</span> =&gt; <span class="hljs-symbol">\'Samsung\'</span>]\n    ],\n]);\n\n$products = $collection-&gt;flatten(<span class="hljs-number">1</span>);\n\n$products-&gt;values<span class="hljs-literal">()</span>-&gt;all<span class="hljs-literal">()</span>;\n\n/*\n    [\n        [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'iPhone</span> <span class="hljs-number">6</span>S<span class="hljs-string">\', \'</span>brand\' =&gt; <span class="hljs-symbol">\'Apple\'</span>],\n        [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Galaxy</span> <span class="hljs-type">S7\'</span>, <span class="hljs-symbol">\'brand\'</span> =&gt; <span class="hljs-symbol">\'Samsung\'</span>],\n    ]\n*/</code></pre>\n  <p>In this example, calling <code>flatten</code> without providing the depth would have also flattened the nested arrays, resulting in <code>[&#39;iPhone 6S&#39;, &#39;Apple&#39;, &#39;Galaxy S7&#39;, &#39;Samsung&#39;]</code>. Providing a depth allows you to restrict the levels of nested arrays that will be flattened.</p>\n<p><a name="method-flip"></a></p>\n\n          <p><a name="-code-flip-code-"></a></p>\n          <h4>\n            <a href="#-code-flip-code-">\n              <code>flip()</code>\n            </a>\n          </h4><p>The <code>flip</code> method swaps the collection&#39;s keys with their corresponding values:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ25hbWUnID0+ICd0YXlsb3InLCAnZnJhbWV3b3JrJyA9PiAnbGFyYXZlbCddKTtcblxuJGZsaXBwZWQgPSAkY29sbGVjdGlvbi0+ZmxpcCgpO1xuXG4kZmxpcHBlZC0+YWxsKCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtZmxpcCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = collect([<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'taylor\'</span>, <span class="hljs-string">\'framework\'</span> =&gt; <span class="hljs-string">\'laravel\'</span>]);\n\n<span class="hljs-variable">$flipped</span> = <span class="hljs-variable">$collection</span>-&gt;flip();\n\n<span class="hljs-variable">$flipped</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'taylor\'</span> =&gt; <span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'laravel\'</span> =&gt; <span class="hljs-string">\'framework\'</span>]</code></pre>\n  <p><a name="method-forget"></a></p>\n\n          <p><a name="-code-forget-code-"></a></p>\n          <h4>\n            <a href="#-code-forget-code-">\n              <code>forget()</code>\n            </a>\n          </h4><p>The <code>forget</code> method removes an item from the collection by its key:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ25hbWUnID0+ICd0YXlsb3InLCAnZnJhbWV3b3JrJyA9PiAnbGFyYXZlbCddKTtcblxuJGNvbGxlY3Rpb24tPmZvcmdldCgnbmFtZScpO1xuXG4kY29sbGVjdGlvbi0+YWxsKCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtZm9yZ2V0In0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = collect([<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'taylor\'</span>, <span class="hljs-string">\'framework\'</span> =&gt; <span class="hljs-string">\'laravel\'</span>]);\n\n<span class="hljs-variable">$collection</span>-&gt;forget(<span class="hljs-string">\'name\'</span>);\n\n<span class="hljs-variable">$collection</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'framework\'</span> =&gt; <span class="hljs-string">\'laravel\'</span>]</code></pre>\n  <blockquote>\n<p>{note} Unlike most other collection methods, <code>forget</code> does not return a new modified collection; it modifies the collection it is called on.</p>\n</blockquote>\n<p><a name="method-forpage"></a></p>\n\n          <p><a name="-code-forpage-code-"></a></p>\n          <h4>\n            <a href="#-code-forpage-code-">\n              <code>forPage()</code>\n            </a>\n          </h4><p>The <code>forPage</code> method returns a new collection containing the items that would be present on a given page number. The method accepts the page number as its first argument and the number of items to show per page as its second argument:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOV0pO1xuXG4kY2h1bmsgPSAkY29sbGVjdGlvbi0+Zm9yUGFnZSgyLCAzKTtcblxuJGNodW5rLT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1mb3JwYWdlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]);\n\n$chunk = $collection-&gt;forPage(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);\n\n$chunk-&gt;all();\n\n<span class="hljs-comment">// [4, 5, 6]</span></code></pre>\n  <p><a name="method-get"></a></p>\n\n          <p><a name="-code-get-code-"></a></p>\n          <h4>\n            <a href="#-code-get-code-">\n              <code>get()</code>\n            </a>\n          </h4><p>The <code>get</code> method returns the item at a given key. If the key does not exist, <code>null</code> is returned:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ25hbWUnID0+ICd0YXlsb3InLCAnZnJhbWV3b3JrJyA9PiAnbGFyYXZlbCddKTtcblxuJHZhbHVlID0gJGNvbGxlY3Rpb24tPmdldCgnbmFtZScpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLWdldCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'taylor\'</span>, <span class="hljs-string">\'framework\'</span> =&gt; <span class="hljs-string">\'laravel\'</span>]);\n\n$value = $collection-&gt;get(<span class="hljs-string">\'name\'</span>);\n\n<span class="hljs-comment">// taylor</span></code></pre>\n  <p>You may optionally pass a default value as the second argument:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ25hbWUnID0+ICd0YXlsb3InLCAnZnJhbWV3b3JrJyA9PiAnbGFyYXZlbCddKTtcblxuJHZhbHVlID0gJGNvbGxlY3Rpb24tPmdldCgnZm9vJywgJ2RlZmF1bHQtdmFsdWUnKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1nZXQifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'taylor\'</span>, <span class="hljs-string">\'framework\'</span> =&gt; <span class="hljs-string">\'laravel\'</span>]);\n\n$value = $collection-&gt;get(<span class="hljs-string">\'foo\'</span>, <span class="hljs-string">\'default-value\'</span>);\n\n<span class="hljs-comment">// default-value</span></code></pre>\n  <p>You may even pass a callback as the default value. The result of the callback will be returned if the specified key does not exist:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uLT5nZXQoJ2VtYWlsJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnZGVmYXVsdC12YWx1ZSc7XG59KTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1nZXQifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection-&gt;get(<span class="hljs-string">\'email\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-string">\'default-value\'</span>;\n});\n\n<span class="hljs-comment">// default-value</span></code></pre>\n  <p><a name="method-groupby"></a></p>\n\n          <p><a name="-code-groupby-code-"></a></p>\n          <h4>\n            <a href="#-code-groupby-code-">\n              <code>groupBy()</code>\n            </a>\n          </h4><p>The <code>groupBy</code> method groups the collection&#39;s items by a given key:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgWydhY2NvdW50X2lkJyA9PiAnYWNjb3VudC14MTAnLCAncHJvZHVjdCcgPT4gJ0NoYWlyJ10sXG4gICAgWydhY2NvdW50X2lkJyA9PiAnYWNjb3VudC14MTAnLCAncHJvZHVjdCcgPT4gJ0Jvb2tjYXNlJ10sXG4gICAgWydhY2NvdW50X2lkJyA9PiAnYWNjb3VudC14MTEnLCAncHJvZHVjdCcgPT4gJ0Rlc2snXSxcbl0pO1xuXG4kZ3JvdXBlZCA9ICRjb2xsZWN0aW9uLT5ncm91cEJ5KCdhY2NvdW50X2lkJyk7XG5cbiRncm91cGVkLT50b0FycmF5KCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtZ3JvdXBieSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([\n    [<span class="hljs-symbol">\'account_id\'</span> =&gt; <span class="hljs-symbol">\'account</span>-x10\', <span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Chair\'</span>],\n    [<span class="hljs-symbol">\'account_id\'</span> =&gt; <span class="hljs-symbol">\'account</span>-x10\', <span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Bookcase\'</span>],\n    [<span class="hljs-symbol">\'account_id\'</span> =&gt; <span class="hljs-symbol">\'account</span>-x11\', <span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Desk\'</span>],\n]);\n\n$grouped = $collection-&gt;groupBy(<span class="hljs-symbol">\'account_id\'</span>);\n\n$grouped-&gt;toArray<span class="hljs-literal">()</span>;\n\n/*\n    [\n        <span class="hljs-symbol">\'account</span>-x10\' =&gt; [\n            [<span class="hljs-symbol">\'account_id\'</span> =&gt; <span class="hljs-symbol">\'account</span>-x10\', <span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Chair\'</span>],\n            [<span class="hljs-symbol">\'account_id\'</span> =&gt; <span class="hljs-symbol">\'account</span>-x10\', <span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Bookcase\'</span>],\n        ],\n        <span class="hljs-symbol">\'account</span>-x11\' =&gt; [\n            [<span class="hljs-symbol">\'account_id\'</span> =&gt; <span class="hljs-symbol">\'account</span>-x11\', <span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Desk\'</span>],\n        ],\n    ]\n*/</code></pre>\n  <p>Instead of passing a string <code>key</code>, you may pass a callback. The callback should return the value you wish to key the group by:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRncm91cGVkID0gJGNvbGxlY3Rpb24tPmdyb3VwQnkoZnVuY3Rpb24gKCRpdGVtLCAka2V5KSB7XG4gICAgcmV0dXJuIHN1YnN0cigkaXRlbVsnYWNjb3VudF9pZCddLCAtMyk7XG59KTtcblxuJGdyb3VwZWQtPnRvQXJyYXkoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1ncm91cGJ5In0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$grouped = $collection-&gt;groupBy(function ($item, $key) {\n    return substr($item[<span class="hljs-symbol">\'account_id\'</span>], -<span class="hljs-number">3</span>);\n});\n\n$grouped-&gt;toArray<span class="hljs-literal">()</span>;\n\n/*\n    [\n        <span class="hljs-symbol">\'x10\'</span> =&gt; [\n            [<span class="hljs-symbol">\'account_id\'</span> =&gt; <span class="hljs-symbol">\'account</span>-x10\', <span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Chair\'</span>],\n            [<span class="hljs-symbol">\'account_id\'</span> =&gt; <span class="hljs-symbol">\'account</span>-x10\', <span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Bookcase\'</span>],\n        ],\n        <span class="hljs-symbol">\'x11\'</span> =&gt; [\n            [<span class="hljs-symbol">\'account_id\'</span> =&gt; <span class="hljs-symbol">\'account</span>-x11\', <span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Desk\'</span>],\n        ],\n    ]\n*/</code></pre>\n  <p>Multiple grouping criteria may be passed as an array. Each array element will be applied to the corresponding level within a multi-dimensional array:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gY29sbGVjdChbXG4gICAgMTAgPT4gWyd1c2VyJyA9PiAxLCAnc2tpbGwnID0+IDEsICdyb2xlcycgPT4gWydSb2xlXzEnLCAnUm9sZV8zJ11dLFxuICAgIDIwID0+IFsndXNlcicgPT4gMiwgJ3NraWxsJyA9PiAxLCAncm9sZXMnID0+IFsnUm9sZV8xJywgJ1JvbGVfMiddXSxcbiAgICAzMCA9PiBbJ3VzZXInID0+IDMsICdza2lsbCcgPT4gMiwgJ3JvbGVzJyA9PiBbJ1JvbGVfMSddXSxcbiAgICA0MCA9PiBbJ3VzZXInID0+IDQsICdza2lsbCcgPT4gMiwgJ3JvbGVzJyA9PiBbJ1JvbGVfMiddXSxcbl0pO1xuXG4kcmVzdWx0ID0gJGRhdGEtPmdyb3VwQnkoW1xuICAgICdza2lsbCcsXG4gICAgZnVuY3Rpb24gKCRpdGVtKSB7XG4gICAgICAgIHJldHVybiAkaXRlbVsncm9sZXMnXTtcbiAgICB9LFxuXSwgJHByZXNlcnZlS2V5cyA9IHRydWUpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLWdyb3VwYnkifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$data = <span class="hljs-keyword">new</span> <span class="hljs-type">Collection</span>([\n    <span class="hljs-number">10</span> =&gt; [<span class="hljs-symbol">\'user\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-symbol">\'skill\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-symbol">\'roles\'</span> =&gt; [<span class="hljs-symbol">\'Role_1\'</span>, <span class="hljs-symbol">\'Role_3\'</span>]],\n    <span class="hljs-number">20</span> =&gt; [<span class="hljs-symbol">\'user\'</span> =&gt; <span class="hljs-number">2</span>, <span class="hljs-symbol">\'skill\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-symbol">\'roles\'</span> =&gt; [<span class="hljs-symbol">\'Role_1\'</span>, <span class="hljs-symbol">\'Role_2\'</span>]],\n    <span class="hljs-number">30</span> =&gt; [<span class="hljs-symbol">\'user\'</span> =&gt; <span class="hljs-number">3</span>, <span class="hljs-symbol">\'skill\'</span> =&gt; <span class="hljs-number">2</span>, <span class="hljs-symbol">\'roles\'</span> =&gt; [<span class="hljs-symbol">\'Role_1\'</span>]],\n    <span class="hljs-number">40</span> =&gt; [<span class="hljs-symbol">\'user\'</span> =&gt; <span class="hljs-number">4</span>, <span class="hljs-symbol">\'skill\'</span> =&gt; <span class="hljs-number">2</span>, <span class="hljs-symbol">\'roles\'</span> =&gt; [<span class="hljs-symbol">\'Role_2\'</span>]],\n]);\n\n$result = $data-&gt;groupBy([\n    <span class="hljs-symbol">\'skill\'</span>,\n    <span class="hljs-keyword">function</span> ($item) {\n        return $item[<span class="hljs-symbol">\'roles\'</span>];\n    },\n], $preserveKeys = <span class="hljs-literal">true</span>);\n\n/*\n[\n    <span class="hljs-number">1</span> =&gt; [\n        <span class="hljs-symbol">\'Role_1\'</span> =&gt; [\n            <span class="hljs-number">10</span> =&gt; [<span class="hljs-symbol">\'user\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-symbol">\'skill\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-symbol">\'roles\'</span> =&gt; [<span class="hljs-symbol">\'Role_1\'</span>, <span class="hljs-symbol">\'Role_3\'</span>]],\n            <span class="hljs-number">20</span> =&gt; [<span class="hljs-symbol">\'user\'</span> =&gt; <span class="hljs-number">2</span>, <span class="hljs-symbol">\'skill\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-symbol">\'roles\'</span> =&gt; [<span class="hljs-symbol">\'Role_1\'</span>, <span class="hljs-symbol">\'Role_2\'</span>]],\n        ],\n        <span class="hljs-symbol">\'Role_2\'</span> =&gt; [\n            <span class="hljs-number">20</span> =&gt; [<span class="hljs-symbol">\'user\'</span> =&gt; <span class="hljs-number">2</span>, <span class="hljs-symbol">\'skill\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-symbol">\'roles\'</span> =&gt; [<span class="hljs-symbol">\'Role_1\'</span>, <span class="hljs-symbol">\'Role_2\'</span>]],\n        ],\n        <span class="hljs-symbol">\'Role_3\'</span> =&gt; [\n            <span class="hljs-number">10</span> =&gt; [<span class="hljs-symbol">\'user\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-symbol">\'skill\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-symbol">\'roles\'</span> =&gt; [<span class="hljs-symbol">\'Role_1\'</span>, <span class="hljs-symbol">\'Role_3\'</span>]],\n        ],\n    ],\n    <span class="hljs-number">2</span> =&gt; [\n        <span class="hljs-symbol">\'Role_1\'</span> =&gt; [\n            <span class="hljs-number">30</span> =&gt; [<span class="hljs-symbol">\'user\'</span> =&gt; <span class="hljs-number">3</span>, <span class="hljs-symbol">\'skill\'</span> =&gt; <span class="hljs-number">2</span>, <span class="hljs-symbol">\'roles\'</span> =&gt; [<span class="hljs-symbol">\'Role_1\'</span>]],\n        ],\n        <span class="hljs-symbol">\'Role_2\'</span> =&gt; [\n            <span class="hljs-number">40</span> =&gt; [<span class="hljs-symbol">\'user\'</span> =&gt; <span class="hljs-number">4</span>, <span class="hljs-symbol">\'skill\'</span> =&gt; <span class="hljs-number">2</span>, <span class="hljs-symbol">\'roles\'</span> =&gt; [<span class="hljs-symbol">\'Role_2\'</span>]],\n        ],\n    ],\n];\n*/</code></pre>\n  <p><a name="method-has"></a></p>\n\n          <p><a name="-code-has-code-"></a></p>\n          <h4>\n            <a href="#-code-has-code-">\n              <code>has()</code>\n            </a>\n          </h4><p>The <code>has</code> method determines if a given key exists in the collection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ2FjY291bnRfaWQnID0+IDEsICdwcm9kdWN0JyA9PiAnRGVzaycsICdhbW91bnQnID0+IDVdKTtcblxuJGNvbGxlY3Rpb24tPmhhcygncHJvZHVjdCcpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLWhhcyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = collect([<span class="hljs-string">\'account_id\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">\'product\'</span> =&gt; <span class="hljs-string">\'Desk\'</span>, <span class="hljs-string">\'amount\'</span> =&gt; <span class="hljs-number">5</span>]);\n\n<span class="hljs-variable">$collection</span>-&gt;has(<span class="hljs-string">\'product\'</span>);\n\n<span class="hljs-regexp">//</span> <span class="hljs-keyword">true</span>\n\n<span class="hljs-variable">$collection</span>-&gt;has([<span class="hljs-string">\'product\'</span>, <span class="hljs-string">\'amount\'</span>]);\n\n<span class="hljs-regexp">//</span> <span class="hljs-keyword">true</span>\n\n<span class="hljs-variable">$collection</span>-&gt;has([<span class="hljs-string">\'amount\'</span>, <span class="hljs-string">\'price\'</span>]);\n\n<span class="hljs-regexp">//</span> <span class="hljs-keyword">false</span></code></pre>\n  <p><a name="method-implode"></a></p>\n\n          <p><a name="-code-implode-code-"></a></p>\n          <h4>\n            <a href="#-code-implode-code-">\n              <code>implode()</code>\n            </a>\n          </h4><p>The <code>implode</code> method joins the items in a collection. Its arguments depend on the type of items in the collection. If the collection contains arrays or objects, you should pass the key of the attributes you wish to join, and the &quot;glue&quot; string you wish to place between the values:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgWydhY2NvdW50X2lkJyA9PiAxLCAncHJvZHVjdCcgPT4gJ0Rlc2snXSxcbiAgICBbJ2FjY291bnRfaWQnID0+IDIsICdwcm9kdWN0JyA9PiAnQ2hhaXInXSxcbl0pO1xuXG4kY29sbGVjdGlvbi0+aW1wbG9kZSgncHJvZHVjdCcsICcsICcpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLWltcGxvZGUifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([\n    [<span class="hljs-string">\'account_id\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">\'product\'</span> =&gt; <span class="hljs-string">\'Desk\'</span>],\n    [<span class="hljs-string">\'account_id\'</span> =&gt; <span class="hljs-number">2</span>, <span class="hljs-string">\'product\'</span> =&gt; <span class="hljs-string">\'Chair\'</span>],\n]);\n\n$collection-&gt;implode(<span class="hljs-string">\'product\'</span>, <span class="hljs-string">\', \'</span>);\n\n<span class="hljs-comment">// Desk, Chair</span></code></pre>\n  <p>If the collection contains simple strings or numeric values, pass the &quot;glue&quot; as the only argument to the method:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImNvbGxlY3QoWzEsIDIsIDMsIDQsIDVdKS0+aW1wbG9kZSgnLScpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLWltcGxvZGUifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])-&gt;implode(<span class="hljs-string">\'-\'</span>);\n\n<span class="hljs-comment">// \'1-2-3-4-5\'</span></code></pre>\n  <p><a name="method-intersect"></a></p>\n\n          <p><a name="-code-intersect-code-"></a></p>\n          <h4>\n            <a href="#-code-intersect-code-">\n              <code>intersect()</code>\n            </a>\n          </h4><p>The <code>intersect</code> method removes any values from the original collection that are not present in the given <code>array</code> or collection. The resulting collection will preserve the original collection&#39;s keys:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ0Rlc2snLCAnU29mYScsICdDaGFpciddKTtcblxuJGludGVyc2VjdCA9ICRjb2xsZWN0aW9uLT5pbnRlcnNlY3QoWydEZXNrJywgJ0NoYWlyJywgJ0Jvb2tjYXNlJ10pO1xuXG4kaW50ZXJzZWN0LT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1pbnRlcnNlY3QifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = collect([<span class="hljs-string">\'Desk\'</span>, <span class="hljs-string">\'Sofa\'</span>, <span class="hljs-string">\'Chair\'</span>]);\n\n<span class="hljs-variable">$intersect</span> = <span class="hljs-variable">$collection</span>-&gt;intersect([<span class="hljs-string">\'Desk\'</span>, <span class="hljs-string">\'Chair\'</span>, <span class="hljs-string">\'Bookcase\'</span>]);\n\n<span class="hljs-variable">$intersect</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-number">0</span> =&gt; <span class="hljs-string">\'Desk\'</span>, <span class="hljs-number">2</span> =&gt; <span class="hljs-string">\'Chair\'</span>]</code></pre>\n  <p><a name="method-intersectbykeys"></a></p>\n\n          <p><a name="-code-intersectbykeys-code-"></a></p>\n          <h4>\n            <a href="#-code-intersectbykeys-code-">\n              <code>intersectByKeys()</code>\n            </a>\n          </h4><p>The <code>intersectByKeys</code> method removes any keys from the original collection that are not present in the given <code>array</code> or collection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgJ3NlcmlhbCcgPT4gJ1VYMzAxJywgJ3R5cGUnID0+ICdzY3JlZW4nLCAneWVhcicgPT4gMjAwOVxuXSk7XG5cbiRpbnRlcnNlY3QgPSAkY29sbGVjdGlvbi0+aW50ZXJzZWN0QnlLZXlzKFtcbiAgICAncmVmZXJlbmNlJyA9PiAnVVg0MDQnLCAndHlwZScgPT4gJ3RhYicsICd5ZWFyJyA9PiAyMDExXG5dKTtcblxuJGludGVyc2VjdC0+YWxsKCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtaW50ZXJzZWN0YnlrZXlzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([\n    <span class="hljs-string">\'serial\'</span> =&gt; <span class="hljs-string">\'UX301\'</span>, <span class="hljs-string">\'type\'</span> =&gt; <span class="hljs-string">\'screen\'</span>, <span class="hljs-string">\'year\'</span> =&gt; <span class="hljs-number">2009</span>\n]);\n\n$intersect = $collection-&gt;intersectByKeys([\n    <span class="hljs-string">\'reference\'</span> =&gt; <span class="hljs-string">\'UX404\'</span>, <span class="hljs-string">\'type\'</span> =&gt; <span class="hljs-string">\'tab\'</span>, <span class="hljs-string">\'year\'</span> =&gt; <span class="hljs-number">2011</span>\n]);\n\n$intersect-&gt;all();\n\n<span class="hljs-comment">// [\'type\' =&gt; \'screen\', \'year\' =&gt; 2009]</span></code></pre>\n  <p><a name="method-isempty"></a></p>\n\n          <p><a name="-code-isempty-code-"></a></p>\n          <h4>\n            <a href="#-code-isempty-code-">\n              <code>isEmpty()</code>\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImNvbGxlY3QoW10pLT5pc0VtcHR5KCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtaXNlbXB0eSJ9\')">Tinker with this code</a><p>The <code>isEmpty</code> method returns <code>true</code> if the collection is empty; otherwise, <code>false</code> is returned:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-function"><span class="hljs-title">collect</span><span class="hljs-params">([])</span>-&gt;</span>isEmpty();\n\n// <span class="hljs-literal">true</span></code></pre>\n  <p><a name="method-isnotempty"></a></p>\n\n          <p><a name="-code-isnotempty-code-"></a></p>\n          <h4>\n            <a href="#-code-isnotempty-code-">\n              <code>isNotEmpty()</code>\n            </a>\n          </h4><p>The <code>isNotEmpty</code> method returns <code>true</code> if the collection is not empty; otherwise, <code>false</code> is returned:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImNvbGxlY3QoW10pLT5pc05vdEVtcHR5KCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtaXNub3RlbXB0eSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-function"><span class="hljs-title">collect</span><span class="hljs-params">([])</span>-&gt;</span>isNotEmpty();\n\n// <span class="hljs-literal">false</span></code></pre>\n  <p><a name="method-join"></a></p>\n\n          <p><a name="-code-join-code-"></a></p>\n          <h4>\n            <a href="#-code-join-code-">\n              <code>join()</code>\n            </a>\n          </h4><p>The <code>join</code> method joins the collection&#39;s values with a string:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImNvbGxlY3QoWydhJywgJ2InLCAnYyddKS0+am9pbignLCAnLCAnLCBhbmQgJyk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtam9pbiJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">collect</span>([<span class="hljs-string">\'a\'</span>, <span class="hljs-string">\'b\'</span>, <span class="hljs-string">\'c\'</span>])-&gt;<span class="hljs-keyword">join</span>(<span class="hljs-string">\', \'</span>); <span class="hljs-comment">// \'a, b, c\'</span>\n<span class="hljs-keyword">collect</span>([<span class="hljs-string">\'a\'</span>, <span class="hljs-string">\'b\'</span>, <span class="hljs-string">\'c\'</span>])-&gt;<span class="hljs-keyword">join</span>(<span class="hljs-string">\', \'</span>, <span class="hljs-string">\', and \'</span>); <span class="hljs-comment">// \'a, b, and c\'</span>\n<span class="hljs-keyword">collect</span>([<span class="hljs-string">\'a\'</span>, <span class="hljs-string">\'b\'</span>])-&gt;<span class="hljs-keyword">join</span>(<span class="hljs-string">\', \'</span>, <span class="hljs-string">\' and \'</span>); <span class="hljs-comment">// \'a and b\'</span>\n<span class="hljs-keyword">collect</span>([<span class="hljs-string">\'a\'</span>])-&gt;<span class="hljs-keyword">join</span>(<span class="hljs-string">\', \'</span>, <span class="hljs-string">\' and \'</span>); <span class="hljs-comment">// \'a\'</span>\n<span class="hljs-keyword">collect</span>([])-&gt;<span class="hljs-keyword">join</span>(<span class="hljs-string">\', \'</span>, <span class="hljs-string">\' and \'</span>); <span class="hljs-comment">// \'\'</span></code></pre>\n  <p><a name="method-keyby"></a></p>\n\n          <p><a name="-code-keyby-code-"></a></p>\n          <h4>\n            <a href="#-code-keyby-code-">\n              <code>keyBy()</code>\n            </a>\n          </h4><p>The <code>keyBy</code> method keys the collection by the given key. If multiple items have the same key, only the last one will appear in the new collection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgWydwcm9kdWN0X2lkJyA9PiAncHJvZC0xMDAnLCAnbmFtZScgPT4gJ0Rlc2snXSxcbiAgICBbJ3Byb2R1Y3RfaWQnID0+ICdwcm9kLTIwMCcsICduYW1lJyA9PiAnQ2hhaXInXSxcbl0pO1xuXG4ka2V5ZWQgPSAkY29sbGVjdGlvbi0+a2V5QnkoJ3Byb2R1Y3RfaWQnKTtcblxuJGtleWVkLT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1rZXlieSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([\n    [<span class="hljs-symbol">\'product_id\'</span> =&gt; <span class="hljs-symbol">\'prod</span>-<span class="hljs-number">100</span><span class="hljs-string">\', \'</span>name\' =&gt; <span class="hljs-symbol">\'Desk\'</span>],\n    [<span class="hljs-symbol">\'product_id\'</span> =&gt; <span class="hljs-symbol">\'prod</span>-<span class="hljs-number">200</span><span class="hljs-string">\', \'</span>name\' =&gt; <span class="hljs-symbol">\'Chair\'</span>],\n]);\n\n$keyed = $collection-&gt;keyBy(<span class="hljs-symbol">\'product_id\'</span>);\n\n$keyed-&gt;all<span class="hljs-literal">()</span>;\n\n/*\n    [\n        <span class="hljs-symbol">\'prod</span>-<span class="hljs-number">100</span><span class="hljs-string">\' =&gt; [\'</span>product_id\' =&gt; <span class="hljs-symbol">\'prod</span>-<span class="hljs-number">100</span><span class="hljs-string">\', \'</span>name\' =&gt; <span class="hljs-symbol">\'Desk\'</span>],\n        <span class="hljs-symbol">\'prod</span>-<span class="hljs-number">200</span><span class="hljs-string">\' =&gt; [\'</span>product_id\' =&gt; <span class="hljs-symbol">\'prod</span>-<span class="hljs-number">200</span><span class="hljs-string">\', \'</span>name\' =&gt; <span class="hljs-symbol">\'Chair\'</span>],\n    ]\n*/</code></pre>\n  <p>You may also pass a callback to the method. The callback should return the value to key the collection by:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRrZXllZCA9ICRjb2xsZWN0aW9uLT5rZXlCeShmdW5jdGlvbiAoJGl0ZW0pIHtcbiAgICByZXR1cm4gc3RydG91cHBlcigkaXRlbVsncHJvZHVjdF9pZCddKTtcbn0pO1xuXG4ka2V5ZWQtPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLWtleWJ5In0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$keyed</span> = <span class="hljs-variable">$collection</span>-&gt;keyBy(<span class="hljs-keyword">function</span> (<span class="hljs-variable">$item</span>) {\n    <span class="hljs-built_in">return</span> strtoupper(<span class="hljs-variable">$item</span>[<span class="hljs-string">\'product_id\'</span>]);\n});\n\n<span class="hljs-variable">$keyed</span>-&gt;all();\n\n/*\n    [\n        <span class="hljs-string">\'PROD-100\'</span> =&gt; [<span class="hljs-string">\'product_id\'</span> =&gt; <span class="hljs-string">\'prod-100\'</span>, <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Desk\'</span>],\n        <span class="hljs-string">\'PROD-200\'</span> =&gt; [<span class="hljs-string">\'product_id\'</span> =&gt; <span class="hljs-string">\'prod-200\'</span>, <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Chair\'</span>],\n    ]\n*/</code></pre>\n  <p><a name="method-keys"></a></p>\n\n          <p><a name="-code-keys-code-"></a></p>\n          <h4>\n            <a href="#-code-keys-code-">\n              <code>keys()</code>\n            </a>\n          </h4><p>The <code>keys</code> method returns all of the collection&#39;s keys:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgJ3Byb2QtMTAwJyA9PiBbJ3Byb2R1Y3RfaWQnID0+ICdwcm9kLTEwMCcsICduYW1lJyA9PiAnRGVzayddLFxuICAgICdwcm9kLTIwMCcgPT4gWydwcm9kdWN0X2lkJyA9PiAncHJvZC0yMDAnLCAnbmFtZScgPT4gJ0NoYWlyJ10sXG5dKTtcblxuJGtleXMgPSAkY29sbGVjdGlvbi0+a2V5cygpO1xuXG4ka2V5cy0+YWxsKCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMta2V5cyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([\n    <span class="hljs-string">\'prod-100\'</span> =&gt; [<span class="hljs-string">\'product_id\'</span> =&gt; <span class="hljs-string">\'prod-100\'</span>, <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Desk\'</span>],\n    <span class="hljs-string">\'prod-200\'</span> =&gt; [<span class="hljs-string">\'product_id\'</span> =&gt; <span class="hljs-string">\'prod-200\'</span>, <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Chair\'</span>],\n]);\n\n$keys = $collection-&gt;keys();\n\n$keys-&gt;all();\n\n<span class="hljs-comment">// [\'prod-100\', \'prod-200\']</span></code></pre>\n  <p><a name="method-last"></a></p>\n\n          <p><a name="-code-last-code-"></a></p>\n          <h4>\n            <a href="#-code-last-code-">\n              <code>last()</code>\n            </a>\n          </h4><p>The <code>last</code> method returns the last element in the collection that passes a given truth test:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImNvbGxlY3QoWzEsIDIsIDMsIDRdKS0+bGFzdChmdW5jdGlvbiAoJHZhbHVlLCAka2V5KSB7XG4gICAgcmV0dXJuICR2YWx1ZSA8IDM7XG59KTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1sYXN0In0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])-&gt;last(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($value, $key)</span> </span>{\n    <span class="hljs-keyword">return</span> $value &lt; <span class="hljs-number">3</span>;\n});\n\n<span class="hljs-comment">// 2</span></code></pre>\n  <p>You may also call the <code>last</code> method with no arguments to get the last element in the collection. If the collection is empty, <code>null</code> is returned:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])-&gt;last();\n\n<span class="hljs-comment">// 4</span></code></pre>\n  <p><a name="method-macro"></a></p>\n\n          <p><a name="-code-macro-code-"></a></p>\n          <h4>\n            <a href="#-code-macro-code-">\n              <code>macro()</code>\n            </a>\n          </h4><p>The static <code>macro</code> method allows you to add methods to the <code>Collection</code> class at run time. Refer to the documentation on <a href="#extending-collections">extending collections</a> for more information.</p>\n<p><a name="method-make"></a></p>\n\n          <p><a name="-code-make-code-"></a></p>\n          <h4>\n            <a href="#-code-make-code-">\n              <code>make()</code>\n            </a>\n          </h4><p>The static <code>make</code> method creates a new collection instance. See the <a href="#creating-collections">Creating Collections</a> section.</p>\n<p><a name="method-map"></a></p>\n\n          <p><a name="-code-map-code-"></a></p>\n          <h4>\n            <a href="#-code-map-code-">\n              <code>map()</code>\n            </a>\n          </h4><p>The <code>map</code> method iterates through the collection and passes each value to the given callback. The callback is free to modify the item and return it, thus forming a new collection of modified items:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgMywgNCwgNV0pO1xuXG4kbXVsdGlwbGllZCA9ICRjb2xsZWN0aW9uLT5tYXAoZnVuY3Rpb24gKCRpdGVtLCAka2V5KSB7XG4gICAgcmV0dXJuICRpdGVtICogMjtcbn0pO1xuXG4kbXVsdGlwbGllZC0+YWxsKCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtbWFwIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);\n\n$multiplied = $collection-&gt;map(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($item, $key)</span> </span>{\n    <span class="hljs-keyword">return</span> $item * <span class="hljs-number">2</span>;\n});\n\n$multiplied-&gt;all();\n\n<span class="hljs-comment">// [2, 4, 6, 8, 10]</span></code></pre>\n  <blockquote>\n<p>{note} Like most other collection methods, <code>map</code> returns a new collection instance; it does not modify the collection it is called on. If you want to transform the original collection, use the <a href="#method-transform"><code>transform</code></a> method.</p>\n</blockquote>\n<p><a name="method-mapinto"></a></p>\n\n          <p><a name="-code-mapinto-code-"></a></p>\n          <h4>\n            <a href="#-code-mapinto-code-">\n              <code>mapInto()</code>\n            </a>\n          </h4><p>The <code>mapInto()</code> method iterates over the collection, creating a new instance of the given class by passing the value into the constructor:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImNsYXNzIEN1cnJlbmN5XG57XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGN1cnJlbmN5IGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtICBzdHJpbmcgICRjb2RlXG4gICAgICogQHJldHVybiB2b2lkXG4gICAgICovXG4gICAgZnVuY3Rpb24gX19jb25zdHJ1Y3Qoc3RyaW5nICRjb2RlKVxuICAgIHtcbiAgICAgICAgJHRoaXMtPmNvZGUgPSAkY29kZTtcbiAgICB9XG59XG5cbiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ1VTRCcsICdFVVInLCAnR0JQJ10pO1xuXG4kY3VycmVuY2llcyA9ICRjb2xsZWN0aW9uLT5tYXBJbnRvKEN1cnJlbmN5OjpjbGFzcyk7XG5cbiRjdXJyZW5jaWVzLT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1tYXBpbnRvIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Currency</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Create a new currency instance.\n     *\n     * <span class="hljs-doctag">@param</span>  string  $code\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(string $code)</span>\n    </span>{\n        <span class="hljs-keyword">$this</span>-&gt;code = $code;\n    }\n}\n\n$collection = collect([<span class="hljs-string">\'USD\'</span>, <span class="hljs-string">\'EUR\'</span>, <span class="hljs-string">\'GBP\'</span>]);\n\n$currencies = $collection-&gt;mapInto(Currency::class);\n\n$currencies-&gt;all();\n\n<span class="hljs-comment">// [Currency(\'USD\'), Currency(\'EUR\'), Currency(\'GBP\')]</span></code></pre>\n  <p><a name="method-mapspread"></a></p>\n\n          <p><a name="-code-mapspread-code-"></a></p>\n          <h4>\n            <a href="#-code-mapspread-code-">\n              <code>mapSpread()</code>\n            </a>\n          </h4><p>The <code>mapSpread</code> method iterates over the collection&#39;s items, passing each nested item value into the given callback. The callback is free to modify the item and return it, thus forming a new collection of modified items:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOV0pO1xuXG4kY2h1bmtzID0gJGNvbGxlY3Rpb24tPmNodW5rKDIpO1xuXG4kc2VxdWVuY2UgPSAkY2h1bmtzLT5tYXBTcHJlYWQoZnVuY3Rpb24gKCRldmVuLCAkb2RkKSB7XG4gICAgcmV0dXJuICRldmVuICsgJG9kZDtcbn0pO1xuXG4kc2VxdWVuY2UtPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLW1hcHNwcmVhZCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]);\n\n$chunks = $collection-&gt;chunk(<span class="hljs-number">2</span>);\n\n$sequence = $chunks-&gt;mapSpread(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($even, $odd)</span> </span>{\n    <span class="hljs-keyword">return</span> $even + $odd;\n});\n\n$sequence-&gt;all();\n\n<span class="hljs-comment">// [1, 5, 9, 13, 17]</span></code></pre>\n  <p><a name="method-maptogroups"></a></p>\n\n          <p><a name="-code-maptogroups-code-"></a></p>\n          <h4>\n            <a href="#-code-maptogroups-code-">\n              <code>mapToGroups()</code>\n            </a>\n          </h4><p>The <code>mapToGroups</code> method groups the collection&#39;s items by the given callback. The callback should return an associative array containing a single key / value pair, thus forming a new collection of grouped values:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgW1xuICAgICAgICAnbmFtZScgPT4gJ0pvaG4gRG9lJyxcbiAgICAgICAgJ2RlcGFydG1lbnQnID0+ICdTYWxlcycsXG4gICAgXSxcbiAgICBbXG4gICAgICAgICduYW1lJyA9PiAnSmFuZSBEb2UnLFxuICAgICAgICAnZGVwYXJ0bWVudCcgPT4gJ1NhbGVzJyxcbiAgICBdLFxuICAgIFtcbiAgICAgICAgJ25hbWUnID0+ICdKb2hubnkgRG9lJyxcbiAgICAgICAgJ2RlcGFydG1lbnQnID0+ICdNYXJrZXRpbmcnLFxuICAgIF1cbl0pO1xuXG4kZ3JvdXBlZCA9ICRjb2xsZWN0aW9uLT5tYXBUb0dyb3VwcyhmdW5jdGlvbiAoJGl0ZW0sICRrZXkpIHtcbiAgICByZXR1cm4gWyRpdGVtWydkZXBhcnRtZW50J10gPT4gJGl0ZW1bJ25hbWUnXV07XG59KTtcblxuJGdyb3VwZWQtPnRvQXJyYXkoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1tYXB0b2dyb3VwcyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([\n    [\n        <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'John Doe\'</span>,\n        <span class="hljs-string">\'department\'</span> =&gt; <span class="hljs-string">\'Sales\'</span>,\n    ],\n    [\n        <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Jane Doe\'</span>,\n        <span class="hljs-string">\'department\'</span> =&gt; <span class="hljs-string">\'Sales\'</span>,\n    ],\n    [\n        <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Johnny Doe\'</span>,\n        <span class="hljs-string">\'department\'</span> =&gt; <span class="hljs-string">\'Marketing\'</span>,\n    ]\n]);\n\n$grouped = $collection-&gt;mapToGroups(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($item, $key)</span> </span>{\n    <span class="hljs-keyword">return</span> [$item[<span class="hljs-string">\'department\'</span>] =&gt; $item[<span class="hljs-string">\'name\'</span>]];\n});\n\n$grouped-&gt;toArray();\n\n<span class="hljs-comment">/*\n    [\n        \'Sales\' =&gt; [\'John Doe\', \'Jane Doe\'],\n        \'Marketing\' =&gt; [\'Johnny Doe\'],\n    ]\n*/</span>\n\n$grouped-&gt;get(<span class="hljs-string">\'Sales\'</span>)-&gt;all();\n\n<span class="hljs-comment">// [\'John Doe\', \'Jane Doe\']</span></code></pre>\n  <p><a name="method-mapwithkeys"></a></p>\n\n          <p><a name="-code-mapwithkeys-code-"></a></p>\n          <h4>\n            <a href="#-code-mapwithkeys-code-">\n              <code>mapWithKeys()</code>\n            </a>\n          </h4><p>The <code>mapWithKeys</code> method iterates through the collection and passes each value to the given callback. The callback should return an associative array containing a single key / value pair:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgW1xuICAgICAgICAnbmFtZScgPT4gJ0pvaG4nLFxuICAgICAgICAnZGVwYXJ0bWVudCcgPT4gJ1NhbGVzJyxcbiAgICAgICAgJ2VtYWlsJyA9PiAnam9obkBleGFtcGxlLmNvbSdcbiAgICBdLFxuICAgIFtcbiAgICAgICAgJ25hbWUnID0+ICdKYW5lJyxcbiAgICAgICAgJ2RlcGFydG1lbnQnID0+ICdNYXJrZXRpbmcnLFxuICAgICAgICAnZW1haWwnID0+ICdqYW5lQGV4YW1wbGUuY29tJ1xuICAgIF1cbl0pO1xuXG4ka2V5ZWQgPSAkY29sbGVjdGlvbi0+bWFwV2l0aEtleXMoZnVuY3Rpb24gKCRpdGVtKSB7XG4gICAgcmV0dXJuIFskaXRlbVsnZW1haWwnXSA9PiAkaXRlbVsnbmFtZSddXTtcbn0pO1xuXG4ka2V5ZWQtPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLW1hcHdpdGhrZXlzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([\n    [\n        <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'John\'</span>,\n        <span class="hljs-string">\'department\'</span> =&gt; <span class="hljs-string">\'Sales\'</span>,\n        <span class="hljs-string">\'email\'</span> =&gt; <span class="hljs-string">\'john@example.com\'</span>\n    ],\n    [\n        <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Jane\'</span>,\n        <span class="hljs-string">\'department\'</span> =&gt; <span class="hljs-string">\'Marketing\'</span>,\n        <span class="hljs-string">\'email\'</span> =&gt; <span class="hljs-string">\'jane@example.com\'</span>\n    ]\n]);\n\n$keyed = $collection-&gt;mapWithKeys(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($item)</span> </span>{\n    <span class="hljs-keyword">return</span> [$item[<span class="hljs-string">\'email\'</span>] =&gt; $item[<span class="hljs-string">\'name\'</span>]];\n});\n\n$keyed-&gt;all();\n\n<span class="hljs-comment">/*\n    [\n        \'john<span class="hljs-doctag">@example</span>.com\' =&gt; \'John\',\n        \'jane<span class="hljs-doctag">@example</span>.com\' =&gt; \'Jane\',\n    ]\n*/</span></code></pre>\n  <p><a name="method-max"></a></p>\n\n          <p><a name="-code-max-code-"></a></p>\n          <h4>\n            <a href="#-code-max-code-">\n              <code>max()</code>\n            </a>\n          </h4><p>The <code>max</code> method returns the maximum value of a given key:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRtYXggPSBjb2xsZWN0KFtbJ2ZvbycgPT4gMTBdLCBbJ2ZvbycgPT4gMjBdXSktPm1heCgnZm9vJyk7XG5cbnZhcl9kdW1wKCRtYXgpO1xuXG5jb2xsZWN0KFsxLCAyLCAzLCA0LCA1XSktPm1heCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLW1heCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$max = collect([[<span class="hljs-string">\'foo\'</span> =&gt; <span class="hljs-number">10</span>], [<span class="hljs-string">\'foo\'</span> =&gt; <span class="hljs-number">20</span>]])-&gt;max(<span class="hljs-string">\'foo\'</span>);\n\n<span class="hljs-comment">// 20</span>\n\n$max = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])-&gt;max();\n\n<span class="hljs-comment">// 5</span></code></pre>\n  <p><a name="method-median"></a></p>\n\n          <p><a name="-code-median-code-"></a></p>\n          <h4>\n            <a href="#-code-median-code-">\n              <code>median()</code>\n            </a>\n          </h4><p>The <code>median</code> method returns the <router-link to="https://en.wikipedia.org/wiki/Median">median value</router-link> of a given key:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRtZWRpYW4gPSBjb2xsZWN0KFtbJ2ZvbycgPT4gMTBdLCBbJ2ZvbycgPT4gMTBdLCBbJ2ZvbycgPT4gMjBdLCBbJ2ZvbycgPT4gNDBdXSktPm1lZGlhbignZm9vJyk7XG5cbnZhcl9kdW1wKCRtZWRpYW4pO1xuXG5jb2xsZWN0KFsxLCAxLCAyLCA0XSktPm1lZGlhbigpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLW1lZGlhbiJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$median = collect([[<span class="hljs-string">\'foo\'</span> =&gt; <span class="hljs-number">10</span>], [<span class="hljs-string">\'foo\'</span> =&gt; <span class="hljs-number">10</span>], [<span class="hljs-string">\'foo\'</span> =&gt; <span class="hljs-number">20</span>], [<span class="hljs-string">\'foo\'</span> =&gt; <span class="hljs-number">40</span>]])-&gt;median(<span class="hljs-string">\'foo\'</span>);\n\n<span class="hljs-comment">// 15</span>\n\n$median = collect([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>])-&gt;median();\n\n<span class="hljs-comment">// 1.5</span></code></pre>\n  <p><a name="method-merge"></a></p>\n\n          <p><a name="-code-merge-code-"></a></p>\n          <h4>\n            <a href="#-code-merge-code-">\n              <code>merge()</code>\n            </a>\n          </h4><p>The <code>merge</code> method merges the given array or collection with the original collection. If a string key in the given items matches a string key in the original collection, the given items&#39;s value will overwrite the value in the original collection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ3Byb2R1Y3RfaWQnID0+IDEsICdwcmljZScgPT4gMTAwXSk7XG5cbiRtZXJnZWQgPSAkY29sbGVjdGlvbi0+bWVyZ2UoWydwcmljZScgPT4gMjAwLCAnZGlzY291bnQnID0+IGZhbHNlXSk7XG5cbiRtZXJnZWQtPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLW1lcmdlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = collect([<span class="hljs-string">\'product_id\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">100</span>]);\n\n<span class="hljs-variable">$merged</span> = <span class="hljs-variable">$collection</span>-&gt;merge([<span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">200</span>, <span class="hljs-string">\'discount\'</span> =&gt; <span class="hljs-keyword">false</span>]);\n\n<span class="hljs-variable">$merged</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'product_id\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">200</span>, <span class="hljs-string">\'discount\'</span> =&gt; <span class="hljs-keyword">false</span>]</code></pre>\n  <p>If the given items&#39;s keys are numeric, the values will be appended to the end of the collection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ0Rlc2snLCAnQ2hhaXInXSk7XG5cbiRtZXJnZWQgPSAkY29sbGVjdGlvbi0+bWVyZ2UoWydCb29rY2FzZScsICdEb29yJ10pO1xuXG4kbWVyZ2VkLT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1tZXJnZSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = collect([<span class="hljs-string">\'Desk\'</span>, <span class="hljs-string">\'Chair\'</span>]);\n\n<span class="hljs-variable">$merged</span> = <span class="hljs-variable">$collection</span>-&gt;merge([<span class="hljs-string">\'Bookcase\'</span>, <span class="hljs-string">\'Door\'</span>]);\n\n<span class="hljs-variable">$merged</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'Desk\'</span>, <span class="hljs-string">\'Chair\'</span>, <span class="hljs-string">\'Bookcase\'</span>, <span class="hljs-string">\'Door\'</span>]</code></pre>\n  <p><a name="method-mergerecursive"></a></p>\n\n          <p><a name="-code-mergerecursive-code-"></a></p>\n          <h4>\n            <a href="#-code-mergerecursive-code-">\n              <code>mergeRecursive()</code>\n            </a>\n          </h4><p>The <code>mergeRecursive</code> method merges the given array or collection recursively with the original collection. If a string key in the given items matches a string key in the original collection, then the values for these keys are merged together into an array, and this is done recursively:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ3Byb2R1Y3RfaWQnID0+IDEsICdwcmljZScgPT4gMTAwXSk7XG5cbiRtZXJnZWQgPSAkY29sbGVjdGlvbi0+bWVyZ2VSZWN1cnNpdmUoWydwcm9kdWN0X2lkJyA9PiAyLCAncHJpY2UnID0+IDIwMCwgJ2Rpc2NvdW50JyA9PiBmYWxzZV0pO1xuXG4kbWVyZ2VkLT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1tZXJnZXJlY3Vyc2l2ZSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-string">\'product_id\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">100</span>]);\n\n$merged = $collection-&gt;mergeRecursive([<span class="hljs-string">\'product_id\'</span> =&gt; <span class="hljs-number">2</span>, <span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">200</span>, <span class="hljs-string">\'discount\'</span> =&gt; <span class="hljs-keyword">false</span>]);\n\n$merged-&gt;all();\n\n<span class="hljs-comment">// [\'product_id\' =&gt; [1, 2], \'price\' =&gt; [100, 200], \'discount\' =&gt; false]</span></code></pre>\n  <p><a name="method-min"></a></p>\n\n          <p><a name="-code-min-code-"></a></p>\n          <h4>\n            <a href="#-code-min-code-">\n              <code>min()</code>\n            </a>\n          </h4><p>The <code>min</code> method returns the minimum value of a given key:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRtaW4gPSBjb2xsZWN0KFtbJ2ZvbycgPT4gMTBdLCBbJ2ZvbycgPT4gMjBdXSktPm1pbignZm9vJyk7XG5cbnZhcl9kdW1wKCRtaW4pO1xuXG5jb2xsZWN0KFsxLCAyLCAzLCA0LCA1XSktPm1pbigpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLW1pbiJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$min = collect([[<span class="hljs-string">\'foo\'</span> =&gt; <span class="hljs-number">10</span>], [<span class="hljs-string">\'foo\'</span> =&gt; <span class="hljs-number">20</span>]])-&gt;min(<span class="hljs-string">\'foo\'</span>);\n\n<span class="hljs-comment">// 10</span>\n\n$min = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])-&gt;min();\n\n<span class="hljs-comment">// 1</span></code></pre>\n  <p><a name="method-mode"></a></p>\n\n          <p><a name="-code-mode-code-"></a></p>\n          <h4>\n            <a href="#-code-mode-code-">\n              <code>mode()</code>\n            </a>\n          </h4><p>The <code>mode</code> method returns the <router-link to="https://en.wikipedia.org/wiki/Mode_(statistics)">mode value</router-link> of a given key:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRtb2RlID0gY29sbGVjdChbWydmb28nID0+IDEwXSwgWydmb28nID0+IDEwXSwgWydmb28nID0+IDIwXSwgWydmb28nID0+IDQwXV0pLT5tb2RlKCdmb28nKTtcblxudmFyX2R1bXAoJG1vZGUpO1xuXG5jb2xsZWN0KFsxLCAxLCAyLCA0XSktPm1vZGUoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1tb2RlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$mode = collect([[<span class="hljs-string">\'foo\'</span> =&gt; <span class="hljs-number">10</span>], [<span class="hljs-string">\'foo\'</span> =&gt; <span class="hljs-number">10</span>], [<span class="hljs-string">\'foo\'</span> =&gt; <span class="hljs-number">20</span>], [<span class="hljs-string">\'foo\'</span> =&gt; <span class="hljs-number">40</span>]])-&gt;mode(<span class="hljs-string">\'foo\'</span>);\n\n<span class="hljs-comment">// [10]</span>\n\n$mode = collect([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>])-&gt;mode();\n\n<span class="hljs-comment">// [1]</span></code></pre>\n  <p><a name="method-nth"></a></p>\n\n          <p><a name="-code-nth-code-"></a></p>\n          <h4>\n            <a href="#-code-nth-code-">\n              <code>nth()</code>\n            </a>\n          </h4><p>The <code>nth</code> method creates a new collection consisting of every n-th element:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ2EnLCAnYicsICdjJywgJ2QnLCAnZScsICdmJ10pO1xuXG4kY29sbGVjdGlvbi0+bnRoKDQpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLW50aCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = collect([<span class="hljs-string">\'a\'</span>, <span class="hljs-string">\'b\'</span>, <span class="hljs-string">\'c\'</span>, <span class="hljs-string">\'d\'</span>, <span class="hljs-string">\'e\'</span>, <span class="hljs-string">\'f\'</span>]);\n\n<span class="hljs-variable">$collection</span>-&gt;nth(<span class="hljs-number">4</span>);\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'a\'</span>, <span class="hljs-string">\'e\'</span>]</code></pre>\n  <p>You may optionally pass an offset as the second argument:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ2EnLCAnYicsICdjJywgJ2QnLCAnZScsICdmJ10pO1xuXG4kY29sbGVjdGlvbi0+bnRoKDQsIDEpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLW50aCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span>-&gt;nth(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>);\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'b\'</span>, <span class="hljs-string">\'f\'</span>]</code></pre>\n  <p><a name="method-only"></a></p>\n\n          <p><a name="-code-only-code-"></a></p>\n          <h4>\n            <a href="#-code-only-code-">\n              <code>only()</code>\n            </a>\n          </h4><p>The <code>only</code> method returns the items in the collection with the specified keys:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ3Byb2R1Y3RfaWQnID0+IDEsICduYW1lJyA9PiAnRGVzaycsICdwcmljZScgPT4gMTAwLCAnZGlzY291bnQnID0+IGZhbHNlXSk7XG5cbiRmaWx0ZXJlZCA9ICRjb2xsZWN0aW9uLT5vbmx5KFsncHJvZHVjdF9pZCcsICduYW1lJ10pO1xuXG4kZmlsdGVyZWQtPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLW9ubHkifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-string">\'product_id\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Desk\'</span>, <span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">100</span>, <span class="hljs-string">\'discount\'</span> =&gt; <span class="hljs-keyword">false</span>]);\n\n$filtered = $collection-&gt;only([<span class="hljs-string">\'product_id\'</span>, <span class="hljs-string">\'name\'</span>]);\n\n$filtered-&gt;all();\n\n<span class="hljs-comment">// [\'product_id\' =&gt; 1, \'name\' =&gt; \'Desk\']</span></code></pre>\n  <p>For the inverse of <code>only</code>, see the <a href="#method-except">except</a> method.</p>\n<p><a name="method-pad"></a></p>\n\n          <p><a name="-code-pad-code-"></a></p>\n          <h4>\n            <a href="#-code-pad-code-">\n              <code>pad()</code>\n            </a>\n          </h4><p>The <code>pad</code> method will fill the array with the given value until the array reaches the specified size. This method behaves like the <router-link to="https://secure.php.net/manual/en/function.array-pad.php">array_pad</router-link> PHP function.</p>\n<p>To pad to the left, you should specify a negative size. No padding will take place if the absolute value of the given size is less than or equal to the length of the array:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ0EnLCAnQicsICdDJ10pO1xuXG4kZmlsdGVyZWQgPSAkY29sbGVjdGlvbi0+cGFkKDUsIDApO1xuXG4kZmlsdGVyZWQtPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLXBhZCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = collect([<span class="hljs-string">\'A\'</span>, <span class="hljs-string">\'B\'</span>, <span class="hljs-string">\'C\'</span>]);\n\n<span class="hljs-variable">$filtered</span> = <span class="hljs-variable">$collection</span>-&gt;pad(<span class="hljs-number">5</span>, <span class="hljs-number">0</span>);\n\n<span class="hljs-variable">$filtered</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'A\'</span>, <span class="hljs-string">\'B\'</span>, <span class="hljs-string">\'C\'</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]\n\n<span class="hljs-variable">$filtered</span> = <span class="hljs-variable">$collection</span>-&gt;pad(-<span class="hljs-number">5</span>, <span class="hljs-number">0</span>);\n\n<span class="hljs-variable">$filtered</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">\'A\'</span>, <span class="hljs-string">\'B\'</span>, <span class="hljs-string">\'C\'</span>]</code></pre>\n  <p><a name="method-partition"></a></p>\n\n          <p><a name="-code-partition-code-"></a></p>\n          <h4>\n            <a href="#-code-partition-code-">\n              <code>partition()</code>\n            </a>\n          </h4><p>The <code>partition</code> method may be combined with the <code>list</code> PHP function to separate elements that pass a given truth test from those that do not:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgMywgNCwgNSwgNl0pO1xuXG5saXN0KCR1bmRlclRocmVlLCAkZXF1YWxPckFib3ZlVGhyZWUpID0gJGNvbGxlY3Rpb24tPnBhcnRpdGlvbihmdW5jdGlvbiAoJGkpIHtcbiAgICByZXR1cm4gJGkgPCAzO1xufSk7XG5cbiR1bmRlclRocmVlLT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1wYXJ0aXRpb24ifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]);\n\n<span class="hljs-keyword">list</span>($underThree, $equalOrAboveThree) = $collection-&gt;partition(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($i)</span> </span>{\n    <span class="hljs-keyword">return</span> $i &lt; <span class="hljs-number">3</span>;\n});\n\n$underThree-&gt;all();\n\n<span class="hljs-comment">// [1, 2]</span>\n\n$equalOrAboveThree-&gt;all();\n\n<span class="hljs-comment">// [3, 4, 5, 6]</span></code></pre>\n  <p><a name="method-pipe"></a></p>\n\n          <p><a name="-code-pipe-code-"></a></p>\n          <h4>\n            <a href="#-code-pipe-code-">\n              <code>pipe()</code>\n            </a>\n          </h4><p>The <code>pipe</code> method passes the collection to the given callback and returns the result:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgM10pO1xuXG4kcGlwZWQgPSAkY29sbGVjdGlvbi0+cGlwZShmdW5jdGlvbiAoJGNvbGxlY3Rpb24pIHtcbiAgICByZXR1cm4gJGNvbGxlY3Rpb24tPnN1bSgpO1xufSk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtcGlwZSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);\n\n$piped = $collection-&gt;pipe(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($collection)</span> </span>{\n    <span class="hljs-keyword">return</span> $collection-&gt;sum();\n});\n\n<span class="hljs-comment">// 6</span></code></pre>\n  <p><a name="method-pluck"></a></p>\n\n          <p><a name="-code-pluck-code-"></a></p>\n          <h4>\n            <a href="#-code-pluck-code-">\n              <code>pluck()</code>\n            </a>\n          </h4><p>The <code>pluck</code> method retrieves all of the values for a given key:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgWydwcm9kdWN0X2lkJyA9PiAncHJvZC0xMDAnLCAnbmFtZScgPT4gJ0Rlc2snXSxcbiAgICBbJ3Byb2R1Y3RfaWQnID0+ICdwcm9kLTIwMCcsICduYW1lJyA9PiAnQ2hhaXInXSxcbl0pO1xuXG4kcGx1Y2tlZCA9ICRjb2xsZWN0aW9uLT5wbHVjaygnbmFtZScpO1xuXG4kcGx1Y2tlZC0+YWxsKCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtcGx1Y2sifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([\n    [<span class="hljs-string">\'product_id\'</span> =&gt; <span class="hljs-string">\'prod-100\'</span>, <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Desk\'</span>],\n    [<span class="hljs-string">\'product_id\'</span> =&gt; <span class="hljs-string">\'prod-200\'</span>, <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Chair\'</span>],\n]);\n\n$plucked = $collection-&gt;pluck(<span class="hljs-string">\'name\'</span>);\n\n$plucked-&gt;all();\n\n<span class="hljs-comment">// [\'Desk\', \'Chair\']</span></code></pre>\n  <p>You may also specify how you wish the resulting collection to be keyed:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgWydwcm9kdWN0X2lkJyA9PiAncHJvZC0xMDAnLCAnbmFtZScgPT4gJ0Rlc2snXSxcbiAgICBbJ3Byb2R1Y3RfaWQnID0+ICdwcm9kLTIwMCcsICduYW1lJyA9PiAnQ2hhaXInXSxcbl0pO1xuXG4kcGx1Y2tlZCA9ICRjb2xsZWN0aW9uLT5wbHVjaygnbmFtZScsICdwcm9kdWN0X2lkJyk7XG5cbiRwbHVja2VkLT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1wbHVjayJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$plucked</span> = <span class="hljs-variable">$collection</span>-&gt;pluck(<span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'product_id\'</span>);\n\n<span class="hljs-variable">$plucked</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'prod-100\'</span> =&gt; <span class="hljs-string">\'Desk\'</span>, <span class="hljs-string">\'prod-200\'</span> =&gt; <span class="hljs-string">\'Chair\'</span>]</code></pre>\n  <p>If duplicate keys exist, the last matching element will be inserted into the plucked collection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgWydicmFuZCcgPT4gJ1Rlc2xhJywgICdjb2xvcicgPT4gJ3JlZCddLFxuICAgIFsnYnJhbmQnID0+ICdQYWdhbmknLCAnY29sb3InID0+ICd3aGl0ZSddLFxuICAgIFsnYnJhbmQnID0+ICdUZXNsYScsICAnY29sb3InID0+ICdibGFjayddLFxuICAgIFsnYnJhbmQnID0+ICdQYWdhbmknLCAnY29sb3InID0+ICdvcmFuZ2UnXSxcbl0pO1xuXG4kcGx1Y2tlZCA9ICRjb2xsZWN0aW9uLT5wbHVjaygnY29sb3InLCAnYnJhbmQnKTtcblxuJHBsdWNrZWQtPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLXBsdWNrIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([\n    [<span class="hljs-string">\'brand\'</span> =&gt; <span class="hljs-string">\'Tesla\'</span>,  <span class="hljs-string">\'color\'</span> =&gt; <span class="hljs-string">\'red\'</span>],\n    [<span class="hljs-string">\'brand\'</span> =&gt; <span class="hljs-string">\'Pagani\'</span>, <span class="hljs-string">\'color\'</span> =&gt; <span class="hljs-string">\'white\'</span>],\n    [<span class="hljs-string">\'brand\'</span> =&gt; <span class="hljs-string">\'Tesla\'</span>,  <span class="hljs-string">\'color\'</span> =&gt; <span class="hljs-string">\'black\'</span>],\n    [<span class="hljs-string">\'brand\'</span> =&gt; <span class="hljs-string">\'Pagani\'</span>, <span class="hljs-string">\'color\'</span> =&gt; <span class="hljs-string">\'orange\'</span>],\n]);\n\n$plucked = $collection-&gt;pluck(<span class="hljs-string">\'color\'</span>, <span class="hljs-string">\'brand\'</span>);\n\n$plucked-&gt;all();\n\n<span class="hljs-comment">// [\'Tesla\' =&gt; \'black\', \'Pagani\' =&gt; \'orange\']</span></code></pre>\n  <p><a name="method-pop"></a></p>\n\n          <p><a name="-code-pop-code-"></a></p>\n          <h4>\n            <a href="#-code-pop-code-">\n              <code>pop()</code>\n            </a>\n          </h4><p>The <code>pop</code> method removes and returns the last item from the collection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgMywgNCwgNV0pO1xuXG4kcG9wcGVkID0gJGNvbGxlY3Rpb24tPnBvcCgpO1xuXG52YXJfZHVtcCgkcG9wcGVkKTtcblxuJGNvbGxlY3Rpb24tPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLXBvcCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-meta"><span class="hljs-meta-keyword">$collection</span> = collect([1, 2, 3, 4, 5]);</span>\n\n<span class="hljs-meta"><span class="hljs-meta-keyword">$collection</span>-&gt;pop();</span>\n\n<span class="hljs-comment">// 5</span>\n\n<span class="hljs-meta"><span class="hljs-meta-keyword">$collection</span>-&gt;all();</span>\n\n<span class="hljs-comment">// [1, 2, 3, 4]</span></code></pre>\n  <p><a name="method-prepend"></a></p>\n\n          <p><a name="-code-prepend-code-"></a></p>\n          <h4>\n            <a href="#-code-prepend-code-">\n              <code>prepend()</code>\n            </a>\n          </h4><p>The <code>prepend</code> method adds an item to the beginning of the collection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgMywgNCwgNV0pO1xuXG4kY29sbGVjdGlvbi0+cHJlcGVuZCgwKTtcblxuJGNvbGxlY3Rpb24tPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLXByZXBlbmQifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);\n\n$collection-&gt;prepend(<span class="hljs-number">0</span>);\n\n$collection-&gt;all();\n\n<span class="hljs-comment">// [0, 1, 2, 3, 4, 5]</span></code></pre>\n  <p>You may also pass a second argument to set the key of the prepended item:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ29uZScgPT4gMSwgJ3R3bycgPT4gMl0pO1xuXG4kY29sbGVjdGlvbi0+cHJlcGVuZCgwLCAnemVybycpO1xuXG4kY29sbGVjdGlvbi0+YWxsKCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtcHJlcGVuZCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = collect([<span class="hljs-string">\'one\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">\'two\'</span> =&gt; <span class="hljs-number">2</span>]);\n\n<span class="hljs-variable">$collection</span>-&gt;prepend(<span class="hljs-number">0</span>, <span class="hljs-string">\'zero\'</span>);\n\n<span class="hljs-variable">$collection</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'zero\'</span> =&gt; <span class="hljs-number">0</span>, <span class="hljs-string">\'one\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">\'two\'</span> =&gt; <span class="hljs-number">2</span>]</code></pre>\n  <p><a name="method-pull"></a></p>\n\n          <p><a name="-code-pull-code-"></a></p>\n          <h4>\n            <a href="#-code-pull-code-">\n              <code>pull()</code>\n            </a>\n          </h4><p>The <code>pull</code> method removes and returns an item from the collection by its key:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ3Byb2R1Y3RfaWQnID0+ICdwcm9kLTEwMCcsICduYW1lJyA9PiAnRGVzayddKTtcblxuJGNvbGxlY3Rpb24tPnB1bGwoJ25hbWUnKTtcblxuLy8gJ0Rlc2snXG5cbiRjb2xsZWN0aW9uLT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1wdWxsIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = collect([<span class="hljs-string">\'product_id\'</span> =&gt; <span class="hljs-string">\'prod-100\'</span>, <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Desk\'</span>]);\n\n<span class="hljs-variable">$collection</span>-&gt;pull(<span class="hljs-string">\'name\'</span>);\n\n<span class="hljs-regexp">//</span> <span class="hljs-string">\'Desk\'</span>\n\n<span class="hljs-variable">$collection</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'product_id\'</span> =&gt; <span class="hljs-string">\'prod-100\'</span>]</code></pre>\n  <p><a name="method-push"></a></p>\n\n          <p><a name="-code-push-code-"></a></p>\n          <h4>\n            <a href="#-code-push-code-">\n              <code>push()</code>\n            </a>\n          </h4><p>The <code>push</code> method appends an item to the end of the collection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgMywgNF0pO1xuXG4kY29sbGVjdGlvbi0+cHVzaCg1KTtcblxuJGNvbGxlY3Rpb24tPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLXB1c2gifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-meta"><span class="hljs-meta-keyword">$collection</span> = collect([1, 2, 3, 4]);</span>\n\n<span class="hljs-meta"><span class="hljs-meta-keyword">$collection</span>-&gt;push(5);</span>\n\n<span class="hljs-meta"><span class="hljs-meta-keyword">$collection</span>-&gt;all();</span>\n\n<span class="hljs-comment">// [1, 2, 3, 4, 5]</span></code></pre>\n  <p><a name="method-put"></a></p>\n\n          <p><a name="-code-put-code-"></a></p>\n          <h4>\n            <a href="#-code-put-code-">\n              <code>put()</code>\n            </a>\n          </h4><p>The <code>put</code> method sets the given key and value in the collection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ3Byb2R1Y3RfaWQnID0+IDEsICduYW1lJyA9PiAnRGVzayddKTtcblxuJGNvbGxlY3Rpb24tPnB1dCgncHJpY2UnLCAxMDApO1xuXG4kY29sbGVjdGlvbi0+YWxsKCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtcHV0In0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = collect([<span class="hljs-string">\'product_id\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Desk\'</span>]);\n\n<span class="hljs-variable">$collection</span>-&gt;put(<span class="hljs-string">\'price\'</span>, <span class="hljs-number">100</span>);\n\n<span class="hljs-variable">$collection</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'product_id\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Desk\'</span>, <span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">100</span>]</code></pre>\n  <p><a name="method-random"></a></p>\n\n          <p><a name="-code-random-code-"></a></p>\n          <h4>\n            <a href="#-code-random-code-">\n              <code>random()</code>\n            </a>\n          </h4><p>The <code>random</code> method returns a random item from the collection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgMywgNCwgNV0pO1xuXG4kY29sbGVjdGlvbi0+cmFuZG9tKCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtcmFuZG9tIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);\n\n$collection-&gt;random();\n\n<span class="hljs-comment">// 4 - (retrieved randomly)</span></code></pre>\n  <p>You may optionally pass an integer to <code>random</code> to specify how many items you would like to randomly retrieve. A collection of items is always returned when explicitly passing the number of items you wish to receive:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$random</span> = <span class="hljs-variable">$collection</span>-&gt;random(<span class="hljs-number">3</span>);\n\n<span class="hljs-variable">$random</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>] - (retrieved randomly)</code></pre>\n  <p>If the Collection has fewer items than requested, the method will throw an <code>InvalidArgumentException</code>.</p>\n<p><a name="method-reduce"></a></p>\n\n          <p><a name="-code-reduce-code-"></a></p>\n          <h4>\n            <a href="#-code-reduce-code-">\n              <code>reduce()</code>\n            </a>\n          </h4><p>The <code>reduce</code> method reduces the collection to a single value, passing the result of each iteration into the subsequent iteration:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgM10pO1xuXG4kdG90YWwgPSAkY29sbGVjdGlvbi0+cmVkdWNlKGZ1bmN0aW9uICgkY2FycnksICRpdGVtKSB7XG4gICAgcmV0dXJuICRjYXJyeSArICRpdGVtO1xufSk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtcmVkdWNlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);\n\n$total = $collection-&gt;reduce(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($carry, $item)</span> </span>{\n    <span class="hljs-keyword">return</span> $carry + $item;\n});\n\n<span class="hljs-comment">// 6</span></code></pre>\n  <p>The value for <code>$carry</code> on the first iteration is <code>null</code>; however, you may specify its initial value by passing a second argument to <code>reduce</code>:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgM10pO1xuXG4kdG90YWwgPSAkY29sbGVjdGlvbi0+cmVkdWNlKGZ1bmN0aW9uICgkY2FycnksICRpdGVtKSB7XG4gICAgcmV0dXJuICRjYXJyeSArICRpdGVtO1xufSwgNCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtcmVkdWNlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection-&gt;reduce(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($carry, $item)</span> </span>{\n    <span class="hljs-keyword">return</span> $carry + $item;\n}, <span class="hljs-number">4</span>);\n\n<span class="hljs-comment">// 10</span></code></pre>\n  <p><a name="method-reject"></a></p>\n\n          <p><a name="-code-reject-code-"></a></p>\n          <h4>\n            <a href="#-code-reject-code-">\n              <code>reject()</code>\n            </a>\n          </h4><p>The <code>reject</code> method filters the collection using the given callback. The callback should return <code>true</code> if the item should be removed from the resulting collection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgMywgNF0pO1xuXG4kZmlsdGVyZWQgPSAkY29sbGVjdGlvbi0+cmVqZWN0KGZ1bmN0aW9uICgkdmFsdWUsICRrZXkpIHtcbiAgICByZXR1cm4gJHZhbHVlID4gMjtcbn0pO1xuXG4kZmlsdGVyZWQtPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLXJlamVjdCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]);\n\n$filtered = $collection-&gt;reject(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($value, $key)</span> </span>{\n    <span class="hljs-keyword">return</span> $value &gt; <span class="hljs-number">2</span>;\n});\n\n$filtered-&gt;all();\n\n<span class="hljs-comment">// [1, 2]</span></code></pre>\n  <p>For the inverse of the <code>reject</code> method, see the <a href="#method-filter"><code>filter</code></a> method.</p>\n<p><a name="method-replace"></a></p>\n\n          <p><a name="-code-replace-code-"></a></p>\n          <h4>\n            <a href="#-code-replace-code-">\n              <code>replace()</code>\n            </a>\n          </h4><p>The <code>replace</code> method behaves similarly to <code>merge</code>; however, in addition to overwriting matching items with string keys, the <code>replace</code> method will also overwrite items in the collection that have matching numeric keys:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ1RheWxvcicsICdBYmlnYWlsJywgJ0phbWVzJ10pO1xuXG4kcmVwbGFjZWQgPSAkY29sbGVjdGlvbi0+cmVwbGFjZShbMSA9PiAnVmljdG9yaWEnLCAzID0+ICdGaW5uJ10pO1xuXG4kcmVwbGFjZWQtPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLXJlcGxhY2UifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = collect([<span class="hljs-string">\'Taylor\'</span>, <span class="hljs-string">\'Abigail\'</span>, <span class="hljs-string">\'James\'</span>]);\n\n<span class="hljs-variable">$replaced</span> = <span class="hljs-variable">$collection</span>-&gt;replace([<span class="hljs-number">1</span> =&gt; <span class="hljs-string">\'Victoria\'</span>, <span class="hljs-number">3</span> =&gt; <span class="hljs-string">\'Finn\'</span>]);\n\n<span class="hljs-variable">$replaced</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'Taylor\'</span>, <span class="hljs-string">\'Victoria\'</span>, <span class="hljs-string">\'James\'</span>, <span class="hljs-string">\'Finn\'</span>]</code></pre>\n  <p><a name="method-replacerecursive"></a></p>\n\n          <p><a name="-code-replacerecursive-code-"></a></p>\n          <h4>\n            <a href="#-code-replacerecursive-code-">\n              <code>replaceRecursive()</code>\n            </a>\n          </h4><p>This method works like <code>replace</code>, but it will recur into arrays and apply the same replacement process to the inner values:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ1RheWxvcicsICdBYmlnYWlsJywgWydKYW1lcycsICdWaWN0b3JpYScsICdGaW5uJ11dKTtcblxuJHJlcGxhY2VkID0gJGNvbGxlY3Rpb24tPnJlcGxhY2VSZWN1cnNpdmUoWydDaGFybGllJywgMiA9PiBbMSA9PiAnS2luZyddXSk7XG5cbiRyZXBsYWNlZC0+YWxsKCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtcmVwbGFjZXJlY3Vyc2l2ZSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = collect([<span class="hljs-string">\'Taylor\'</span>, <span class="hljs-string">\'Abigail\'</span>, [<span class="hljs-string">\'James\'</span>, <span class="hljs-string">\'Victoria\'</span>, <span class="hljs-string">\'Finn\'</span>]]);\n\n<span class="hljs-variable">$replaced</span> = <span class="hljs-variable">$collection</span>-&gt;replaceRecursive([<span class="hljs-string">\'Charlie\'</span>, <span class="hljs-number">2</span> =&gt; [<span class="hljs-number">1</span> =&gt; <span class="hljs-string">\'King\'</span>]]);\n\n<span class="hljs-variable">$replaced</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'Charlie\'</span>, <span class="hljs-string">\'Abigail\'</span>, [<span class="hljs-string">\'James\'</span>, <span class="hljs-string">\'King\'</span>, <span class="hljs-string">\'Finn\'</span>]]</code></pre>\n  <p><a name="method-reverse"></a></p>\n\n          <p><a name="-code-reverse-code-"></a></p>\n          <h4>\n            <a href="#-code-reverse-code-">\n              <code>reverse()</code>\n            </a>\n          </h4><p>The <code>reverse</code> method reverses the order of the collection&#39;s items, preserving the original keys:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ2EnLCAnYicsICdjJywgJ2QnLCAnZSddKTtcblxuJHJldmVyc2VkID0gJGNvbGxlY3Rpb24tPnJldmVyc2UoKTtcblxuJHJldmVyc2VkLT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1yZXZlcnNlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = collect([<span class="hljs-string">\'a\'</span>, <span class="hljs-string">\'b\'</span>, <span class="hljs-string">\'c\'</span>, <span class="hljs-string">\'d\'</span>, <span class="hljs-string">\'e\'</span>]);\n\n<span class="hljs-variable">$reversed</span> = <span class="hljs-variable">$collection-</span><span class="hljs-built_in">&gt;reverse</span>();\n\n<span class="hljs-variable">$reversed-</span>&gt;all();\n\n/*\n    [\n        <span class="hljs-number">4</span> =&gt; <span class="hljs-string">\'e\'</span>,\n        <span class="hljs-number">3</span> =&gt; <span class="hljs-string">\'d\'</span>,\n        <span class="hljs-number">2</span> =&gt; <span class="hljs-string">\'c\'</span>,\n        <span class="hljs-number">1</span> =&gt; <span class="hljs-string">\'b\'</span>,\n        <span class="hljs-number">0</span> =&gt; <span class="hljs-string">\'a\'</span>,\n    ]\n*/</code></pre>\n  <p><a name="method-search"></a></p>\n\n          <p><a name="-code-search-code-"></a></p>\n          <h4>\n            <a href="#-code-search-code-">\n              <code>search()</code>\n            </a>\n          </h4><p>The <code>search</code> method searches the collection for the given value and returns its key if found. If the item is not found, <code>false</code> is returned.</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMiwgNCwgNiwgOF0pO1xuXG4kY29sbGVjdGlvbi0+c2VhcmNoKDQpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLXNlYXJjaCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]);\n\n$collection-&gt;search(<span class="hljs-number">4</span>);\n\n<span class="hljs-comment">// 1</span></code></pre>\n  <p>The search is done using a &quot;loose&quot; comparison, meaning a string with an integer value will be considered equal to an integer of the same value. To use &quot;strict&quot; comparison, pass <code>true</code> as the second argument to the method:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMiwgNCwgNiwgOF0pO1xuXG4kY29sbGVjdGlvbi0+c2VhcmNoKCc0JywgdHJ1ZSk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtc2VhcmNoIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span>-&gt;search(<span class="hljs-string">\'4\'</span>, <span class="hljs-keyword">true</span>);\n\n<span class="hljs-regexp">//</span> <span class="hljs-keyword">false</span></code></pre>\n  <p>Alternatively, you may pass in your own callback to search for the first item that passes your truth test:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMiwgNCwgNiwgOF0pO1xuXG4kY29sbGVjdGlvbi0+c2VhcmNoKGZ1bmN0aW9uICgkaXRlbSwgJGtleSkge1xuICAgIHJldHVybiAkaXRlbSA+IDU7XG59KTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1zZWFyY2gifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection-&gt;search(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($item, $key)</span> </span>{\n    <span class="hljs-keyword">return</span> $item &gt; <span class="hljs-number">5</span>;\n});\n\n<span class="hljs-comment">// 2</span></code></pre>\n  <p><a name="method-shift"></a></p>\n\n          <p><a name="-code-shift-code-"></a></p>\n          <h4>\n            <a href="#-code-shift-code-">\n              <code>shift()</code>\n            </a>\n          </h4><p>The <code>shift</code> method removes and returns the first item from the collection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgMywgNCwgNV0pO1xuXG4kY29sbGVjdGlvbi0+c2hpZnQoKTtcblxuJGNvbGxlY3Rpb24tPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLXNoaWZ0In0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-meta"><span class="hljs-meta-keyword">$collection</span> = collect([1, 2, 3, 4, 5]);</span>\n\n<span class="hljs-meta"><span class="hljs-meta-keyword">$collection</span>-&gt;shift();</span>\n\n<span class="hljs-comment">// 1</span>\n\n<span class="hljs-meta"><span class="hljs-meta-keyword">$collection</span>-&gt;all();</span>\n\n<span class="hljs-comment">// [2, 3, 4, 5]</span></code></pre>\n  <p><a name="method-shuffle"></a></p>\n\n          <p><a name="-code-shuffle-code-"></a></p>\n          <h4>\n            <a href="#-code-shuffle-code-">\n              <code>shuffle()</code>\n            </a>\n          </h4><p>The <code>shuffle</code> method randomly shuffles the items in the collection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgMywgNCwgNV0pO1xuXG4kc2h1ZmZsZWQgPSAkY29sbGVjdGlvbi0+c2h1ZmZsZSgpO1xuXG4kc2h1ZmZsZWQtPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLXNodWZmbGUifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);\n\n<span class="hljs-variable">$shuffled</span> = <span class="hljs-variable">$collection</span>-&gt;shuffle();\n\n<span class="hljs-variable">$shuffled</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>] - (generated randomly)</code></pre>\n  <p><a name="method-skip"></a></p>\n\n          <p><a name="-code-skip-code-"></a></p>\n          <h4>\n            <a href="#-code-skip-code-">\n              <code>skip()</code>\n            </a>\n          </h4><p>The <code>skip</code> method returns a new collection, without the first given amount of items:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTBdKTtcblxuJGNvbGxlY3Rpb24gPSAkY29sbGVjdGlvbi0+c2tpcCg0KTtcblxuJGNvbGxlY3Rpb24tPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLXNraXAifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]);\n\n$collection = $collection-&gt;skip(<span class="hljs-number">4</span>);\n\n$collection-&gt;all();\n\n<span class="hljs-comment">// [5, 6, 7, 8, 9, 10]</span></code></pre>\n  <p><a name="method-slice"></a></p>\n\n          <p><a name="-code-slice-code-"></a></p>\n          <h4>\n            <a href="#-code-slice-code-">\n              <code>slice()</code>\n            </a>\n          </h4><p>The <code>slice</code> method returns a slice of the collection starting at the given index:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTBdKTtcblxuJHNsaWNlID0gJGNvbGxlY3Rpb24tPnNsaWNlKDQpO1xuXG4kc2xpY2UtPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLXNsaWNlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]);\n\n$slice = $collection-&gt;slice(<span class="hljs-number">4</span>);\n\n$slice-&gt;all();\n\n<span class="hljs-comment">// [5, 6, 7, 8, 9, 10]</span></code></pre>\n  <p>If you would like to limit the size of the returned slice, pass the desired size as the second argument to the method:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRzbGljZSA9ICRjb2xsZWN0aW9uLT5zbGljZSg0LCAyKTtcblxuJHNsaWNlLT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1zbGljZSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$slice</span> = <span class="hljs-variable">$collection</span>-&gt;slice(<span class="hljs-number">4</span>, <span class="hljs-number">2</span>);\n\n<span class="hljs-variable">$slice</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</code></pre>\n  <p>The returned slice will preserve keys by default. If you do not wish to preserve the original keys, you can use the <a href="#method-values"><code>values</code></a> method to reindex them.</p>\n<p><a name="method-some"></a></p>\n\n          <p><a name="-code-some-code-"></a></p>\n          <h4>\n            <a href="#-code-some-code-">\n              <code>some()</code>\n            </a>\n          </h4><p>Alias for the <a href="#method-contains"><code>contains</code></a> method.</p>\n<p><a name="method-sort"></a></p>\n\n          <p><a name="-code-sort-code-"></a></p>\n          <h4>\n            <a href="#-code-sort-code-">\n              <code>sort()</code>\n            </a>\n          </h4><p>The <code>sort</code> method sorts the collection. The sorted collection keeps the original array keys, so in this example we&#39;ll use the <a href="#method-values"><code>values</code></a> method to reset the keys to consecutively numbered indexes:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbNSwgMywgMSwgMiwgNF0pO1xuXG4kc29ydGVkID0gJGNvbGxlY3Rpb24tPnNvcnQoKTtcblxuJHNvcnRlZC0+dmFsdWVzKCktPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLXNvcnQifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = collect([<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>]);\n\n<span class="hljs-variable">$sorted</span> = <span class="hljs-variable">$collection</span>-&gt;sort();\n\n<span class="hljs-variable">$sorted</span>-&gt;values()-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]</code></pre>\n  <p>If your sorting needs are more advanced, you may pass a callback to <code>sort</code> with your own algorithm. Refer to the PHP documentation on <router-link to="https://secure.php.net/manual/en/function.uasort.php#refsect1-function.uasort-parameters"><code>uasort</code></router-link>, which is what the collection&#39;s <code>sort</code> method calls under the hood.</p>\n<blockquote>\n<p>{tip} If you need to sort a collection of nested arrays or objects, see the <a href="#method-sortby"><code>sortBy</code></a> and <a href="#method-sortbydesc"><code>sortByDesc</code></a> methods.</p>\n</blockquote>\n<p><a name="method-sortby"></a></p>\n\n          <p><a name="-code-sortby-code-"></a></p>\n          <h4>\n            <a href="#-code-sortby-code-">\n              <code>sortBy()</code>\n            </a>\n          </h4><p>The <code>sortBy</code> method sorts the collection by the given key. The sorted collection keeps the original array keys, so in this example we&#39;ll use the <a href="#method-values"><code>values</code></a> method to reset the keys to consecutively numbered indexes:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgWyduYW1lJyA9PiAnRGVzaycsICdwcmljZScgPT4gMjAwXSxcbiAgICBbJ25hbWUnID0+ICdDaGFpcicsICdwcmljZScgPT4gMTAwXSxcbiAgICBbJ25hbWUnID0+ICdCb29rY2FzZScsICdwcmljZScgPT4gMTUwXSxcbl0pO1xuXG4kc29ydGVkID0gJGNvbGxlY3Rpb24tPnNvcnRCeSgncHJpY2UnKTtcblxuJHNvcnRlZC0+dmFsdWVzKCktPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLXNvcnRieSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([\n    [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Desk\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">200</span>],\n    [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Chair\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">100</span>],\n    [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Bookcase\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">150</span>],\n]);\n\n$sorted = $collection-&gt;sortBy(<span class="hljs-symbol">\'price\'</span>);\n\n$sorted-&gt;values<span class="hljs-literal">()</span>-&gt;all<span class="hljs-literal">()</span>;\n\n/*\n    [\n        [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Chair\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">100</span>],\n        [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Bookcase\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">150</span>],\n        [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Desk\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">200</span>],\n    ]\n*/</code></pre>\n  <p>You can also pass your own callback to determine how to sort the collection values:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgWyduYW1lJyA9PiAnRGVzaycsICdjb2xvcnMnID0+IFsnQmxhY2snLCAnTWFob2dhbnknXV0sXG4gICAgWyduYW1lJyA9PiAnQ2hhaXInLCAnY29sb3JzJyA9PiBbJ0JsYWNrJ11dLFxuICAgIFsnbmFtZScgPT4gJ0Jvb2tjYXNlJywgJ2NvbG9ycycgPT4gWydSZWQnLCAnQmVpZ2UnLCAnQnJvd24nXV0sXG5dKTtcblxuJHNvcnRlZCA9ICRjb2xsZWN0aW9uLT5zb3J0QnkoZnVuY3Rpb24gKCRwcm9kdWN0LCAka2V5KSB7XG4gICAgcmV0dXJuIGNvdW50KCRwcm9kdWN0Wydjb2xvcnMnXSk7XG59KTtcblxuJHNvcnRlZC0+dmFsdWVzKCktPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLXNvcnRieSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([\n    [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Desk\'</span>, <span class="hljs-symbol">\'colors\'</span> =&gt; [<span class="hljs-symbol">\'Black\'</span>, <span class="hljs-symbol">\'Mahogany\'</span>]],\n    [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Chair\'</span>, <span class="hljs-symbol">\'colors\'</span> =&gt; [<span class="hljs-symbol">\'Black\'</span>]],\n    [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Bookcase\'</span>, <span class="hljs-symbol">\'colors\'</span> =&gt; [<span class="hljs-symbol">\'Red\'</span>, <span class="hljs-symbol">\'Beige\'</span>, <span class="hljs-symbol">\'Brown\'</span>]],\n]);\n\n$sorted = $collection-&gt;sortBy(<span class="hljs-keyword">function</span> ($product, $key) {\n    return count($product[<span class="hljs-symbol">\'colors\'</span>]);\n});\n\n$sorted-&gt;values<span class="hljs-literal">()</span>-&gt;all<span class="hljs-literal">()</span>;\n\n/*\n    [\n        [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Chair\'</span>, <span class="hljs-symbol">\'colors\'</span> =&gt; [<span class="hljs-symbol">\'Black\'</span>]],\n        [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Desk\'</span>, <span class="hljs-symbol">\'colors\'</span> =&gt; [<span class="hljs-symbol">\'Black\'</span>, <span class="hljs-symbol">\'Mahogany\'</span>]],\n        [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Bookcase\'</span>, <span class="hljs-symbol">\'colors\'</span> =&gt; [<span class="hljs-symbol">\'Red\'</span>, <span class="hljs-symbol">\'Beige\'</span>, <span class="hljs-symbol">\'Brown\'</span>]],\n    ]\n*/</code></pre>\n  <p><a name="method-sortbydesc"></a></p>\n\n          <p><a name="-code-sortbydesc-code-"></a></p>\n          <h4>\n            <a href="#-code-sortbydesc-code-">\n              <code>sortByDesc()</code>\n            </a>\n          </h4><p>This method has the same signature as the <a href="#method-sortby"><code>sortBy</code></a> method, but will sort the collection in the opposite order.</p>\n<p><a name="method-sortkeys"></a></p>\n\n          <p><a name="-code-sortkeys-code-"></a></p>\n          <h4>\n            <a href="#-code-sortkeys-code-">\n              <code>sortKeys()</code>\n            </a>\n          </h4><p>The <code>sortKeys</code> method sorts the collection by the keys of the underlying associative array:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgJ2lkJyA9PiAyMjM0NSxcbiAgICAnZmlyc3QnID0+ICdKb2huJyxcbiAgICAnbGFzdCcgPT4gJ0RvZScsXG5dKTtcblxuJHNvcnRlZCA9ICRjb2xsZWN0aW9uLT5zb3J0S2V5cygpO1xuXG4kc29ydGVkLT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1zb3J0a2V5cyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([\n    <span class="hljs-symbol">\'id\'</span> =&gt; <span class="hljs-number">22345</span>,\n    <span class="hljs-symbol">\'first\'</span> =&gt; <span class="hljs-symbol">\'John\'</span>,\n    <span class="hljs-symbol">\'last\'</span> =&gt; <span class="hljs-symbol">\'Doe\'</span>,\n]);\n\n$sorted = $collection-&gt;sortKeys<span class="hljs-literal">()</span>;\n\n$sorted-&gt;all<span class="hljs-literal">()</span>;\n\n/*\n    [\n        <span class="hljs-symbol">\'first\'</span> =&gt; <span class="hljs-symbol">\'John\'</span>,\n        <span class="hljs-symbol">\'id\'</span> =&gt; <span class="hljs-number">22345</span>,\n        <span class="hljs-symbol">\'last\'</span> =&gt; <span class="hljs-symbol">\'Doe\'</span>,\n    ]\n*/</code></pre>\n  <p><a name="method-sortkeysdesc"></a></p>\n\n          <p><a name="-code-sortkeysdesc-code-"></a></p>\n          <h4>\n            <a href="#-code-sortkeysdesc-code-">\n              <code>sortKeysDesc()</code>\n            </a>\n          </h4><p>This method has the same signature as the <a href="#method-sortkeys"><code>sortKeys</code></a> method, but will sort the collection in the opposite order.</p>\n<p><a name="method-splice"></a></p>\n\n          <p><a name="-code-splice-code-"></a></p>\n          <h4>\n            <a href="#-code-splice-code-">\n              <code>splice()</code>\n            </a>\n          </h4><p>The <code>splice</code> method removes and returns a slice of items starting at the specified index:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgMywgNCwgNV0pO1xuXG4kY2h1bmsgPSAkY29sbGVjdGlvbi0+c3BsaWNlKDIpO1xuXG52YXJfZHVtcCgkY2h1bmstPmFsbCgpKTtcblxuJGNvbGxlY3Rpb24tPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLXNwbGljZSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);\n\n<span class="hljs-variable">$chunk</span> = <span class="hljs-variable">$collection</span>-&gt;splice(<span class="hljs-number">2</span>);\n\n<span class="hljs-variable">$chunk</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]\n\n<span class="hljs-variable">$collection</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]</code></pre>\n  <p>You may pass a second argument to limit the size of the resulting chunk:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgMywgNCwgNV0pO1xuXG4kY2h1bmsgPSAkY29sbGVjdGlvbi0+c3BsaWNlKDIsIDEpO1xuXG52YXJfZHVtcCgkY2h1bmstPmFsbCgpKTtcblxuJGNvbGxlY3Rpb24tPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLXNwbGljZSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);\n\n<span class="hljs-variable">$chunk</span> = <span class="hljs-variable">$collection</span>-&gt;splice(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>);\n\n<span class="hljs-variable">$chunk</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-number">3</span>]\n\n<span class="hljs-variable">$collection</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]</code></pre>\n  <p>In addition, you can pass a third argument containing the new items to replace the items removed from the collection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgMywgNCwgNV0pO1xuXG4kY2h1bmsgPSAkY29sbGVjdGlvbi0+c3BsaWNlKDIsIDEsIFsxMCwgMTFdKTtcblxudmFyX2R1bXAoJGNodW5rLT5hbGwoKSk7XG5cbiRjb2xsZWN0aW9uLT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy1zcGxpY2UifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);\n\n$chunk = $collection-&gt;splice(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>]);\n\n$chunk-&gt;all();\n\n<span class="hljs-comment">// [3]</span>\n\n$collection-&gt;all();\n\n<span class="hljs-comment">// [1, 2, 10, 11, 4, 5]</span></code></pre>\n  <p><a name="method-split"></a></p>\n\n          <p><a name="-code-split-code-"></a></p>\n          <h4>\n            <a href="#-code-split-code-">\n              <code>split()</code>\n            </a>\n          </h4><p>The <code>split</code> method breaks a collection into the given number of groups:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgMywgNCwgNV0pO1xuXG4kZ3JvdXBzID0gJGNvbGxlY3Rpb24tPnNwbGl0KDMpO1xuXG4kZ3JvdXBzLT50b0FycmF5KCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtc3BsaXQifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);\n\n$groups = $collection-&gt;split(<span class="hljs-number">3</span>);\n\n$groups-&gt;toArray();\n\n<span class="hljs-comment">// [[1, 2], [3, 4], [5]]</span></code></pre>\n  <p><a name="method-sum"></a></p>\n\n          <p><a name="-code-sum-code-"></a></p>\n          <h4>\n            <a href="#-code-sum-code-">\n              <code>sum()</code>\n            </a>\n          </h4><p>The <code>sum</code> method returns the sum of all items in the collection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImNvbGxlY3QoWzEsIDIsIDMsIDQsIDVdKS0+c3VtKCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtc3VtIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])-&gt;sum();\n\n<span class="hljs-comment">// 15</span></code></pre>\n  <p>If the collection contains nested arrays or objects, you should pass a key to use for determining which values to sum:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgWyduYW1lJyA9PiAnSmF2YVNjcmlwdDogVGhlIEdvb2QgUGFydHMnLCAncGFnZXMnID0+IDE3Nl0sXG4gICAgWyduYW1lJyA9PiAnSmF2YVNjcmlwdDogVGhlIERlZmluaXRpdmUgR3VpZGUnLCAncGFnZXMnID0+IDEwOTZdLFxuXSk7XG5cbiRjb2xsZWN0aW9uLT5zdW0oJ3BhZ2VzJyk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtc3VtIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([\n    [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'JavaScript: The Good Parts\'</span>, <span class="hljs-string">\'pages\'</span> =&gt; <span class="hljs-number">176</span>],\n    [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'JavaScript: The Definitive Guide\'</span>, <span class="hljs-string">\'pages\'</span> =&gt; <span class="hljs-number">1096</span>],\n]);\n\n$collection-&gt;sum(<span class="hljs-string">\'pages\'</span>);\n\n<span class="hljs-comment">// 1272</span></code></pre>\n  <p>In addition, you may pass your own callback to determine which values of the collection to sum:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgWyduYW1lJyA9PiAnQ2hhaXInLCAnY29sb3JzJyA9PiBbJ0JsYWNrJ11dLFxuICAgIFsnbmFtZScgPT4gJ0Rlc2snLCAnY29sb3JzJyA9PiBbJ0JsYWNrJywgJ01haG9nYW55J11dLFxuICAgIFsnbmFtZScgPT4gJ0Jvb2tjYXNlJywgJ2NvbG9ycycgPT4gWydSZWQnLCAnQmVpZ2UnLCAnQnJvd24nXV0sXG5dKTtcblxuJGNvbGxlY3Rpb24tPnN1bShmdW5jdGlvbiAoJHByb2R1Y3QpIHtcbiAgICByZXR1cm4gY291bnQoJHByb2R1Y3RbJ2NvbG9ycyddKTtcbn0pO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLXN1bSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([\n    [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Chair\'</span>, <span class="hljs-string">\'colors\'</span> =&gt; [<span class="hljs-string">\'Black\'</span>]],\n    [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Desk\'</span>, <span class="hljs-string">\'colors\'</span> =&gt; [<span class="hljs-string">\'Black\'</span>, <span class="hljs-string">\'Mahogany\'</span>]],\n    [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Bookcase\'</span>, <span class="hljs-string">\'colors\'</span> =&gt; [<span class="hljs-string">\'Red\'</span>, <span class="hljs-string">\'Beige\'</span>, <span class="hljs-string">\'Brown\'</span>]],\n]);\n\n$collection-&gt;sum(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($product)</span> </span>{\n    <span class="hljs-keyword">return</span> count($product[<span class="hljs-string">\'colors\'</span>]);\n});\n\n<span class="hljs-comment">// 6</span></code></pre>\n  <p><a name="method-take"></a></p>\n\n          <p><a name="-code-take-code-"></a></p>\n          <h4>\n            <a href="#-code-take-code-">\n              <code>take()</code>\n            </a>\n          </h4><p>The <code>take</code> method returns a new collection with the specified number of items:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMCwgMSwgMiwgMywgNCwgNV0pO1xuXG4kY2h1bmsgPSAkY29sbGVjdGlvbi0+dGFrZSgzKTtcblxuJGNodW5rLT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy10YWtlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);\n\n$chunk = $collection-&gt;take(<span class="hljs-number">3</span>);\n\n$chunk-&gt;all();\n\n<span class="hljs-comment">// [0, 1, 2]</span></code></pre>\n  <p>You may also pass a negative integer to take the specified amount of items from the end of the collection:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMCwgMSwgMiwgMywgNCwgNV0pO1xuXG4kY2h1bmsgPSAkY29sbGVjdGlvbi0+dGFrZSgtMik7XG5cbiRjaHVuay0+YWxsKCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtdGFrZSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);\n\n$chunk = $collection-&gt;take(<span class="hljs-number">-2</span>);\n\n$chunk-&gt;all();\n\n<span class="hljs-comment">// [4, 5]</span></code></pre>\n  <p><a name="method-tap"></a></p>\n\n          <p><a name="-code-tap-code-"></a></p>\n          <h4>\n            <a href="#-code-tap-code-">\n              <code>tap()</code>\n            </a>\n          </h4><p>The <code>tap</code> method passes the collection to the given callback, allowing you to &quot;tap&quot; into the collection at a specific point and do something with the items while not affecting the collection itself:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6ImNvbGxlY3QoWzIsIDQsIDMsIDEsIDVdKVxuICAgIC0+c29ydCgpXG4gICAgLT50YXAoZnVuY3Rpb24gKCRjb2xsZWN0aW9uKSB7XG4gICAgICAgIGVjaG8oJ1ZhbHVlcyBhZnRlciBzb3J0aW5nOiAnLiBwcmludF9yKCRjb2xsZWN0aW9uLT52YWx1ZXMoKS0+dG9BcnJheSgpLCB0cnVlKSk7XG4gICAgfSlcbiAgICAtPnNoaWZ0KCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtdGFwIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">collect<span class="hljs-function"><span class="hljs-params">([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>])</span>\n    -&gt;</span>sort<span class="hljs-function"><span class="hljs-params">()</span>\n    -&gt;</span>tap(<span class="hljs-keyword">function</span> ($collection) {\n        Log::debug<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'Values after sorting\'</span>, $collection-&gt;values()-&gt;toArray())</span>;\n    })\n    -&gt;</span>shift();\n\n<span class="hljs-regexp">// 1</span></code></pre>\n  <p><a name="method-times"></a></p>\n\n          <p><a name="-code-times-code-"></a></p>\n          <h4>\n            <a href="#-code-times-code-">\n              <code>times()</code>\n            </a>\n          </h4><p>The static <code>times</code> method creates a new collection by invoking the callback a given amount of times:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6InVzZSBJbGx1bWluYXRlXFxTdXBwb3J0XFxDb2xsZWN0aW9uO1xuXG4kY29sbGVjdGlvbiA9IENvbGxlY3Rpb246OnRpbWVzKDEwLCBmdW5jdGlvbiAoJG51bWJlcikge1xuICAgIHJldHVybiAkbnVtYmVyICogOTtcbn0pO1xuXG4kY29sbGVjdGlvbi0+YWxsKCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtdGltZXMifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = Collection::times(<span class="hljs-number">10</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($number)</span> </span>{\n    <span class="hljs-keyword">return</span> $number * <span class="hljs-number">9</span>;\n});\n\n$collection-&gt;all();\n\n<span class="hljs-comment">// [9, 18, 27, 36, 45, 54, 63, 72, 81, 90]</span></code></pre>\n  <p>This method can be useful when combined with factories to create <router-link to="/docs/eloquent">Eloquent</router-link> models:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$categories</span> = Collection::<span class="hljs-built_in">times</span>(3, <span class="hljs-keyword">function</span> (<span class="hljs-variable">$number</span>) {\n    <span class="hljs-built_in">return</span> factory(Category::class)-&gt;create([<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">"Category No. <span class="hljs-variable">$number</span>"</span>]);\n});\n\n<span class="hljs-variable">$categories</span>-&gt;all();\n\n/*\n    [\n        [<span class="hljs-string">\'id\'</span> =&gt; 1, <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Category #1\'</span>],\n        [<span class="hljs-string">\'id\'</span> =&gt; 2, <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Category #2\'</span>],\n        [<span class="hljs-string">\'id\'</span> =&gt; 3, <span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Category #3\'</span>],\n    ]\n*/</code></pre>\n  <p><a name="method-toarray"></a></p>\n\n          <p><a name="-code-toarray-code-"></a></p>\n          <h4>\n            <a href="#-code-toarray-code-">\n              <code>toArray()</code>\n            </a>\n          </h4><p>The <code>toArray</code> method converts the collection into a plain PHP <code>array</code>. If the collection&#39;s values are <router-link to="/docs/eloquent">Eloquent</router-link> models, the models will also be converted to arrays:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ25hbWUnID0+ICdEZXNrJywgJ3ByaWNlJyA9PiAyMDBdKTtcblxuJGNvbGxlY3Rpb24tPnRvQXJyYXkoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy10b2FycmF5In0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Desk\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">200</span>]);\n\n$collection-&gt;toArray<span class="hljs-literal">()</span>;\n\n/*\n    [\n        [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Desk\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">200</span>],\n    ]\n*/</code></pre>\n  <blockquote>\n<p>{note} <code>toArray</code> also converts all of the collection&#39;s nested objects that are an instance of <code>Arrayable</code> to an array. If you want to get the raw underlying array, use the <a href="#method-all"><code>all</code></a> method instead.</p>\n</blockquote>\n<p><a name="method-tojson"></a></p>\n\n          <p><a name="-code-tojson-code-"></a></p>\n          <h4>\n            <a href="#-code-tojson-code-">\n              <code>toJson()</code>\n            </a>\n          </h4><p>The <code>toJson</code> method converts the collection into a JSON serialized string:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ25hbWUnID0+ICdEZXNrJywgJ3ByaWNlJyA9PiAyMDBdKTtcblxuJGNvbGxlY3Rpb24tPnRvSnNvbigpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLXRvanNvbiJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'Desk\'</span>, <span class="hljs-string">\'price\'</span> =&gt; <span class="hljs-number">200</span>]);\n\n$collection-&gt;toJson();\n\n<span class="hljs-comment">// \'{"name":"Desk", "price":200}\'</span></code></pre>\n  <p><a name="method-transform"></a></p>\n\n          <p><a name="-code-transform-code-"></a></p>\n          <h4>\n            <a href="#-code-transform-code-">\n              <code>transform()</code>\n            </a>\n          </h4><p>The <code>transform</code> method iterates over the collection and calls the given callback with each item in the collection. The items in the collection will be replaced by the values returned by the callback:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgMywgNCwgNV0pO1xuXG4kY29sbGVjdGlvbi0+dHJhbnNmb3JtKGZ1bmN0aW9uICgkaXRlbSwgJGtleSkge1xuICAgIHJldHVybiAkaXRlbSAqIDI7XG59KTtcblxuJGNvbGxlY3Rpb24tPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLXRyYW5zZm9ybSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);\n\n$collection-&gt;transform(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($item, $key)</span> </span>{\n    <span class="hljs-keyword">return</span> $item * <span class="hljs-number">2</span>;\n});\n\n$collection-&gt;all();\n\n<span class="hljs-comment">// [2, 4, 6, 8, 10]</span></code></pre>\n  <blockquote>\n<p>{note} Unlike most other collection methods, <code>transform</code> modifies the collection itself. If you wish to create a new collection instead, use the <a href="#method-map"><code>map</code></a> method.</p>\n</blockquote>\n<p><a name="method-union"></a></p>\n\n          <p><a name="-code-union-code-"></a></p>\n          <h4>\n            <a href="#-code-union-code-">\n              <code>union()</code>\n            </a>\n          </h4><p>The <code>union</code> method adds the given array to the collection. If the given array contains keys that are already in the original collection, the original collection&#39;s values will be preferred:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSA9PiBbJ2EnXSwgMiA9PiBbJ2InXV0pO1xuXG4kdW5pb24gPSAkY29sbGVjdGlvbi0+dW5pb24oWzMgPT4gWydjJ10sIDEgPT4gWydiJ11dKTtcblxuJHVuaW9uLT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy11bmlvbiJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-number">1</span> =&gt; [<span class="hljs-string">\'a\'</span>], <span class="hljs-number">2</span> =&gt; [<span class="hljs-string">\'b\'</span>]]);\n\n$union = $collection-&gt;union([<span class="hljs-number">3</span> =&gt; [<span class="hljs-string">\'c\'</span>], <span class="hljs-number">1</span> =&gt; [<span class="hljs-string">\'b\'</span>]]);\n\n$union-&gt;all();\n\n// [<span class="hljs-number">1</span> =&gt; [<span class="hljs-string">\'a\'</span>], <span class="hljs-number">2</span> =&gt; [<span class="hljs-string">\'b\'</span>], <span class="hljs-number">3</span> =&gt; [<span class="hljs-string">\'c\'</span>]]</code></pre>\n  <p><a name="method-unique"></a></p>\n\n          <p><a name="-code-unique-code-"></a></p>\n          <h4>\n            <a href="#-code-unique-code-">\n              <code>unique()</code>\n            </a>\n          </h4><p>The <code>unique</code> method returns all of the unique items in the collection. The returned collection keeps the original array keys, so in this example we&#39;ll use the <a href="#method-values"><code>values</code></a> method to reset the keys to consecutively numbered indexes:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMSwgMiwgMiwgMywgNCwgMl0pO1xuXG4kdW5pcXVlID0gJGNvbGxlY3Rpb24tPnVuaXF1ZSgpO1xuXG4kdW5pcXVlLT52YWx1ZXMoKS0+YWxsKCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtdW5pcXVlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>]);\n\n$unique = $collection-&gt;unique();\n\n$unique-&gt;values()-&gt;all();\n\n<span class="hljs-comment">// [1, 2, 3, 4]</span></code></pre>\n  <p>When dealing with nested arrays or objects, you may specify the key used to determine uniqueness:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgWyduYW1lJyA9PiAnaVBob25lIDYnLCAnYnJhbmQnID0+ICdBcHBsZScsICd0eXBlJyA9PiAncGhvbmUnXSxcbiAgICBbJ25hbWUnID0+ICdpUGhvbmUgNScsICdicmFuZCcgPT4gJ0FwcGxlJywgJ3R5cGUnID0+ICdwaG9uZSddLFxuICAgIFsnbmFtZScgPT4gJ0FwcGxlIFdhdGNoJywgJ2JyYW5kJyA9PiAnQXBwbGUnLCAndHlwZScgPT4gJ3dhdGNoJ10sXG4gICAgWyduYW1lJyA9PiAnR2FsYXh5IFM2JywgJ2JyYW5kJyA9PiAnU2Ftc3VuZycsICd0eXBlJyA9PiAncGhvbmUnXSxcbiAgICBbJ25hbWUnID0+ICdHYWxheHkgR2VhcicsICdicmFuZCcgPT4gJ1NhbXN1bmcnLCAndHlwZScgPT4gJ3dhdGNoJ10sXG5dKTtcblxuJHVuaXF1ZSA9ICRjb2xsZWN0aW9uLT51bmlxdWUoJ2JyYW5kJyk7XG5cbiR1bmlxdWUtPnZhbHVlcygpLT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy11bmlxdWUifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([\n    [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'iPhone</span> <span class="hljs-number">6</span><span class="hljs-string">\', \'</span>brand\' =&gt; <span class="hljs-symbol">\'Apple\'</span>, <span class="hljs-symbol">\'type\'</span> =&gt; <span class="hljs-symbol">\'phone\'</span>],\n    [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'iPhone</span> <span class="hljs-number">5</span><span class="hljs-string">\', \'</span>brand\' =&gt; <span class="hljs-symbol">\'Apple\'</span>, <span class="hljs-symbol">\'type\'</span> =&gt; <span class="hljs-symbol">\'phone\'</span>],\n    [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Apple</span> <span class="hljs-type">Watch\'</span>, <span class="hljs-symbol">\'brand\'</span> =&gt; <span class="hljs-symbol">\'Apple\'</span>, <span class="hljs-symbol">\'type\'</span> =&gt; <span class="hljs-symbol">\'watch\'</span>],\n    [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Galaxy</span> <span class="hljs-type">S6\'</span>, <span class="hljs-symbol">\'brand\'</span> =&gt; <span class="hljs-symbol">\'Samsung\'</span>, <span class="hljs-symbol">\'type\'</span> =&gt; <span class="hljs-symbol">\'phone\'</span>],\n    [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Galaxy</span> <span class="hljs-type">Gear\'</span>, <span class="hljs-symbol">\'brand\'</span> =&gt; <span class="hljs-symbol">\'Samsung\'</span>, <span class="hljs-symbol">\'type\'</span> =&gt; <span class="hljs-symbol">\'watch\'</span>],\n]);\n\n$unique = $collection-&gt;unique(<span class="hljs-symbol">\'brand\'</span>);\n\n$unique-&gt;values<span class="hljs-literal">()</span>-&gt;all<span class="hljs-literal">()</span>;\n\n/*\n    [\n        [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'iPhone</span> <span class="hljs-number">6</span><span class="hljs-string">\', \'</span>brand\' =&gt; <span class="hljs-symbol">\'Apple\'</span>, <span class="hljs-symbol">\'type\'</span> =&gt; <span class="hljs-symbol">\'phone\'</span>],\n        [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Galaxy</span> <span class="hljs-type">S6\'</span>, <span class="hljs-symbol">\'brand\'</span> =&gt; <span class="hljs-symbol">\'Samsung\'</span>, <span class="hljs-symbol">\'type\'</span> =&gt; <span class="hljs-symbol">\'phone\'</span>],\n    ]\n*/</code></pre>\n  <p>You may also pass your own callback to determine item uniqueness:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgWyduYW1lJyA9PiAnaVBob25lIDYnLCAnYnJhbmQnID0+ICdBcHBsZScsICd0eXBlJyA9PiAncGhvbmUnXSxcbiAgICBbJ25hbWUnID0+ICdpUGhvbmUgNScsICdicmFuZCcgPT4gJ0FwcGxlJywgJ3R5cGUnID0+ICdwaG9uZSddLFxuICAgIFsnbmFtZScgPT4gJ0FwcGxlIFdhdGNoJywgJ2JyYW5kJyA9PiAnQXBwbGUnLCAndHlwZScgPT4gJ3dhdGNoJ10sXG4gICAgWyduYW1lJyA9PiAnR2FsYXh5IFM2JywgJ2JyYW5kJyA9PiAnU2Ftc3VuZycsICd0eXBlJyA9PiAncGhvbmUnXSxcbiAgICBbJ25hbWUnID0+ICdHYWxheHkgR2VhcicsICdicmFuZCcgPT4gJ1NhbXN1bmcnLCAndHlwZScgPT4gJ3dhdGNoJ10sXG5dKTtcblxuJHVuaXF1ZSA9ICRjb2xsZWN0aW9uLT51bmlxdWUoZnVuY3Rpb24gKCRpdGVtKSB7XG4gICAgcmV0dXJuICRpdGVtWydicmFuZCddLiRpdGVtWyd0eXBlJ107XG59KTtcblxuJHVuaXF1ZS0+dmFsdWVzKCktPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLXVuaXF1ZSJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$unique = $collection-&gt;unique(<span class="hljs-keyword">function</span> ($item) {\n    return $item[<span class="hljs-symbol">\'brand\'</span>].$item[<span class="hljs-symbol">\'type\'</span>];\n});\n\n$unique-&gt;values<span class="hljs-literal">()</span>-&gt;all<span class="hljs-literal">()</span>;\n\n/*\n    [\n        [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'iPhone</span> <span class="hljs-number">6</span><span class="hljs-string">\', \'</span>brand\' =&gt; <span class="hljs-symbol">\'Apple\'</span>, <span class="hljs-symbol">\'type\'</span> =&gt; <span class="hljs-symbol">\'phone\'</span>],\n        [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Apple</span> <span class="hljs-type">Watch\'</span>, <span class="hljs-symbol">\'brand\'</span> =&gt; <span class="hljs-symbol">\'Apple\'</span>, <span class="hljs-symbol">\'type\'</span> =&gt; <span class="hljs-symbol">\'watch\'</span>],\n        [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Galaxy</span> <span class="hljs-type">S6\'</span>, <span class="hljs-symbol">\'brand\'</span> =&gt; <span class="hljs-symbol">\'Samsung\'</span>, <span class="hljs-symbol">\'type\'</span> =&gt; <span class="hljs-symbol">\'phone\'</span>],\n        [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Galaxy</span> <span class="hljs-type">Gear\'</span>, <span class="hljs-symbol">\'brand\'</span> =&gt; <span class="hljs-symbol">\'Samsung\'</span>, <span class="hljs-symbol">\'type\'</span> =&gt; <span class="hljs-symbol">\'watch\'</span>],\n    ]\n*/</code></pre>\n  <p>The <code>unique</code> method uses &quot;loose&quot; comparisons when checking item values, meaning a string with an integer value will be considered equal to an integer of the same value. Use the <a href="#method-uniquestrict"><code>uniqueStrict</code></a> method to filter using &quot;strict&quot; comparisons.</p>\n<p><a name="method-uniquestrict"></a></p>\n\n          <p><a name="-code-uniquestrict-code-"></a></p>\n          <h4>\n            <a href="#-code-uniquestrict-code-">\n              <code>uniqueStrict()</code>\n            </a>\n          </h4><p>This method has the same signature as the <a href="#method-unique"><code>unique</code></a> method; however, all values are compared using &quot;strict&quot; comparisons.</p>\n<p><a name="method-unless"></a></p>\n\n          <p><a name="-code-unless-code-"></a></p>\n          <h4>\n            <a href="#-code-unless-code-">\n              <code>unless()</code>\n            </a>\n          </h4><p>The <code>unless</code> method will execute the given callback unless the first argument given to the method evaluates to <code>true</code>:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgM10pO1xuXG4kY29sbGVjdGlvbi0+dW5sZXNzKHRydWUsIGZ1bmN0aW9uICgkY29sbGVjdGlvbikge1xuICAgIHJldHVybiAkY29sbGVjdGlvbi0+cHVzaCg0KTtcbn0pO1xuXG4kY29sbGVjdGlvbi0+dW5sZXNzKGZhbHNlLCBmdW5jdGlvbiAoJGNvbGxlY3Rpb24pIHtcbiAgICByZXR1cm4gJGNvbGxlY3Rpb24tPnB1c2goNSk7XG59KTtcblxuJGNvbGxlY3Rpb24tPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLXVubGVzcyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);\n\n$collection-&gt;unless(<span class="hljs-keyword">true</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($collection)</span> </span>{\n    <span class="hljs-keyword">return</span> $collection-&gt;push(<span class="hljs-number">4</span>);\n});\n\n$collection-&gt;unless(<span class="hljs-keyword">false</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($collection)</span> </span>{\n    <span class="hljs-keyword">return</span> $collection-&gt;push(<span class="hljs-number">5</span>);\n});\n\n$collection-&gt;all();\n\n<span class="hljs-comment">// [1, 2, 3, 5]</span></code></pre>\n  <p>For the inverse of <code>unless</code>, see the <a href="#method-when"><code>when</code></a> method.</p>\n<p><a name="method-unlessempty"></a></p>\n\n          <p><a name="-code-unlessempty-code-"></a></p>\n          <h4>\n            <a href="#-code-unlessempty-code-">\n              <code>unlessEmpty()</code>\n            </a>\n          </h4><p>Alias for the <a href="#method-whennotempty"><code>whenNotEmpty</code></a> method.</p>\n<p><a name="method-unlessnotempty"></a></p>\n\n          <p><a name="-code-unlessnotempty-code-"></a></p>\n          <h4>\n            <a href="#-code-unlessnotempty-code-">\n              <code>unlessNotEmpty()</code>\n            </a>\n          </h4><p>Alias for the <a href="#method-whenempty"><code>whenEmpty</code></a> method.</p>\n<p><a name="method-unwrap"></a></p>\n\n          <p><a name="-code-unwrap-code-"></a></p>\n          <h4>\n            <a href="#-code-unwrap-code-">\n              <code>unwrap()</code>\n            </a>\n          </h4><p>The static <code>unwrap</code> method returns the collection&#39;s underlying items from the given value when applicable:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IkNvbGxlY3Rpb246OnVud3JhcChjb2xsZWN0KCdKb2huIERvZScpKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy11bndyYXAifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">Collection::unwrap(collect(<span class="hljs-string">\'John Doe\'</span>));\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'John Doe\'</span>]\n\nCollection::unwrap([<span class="hljs-string">\'John Doe\'</span>]);\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'John Doe\'</span>]\n\nCollection::unwrap(<span class="hljs-string">\'John Doe\'</span>);\n\n<span class="hljs-regexp">//</span> <span class="hljs-string">\'John Doe\'</span></code></pre>\n  <p><a name="method-values"></a></p>\n\n          <p><a name="-code-values-code-"></a></p>\n          <h4>\n            <a href="#-code-values-code-">\n              <code>values()</code>\n            </a>\n          </h4><p>The <code>values</code> method returns a new collection with the keys reset to consecutive integers:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgMTAgPT4gWydwcm9kdWN0JyA9PiAnRGVzaycsICdwcmljZScgPT4gMjAwXSxcbiAgICAxMSA9PiBbJ3Byb2R1Y3QnID0+ICdEZXNrJywgJ3ByaWNlJyA9PiAyMDBdXG5dKTtcblxuJHZhbHVlcyA9ICRjb2xsZWN0aW9uLT52YWx1ZXMoKTtcblxuJHZhbHVlcy0+YWxsKCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtdmFsdWVzIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([\n    <span class="hljs-number">10</span> =&gt; [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Desk\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">200</span>],\n    <span class="hljs-number">11</span> =&gt; [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Desk\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">200</span>]\n]);\n\n$values = $collection-&gt;values<span class="hljs-literal">()</span>;\n\n$values-&gt;all<span class="hljs-literal">()</span>;\n\n/*\n    [\n        <span class="hljs-number">0</span> =&gt; [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Desk\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">200</span>],\n        <span class="hljs-number">1</span> =&gt; [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Desk\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">200</span>],\n    ]\n*/</code></pre>\n  <p><a name="method-when"></a></p>\n\n          <p><a name="-code-when-code-"></a></p>\n          <h4>\n            <a href="#-code-when-code-">\n              <code>when()</code>\n            </a>\n          </h4><p>The <code>when</code> method will execute the given callback when the first argument given to the method evaluates to <code>true</code>:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbMSwgMiwgM10pO1xuXG4kY29sbGVjdGlvbi0+d2hlbih0cnVlLCBmdW5jdGlvbiAoJGNvbGxlY3Rpb24pIHtcbiAgICByZXR1cm4gJGNvbGxlY3Rpb24tPnB1c2goNCk7XG59KTtcblxuJGNvbGxlY3Rpb24tPndoZW4oZmFsc2UsIGZ1bmN0aW9uICgkY29sbGVjdGlvbikge1xuICAgIHJldHVybiAkY29sbGVjdGlvbi0+cHVzaCg1KTtcbn0pO1xuXG4kY29sbGVjdGlvbi0+YWxsKCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtd2hlbiJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);\n\n$collection-&gt;when(<span class="hljs-keyword">true</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($collection)</span> </span>{\n    <span class="hljs-keyword">return</span> $collection-&gt;push(<span class="hljs-number">4</span>);\n});\n\n$collection-&gt;when(<span class="hljs-keyword">false</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($collection)</span> </span>{\n    <span class="hljs-keyword">return</span> $collection-&gt;push(<span class="hljs-number">5</span>);\n});\n\n$collection-&gt;all();\n\n<span class="hljs-comment">// [1, 2, 3, 4]</span></code></pre>\n  <p>For the inverse of <code>when</code>, see the <a href="#method-unless"><code>unless</code></a> method.</p>\n<p><a name="method-whenempty"></a></p>\n\n          <p><a name="-code-whenempty-code-"></a></p>\n          <h4>\n            <a href="#-code-whenempty-code-">\n              <code>whenEmpty()</code>\n            </a>\n          </h4><p>The <code>whenEmpty</code> method will execute the given callback when the collection is empty:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ21pY2hhZWwnLCAndG9tJ10pO1xuXG4kY29sbGVjdGlvbi0+d2hlbkVtcHR5KGZ1bmN0aW9uICgkY29sbGVjdGlvbikge1xuICAgIHJldHVybiAkY29sbGVjdGlvbi0+cHVzaCgnYWRhbScpO1xufSk7XG5cbiRjb2xsZWN0aW9uLT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy13aGVuZW1wdHkifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-string">\'michael\'</span>, <span class="hljs-string">\'tom\'</span>]);\n\n$collection-&gt;whenEmpty(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($collection)</span> </span>{\n    <span class="hljs-keyword">return</span> $collection-&gt;push(<span class="hljs-string">\'adam\'</span>);\n});\n\n$collection-&gt;all();\n\n<span class="hljs-comment">// [\'michael\', \'tom\']</span>\n\n\n$collection = collect();\n\n$collection-&gt;whenEmpty(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($collection)</span> </span>{\n    <span class="hljs-keyword">return</span> $collection-&gt;push(<span class="hljs-string">\'adam\'</span>);\n});\n\n$collection-&gt;all();\n\n<span class="hljs-comment">// [\'adam\']</span></code></pre>\n  <a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ21pY2hhZWwnLCAndG9tJ10pO1xuXG4kY29sbGVjdGlvbi0+d2hlbkVtcHR5KGZ1bmN0aW9uICgkY29sbGVjdGlvbikge1xuICAgIHJldHVybiAkY29sbGVjdGlvbi0+cHVzaCgnYWRhbScpO1xufSwgZnVuY3Rpb24gKCRjb2xsZWN0aW9uKSB7XG4gICAgcmV0dXJuICRjb2xsZWN0aW9uLT5wdXNoKCd0YXlsb3InKTtcbn0pO1xuXG4kY29sbGVjdGlvbi0+YWxsKCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtd2hlbmVtcHR5In0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([<span class="hljs-string">\'michael\'</span>, <span class="hljs-string">\'tom\'</span>]);\n\n$collection-&gt;whenEmpty(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($collection)</span> </span>{\n    <span class="hljs-keyword">return</span> $collection-&gt;push(<span class="hljs-string">\'adam\'</span>);\n}, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($collection)</span> </span>{\n    <span class="hljs-keyword">return</span> $collection-&gt;push(<span class="hljs-string">\'taylor\'</span>);\n});\n\n$collection-&gt;all();\n\n<span class="hljs-comment">// [\'michael\', \'tom\', \'taylor\']</span></code></pre>\n  <p>For the inverse of <code>whenEmpty</code>, see the <a href="#method-whennotempty"><code>whenNotEmpty</code></a> method.</p>\n<p><a name="method-whennotempty"></a></p>\n\n          <p><a name="-code-whennotempty-code-"></a></p>\n          <h4>\n            <a href="#-code-whennotempty-code-">\n              <code>whenNotEmpty()</code>\n            </a>\n          </h4><p>The <code>whenNotEmpty</code> method will execute the given callback when the collection is not empty:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ21pY2hhZWwnLCAndG9tJ10pO1xuXG4kY29sbGVjdGlvbi0+d2hlbk5vdEVtcHR5KGZ1bmN0aW9uICgkY29sbGVjdGlvbikge1xuICAgIHJldHVybiAkY29sbGVjdGlvbi0+cHVzaCgnYWRhbScpO1xufSk7XG5cbiRjb2xsZWN0aW9uLT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy13aGVubm90ZW1wdHkifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = collect([<span class="hljs-string">\'michael\'</span>, <span class="hljs-string">\'tom\'</span>]);\n\n<span class="hljs-variable">$collection</span>-&gt;whenNotEmpty(function (<span class="hljs-variable">$collection</span>) {\n    <span class="hljs-keyword">return</span> <span class="hljs-variable">$collection</span>-&gt;push(<span class="hljs-string">\'adam\'</span>);\n});\n\n<span class="hljs-variable">$collection</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'michael\'</span>, <span class="hljs-string">\'tom\'</span>, <span class="hljs-string">\'adam\'</span>]</code></pre>\n  <a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdCgpO1xuXG4kY29sbGVjdGlvbi0+d2hlbk5vdEVtcHR5KGZ1bmN0aW9uICgkY29sbGVjdGlvbikge1xuICAgIHJldHVybiAkY29sbGVjdGlvbi0+cHVzaCgnYWRhbScpO1xufSk7XG5cbiRjb2xsZWN0aW9uLT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy13aGVubm90ZW1wdHkifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect();\n\n$collection-&gt;whenNotEmpty(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($collection)</span> </span>{\n    <span class="hljs-keyword">return</span> $collection-&gt;push(<span class="hljs-string">\'adam\'</span>);\n});\n\n$collection-&gt;all();\n\n<span class="hljs-comment">// []</span></code></pre>\n  <a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdCgpO1xuXG4kY29sbGVjdGlvbi0+d2hlbk5vdEVtcHR5KGZ1bmN0aW9uICgkY29sbGVjdGlvbikge1xuICAgIHJldHVybiAkY29sbGVjdGlvbi0+cHVzaCgnYWRhbScpO1xufSwgZnVuY3Rpb24gKCRjb2xsZWN0aW9uKSB7XG4gICAgcmV0dXJuICRjb2xsZWN0aW9uLT5wdXNoKCd0YXlsb3InKTtcbn0pO1xuXG4kY29sbGVjdGlvbi0+YWxsKCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtd2hlbm5vdGVtcHR5In0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect();\n\n$collection-&gt;whenNotEmpty(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($collection)</span> </span>{\n    <span class="hljs-keyword">return</span> $collection-&gt;push(<span class="hljs-string">\'adam\'</span>);\n}, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($collection)</span> </span>{\n    <span class="hljs-keyword">return</span> $collection-&gt;push(<span class="hljs-string">\'taylor\'</span>);\n});\n\n$collection-&gt;all();\n\n<span class="hljs-comment">// [\'taylor\']</span></code></pre>\n  <p>For the inverse of <code>whenNotEmpty</code>, see the <a href="#method-whenempty"><code>whenEmpty</code></a> method.</p>\n<p><a name="method-where"></a></p>\n\n          <p><a name="-code-where-code-"></a></p>\n          <h4>\n            <a href="#-code-where-code-">\n              <code>where()</code>\n            </a>\n          </h4><p>The <code>where</code> method filters the collection by a given key / value pair:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgWydwcm9kdWN0JyA9PiAnRGVzaycsICdwcmljZScgPT4gMjAwXSxcbiAgICBbJ3Byb2R1Y3QnID0+ICdDaGFpcicsICdwcmljZScgPT4gMTAwXSxcbiAgICBbJ3Byb2R1Y3QnID0+ICdCb29rY2FzZScsICdwcmljZScgPT4gMTUwXSxcbiAgICBbJ3Byb2R1Y3QnID0+ICdEb29yJywgJ3ByaWNlJyA9PiAxMDBdLFxuXSk7XG5cbiRmaWx0ZXJlZCA9ICRjb2xsZWN0aW9uLT53aGVyZSgncHJpY2UnLCAxMDApO1xuXG4kZmlsdGVyZWQtPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLXdoZXJlIn0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([\n    [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Desk\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">200</span>],\n    [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Chair\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">100</span>],\n    [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Bookcase\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">150</span>],\n    [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Door\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">100</span>],\n]);\n\n$filtered = $collection-&gt;<span class="hljs-keyword">where</span>(<span class="hljs-symbol">\'price\'</span>, <span class="hljs-number">100</span>);\n\n$filtered-&gt;all<span class="hljs-literal">()</span>;\n\n/*\n    [\n        [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Chair\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">100</span>],\n        [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Door\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">100</span>],\n    ]\n*/</code></pre>\n  <p>The <code>where</code> method uses &quot;loose&quot; comparisons when checking item values, meaning a string with an integer value will be considered equal to an integer of the same value. Use the <a href="#method-wherestrict"><code>whereStrict</code></a> method to filter using &quot;strict&quot; comparisons.</p>\n<p>Optionally, you may pass a comparison operator as the second parameter.</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgWyduYW1lJyA9PiAnSmltJywgJ2RlbGV0ZWRfYXQnID0+ICcyMDE5LTAxLTAxIDAwOjAwOjAwJ10sXG4gICAgWyduYW1lJyA9PiAnU2FsbHknLCAnZGVsZXRlZF9hdCcgPT4gJzIwMTktMDEtMDIgMDA6MDA6MDAnXSxcbiAgICBbJ25hbWUnID0+ICdTdWUnLCAnZGVsZXRlZF9hdCcgPT4gbnVsbF0sXG5dKTtcblxuJGZpbHRlcmVkID0gJGNvbGxlY3Rpb24tPndoZXJlKCdkZWxldGVkX2F0JywgJyE9JywgbnVsbCk7XG5cbiRmaWx0ZXJlZC0+YWxsKCk7XG4iLCJoYXNoIjoiY29sbGVjdGlvbnMtd2hlcmUifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([\n    [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Jim\'</span>, <span class="hljs-symbol">\'deleted_at\'</span> =&gt; <span class="hljs-string">\'2019-01-01 00:00:00\'</span>],\n    [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Sally\'</span>, <span class="hljs-symbol">\'deleted_at\'</span> =&gt; <span class="hljs-string">\'2019-01-02 00:00:00\'</span>],\n    [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Sue\'</span>, <span class="hljs-symbol">\'deleted_at\'</span> =&gt; null],\n]);\n\n$filtered = $collection-&gt;<span class="hljs-keyword">where</span>(<span class="hljs-symbol">\'deleted_at\'</span>, <span class="hljs-string">\'!=\'</span>, null);\n\n$filtered-&gt;all<span class="hljs-literal">()</span>;\n\n/*\n    [\n        [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Jim\'</span>, <span class="hljs-symbol">\'deleted_at\'</span> =&gt; <span class="hljs-string">\'2019-01-01 00:00:00\'</span>],\n        [<span class="hljs-symbol">\'name\'</span> =&gt; <span class="hljs-symbol">\'Sally\'</span>, <span class="hljs-symbol">\'deleted_at\'</span> =&gt; <span class="hljs-string">\'2019-01-02 00:00:00\'</span>],\n    ]\n*/</code></pre>\n  <p><a name="method-wherestrict"></a></p>\n\n          <p><a name="-code-wherestrict-code-"></a></p>\n          <h4>\n            <a href="#-code-wherestrict-code-">\n              <code>whereStrict()</code>\n            </a>\n          </h4><p>This method has the same signature as the <a href="#method-where"><code>where</code></a> method; however, all values are compared using &quot;strict&quot; comparisons.</p>\n<p><a name="method-wherebetween"></a></p>\n\n          <p><a name="-code-wherebetween-code-"></a></p>\n          <h4>\n            <a href="#-code-wherebetween-code-">\n              <code>whereBetween()</code>\n            </a>\n          </h4><p>The <code>whereBetween</code> method filters the collection within a given range:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgWydwcm9kdWN0JyA9PiAnRGVzaycsICdwcmljZScgPT4gMjAwXSxcbiAgICBbJ3Byb2R1Y3QnID0+ICdDaGFpcicsICdwcmljZScgPT4gODBdLFxuICAgIFsncHJvZHVjdCcgPT4gJ0Jvb2tjYXNlJywgJ3ByaWNlJyA9PiAxNTBdLFxuICAgIFsncHJvZHVjdCcgPT4gJ1BlbmNpbCcsICdwcmljZScgPT4gMzBdLFxuICAgIFsncHJvZHVjdCcgPT4gJ0Rvb3InLCAncHJpY2UnID0+IDEwMF0sXG5dKTtcblxuJGZpbHRlcmVkID0gJGNvbGxlY3Rpb24tPndoZXJlQmV0d2VlbigncHJpY2UnLCBbMTAwLCAyMDBdKTtcblxuJGZpbHRlcmVkLT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy13aGVyZWJldHdlZW4ifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([\n    [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Desk\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">200</span>],\n    [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Chair\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">80</span>],\n    [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Bookcase\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">150</span>],\n    [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Pencil\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">30</span>],\n    [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Door\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">100</span>],\n]);\n\n$filtered = $collection-&gt;whereBetween(<span class="hljs-symbol">\'price\'</span>, [<span class="hljs-number">100</span>, <span class="hljs-number">200</span>]);\n\n$filtered-&gt;all<span class="hljs-literal">()</span>;\n\n/*\n    [\n        [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Desk\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">200</span>],\n        [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Bookcase\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">150</span>],\n        [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Door\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">100</span>],\n    ]\n*/</code></pre>\n  <p><a name="method-wherein"></a></p>\n\n          <p><a name="-code-wherein-code-"></a></p>\n          <h4>\n            <a href="#-code-wherein-code-">\n              <code>whereIn()</code>\n            </a>\n          </h4><p>The <code>whereIn</code> method filters the collection by a given key / value contained within the given array:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgWydwcm9kdWN0JyA9PiAnRGVzaycsICdwcmljZScgPT4gMjAwXSxcbiAgICBbJ3Byb2R1Y3QnID0+ICdDaGFpcicsICdwcmljZScgPT4gMTAwXSxcbiAgICBbJ3Byb2R1Y3QnID0+ICdCb29rY2FzZScsICdwcmljZScgPT4gMTUwXSxcbiAgICBbJ3Byb2R1Y3QnID0+ICdEb29yJywgJ3ByaWNlJyA9PiAxMDBdLFxuXSk7XG5cbiRmaWx0ZXJlZCA9ICRjb2xsZWN0aW9uLT53aGVyZUluKCdwcmljZScsIFsxNTAsIDIwMF0pO1xuXG4kZmlsdGVyZWQtPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLXdoZXJlaW4ifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([\n    [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Desk\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">200</span>],\n    [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Chair\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">100</span>],\n    [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Bookcase\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">150</span>],\n    [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Door\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">100</span>],\n]);\n\n$filtered = $collection-&gt;whereIn(<span class="hljs-symbol">\'price\'</span>, [<span class="hljs-number">150</span>, <span class="hljs-number">200</span>]);\n\n$filtered-&gt;all<span class="hljs-literal">()</span>;\n\n/*\n    [\n        [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Bookcase\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">150</span>],\n        [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Desk\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">200</span>],\n    ]\n*/</code></pre>\n  <p>The <code>whereIn</code> method uses &quot;loose&quot; comparisons when checking item values, meaning a string with an integer value will be considered equal to an integer of the same value. Use the <a href="#method-whereinstrict"><code>whereInStrict</code></a> method to filter using &quot;strict&quot; comparisons.</p>\n<p><a name="method-whereinstrict"></a></p>\n\n          <p><a name="-code-whereinstrict-code-"></a></p>\n          <h4>\n            <a href="#-code-whereinstrict-code-">\n              <code>whereInStrict()</code>\n            </a>\n          </h4><p>This method has the same signature as the <a href="#method-wherein"><code>whereIn</code></a> method; however, all values are compared using &quot;strict&quot; comparisons.</p>\n<p><a name="method-whereinstanceof"></a></p>\n\n          <p><a name="-code-whereinstanceof-code-"></a></p>\n          <h4>\n            <a href="#-code-whereinstanceof-code-">\n              <code>whereInstanceOf()</code>\n            </a>\n          </h4><p>The <code>whereInstanceOf</code> method filters the collection by a given class type:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Post</span>;\n\n$collection = collect([\n    <span class="hljs-keyword">new</span> User,\n    <span class="hljs-keyword">new</span> User,\n    <span class="hljs-keyword">new</span> Post,\n]);\n\n$filtered = $collection-&gt;whereInstanceOf(User::class);\n\n$filtered-&gt;all();\n\n<span class="hljs-comment">// [App\\User, App\\User]</span></code></pre>\n  <p><a name="method-wherenotbetween"></a></p>\n\n          <p><a name="-code-wherenotbetween-code-"></a></p>\n          <h4>\n            <a href="#-code-wherenotbetween-code-">\n              <code>whereNotBetween()</code>\n            </a>\n          </h4><p>The <code>whereNotBetween</code> method filters the collection within a given range:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgWydwcm9kdWN0JyA9PiAnRGVzaycsICdwcmljZScgPT4gMjAwXSxcbiAgICBbJ3Byb2R1Y3QnID0+ICdDaGFpcicsICdwcmljZScgPT4gODBdLFxuICAgIFsncHJvZHVjdCcgPT4gJ0Jvb2tjYXNlJywgJ3ByaWNlJyA9PiAxNTBdLFxuICAgIFsncHJvZHVjdCcgPT4gJ1BlbmNpbCcsICdwcmljZScgPT4gMzBdLFxuICAgIFsncHJvZHVjdCcgPT4gJ0Rvb3InLCAncHJpY2UnID0+IDEwMF0sXG5dKTtcblxuJGZpbHRlcmVkID0gJGNvbGxlY3Rpb24tPndoZXJlTm90QmV0d2VlbigncHJpY2UnLCBbMTAwLCAyMDBdKTtcblxuJGZpbHRlcmVkLT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy13aGVyZW5vdGJldHdlZW4ifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([\n    [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Desk\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">200</span>],\n    [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Chair\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">80</span>],\n    [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Bookcase\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">150</span>],\n    [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Pencil\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">30</span>],\n    [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Door\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">100</span>],\n]);\n\n$filtered = $collection-&gt;whereNotBetween(<span class="hljs-symbol">\'price\'</span>, [<span class="hljs-number">100</span>, <span class="hljs-number">200</span>]);\n\n$filtered-&gt;all<span class="hljs-literal">()</span>;\n\n/*\n    [\n        [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Chair\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">80</span>],\n        [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Pencil\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">30</span>],\n    ]\n*/</code></pre>\n  <p><a name="method-wherenotin"></a></p>\n\n          <p><a name="-code-wherenotin-code-"></a></p>\n          <h4>\n            <a href="#-code-wherenotin-code-">\n              <code>whereNotIn()</code>\n            </a>\n          </h4><p>The <code>whereNotIn</code> method filters the collection by a given key / value not contained within the given array:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbXG4gICAgWydwcm9kdWN0JyA9PiAnRGVzaycsICdwcmljZScgPT4gMjAwXSxcbiAgICBbJ3Byb2R1Y3QnID0+ICdDaGFpcicsICdwcmljZScgPT4gMTAwXSxcbiAgICBbJ3Byb2R1Y3QnID0+ICdCb29rY2FzZScsICdwcmljZScgPT4gMTUwXSxcbiAgICBbJ3Byb2R1Y3QnID0+ICdEb29yJywgJ3ByaWNlJyA9PiAxMDBdLFxuXSk7XG5cbiRmaWx0ZXJlZCA9ICRjb2xsZWN0aW9uLT53aGVyZU5vdEluKCdwcmljZScsIFsxNTAsIDIwMF0pO1xuXG4kZmlsdGVyZWQtPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLXdoZXJlbm90aW4ifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php">$collection = collect([\n    [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Desk\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">200</span>],\n    [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Chair\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">100</span>],\n    [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Bookcase\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">150</span>],\n    [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Door\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">100</span>],\n]);\n\n$filtered = $collection-&gt;whereNotIn(<span class="hljs-symbol">\'price\'</span>, [<span class="hljs-number">150</span>, <span class="hljs-number">200</span>]);\n\n$filtered-&gt;all<span class="hljs-literal">()</span>;\n\n/*\n    [\n        [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Chair\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">100</span>],\n        [<span class="hljs-symbol">\'product\'</span> =&gt; <span class="hljs-symbol">\'Door\'</span>, <span class="hljs-symbol">\'price\'</span> =&gt; <span class="hljs-number">100</span>],\n    ]\n*/</code></pre>\n  <p>The <code>whereNotIn</code> method uses &quot;loose&quot; comparisons when checking item values, meaning a string with an integer value will be considered equal to an integer of the same value. Use the <a href="#method-wherenotinstrict"><code>whereNotInStrict</code></a> method to filter using &quot;strict&quot; comparisons.</p>\n<p><a name="method-wherenotinstrict"></a></p>\n\n          <p><a name="-code-wherenotinstrict-code-"></a></p>\n          <h4>\n            <a href="#-code-wherenotinstrict-code-">\n              <code>whereNotInStrict()</code>\n            </a>\n          </h4><p>This method has the same signature as the <a href="#method-wherenotin"><code>whereNotIn</code></a> method; however, all values are compared using &quot;strict&quot; comparisons.</p>\n<p><a name="method-wrap"></a></p>\n\n          <p><a name="-code-wrap-code-"></a></p>\n          <h4>\n            <a href="#-code-wrap-code-">\n              <code>wrap()</code>\n            </a>\n          </h4><p>The static <code>wrap</code> method wraps the given value in a collection when applicable:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gQ29sbGVjdGlvbjo6d3JhcCgnSm9obiBEb2UnKTtcblxuJGNvbGxlY3Rpb24tPmFsbCgpO1xuIiwiaGFzaCI6ImNvbGxlY3Rpb25zLXdyYXAifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = Collection::wrap(<span class="hljs-string">\'John Doe\'</span>);\n\n<span class="hljs-variable">$collection</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'John Doe\'</span>]\n\n<span class="hljs-variable">$collection</span> = Collection::wrap([<span class="hljs-string">\'John Doe\'</span>]);\n\n<span class="hljs-variable">$collection</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'John Doe\'</span>]\n\n<span class="hljs-variable">$collection</span> = Collection::wrap(collect(<span class="hljs-string">\'John Doe\'</span>));\n\n<span class="hljs-variable">$collection</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [<span class="hljs-string">\'John Doe\'</span>]</code></pre>\n  <p><a name="method-zip"></a></p>\n\n          <p><a name="-code-zip-code-"></a></p>\n          <h4>\n            <a href="#-code-zip-code-">\n              <code>zip()</code>\n            </a>\n          </h4><p>The <code>zip</code> method merges together the values of the given array with the values of the original collection at the corresponding index:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRjb2xsZWN0aW9uID0gY29sbGVjdChbJ0NoYWlyJywgJ0Rlc2snXSk7XG5cbiR6aXBwZWQgPSAkY29sbGVjdGlvbi0+emlwKFsxMDAsIDIwMF0pO1xuXG4kemlwcGVkLT5hbGwoKTtcbiIsImhhc2giOiJjb2xsZWN0aW9ucy16aXAifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$collection</span> = collect([<span class="hljs-string">\'Chair\'</span>, <span class="hljs-string">\'Desk\'</span>]);\n\n<span class="hljs-variable">$zipped</span> = <span class="hljs-variable">$collection</span>-&gt;zip([<span class="hljs-number">100</span>, <span class="hljs-number">200</span>]);\n\n<span class="hljs-variable">$zipped</span>-&gt;all();\n\n<span class="hljs-regexp">//</span> [[<span class="hljs-string">\'Chair\'</span>, <span class="hljs-number">100</span>], [<span class="hljs-string">\'Desk\'</span>, <span class="hljs-number">200</span>]]</code></pre>\n  <p><a name="higher-order-messages"></a></p>\n\n          <p><a name="higher-order-messages"></a></p>\n          <h2>\n            <a href="#higher-order-messages">\n              Higher Order Messages\n            </a>\n          </h2><p>Collections also provide support for &quot;higher order messages&quot;, which are short-cuts for performing common actions on collections. The collection methods that provide higher order messages are: <a href="#method-average"><code>average</code></a>, <a href="#method-avg"><code>avg</code></a>, <a href="#method-contains"><code>contains</code></a>, <a href="#method-each"><code>each</code></a>, <a href="#method-every"><code>every</code></a>, <a href="#method-filter"><code>filter</code></a>, <a href="#method-first"><code>first</code></a>, <a href="#method-flatmap"><code>flatMap</code></a>, <a href="#method-groupby"><code>groupBy</code></a>, <a href="#method-keyby"><code>keyBy</code></a>, <a href="#method-map"><code>map</code></a>, <a href="#method-max"><code>max</code></a>, <a href="#method-min"><code>min</code></a>, <a href="#method-partition"><code>partition</code></a>, <a href="#method-reject"><code>reject</code></a>, <a href="#method-some"><code>some</code></a>, <a href="#method-sortby"><code>sortBy</code></a>, <a href="#method-sortbydesc"><code>sortByDesc</code></a>, <a href="#method-sum"><code>sum</code></a>, and <a href="#method-unique"><code>unique</code></a>.</p>\n<p>Each higher order message can be accessed as a dynamic property on a collection instance. For instance, let&#39;s use the <code>each</code> higher order message to call a method on each object within a collection:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$users</span> = User::where(<span class="hljs-string">\'votes\'</span>, <span class="hljs-string">\'&gt;\'</span>, <span class="hljs-number">500</span>)-&gt;get();\n\n<span class="hljs-variable">$users</span>-&gt;each-&gt;markAsVip();</code></pre>\n  <p>Likewise, we can use the <code>sum</code> higher order message to gather the total number of &quot;votes&quot; for a collection of users:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$users</span> = User::where(<span class="hljs-string">\'group\'</span>, <span class="hljs-string">\'Development\'</span>)-&gt;get();\n\n<span class="hljs-keyword">return</span> <span class="hljs-variable">$users</span>-&gt;sum-&gt;votes;</code></pre>\n  <p><a name="lazy-collections"></a></p>\n\n          <p><a name="lazy-collections"></a></p>\n          <h2>\n            <a href="#lazy-collections">\n              Lazy Collections\n            </a>\n          </h2><p><a name="lazy-collection-introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h3>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h3><blockquote>\n<p>{note} Before learning more about Laravel&#39;s lazy collections, take some time to familiarize yourself with <router-link to="https://www.php.net/manual/en/language.generators.overview.php">PHP generators</router-link>.</p>\n</blockquote>\n<p>To supplement the already powerful <code>Collection</code> class, the <code>LazyCollection</code> class leverages PHP&#39;s <router-link to="https://www.php.net/manual/en/language.generators.overview.php">generators</router-link> to allow you to work with very large datasets while keeping memory usage low.</p>\n<p>For example, imagine your application needs to process a multi-gigabyte log file while taking advantage of Laravel&#39;s collection methods to parse the logs. Instead of reading the entire file into memory at once, lazy collections may be used to keep only a small part of the file in memory at a given time:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">LogEntry</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">LazyCollection</span>;\n\nLazyCollection::make(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    $handle = fopen(<span class="hljs-string">\'log.txt\'</span>, <span class="hljs-string">\'r\'</span>);\n\n    <span class="hljs-keyword">while</span> (($line = fgets($handle)) !== <span class="hljs-keyword">false</span>) {\n        <span class="hljs-keyword">yield</span> $line;\n    }\n})-&gt;chunk(<span class="hljs-number">4</span>)-&gt;map(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($lines)</span> </span>{\n    <span class="hljs-keyword">return</span> LogEntry::fromLines($lines);\n})-&gt;each(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(LogEntry $logEntry)</span> </span>{\n    <span class="hljs-comment">// Process the log entry...</span>\n});</code></pre>\n  <p>Or, imagine you need to iterate through 10,000 Eloquent models. When using traditional Laravel collections, all 10,000 Eloquent models must be loaded into memory at the same time:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = App\\User::all()-&gt;filter(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($user)</span> </span>{\n    <span class="hljs-keyword">return</span> $user-&gt;id &gt; <span class="hljs-number">500</span>;\n});</code></pre>\n  <p>However, the query builder&#39;s <code>cursor</code> method returns a <code>LazyCollection</code> instance. This allows you to still only run a single query against the database but also only keep one Eloquent model loaded in memory at a time. In this example, the <code>filter</code> callback is not executed until we actually iterate over each user individually, allowing for a drastic reduction in memory usage:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = App\\User::cursor()-&gt;filter(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($user)</span> </span>{\n    <span class="hljs-keyword">return</span> $user-&gt;id &gt; <span class="hljs-number">500</span>;\n});\n\n<span class="hljs-keyword">foreach</span> ($users <span class="hljs-keyword">as</span> $user) {\n    <span class="hljs-keyword">echo</span> $user-&gt;id;\n}</code></pre>\n  <p><a name="creating-lazy-collections"></a></p>\n\n          <p><a name="creating-lazy-collections"></a></p>\n          <h3>\n            <a href="#creating-lazy-collections">\n              Creating Lazy Collections\n            </a>\n          </h3><p>To create a lazy collection instance, you should pass a PHP generator function to the collection&#39;s <code>make</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">LazyCollection</span>;\n\nLazyCollection::make(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    $handle = fopen(<span class="hljs-string">\'log.txt\'</span>, <span class="hljs-string">\'r\'</span>);\n\n    <span class="hljs-keyword">while</span> (($line = fgets($handle)) !== <span class="hljs-keyword">false</span>) {\n        <span class="hljs-keyword">yield</span> $line;\n    }\n});</code></pre>\n  <p><a name="the-enumerable-contract"></a></p>\n\n          <p><a name="the-enumerable-contract"></a></p>\n          <h3>\n            <a href="#the-enumerable-contract">\n              The Enumerable Contract\n            </a>\n          </h3><p>Almost all methods available on the <code>Collection</code> class are also available on the <code>LazyCollection</code> class. Both of these classes implement the <code>Illuminate\\Support\\Enumerable</code> contract, which defines the following methods:</p>\n<div id="collection-method-list" markdown="1">\n\n<p><a href="#method-all">all</a>\n<a href="#method-average">average</a>\n<a href="#method-avg">avg</a>\n<a href="#method-chunk">chunk</a>\n<a href="#method-collapse">collapse</a>\n<a href="#method-collect">collect</a>\n<a href="#method-combine">combine</a>\n<a href="#method-concat">concat</a>\n<a href="#method-contains">contains</a>\n<a href="#method-containsstrict">containsStrict</a>\n<a href="#method-count">count</a>\n<a href="#method-countBy">countBy</a>\n<a href="#method-crossjoin">crossJoin</a>\n<a href="#method-dd">dd</a>\n<a href="#method-diff">diff</a>\n<a href="#method-diffassoc">diffAssoc</a>\n<a href="#method-diffkeys">diffKeys</a>\n<a href="#method-dump">dump</a>\n<a href="#method-duplicates">duplicates</a>\n<a href="#method-duplicatesstrict">duplicatesStrict</a>\n<a href="#method-each">each</a>\n<a href="#method-eachspread">eachSpread</a>\n<a href="#method-every">every</a>\n<a href="#method-except">except</a>\n<a href="#method-filter">filter</a>\n<a href="#method-first">first</a>\n<a href="#method-first-where">firstWhere</a>\n<a href="#method-flatmap">flatMap</a>\n<a href="#method-flatten">flatten</a>\n<a href="#method-flip">flip</a>\n<a href="#method-forpage">forPage</a>\n<a href="#method-get">get</a>\n<a href="#method-groupby">groupBy</a>\n<a href="#method-has">has</a>\n<a href="#method-implode">implode</a>\n<a href="#method-intersect">intersect</a>\n<a href="#method-intersectbykeys">intersectByKeys</a>\n<a href="#method-isempty">isEmpty</a>\n<a href="#method-isnotempty">isNotEmpty</a>\n<a href="#method-join">join</a>\n<a href="#method-keyby">keyBy</a>\n<a href="#method-keys">keys</a>\n<a href="#method-last">last</a>\n<a href="#method-macro">macro</a>\n<a href="#method-make">make</a>\n<a href="#method-map">map</a>\n<a href="#method-mapinto">mapInto</a>\n<a href="#method-mapspread">mapSpread</a>\n<a href="#method-maptogroups">mapToGroups</a>\n<a href="#method-mapwithkeys">mapWithKeys</a>\n<a href="#method-max">max</a>\n<a href="#method-median">median</a>\n<a href="#method-merge">merge</a>\n<a href="#method-mergerecursive">mergeRecursive</a>\n<a href="#method-min">min</a>\n<a href="#method-mode">mode</a>\n<a href="#method-nth">nth</a>\n<a href="#method-only">only</a>\n<a href="#method-pad">pad</a>\n<a href="#method-partition">partition</a>\n<a href="#method-pipe">pipe</a>\n<a href="#method-pluck">pluck</a>\n<a href="#method-random">random</a>\n<a href="#method-reduce">reduce</a>\n<a href="#method-reject">reject</a>\n<a href="#method-replace">replace</a>\n<a href="#method-replacerecursive">replaceRecursive</a>\n<a href="#method-reverse">reverse</a>\n<a href="#method-search">search</a>\n<a href="#method-shuffle">shuffle</a>\n<a href="#method-skip">skip</a>\n<a href="#method-slice">slice</a>\n<a href="#method-some">some</a>\n<a href="#method-sort">sort</a>\n<a href="#method-sortby">sortBy</a>\n<a href="#method-sortbydesc">sortByDesc</a>\n<a href="#method-sortkeys">sortKeys</a>\n<a href="#method-sortkeysdesc">sortKeysDesc</a>\n<a href="#method-split">split</a>\n<a href="#method-sum">sum</a>\n<a href="#method-take">take</a>\n<a href="#method-tap">tap</a>\n<a href="#method-times">times</a>\n<a href="#method-toarray">toArray</a>\n<a href="#method-tojson">toJson</a>\n<a href="#method-union">union</a>\n<a href="#method-unique">unique</a>\n<a href="#method-uniquestrict">uniqueStrict</a>\n<a href="#method-unless">unless</a>\n<a href="#method-unlessempty">unlessEmpty</a>\n<a href="#method-unlessnotempty">unlessNotEmpty</a>\n<a href="#method-unwrap">unwrap</a>\n<a href="#method-values">values</a>\n<a href="#method-when">when</a>\n<a href="#method-whenempty">whenEmpty</a>\n<a href="#method-whennotempty">whenNotEmpty</a>\n<a href="#method-where">where</a>\n<a href="#method-wherestrict">whereStrict</a>\n<a href="#method-wherebetween">whereBetween</a>\n<a href="#method-wherein">whereIn</a>\n<a href="#method-whereinstrict">whereInStrict</a>\n<a href="#method-whereinstanceof">whereInstanceOf</a>\n<a href="#method-wherenotbetween">whereNotBetween</a>\n<a href="#method-wherenotin">whereNotIn</a>\n<a href="#method-wherenotinstrict">whereNotInStrict</a>\n<a href="#method-wrap">wrap</a>\n<a href="#method-zip">zip</a></p>\n</div>\n\n<blockquote>\n<p>{note} Methods that mutate the collection (such as <code>shift</code>, <code>pop</code>, <code>prepend</code> etc.) are <em>not</em> available on the <code>LazyCollection</code> class.</p>\n</blockquote>\n<p><a name="lazy-collection-methods"></a></p>\n\n          <p><a name="lazy-collection-methods"></a></p>\n          <h3>\n            <a href="#lazy-collection-methods">\n              Lazy Collection Methods\n            </a>\n          </h3><p>In addition to the methods defined in the <code>Enumerable</code> contract, the <code>LazyCollection</code> class contains the following methods:</p>\n<p><a name="method-tapEach"></a></p>\n\n          <p><a name="-code-tapeach-code-"></a></p>\n          <h4>\n            <a href="#-code-tapeach-code-">\n              <code>tapEach()</code>\n            </a>\n          </h4><p>While the <code>each</code> method calls the given callback for each item in the collection right away, the <code>tapEach</code> method only calls the given callback as the items are being pulled out of the list one by one:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$lazyCollection = LazyCollection::times(INF)-&gt;tapEach(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($value)</span> </span>{\n    dump($value);\n});\n\n<span class="hljs-comment">// Nothing has been dumped so far...</span>\n\n$array = $lazyCollection-&gt;take(<span class="hljs-number">3</span>)-&gt;all();\n\n<span class="hljs-comment">// 1</span>\n<span class="hljs-comment">// 2</span>\n<span class="hljs-comment">// 3</span></code></pre>\n  <p><a name="method-remember"></a></p>\n\n          <p><a name="-code-remember-code-"></a></p>\n          <h4>\n            <a href="#-code-remember-code-">\n              <code>remember()</code>\n            </a>\n          </h4><p>The <code>remember</code> method returns a new lazy collection that will remember any values that have already been enumerated and will not retrieve them again when the collection is enumerated again:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = User::cursor()-&gt;remember();\n\n<span class="hljs-comment">// No query has been executed yet...</span>\n\n$users-&gt;take(<span class="hljs-number">5</span>)-&gt;all();\n\n<span class="hljs-comment">// The query has been executed and the first 5 users have been hydrated from the database...</span>\n\n$users-&gt;take(<span class="hljs-number">20</span>)-&gt;all();\n\n<span class="hljs-comment">// First 5 users come from the collection\'s cache... The rest are hydrated from the database...</span></code></pre>\n  '},d9d9:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="email-verification"></a></p>\n          <h1>\n            <a href="#email-verification">\n              Email Verification\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#verification-database">Database Considerations</a></li>\n<li><a href="#verification-routing">Routing</a><ul>\n<li><a href="#protecting-routes">Protecting Routes</a></li>\n</ul>\n</li>\n<li><a href="#verification-views">Views</a></li>\n<li><a href="#after-verifying-emails">After Verifying Emails</a></li>\n<li><a href="#events">Events</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Many web applications require users to verify their email addresses before using the application. Rather than forcing you to re-implement this on each application, Laravel provides convenient methods for sending and verifying email verification requests.</p>\n\n          <p><a name="model-preparation"></a></p>\n          <h3>\n            <a href="#model-preparation">\n              Model Preparation\n            </a>\n          </h3><p>To get started, verify that your <code>App\\User</code> model implements the <code>Illuminate\\Contracts\\Auth\\MustVerifyEmail</code> contract:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">Auth</span>\\<span class="hljs-title">MustVerifyEmail</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Foundation</span>\\<span class="hljs-title">Auth</span>\\<span class="hljs-title">User</span> <span class="hljs-title">as</span> <span class="hljs-title">Authenticatable</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Notifications</span>\\<span class="hljs-title">Notifiable</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Authenticatable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MustVerifyEmail</span>\n</span>{\n    <span class="hljs-keyword">use</span> <span class="hljs-title">Notifiable</span>;\n\n    <span class="hljs-comment">// ...</span>\n}</span></code></pre>\n  <p><a name="verification-database"></a></p>\n\n          <p><a name="database-considerations"></a></p>\n          <h2>\n            <a href="#database-considerations">\n              Database Considerations\n            </a>\n          </h2>\n          <p><a name="the-email-verification-column"></a></p>\n          <h4>\n            <a href="#the-email-verification-column">\n              The Email Verification Column\n            </a>\n          </h4><p>Next, your <code>user</code> table must contain an <code>email_verified_at</code> column to store the date and time that the email address was verified. By default, the <code>users</code> table migration included with the Laravel framework already includes this column. So, all you need to do is run your database migrations:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">php artisan migrate</span></code></pre>\n  <p><a name="verification-routing"></a></p>\n\n          <p><a name="routing"></a></p>\n          <h2>\n            <a href="#routing">\n              Routing\n            </a>\n          </h2><p>Laravel includes the <code>Auth\\VerificationController</code> class that contains the necessary logic to send verification links and verify emails. To register the necessary routes for this controller, pass the <code>verify</code> option to the <code>Auth::routes</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Auth::routes([<span class="hljs-string">\'verify\'</span> =&gt; <span class="hljs-keyword">true</span>]);</code></pre>\n  <p><a name="protecting-routes"></a></p>\n\n          <p><a name="protecting-routes"></a></p>\n          <h3>\n            <a href="#protecting-routes">\n              Protecting Routes\n            </a>\n          </h3><p><router-link to="/docs/{{version}}/middleware">Route middleware</router-link> can be used to only allow verified users to access a given route. Laravel ships with a <code>verified</code> middleware, which is defined at <code>Illuminate\\Auth\\Middleware\\EnsureEmailIsVerified</code>. Since this middleware is already registered in your application&#39;s HTTP kernel, all you need to do is attach the middleware to a route definition:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'profile\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">// Only verified users may enter...</span>\n})-&gt;middleware(<span class="hljs-string">\'verified\'</span>);</code></pre>\n  <p><a name="verification-views"></a></p>\n\n          <p><a name="views"></a></p>\n          <h2>\n            <a href="#views">\n              Views\n            </a>\n          </h2><p>To generate all of the necessary view for email verification, you may use the <code>laravel/ui</code> Composer package:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">composer <span class="hljs-built_in">require</span> laravel/ui <span class="hljs-comment">--dev</span>\n\nphp artisan ui vue <span class="hljs-comment">--auth</span></code></pre>\n  <p>The email verification view is placed in <code>resources/views/auth/verify.blade.php</code>. You are free to customize this view as needed for your application.</p>\n<p><a name="after-verifying-emails"></a></p>\n\n          <p><a name="after-verifying-emails"></a></p>\n          <h2>\n            <a href="#after-verifying-emails">\n              After Verifying Emails\n            </a>\n          </h2><p>After an email address is verified, the user will automatically be redirected to <code>/home</code>. You can customize the post verification redirect location by defining a <code>redirectTo</code> method or property on the <code>VerificationController</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">protected</span> $redirectTo = <span class="hljs-string">\'/dashboard\'</span>;</code></pre>\n  <p><a name="events"></a></p>\n\n          <p><a name="events"></a></p>\n          <h2>\n            <a href="#events">\n              Events\n            </a>\n          </h2><p>Laravel dispatches <router-link to="/docs/{{version}}/events">events</router-link> during the email verification process. You may attach listeners to these events in your <code>EventServiceProvider</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">/**\n * The event listener mappings for the application.\n *\n * @var<span class="hljs-built_in"> array\n</span> */<span class="hljs-keyword">\nprotected</span> $listen = [\n    \'Illuminate\\Auth\\Events\\Verified\' =&gt; [\n        \'App\\Listeners\\LogVerifiedUser\',\n    ],\n];</code></pre>\n  '},e125:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="service-container"></a></p>\n          <h1>\n            <a href="#service-container">\n              Service Container\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#binding">Binding</a><ul>\n<li><a href="#binding-basics">Binding Basics</a></li>\n<li><a href="#binding-interfaces-to-implementations">Binding Interfaces To Implementations</a></li>\n<li><a href="#contextual-binding">Contextual Binding</a></li>\n<li><a href="#tagging">Tagging</a></li>\n<li><a href="#extending-bindings">Extending Bindings</a></li>\n</ul>\n</li>\n<li><a href="#resolving">Resolving</a><ul>\n<li><a href="#the-make-method">The Make Method</a></li>\n<li><a href="#automatic-injection">Automatic Injection</a></li>\n</ul>\n</li>\n<li><a href="#container-events">Container Events</a></li>\n<li><a href="#psr-11">PSR-11</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>The Laravel service container is a powerful tool for managing class dependencies and performing dependency injection. Dependency injection is a fancy phrase that essentially means this: class dependencies are &quot;injected&quot; into the class via the constructor or, in some cases, &quot;setter&quot; methods.</p>\n<p>Let&#39;s look at a simple example:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">Controller</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Repositories</span>\\<span class="hljs-title">UserRepository</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The user repository implementation.\n     *\n     * <span class="hljs-doctag">@var</span> UserRepository\n     */</span>\n    <span class="hljs-keyword">protected</span> $users;\n\n    <span class="hljs-comment">/**\n     * Create a new controller instance.\n     *\n     * <span class="hljs-doctag">@param</span>  UserRepository  $users\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(UserRepository $users)</span>\n    </span>{\n        <span class="hljs-keyword">$this</span>-&gt;users = $users;\n    }\n\n    <span class="hljs-comment">/**\n     * Show the profile for the given user.\n     *\n     * <span class="hljs-doctag">@param</span>  int  $id\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span><span class="hljs-params">($id)</span>\n    </span>{\n        $user = <span class="hljs-keyword">$this</span>-&gt;users-&gt;find($id);\n\n        <span class="hljs-keyword">return</span> view(<span class="hljs-string">\'user.profile\'</span>, [<span class="hljs-string">\'user\'</span> =&gt; $user]);\n    }\n}</span></code></pre>\n  <p>In this example, the <code>UserController</code> needs to retrieve users from a data source. So, we will <strong>inject</strong> a service that is able to retrieve users. In this context, our <code>UserRepository</code> most likely uses <router-link to="/docs/{{version}}/eloquent">Eloquent</router-link> to retrieve user information from the database. However, since the repository is injected, we are able to easily swap it out with another implementation. We are also able to easily &quot;mock&quot;, or create a dummy implementation of the <code>UserRepository</code> when testing our application.</p>\n<p>A deep understanding of the Laravel service container is essential to building a powerful, large application, as well as for contributing to the Laravel core itself.</p>\n<p><a name="binding"></a></p>\n\n          <p><a name="binding"></a></p>\n          <h2>\n            <a href="#binding">\n              Binding\n            </a>\n          </h2><p><a name="binding-basics"></a></p>\n\n          <p><a name="binding-basics"></a></p>\n          <h3>\n            <a href="#binding-basics">\n              Binding Basics\n            </a>\n          </h3><p>Almost all of your service container bindings will be registered within <router-link to="/docs/{{version}}/providers">service providers</router-link>, so most of these examples will demonstrate using the container in that context.</p>\n<blockquote>\n<p>{tip} There is no need to bind classes into the container if they do not depend on any interfaces. The container does not need to be instructed on how to build these objects, since it can automatically resolve these objects using reflection.</p>\n</blockquote>\n\n          <p><a name="simple-bindings"></a></p>\n          <h4>\n            <a href="#simple-bindings">\n              Simple Bindings\n            </a>\n          </h4><p>Within a service provider, you always have access to the container via the <code>$this-&gt;app</code> property. We can register a binding using the <code>bind</code> method, passing the class or interface name that we wish to register along with a <code>Closure</code> that returns an instance of the class:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">$this</span>-&gt;app-&gt;bind(<span class="hljs-string">\'HelpSpot\\API\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($app)</span> </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> HelpSpot\\API($app-&gt;make(<span class="hljs-string">\'HttpClient\'</span>));\n});</code></pre>\n  <p>Note that we receive the container itself as an argument to the resolver. We can then use the container to resolve sub-dependencies of the object we are building.</p>\n\n          <p><a name="binding-a-singleton"></a></p>\n          <h4>\n            <a href="#binding-a-singleton">\n              Binding A Singleton\n            </a>\n          </h4><p>The <code>singleton</code> method binds a class or interface into the container that should only be resolved one time. Once a singleton binding is resolved, the same object instance will be returned on subsequent calls into the container:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">$this</span>-&gt;app-&gt;singleton(<span class="hljs-string">\'HelpSpot\\API\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($app)</span> </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> HelpSpot\\API($app-&gt;make(<span class="hljs-string">\'HttpClient\'</span>));\n});</code></pre>\n  \n          <p><a name="binding-instances"></a></p>\n          <h4>\n            <a href="#binding-instances">\n              Binding Instances\n            </a>\n          </h4><p>You may also bind an existing object instance into the container using the <code>instance</code> method. The given instance will always be returned on subsequent calls into the container:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$api = <span class="hljs-keyword">new</span> HelpSpot\\API(<span class="hljs-keyword">new</span> HttpClient);\n\n<span class="hljs-keyword">$this</span>-&gt;app-&gt;instance(<span class="hljs-string">\'HelpSpot\\API\'</span>, $api);</code></pre>\n  \n          <p><a name="binding-primitives"></a></p>\n          <h4>\n            <a href="#binding-primitives">\n              Binding Primitives\n            </a>\n          </h4><p>Sometimes you may have a class that receives some injected classes, but also needs an injected primitive value such as an integer. You may easily use contextual binding to inject any value your class may need:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-keyword">this</span>-&gt;app-&gt;<span class="hljs-keyword">when</span><span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'App\\Http\\Controllers\\UserController\'</span>)</span>\n          -&gt;</span>needs<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'$variableName\'</span>)</span>\n          -&gt;</span>give($value);</code></pre>\n  <p><a name="binding-interfaces-to-implementations"></a></p>\n\n          <p><a name="binding-interfaces-to-implementations"></a></p>\n          <h3>\n            <a href="#binding-interfaces-to-implementations">\n              Binding Interfaces To Implementations\n            </a>\n          </h3><p>A very powerful feature of the service container is its ability to bind an interface to a given implementation. For example, let&#39;s assume we have an <code>EventPusher</code> interface and a <code>RedisEventPusher</code> implementation. Once we have coded our <code>RedisEventPusher</code> implementation of this interface, we can register it with the service container like so:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-function"><span class="hljs-title">this</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">app</span>-&gt;</span>bind(\n    <span class="hljs-string">\'App\\Contracts\\EventPusher\'</span>,\n    <span class="hljs-string">\'App\\Services\\RedisEventPusher\'</span>\n);</code></pre>\n  <p>This statement tells the container that it should inject the <code>RedisEventPusher</code> when a class needs an implementation of <code>EventPusher</code>. Now we can type-hint the <code>EventPusher</code> interface in a constructor, or any other location where dependencies are injected by the service container:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">EventPusher</span>;\n\n<span class="hljs-comment">/**\n * Create a new class instance.\n *\n * <span class="hljs-doctag">@param</span>  EventPusher  $pusher\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(EventPusher $pusher)</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;pusher = $pusher;\n}</code></pre>\n  <p><a name="contextual-binding"></a></p>\n\n          <p><a name="contextual-binding"></a></p>\n          <h3>\n            <a href="#contextual-binding">\n              Contextual Binding\n            </a>\n          </h3><p>Sometimes you may have two classes that utilize the same interface, but you wish to inject different implementations into each class. For example, two controllers may depend on different implementations of the <code>Illuminate\\Contracts\\Filesystem\\Filesystem</code> <router-link to="/docs/{{version}}/contracts">contract</router-link>. Laravel provides a simple, fluent interface for defining this behavior:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">PhotoController</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">UploadController</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">VideoController</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">Filesystem</span>\\<span class="hljs-title">Filesystem</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Storage</span>;\n\n<span class="hljs-keyword">$this</span>-&gt;app-&gt;when(PhotoController::class)\n          -&gt;needs(Filesystem::class)\n          -&gt;give(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n              <span class="hljs-keyword">return</span> Storage::disk(<span class="hljs-string">\'local\'</span>);\n          });\n\n<span class="hljs-keyword">$this</span>-&gt;app-&gt;when([VideoController::class, UploadController::class])\n          -&gt;needs(Filesystem::class)\n          -&gt;give(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n              <span class="hljs-keyword">return</span> Storage::disk(<span class="hljs-string">\'s3\'</span>);\n          });</code></pre>\n  <p><a name="tagging"></a></p>\n\n          <p><a name="tagging"></a></p>\n          <h3>\n            <a href="#tagging">\n              Tagging\n            </a>\n          </h3><p>Occasionally, you may need to resolve all of a certain &quot;category&quot; of binding. For example, perhaps you are building a report aggregator that receives an array of many different <code>Report</code> interface implementations. After registering the <code>Report</code> implementations, you can assign them a tag using the <code>tag</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">$this</span>-&gt;app-&gt;bind(<span class="hljs-string">\'SpeedReport\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">//</span>\n});\n\n<span class="hljs-keyword">$this</span>-&gt;app-&gt;bind(<span class="hljs-string">\'MemoryReport\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">//</span>\n});\n\n<span class="hljs-keyword">$this</span>-&gt;app-&gt;tag([<span class="hljs-string">\'SpeedReport\'</span>, <span class="hljs-string">\'MemoryReport\'</span>], <span class="hljs-string">\'reports\'</span>);</code></pre>\n  <p>Once the services have been tagged, you may easily resolve them all via the <code>tagged</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">$this</span>-&gt;app-&gt;bind(<span class="hljs-string">\'ReportAggregator\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($app)</span> </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ReportAggregator($app-&gt;tagged(<span class="hljs-string">\'reports\'</span>));\n});</code></pre>\n  <p><a name="extending-bindings"></a></p>\n\n          <p><a name="extending-bindings"></a></p>\n          <h3>\n            <a href="#extending-bindings">\n              Extending Bindings\n            </a>\n          </h3><p>The <code>extend</code> method allows the modification of resolved services. For example, when a service is resolved, you may run additional code to decorate or configure the service. The <code>extend</code> method accepts a Closure, which should return the modified service, as its only argument. The Closure receives the service being resolved and the container instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">$this</span>-&gt;app-&gt;extend(Service::class, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($service, $app)</span> </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DecoratedService($service);\n});</code></pre>\n  <p><a name="resolving"></a></p>\n\n          <p><a name="resolving"></a></p>\n          <h2>\n            <a href="#resolving">\n              Resolving\n            </a>\n          </h2><p><a name="the-make-method"></a></p>\n\n          <p><a name="the-code-make-code-method"></a></p>\n          <h4>\n            <a href="#the-code-make-code-method">\n              The <code>make</code> Method\n            </a>\n          </h4><p>You may use the <code>make</code> method to resolve a class instance out of the container. The <code>make</code> method accepts the name of the class or interface you wish to resolve:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$api</span> = <span class="hljs-variable">$this</span>-&gt;app-&gt;make(<span class="hljs-string">\'HelpSpot\\API\'</span>);</code></pre>\n  <p>If you are in a location of your code that does not have access to the <code>$app</code> variable, you may use the global <code>resolve</code> helper:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">$api</span> = resolve(<span class="hljs-string">\'HelpSpot\\API\'</span>);</code></pre>\n  <p>If some of your class&#39; dependencies are not resolvable via the container, you may inject them by passing them as an associative array into the <code>makeWith</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$api = <span class="hljs-keyword">$this</span>-&gt;app-&gt;makeWith(<span class="hljs-string">\'HelpSpot\\API\'</span>, [<span class="hljs-string">\'id\'</span> =&gt; <span class="hljs-number">1</span>]);</code></pre>\n  <p><a name="automatic-injection"></a></p>\n\n          <p><a name="automatic-injection"></a></p>\n          <h4>\n            <a href="#automatic-injection">\n              Automatic Injection\n            </a>\n          </h4><p>Alternatively, and importantly, you may &quot;type-hint&quot; the dependency in the constructor of a class that is resolved by the container, including <router-link to="/docs/{{version}}/controllers">controllers</router-link>, <router-link to="/docs/{{version}}/events">event listeners</router-link>, <router-link to="/docs/{{version}}/middleware">middleware</router-link>, and more. Additionally, you may type-hint dependencies in the <code>handle</code> method of <router-link to="/docs/{{version}}/queues">queued jobs</router-link>. In practice, this is how most of your objects should be resolved by the container.</p>\n<p>For example, you may type-hint a repository defined by your application in a controller&#39;s constructor. The repository will automatically be resolved and injected into the class:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Users</span>\\<span class="hljs-title">Repository</span> <span class="hljs-title">as</span> <span class="hljs-title">UserRepository</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The user repository instance.\n     */</span>\n    <span class="hljs-keyword">protected</span> $users;\n\n    <span class="hljs-comment">/**\n     * Create a new controller instance.\n     *\n     * <span class="hljs-doctag">@param</span>  UserRepository  $users\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(UserRepository $users)</span>\n    </span>{\n        <span class="hljs-keyword">$this</span>-&gt;users = $users;\n    }\n\n    <span class="hljs-comment">/**\n     * Show the user with the given ID.\n     *\n     * <span class="hljs-doctag">@param</span>  int  $id\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span><span class="hljs-params">($id)</span>\n    </span>{\n        <span class="hljs-comment">//</span>\n    }\n}</span></code></pre>\n  <p><a name="container-events"></a></p>\n\n          <p><a name="container-events"></a></p>\n          <h2>\n            <a href="#container-events">\n              Container Events\n            </a>\n          </h2><p>The service container fires an event each time it resolves an object. You may listen to this event using the <code>resolving</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">$this</span>-&gt;app-&gt;resolving(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($object, $app)</span> </span>{\n    <span class="hljs-comment">// Called when container resolves object of any type...</span>\n});\n\n<span class="hljs-keyword">$this</span>-&gt;app-&gt;resolving(HelpSpot\\API::class, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($api, $app)</span> </span>{\n    <span class="hljs-comment">// Called when container resolves objects of type "HelpSpot\\API"...</span>\n});</code></pre>\n  <p>As you can see, the object being resolved will be passed to the callback, allowing you to set any additional properties on the object before it is given to its consumer.</p>\n<p><a name="psr-11"></a></p>\n\n          <p><a name="psr-11"></a></p>\n          <h2>\n            <a href="#psr-11">\n              PSR-11\n            </a>\n          </h2><p>Laravel&#39;s service container implements the <router-link to="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-11-container.md">PSR-11</router-link> interface. Therefore, you may type-hint the PSR-11 container interface to obtain an instance of the Laravel container:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Psr</span>\\<span class="hljs-title">Container</span>\\<span class="hljs-title">ContainerInterface</span>;\n\nRoute::get(<span class="hljs-string">\'/\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(ContainerInterface $container)</span> </span>{\n    $service = $container-&gt;get(<span class="hljs-string">\'Service\'</span>);\n\n    <span class="hljs-comment">//</span>\n});</code></pre>\n  <p>An exception is thrown if the given identifier can&#39;t be resolved. The exception will be an instance of <code>Psr\\Container\\NotFoundExceptionInterface</code> if the identifier was never bound. If the identifier was bound but was unable to be resolved, an instance of <code>Psr\\Container\\ContainerExceptionInterface</code> will be thrown.</p>\n'},e381:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="laravel-documentation"></a></p>\n          <h1>\n            <a href="#laravel-documentation">\n              Laravel Documentation\n            </a>\n          </h1><p>You can find the online version of the Laravel documentation at <router-link to="https://laravel.com/docs">https://laravel.com/docs</router-link></p>\n\n          <p><a name="contribution-guidelines"></a></p>\n          <h2>\n            <a href="#contribution-guidelines">\n              Contribution Guidelines\n            </a>\n          </h2><p>If you are submitting documentation for the <strong>current stable release</strong>, submit it to the corresponding branch. For example, documentation for Laravel 6 would be submitted to the <code>6.x</code> branch. Documentation intended for the next release of Laravel should be submitted to the <code>master</code> branch.</p>\n'},e83a:function(s,e,a){"use strict";a.r(e);a("8e6e"),a("ac6a"),a("456d");var n=a("bd86"),t=a("a026"),l=a("e1bd");function o(s,e){var a=Object.keys(s);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(s);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(s,e).enumerable}))),a.push.apply(a,n)}return a}function p(s){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(a,!0).forEach((function(e){Object(n["a"])(s,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(s,Object.getOwnPropertyDescriptors(a)):o(a).forEach((function(e){Object.defineProperty(s,e,Object.getOwnPropertyDescriptor(a,e))}))}return s}var c=Object(l["a"])("1234567890abcdefghijklmnopqrstuvwxyz",10),r={iframeId:c(),deployment:"tinker",phpLoaded:!1,editorTheme:"light",embed:!1,mode:"preload",frameLocation:"/",showPresetSelection:!1,showGistInput:!1,showEmbed:!1,preload:"",code:"",currentFile:{},controller:"",view:"",output:"",savedHash:"",deletePassword:"",session:"somethign",font:"Fira Code",phpBinaryDetected:!1,lineNumbers:!0,lineWrapping:!0,lineHeight:1.9,fontSize:17,autoEvaluate:!1,isDirty:!1,fileId:null,isRunning:!1,showResults:!0,showCode:!0,showDocumentation:!1,showFiles:!0,readOnly:!1,iFrameLoaded:!1,files:{"index.php":{filename:"index.php",content:"<?php\n\n/*\n|-------------------------------------------\n| Welcome to Laravel Playground\n|-------------------------------------------\n|\n| Laravel Playground allows you to try out PHP and Laravel all from your browser.\n| You have access to all Laravel classes and an extensive list of included\n| Laravel packages (like Laravel DebugBar).\n|\n| You can also load your own Gists! \n| Simply append /gist/{YOUR-GIST-ID} to the URL.\n|\n| Do you want to see some examples?\n|\n| Multiple views: https://laravelplayground.com/#/gist/d990a2c5f23b50564561b9266252f501\n| Form request validation: https://laravelplayground.com/#/gist/e5a0d029f6433e31672e55dd90429d3f\n| Livewire: https://laravelplayground.com/#/gist/286de510bfc0a88e697284e90ed1d7da\n|\n*/\n\nRoute::get('/', function (){\n  return view('playground', [\n    'title' => 'Laravel Playground'\n  ]);\n});\n"},"playground.blade.php":{filename:"playground.blade.php",content:'\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset="utf-8">\n    <title>Laravel Playground</title>\n    <link rel="stylesheet"  href="https://beyondco.de/css/default.css">\n</head>\n<body\n    style="background: url(\'https://beyondco.de/img/monotone_software.png\') top right no-repeat;\n    background-size: 100% 1200px;\n    background-position-x: calc(100% + 0px);\n    background-position-y: -140px;\n">\n    <div class="container px-4 md:px-8 mx-auto pt-4 flex flex-col">\n        <header class="pt-4 text-dark-blue-800 pb-6">\n            <a href="https://beyondco.de" class="inline-flex items-center">\n                <svg width="40" height="45" viewBox="0 0 40 45" fill="none" xmlns="http://www.w3.org/2000/svg">\n                    <path d="M14.1169 3.30926C17.7698 1.25447 22.2302 1.25447 25.8831 3.30926L33.8831 7.80926C37.6617 9.93468 40 13.9329 40 18.2682V26.7318C40 31.0671 37.6617 35.0653 33.8831 37.1907L25.8831 41.6907C22.2302 43.7455 17.7698 43.7455 14.1169 41.6907L6.11686 37.1907C2.33834 35.0653 0 31.0671 0 26.7318V18.2682C0 13.9329 2.33834 9.93468 6.11687 7.80926L14.1169 3.30926Z" fill="#0A214C"/>\n                    <g clip-path="url(#clip0)">\n                        <path fill-rule="evenodd" clip-rule="evenodd" d="M10.706 13.1211C11.2556 13.1211 11.7013 13.5597 11.7013 14.1008V20.7794C12.8332 19.7296 14.3561 19.0842 16.0304 19.0842C17.7282 19.0842 19.3328 19.7481 20.5159 20.9226C20.6518 21.0576 20.6827 21.1015 20.8072 21.2497C20.1107 22.0722 19.8121 23.1499 19.8121 23.1499C19.5138 22.758 19.2141 22.4172 19.2141 22.4172C18.3945 21.5414 17.2471 21.0437 16.0304 21.0437C13.6433 21.0437 11.7013 22.9553 11.7013 25.3051C11.7013 27.655 13.6433 29.5669 16.0304 29.5669C18.4175 29.5669 20.3598 27.655 20.3598 25.3051C20.3598 21.8749 23.1945 19.0842 26.6792 19.0842C27.7904 19.0842 28.8834 19.3724 29.8402 19.9175C30.3159 20.1882 30.4784 20.7876 30.2033 21.2559C29.9277 21.7242 29.3189 21.8844 28.8434 21.6131C28.1892 21.2405 27.4409 21.0437 26.6792 21.0437C24.2923 21.0437 22.3501 22.9553 22.3501 25.3051C22.3501 28.7353 19.515 31.5261 16.0304 31.5261C12.5457 31.5261 9.71094 28.7353 9.71094 25.3051L9.71246 25.2399C9.71195 25.2289 9.71094 25.2182 9.71094 25.2072V14.1008C9.71094 13.5597 10.1563 13.1211 10.706 13.1211ZM22.8974 27.4604C23.2955 28.0483 23.7029 28.4 23.7358 28.4304C24.5388 29.1643 25.5789 29.5669 26.6792 29.5669C27.4409 29.5669 28.1892 29.3698 28.8434 28.9972C29.3189 28.7264 29.9277 28.8861 30.2033 29.3544C30.4784 29.8227 30.3159 30.4221 29.8402 30.6931C28.8834 31.2381 27.7904 31.5261 26.6792 31.5261C25.0439 31.5261 23.5 30.917 22.3197 29.8087C22.2929 29.7838 21.9285 29.4453 21.9022 29.4199C21.9022 29.4199 22.6983 28.2441 22.8974 27.4604Z" fill="white"/>\n                    </g>\n                    <defs>\n                        <clipPath id="clip0">\n                            <rect x="9.28516" y="12.6565" width="21.4286" height="19.0848" fill="white"/>\n                        </clipPath>\n                    </defs>\n                </svg>\n                <p class="ml-4 font-headline text-lg"><span class="text-hulk-800">Laravel Playground</span> - a Beyond<span class="text-hulk-800">Code</span> product</p>\n            </a>\n        </header>\n        <div class="text-dark-blue-800 text-xl pt-4">\n            <h1 class="text-2xl font-bold">Welcome to {{ $title }}</h1>\n            <p class="pt-2 text-base">\n                To learn more about the things you can do, take a look at the <a href="https://beyondco.de/docs/laravel-playground" class="underline" target="_blank">official documentation</a>.\n            </p>\n        </div>\n    </div>\n</body>\n</html>\n\n'}}},i={setPHPLoaded:function(s,e){s.phpLoaded=e},setReadOnly:function(s,e){s.readOnly=e},setEmbed:function(s,e){s.embed=e,s.showFiles=!1},isRunning:function(s,e){s.isRunning=e},setPreference:function(s,e){s[e.key]=e.value},setIframeLoaded:function(s,e){s.iFrameLoaded=e},setFrameLocation:function(s,e){s.frameLocation=e},setCode:function(s,e){s.currentFile.content=e,s.code=e},setPreload:function(s,e){s.currentFile.content=e,s.preload=e},setIsDirty:function(s,e){s.isDirty=e},toggleCode:function(s,e){s.showCode=e||!s.showCode,!1===s.showCode&&!0===s.showFiles&&(s.showFiles=!1)},toggleResults:function(s,e){s.showResults=e||!s.showResults},setOutput:function(s,e){s.output=e},setMode:function(s,e){s.mode=e},setController:function(s,e){s.controller=e},setTheme:function(s,e){s.editorTheme=e},loadFile:function(s,e){s.currentFile=e,s.code=e.content},loadFilename:function(s,e){var a=s.files[e]||null;null!==a&&(s.currentFile=a,s.code=a.content)},showPresetSelection:function(s,e){s.showPresetSelection=e},showGistInput:function(s,e){s.showGistInput=e},showEmbed:function(s,e){s.showEmbed=e},setFileId:function(s,e){s.fileId=e},setFiles:function(s,e){for(var a in s.files)t["a"].delete(s.files,a);s.files=p({},s.files,{},e)},deleteFile:function(s,e){t["a"].delete(s.files,e)},setView:function(s,e){s.view=e},setDeployment:function(s,e){s.deployment=e},addFile:function(s,e){""!==e.trim()&&(s.files[e.trim()]={filename:e.trim(),content:""})},addFileWithContent:function(s,e){var a={};a[e.filename]={filename:e.filename,content:e.content},s.files=p({},s.files,{},a)},showDocumentation:function(s,e){s.showDocumentation=e},showFiles:function(s,e){s.showFiles=e},setSavedHash:function(s,e){s.savedHash=e},loadSnippet:function(s,e){var a={};for(var n in e.files){var t=e.files[n];a[t.filename]=t}s.files=a,"http"===e.mode?(s.controller=e.controllerCode,s.view=e.viewCode):s.code=e.cliCode,s.showDocumentation=!1},tryCodeFromDocumentation:function(s,e){"http"===e.mode?(s.controller=e.controllerCode,s.view=e.viewCode):s.code=e.cliCode,s.showDocumentation=!1}},h={setPHPLoaded:function(s,e){s.commit("setPHPLoaded",e)},setEmbed:function(s,e){s.commit("setEmbed",e)},setPreference:function(s,e){s.commit("setPreference",e)},isRunning:function(s,e){s.commit("isRunning",e)},setCode:function(s,e){s.commit("setCode",e)},setDeployment:function(s,e){s.commit("setDeployment",e)},setFileId:function(s,e){s.commit("setFileId",e)},setFiles:function(s,e){s.commit("setFiles",e)},setReadOnly:function(s,e){s.commit("setReadOnly",e)},setPreload:function(s,e){s.commit("setPreload",e)},setIsDirty:function(s,e){s.commit("setIsDirty",e)},setIframeLoaded:function(s,e){s.commit("setIframeLoaded",e)},setOutput:function(s,e){s.commit("setOutput",e)},setController:function(s,e){s.commit("setController",e)},setView:function(s,e){s.commit("setView",e)},addFile:function(s,e){s.commit("addFile",e)},showPresetSelection:function(s,e){s.commit("showPresetSelection",e)},showGistInput:function(s,e){s.commit("showGistInput",e)},showEmbed:function(s,e){s.commit("showEmbed",e)},addFileWithContent:function(s,e){s.commit("addFileWithContent",e),s.commit("loadFile",s.state.files[Object.keys(s.state.files)[0]])},showDocumentation:function(s,e){s.commit("showDocumentation",e)},showFiles:function(s,e){s.commit("showFiles",e)},setFrameLocation:function(s,e){s.commit("setFrameLocation",e)},deleteFile:function(s,e){s.commit("deleteFile",e)},setSavedHash:function(s,e){s.commit("setSavedHash",e)},setTheme:function(s,e){s.commit("setTheme",e)},loadFile:function(s,e){s.commit("loadFile",e)},loadFilename:function(s,e){var a=s.state.files[e]||null;null!==a&&s.commit("loadFile",a)},toggleResults:function(s,e){s.commit("toggleResults",e)},toggleCode:function(s,e){s.commit("toggleCode",e)},tryCodeFromDocumentation:function(s,e){s.commit("setMode",e.mode),setTimeout((function(){s.commit("tryCodeFromDocumentation",e)}),150)},loadSnippet:function(s,e){s.commit("setMode",e.mode),setTimeout((function(){s.commit("loadSnippet",e),s.commit("loadFile",e.files[Object.keys(e.files)[0]])}),150)}};e["default"]={state:r,mutations:i,actions:h}},ea0a:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="validation"></a></p>\n          <h1>\n            <a href="#validation">\n              Validation\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#validation-quickstart">Validation Quickstart</a><ul>\n<li><a href="#quick-defining-the-routes">Defining The Routes</a></li>\n<li><a href="#quick-creating-the-controller">Creating The Controller</a></li>\n<li><a href="#quick-writing-the-validation-logic">Writing The Validation Logic</a></li>\n<li><a href="#quick-displaying-the-validation-errors">Displaying The Validation Errors</a></li>\n<li><a href="#a-note-on-optional-fields">A Note On Optional Fields</a></li>\n</ul>\n</li>\n<li><a href="#available-validation-rules">Available Validation Rules</a></li>\n<li><a href="#conditionally-adding-rules">Conditionally Adding Rules</a></li>\n<li><a href="#validating-arrays">Validating Arrays</a></li>\n<li><a href="#custom-validation-rules">Custom Validation Rules</a><ul>\n<li><a href="#using-rule-objects">Using Rule Objects</a></li>\n<li><a href="#using-closures">Using Closures</a></li>\n<li><a href="#using-extensions">Using Extensions</a></li>\n<li><a href="#implicit-extensions">Implicit Extensions</a></li>\n</ul>\n</li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Laravel provides several different approaches to validate your application&#39;s incoming data. By default, Laravel&#39;s base controller class uses a <code>ValidatesRequests</code> trait which provides a convenient method to validate incoming HTTP request with a variety of powerful validation rules.</p>\n<p><a name="validation-quickstart"></a></p>\n\n          <p><a name="validation-quickstart"></a></p>\n          <h2>\n            <a href="#validation-quickstart">\n              Validation Quickstart\n            </a>\n          </h2><p>To learn about Laravel&#39;s powerful validation features, let&#39;s look at a complete example of validating a form and displaying the error messages back to the user.</p>\n<p><a name="quick-defining-the-routes"></a></p>\n\n          <p><a name="defining-the-routes"></a></p>\n          <h3>\n            <a href="#defining-the-routes">\n              Defining The Routes\n            </a>\n          </h3><p>First, let&#39;s assume we have the following routes defined in our <code>routes/web.php</code> file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-type">Route</span>::get(<span class="hljs-symbol">\'post</span>/create\', <span class="hljs-symbol">\'PostController</span>@create\');\n\n<span class="hljs-type">Route</span>::post(<span class="hljs-symbol">\'post\'</span>, <span class="hljs-symbol">\'PostController</span>@store\');</code></pre>\n  <p>The <code>GET</code> route will display a form for the user to create a new blog post, while the <code>POST</code> route will store the new blog post in the database.</p>\n<p><a name="quick-creating-the-controller"></a></p>\n\n          <p><a name="creating-the-controller"></a></p>\n          <h3>\n            <a href="#creating-the-controller">\n              Creating The Controller\n            </a>\n          </h3><p>Next, let&#39;s take a look at a simple controller that handles these routes. We&#39;ll leave the <code>store</code> method empty for now:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">Controller</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Request</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Show the form to create a new blog post.\n     *\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> view(<span class="hljs-string">\'post.create\'</span>);\n    }\n\n    <span class="hljs-comment">/**\n     * Store a new blog post.\n     *\n     * <span class="hljs-doctag">@param</span>  Request  $request\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span><span class="hljs-params">(Request $request)</span>\n    </span>{\n        <span class="hljs-comment">// Validate and store the blog post...</span>\n    }\n}</span></code></pre>\n  <p><a name="quick-writing-the-validation-logic"></a></p>\n\n          <p><a name="writing-the-validation-logic"></a></p>\n          <h3>\n            <a href="#writing-the-validation-logic">\n              Writing The Validation Logic\n            </a>\n          </h3><p>Now we are ready to fill in our <code>store</code> method with the logic to validate the new blog post. To do this, we will use the <code>validate</code> method provided by the <code>Illuminate\\Http\\Request</code> object. If the validation rules pass, your code will keep executing normally; however, if validation fails, an exception will be thrown and the proper error response will automatically be sent back to the user. In the case of a traditional HTTP request, a redirect response will be generated, while a JSON response will be sent for AJAX requests.</p>\n<p>To get a better understanding of the <code>validate</code> method, let&#39;s jump back into the <code>store</code> method:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIElsbHVtaW5hdGVcXEh0dHBcXFJlcXVlc3Q7XG5Sb3V0ZTo6Z2V0KCcvJywgZnVuY3Rpb24oUmVxdWVzdCAkcmVxdWVzdCkge1xuICAgIHJldHVybiB2aWV3KCdfX3Rpbmtlcl9fOjp0aW5rZXJ3ZWxsJyk7XG59KTtcblxuUm91dGU6OnBvc3QoJy8nLCBmdW5jdGlvbihSZXF1ZXN0ICRyZXF1ZXN0KSB7XG4gICAgJHZhbGlkYXRlZERhdGEgPSAkcmVxdWVzdC0+dmFsaWRhdGUoW1xuICAgICAgICAndGl0bGUnID0+ICdyZXF1aXJlZHx1bmlxdWU6cG9zdHN8bWF4OjI1NScsXG4gICAgICAgICdib2R5JyA9PiAncmVxdWlyZWQnLFxuICAgIF0pO1xuXG4gICAgZHVtcCgkdmFsaWRhdGVkRGF0YSk7XG59KTtcbiIsInZpZXdDb2RlIjoiPGxpbmsgaHJlZj1cImh0dHBzOi8vc3RhY2twYXRoLmJvb3RzdHJhcGNkbi5jb20vYm9vdHN0cmFwLzQuNC4xL2Nzcy9ib290c3RyYXAubWluLmNzc1wiIHJlbD1cInN0eWxlc2hlZXRcIj5cbjxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cblxuICA8aDE+Q3JlYXRlIFBvc3Q8L2gxPlxuXG4gIEBpZiAoJGVycm9ycy0+YW55KCkpXG4gICAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCI+XG4gICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICBAZm9yZWFjaCAoJGVycm9ycy0+YWxsKCkgYXMgJGVycm9yKVxuICAgICAgICAgICAgICAgICAgPGxpPnt7ICRlcnJvciB9fTwvbGk+XG4gICAgICAgICAgICAgIEBlbmRmb3JlYWNoXG4gICAgICAgICAgPC91bD5cbiAgICAgIDwvZGl2PlxuICBAZW5kaWZcbiAgPGZvcm0gYWN0aW9uPVwiL1wiIG1ldGhvZD1cInBvc3RcIj5cbiAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sIG1iLTJcIiBwbGFjZWhvbGRlcj1cIlRpdGxlXCIgbmFtZT1cInRpdGxlXCIgLz5cbiAgICAgIDx0ZXh0YXJlYSBjbGFzcz1cImZvcm0tY29udHJvbCBtYi0yXCIgcGxhY2Vob2xkZXI9XCJCb2R5XCIgbmFtZT1cImJvZHlcIj48L3RleHRhcmVhPlxuICAgIDxpbnB1dCBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHR5cGU9XCJzdWJtaXRcIiAvPlxuICA8L2Zvcm0+XG5cbjwvZGl2PlxuIiwiaGFzaCI6InZhbGlkYXRpb24td3JpdGluZy10aGUtdmFsaWRhdGlvbi1sb2dpYyJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Store a new blog post.\n *\n * <span class="hljs-doctag">@param</span>  Request  $request\n * <span class="hljs-doctag">@return</span> Response\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span><span class="hljs-params">(Request $request)</span>\n</span>{\n    $validatedData = $request-&gt;validate([\n        <span class="hljs-string">\'title\'</span> =&gt; <span class="hljs-string">\'required|unique:posts|max:255\'</span>,\n        <span class="hljs-string">\'body\'</span> =&gt; <span class="hljs-string">\'required\'</span>,\n    ]);\n\n    <span class="hljs-comment">// The blog post is valid...</span>\n}</code></pre>\n  <p>As you can see, we pass the desired validation rules into the <code>validate</code> method. Again, if the validation fails, the proper response will automatically be generated. If the validation passes, our controller will continue executing normally.</p>\n<p>Alternatively, validation rules may be specified as arrays of rules instead of a single <code>|</code> delimited string:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$validatedData = $request-&gt;validate([\n    <span class="hljs-string">\'title\'</span> =&gt; [<span class="hljs-string">\'required\'</span>, <span class="hljs-string">\'unique:posts\'</span>, <span class="hljs-string">\'max:255\'</span>],\n    <span class="hljs-string">\'body\'</span> =&gt; [<span class="hljs-string">\'required\'</span>],\n]);</code></pre>\n  \n          <p><a name="stopping-on-first-validation-failure"></a></p>\n          <h4>\n            <a href="#stopping-on-first-validation-failure">\n              Stopping On First Validation Failure\n            </a>\n          </h4><p>Sometimes you may wish to stop running validation rules on an attribute after the first validation failure. To do so, assign the <code>bail</code> rule to the attribute:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$request-&gt;validate([\n    <span class="hljs-string">\'title\'</span> =&gt; <span class="hljs-string">\'bail|required|unique:posts|max:255\'</span>,\n    <span class="hljs-string">\'body\'</span> =&gt; <span class="hljs-string">\'required\'</span>,\n]);</code></pre>\n  <p>In this example, if the <code>unique</code> rule on the <code>title</code> attribute fails, the <code>max</code> rule will not be checked. Rules will be validated in the order they are assigned.</p>\n\n          <p><a name="a-note-on-nested-attributes"></a></p>\n          <h4>\n            <a href="#a-note-on-nested-attributes">\n              A Note On Nested Attributes\n            </a>\n          </h4><p>If your HTTP request contains &quot;nested&quot; parameters, you may specify them in your validation rules using &quot;dot&quot; syntax:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$request-&gt;validate([\n    <span class="hljs-string">\'title\'</span> =&gt; <span class="hljs-string">\'required|unique:posts|max:255\'</span>,\n    <span class="hljs-string">\'author.name\'</span> =&gt; <span class="hljs-string">\'required\'</span>,\n    <span class="hljs-string">\'author.description\'</span> =&gt; <span class="hljs-string">\'required\'</span>,\n]);</code></pre>\n  <p><a name="quick-displaying-the-validation-errors"></a></p>\n\n          <p><a name="displaying-the-validation-errors"></a></p>\n          <h3>\n            <a href="#displaying-the-validation-errors">\n              Displaying The Validation Errors\n            </a>\n          </h3><p>So, what if the incoming request parameters do not pass the given validation rules? As mentioned previously, Laravel will automatically redirect the user back to their previous location. In addition, all of the validation errors will automatically be <router-link to="/docs/session#flash-data">flashed to the session</router-link>.</p>\n<p>Again, notice that we did not have to explicitly bind the error messages to the view in our <code>GET</code> route. This is because Laravel will check for errors in the session data, and automatically bind them to the view if they are available. The <code>$errors</code> variable will be an instance of <code>Illuminate\\Support\\MessageBag</code>. For more information on working with this object, <a href="#working-with-error-messages">check out its documentation</a>.</p>\n<p>So, in our example, the user will be redirected to our controller&#39;s <code>create</code> method when validation fails, allowing us to display the error messages in the view:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIElsbHVtaW5hdGVcXEh0dHBcXFJlcXVlc3Q7XG5Sb3V0ZTo6Z2V0KCcvJywgZnVuY3Rpb24oUmVxdWVzdCAkcmVxdWVzdCkge1xuICAgIHJldHVybiB2aWV3KCdfX3Rpbmtlcl9fOjp0aW5rZXJ3ZWxsJyk7XG59KTtcblxuUm91dGU6OnBvc3QoJy8nLCBmdW5jdGlvbihSZXF1ZXN0ICRyZXF1ZXN0KSB7XG4gICAgJHZhbGlkYXRlZERhdGEgPSAkcmVxdWVzdC0+dmFsaWRhdGUoW1xuICAgICAgICAndGl0bGUnID0+ICdyZXF1aXJlZHx1bmlxdWU6cG9zdHN8bWF4OjI1NScsXG4gICAgICAgICdib2R5JyA9PiAncmVxdWlyZWQnLFxuICAgIF0pO1xuXG4gICAgZHVtcCgkdmFsaWRhdGVkRGF0YSk7XG59KTtcbiIsInZpZXdDb2RlIjoiPGxpbmsgaHJlZj1cImh0dHBzOi8vc3RhY2twYXRoLmJvb3RzdHJhcGNkbi5jb20vYm9vdHN0cmFwLzQuNC4xL2Nzcy9ib290c3RyYXAubWluLmNzc1wiIHJlbD1cInN0eWxlc2hlZXRcIj5cbjxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cblxuICA8aDE+Q3JlYXRlIFBvc3Q8L2gxPlxuXG4gIEBpZiAoJGVycm9ycy0+YW55KCkpXG4gICAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCI+XG4gICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICBAZm9yZWFjaCAoJGVycm9ycy0+YWxsKCkgYXMgJGVycm9yKVxuICAgICAgICAgICAgICAgICAgPGxpPnt7ICRlcnJvciB9fTwvbGk+XG4gICAgICAgICAgICAgIEBlbmRmb3JlYWNoXG4gICAgICAgICAgPC91bD5cbiAgICAgIDwvZGl2PlxuICBAZW5kaWZcbiAgPGZvcm0gYWN0aW9uPVwiL1wiIG1ldGhvZD1cInBvc3RcIj5cbiAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sIG1iLTJcIiBwbGFjZWhvbGRlcj1cIlRpdGxlXCIgbmFtZT1cInRpdGxlXCIgLz5cbiAgICAgIDx0ZXh0YXJlYSBjbGFzcz1cImZvcm0tY29udHJvbCBtYi0yXCIgcGxhY2Vob2xkZXI9XCJCb2R5XCIgbmFtZT1cImJvZHlcIj48L3RleHRhcmVhPlxuICAgIDxpbnB1dCBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHR5cGU9XCJzdWJtaXRcIiAvPlxuICA8L2Zvcm0+XG5cbjwvZGl2PlxuIiwiaGFzaCI6InZhbGlkYXRpb24tZGlzcGxheWluZy10aGUtdmFsaWRhdGlvbi1lcnJvcnMifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="xml"><span class="hljs-comment">&lt;!-- /resources/views/post/create.blade.php --&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Create Post<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n\n@if ($errors-&gt;any())\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"alert alert-danger"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>\n            @foreach ($errors-&gt;all() as $error)\n                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-variable">{{ $error }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n            @endforeach\n        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n@endif\n\n<span class="hljs-comment">&lt;!-- Create Post Form --&gt;</span></span></code></pre>\n  \n          <p><a name="the-code-error-code-directive"></a></p>\n          <h4>\n            <a href="#the-code-error-code-directive">\n              The <code>@error</code> Directive\n            </a>\n          </h4><p>You may also use the <code>@error</code> <router-link to="/docs/blade">Blade</router-link> directive to quickly check if validation error messages exist for a given attribute. Within an <code>@error</code> directive, you may echo the <code>$message</code> variable to display the error message:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiaHR0cCIsImNvbnRyb2xsZXJDb2RlIjoidXNlIElsbHVtaW5hdGVcXEh0dHBcXFJlcXVlc3Q7XG5Sb3V0ZTo6Z2V0KCcvJywgZnVuY3Rpb24oUmVxdWVzdCAkcmVxdWVzdCkge1xuICAgIHJldHVybiB2aWV3KCdfX3Rpbmtlcl9fOjp0aW5rZXJ3ZWxsJyk7XG59KTtcblxuUm91dGU6OnBvc3QoJy8nLCBmdW5jdGlvbihSZXF1ZXN0ICRyZXF1ZXN0KSB7XG4gICAgJHZhbGlkYXRlZERhdGEgPSAkcmVxdWVzdC0+dmFsaWRhdGUoW1xuICAgICAgICAndGl0bGUnID0+ICdyZXF1aXJlZHx1bmlxdWU6cG9zdHN8bWF4OjI1NScsXG4gICAgICAgICdib2R5JyA9PiAncmVxdWlyZWQnLFxuICAgIF0pO1xuXG4gICAgZHVtcCgkdmFsaWRhdGVkRGF0YSk7XG59KTtcbiIsInZpZXdDb2RlIjoiPGxpbmsgaHJlZj1cImh0dHBzOi8vc3RhY2twYXRoLmJvb3RzdHJhcGNkbi5jb20vYm9vdHN0cmFwLzQuNC4xL2Nzcy9ib290c3RyYXAubWluLmNzc1wiIHJlbD1cInN0eWxlc2hlZXRcIj5cbjxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cblxuICA8aDE+Q3JlYXRlIFBvc3Q8L2gxPlxuXG4gIEBpZiAoJGVycm9ycy0+YW55KCkpXG4gICAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCI+XG4gICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICBAZm9yZWFjaCAoJGVycm9ycy0+YWxsKCkgYXMgJGVycm9yKVxuICAgICAgICAgICAgICAgICAgPGxpPnt7ICRlcnJvciB9fTwvbGk+XG4gICAgICAgICAgICAgIEBlbmRmb3JlYWNoXG4gICAgICAgICAgPC91bD5cbiAgICAgIDwvZGl2PlxuICBAZW5kaWZcbiAgPGZvcm0gYWN0aW9uPVwiL1wiIG1ldGhvZD1cInBvc3RcIj5cbiAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sIG1iLTIgQGVycm9yKCd0aXRsZScpIGlzLWludmFsaWQgQGVuZGVycm9yXCIgcGxhY2Vob2xkZXI9XCJUaXRsZVwiIG5hbWU9XCJ0aXRsZVwiIC8+XG4gICAgICA8dGV4dGFyZWEgY2xhc3M9XCJmb3JtLWNvbnRyb2wgbWItMiBAZXJyb3IoJ2JvZHknKSBpcy1pbnZhbGlkIEBlbmRlcnJvclwiIHBsYWNlaG9sZGVyPVwiQm9keVwiIG5hbWU9XCJib2R5XCI+PC90ZXh0YXJlYT5cbiAgICA8aW5wdXQgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiB0eXBlPVwic3VibWl0XCIgLz5cbiAgPC9mb3JtPlxuXG48L2Rpdj5cbiIsImhhc2giOiJ2YWxpZGF0aW9uLXRoZS1lcnJvci1kaXJlY3RpdmUifQ==\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="xml"><span class="hljs-comment">&lt;!-- /resources/views/post/create.blade.php --&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"title"</span>&gt;</span>Post Title<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"@error(\'title\') is-invalid @enderror"</span>&gt;</span>\n\n@error(\'title\')\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"alert alert-danger"</span>&gt;</span></span><span class="hljs-template-variable">{{ $message }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n@enderror</span></code></pre>\n  <p><a name="a-note-on-optional-fields"></a></p>\n\n          <p><a name="a-note-on-optional-fields"></a></p>\n          <h3>\n            <a href="#a-note-on-optional-fields">\n              A Note On Optional Fields\n            </a>\n          </h3><p>By default, Laravel includes the <code>TrimStrings</code> and <code>ConvertEmptyStringsToNull</code> middleware in your application&#39;s global middleware stack. These middleware are listed in the stack by the <code>App\\Http\\Kernel</code> class. Because of this, you will often need to mark your &quot;optional&quot; request fields as <code>nullable</code> if you do not want the validator to consider <code>null</code> values as invalid. For example:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$request-&gt;validate([\n    <span class="hljs-string">\'title\'</span> =&gt; <span class="hljs-string">\'required|unique:posts|max:255\'</span>,\n    <span class="hljs-string">\'body\'</span> =&gt; <span class="hljs-string">\'required\'</span>,\n    <span class="hljs-string">\'publish_at\'</span> =&gt; <span class="hljs-string">\'nullable|date\'</span>,\n]);</code></pre>\n  <p>In this example, we are specifying that the <code>publish_at</code> field may be either <code>null</code> or a valid date representation. If the <code>nullable</code> modifier is not added to the rule definition, the validator would consider <code>null</code> an invalid date.</p>\n<p><a name="quick-ajax-requests-and-validation"></a></p>\n\n          <p><a name="ajax-requests-amp-validation"></a></p>\n          <h4>\n            <a href="#ajax-requests-amp-validation">\n              AJAX Requests &amp; Validation\n            </a>\n          </h4><p>In this example, we used a traditional form to send data to the application. However, many applications use AJAX requests. When using the <code>validate</code> method during an AJAX request, Laravel will not generate a redirect response. Instead, Laravel generates a JSON response containing all of the validation errors. This JSON response will be sent with a 422 HTTP status code.</p>\n<p><a name="available-validation-rules"></a></p>\n\n          <p><a name="available-validation-rules"></a></p>\n          <h2>\n            <a href="#available-validation-rules">\n              Available Validation Rules\n            </a>\n          </h2><p>Below is a list of all available validation rules and their function:</p>\n<div class="collection-method-list" markdown="1">\n\n<p><a href="#rule-accepted">Accepted</a>\n<a href="#rule-active-url">Active URL</a>\n<a href="#rule-after">After (Date)</a>\n<a href="#rule-after-or-equal">After Or Equal (Date)</a>\n<a href="#rule-alpha">Alpha</a>\n<a href="#rule-alpha-dash">Alpha Dash</a>\n<a href="#rule-alpha-num">Alpha Numeric</a>\n<a href="#rule-array">Array</a>\n<a href="#rule-bail">Bail</a>\n<a href="#rule-before">Before (Date)</a>\n<a href="#rule-before-or-equal">Before Or Equal (Date)</a>\n<a href="#rule-between">Between</a>\n<a href="#rule-boolean">Boolean</a>\n<a href="#rule-confirmed">Confirmed</a>\n<a href="#rule-date">Date</a>\n<a href="#rule-date-equals">Date Equals</a>\n<a href="#rule-date-format">Date Format</a>\n<a href="#rule-different">Different</a>\n<a href="#rule-digits">Digits</a>\n<a href="#rule-digits-between">Digits Between</a>\n<a href="#rule-dimensions">Dimensions (Image Files)</a>\n<a href="#rule-distinct">Distinct</a>\n<a href="#rule-email">E-Mail</a>\n<a href="#rule-ends-with">Ends With</a>\n<a href="#rule-exists">Exists (Database)</a>\n<a href="#rule-file">File</a>\n<a href="#rule-filled">Filled</a>\n<a href="#rule-gt">Greater Than</a>\n<a href="#rule-gte">Greater Than Or Equal</a>\n<a href="#rule-image">Image (File)</a>\n<a href="#rule-in">In</a>\n<a href="#rule-in-array">In Array</a>\n<a href="#rule-integer">Integer</a>\n<a href="#rule-ip">IP Address</a>\n<a href="#rule-json">JSON</a>\n<a href="#rule-lt">Less Than</a>\n<a href="#rule-lte">Less Than Or Equal</a>\n<a href="#rule-max">Max</a>\n<a href="#rule-mimetypes">MIME Types</a>\n<a href="#rule-mimes">MIME Type By File Extension</a>\n<a href="#rule-min">Min</a>\n<a href="#rule-not-in">Not In</a>\n<a href="#rule-not-regex">Not Regex</a>\n<a href="#rule-nullable">Nullable</a>\n<a href="#rule-numeric">Numeric</a>\n<a href="#rule-password">Password</a>\n<a href="#rule-present">Present</a>\n<a href="#rule-regex">Regular Expression</a>\n<a href="#rule-required">Required</a>\n<a href="#rule-required-if">Required If</a>\n<a href="#rule-required-unless">Required Unless</a>\n<a href="#rule-required-with">Required With</a>\n<a href="#rule-required-with-all">Required With All</a>\n<a href="#rule-required-without">Required Without</a>\n<a href="#rule-required-without-all">Required Without All</a>\n<a href="#rule-same">Same</a>\n<a href="#rule-size">Size</a>\n<a href="#conditionally-adding-rules">Sometimes</a>\n<a href="#rule-starts-with">Starts With</a>\n<a href="#rule-string">String</a>\n<a href="#rule-timezone">Timezone</a>\n<a href="#rule-unique">Unique (Database)</a>\n<a href="#rule-url">URL</a>\n<a href="#rule-uuid">UUID</a></p>\n</div>\n\n<p><a name="rule-accepted"></a></p>\n\n          <p><a name="accepted"></a></p>\n          <h4>\n            <a href="#accepted">\n              accepted\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gdHJ1ZVxuXTtcblxuJHZhbGlkYXRvciA9IFZhbGlkYXRvcjo6bWFrZSgkZGF0YSwgW1xuICAgICdmaWVsZCcgPT4gJ2FjY2VwdGVkJyxcbl0pO1xuXG4kdmFsaWRhdG9yLT5wYXNzZXMoKTtcbiIsImhhc2giOiJ2YWxpZGF0aW9uLWFjY2VwdGVkIn0=\')">Tinker with this code</a><p>The field under validation must be <em>yes</em>, <em>on</em>, <em>1</em>, or <em>true</em>. This is useful for validating &quot;Terms of Service&quot; acceptance.</p>\n<p><a name="rule-active-url"></a></p>\n\n          <p><a name="active_url"></a></p>\n          <h4>\n            <a href="#active_url">\n              active_url\n            </a>\n          </h4><p>The field under validation must have a valid A or AAAA record according to the <code>dns_get_record</code> PHP function. The hostname of the provided URL is extracted using the <code>parse_url</code> PHP function before being passed to <code>dns_get_record</code>.</p>\n<p><a name="rule-after"></a></p>\n\n          <p><a name="after-em-date-em-"></a></p>\n          <h4>\n            <a href="#after-em-date-em-">\n              after:<em>date</em>\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gJzIwMjAtMDEtMDEnXG5dO1xuXG4kdmFsaWRhdG9yID0gVmFsaWRhdG9yOjptYWtlKCRkYXRhLCBbXG4gICAgJ2ZpZWxkJyA9PiAnYWZ0ZXI6MjAxOS0xMi0xMycsXG5dKTtcblxuJHZhbGlkYXRvci0+cGFzc2VzKCk7XG4iLCJoYXNoIjoidmFsaWRhdGlvbi1hZnRlcmRhdGUifQ==\')">Tinker with this code</a><p>The field under validation must be a value after a given date. The dates will be passed into the <code>strtotime</code> PHP function:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'start_date\'</span> =&gt; <span class="hljs-symbol">\'required</span>|date|after:tomorrow\'</code></pre>\n  <p>Instead of passing a date string to be evaluated by <code>strtotime</code>, you may specify another field to compare against the date:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'finish_date\'</span> =&gt; <span class="hljs-symbol">\'required</span>|date|after:start_date\'</code></pre>\n  <p><a name="rule-after-or-equal"></a></p>\n\n          <p><a name="after_or_equal-em-date-em-"></a></p>\n          <h4>\n            <a href="#after_or_equal-em-date-em-">\n              after_or_equal:<em>date</em>\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gJzIwMTktMTItMTMnXG5dO1xuXG4kdmFsaWRhdG9yID0gVmFsaWRhdG9yOjptYWtlKCRkYXRhLCBbXG4gICAgJ2ZpZWxkJyA9PiAnYWZ0ZXJfb3JfZXF1YWw6MjAxOS0xMi0xMycsXG5dKTtcblxuJHZhbGlkYXRvci0+cGFzc2VzKCk7XG4iLCJoYXNoIjoidmFsaWRhdGlvbi1hZnRlcl9vcl9lcXVhbGRhdGUifQ==\')">Tinker with this code</a><p>The field under validation must be a value after or equal to the given date. For more information, see the <a href="#rule-after">after</a> rule.</p>\n<p><a name="rule-alpha"></a></p>\n\n          <p><a name="alpha"></a></p>\n          <h4>\n            <a href="#alpha">\n              alpha\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gJ2FiY2RlZmcnXG5dO1xuXG4kdmFsaWRhdG9yID0gVmFsaWRhdG9yOjptYWtlKCRkYXRhLCBbXG4gICAgJ2ZpZWxkJyA9PiAnYWxwaGEnLFxuXSk7XG5cbiR2YWxpZGF0b3ItPnBhc3NlcygpO1xuIiwiaGFzaCI6InZhbGlkYXRpb24tYWxwaGEifQ==\')">Tinker with this code</a><p>The field under validation must be entirely alphabetic characters.</p>\n<p><a name="rule-alpha-dash"></a></p>\n\n          <p><a name="alpha_dash"></a></p>\n          <h4>\n            <a href="#alpha_dash">\n              alpha_dash\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gJ2FiYy1kZWZnJ1xuXTtcblxuJHZhbGlkYXRvciA9IFZhbGlkYXRvcjo6bWFrZSgkZGF0YSwgW1xuICAgICdmaWVsZCcgPT4gJ2FscGhhX2Rhc2gnLFxuXSk7XG5cbiR2YWxpZGF0b3ItPnBhc3NlcygpO1xuIiwiaGFzaCI6InZhbGlkYXRpb24tYWxwaGFfZGFzaCJ9\')">Tinker with this code</a><p>The field under validation may have alpha-numeric characters, as well as dashes and underscores.</p>\n<p><a name="rule-alpha-num"></a></p>\n\n          <p><a name="alpha_num"></a></p>\n          <h4>\n            <a href="#alpha_num">\n              alpha_num\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gJ2FiYzAxMjMnXG5dO1xuXG4kdmFsaWRhdG9yID0gVmFsaWRhdG9yOjptYWtlKCRkYXRhLCBbXG4gICAgJ2ZpZWxkJyA9PiAnYWxwaGFfbnVtJyxcbl0pO1xuXG4kdmFsaWRhdG9yLT5wYXNzZXMoKTtcbiIsImhhc2giOiJ2YWxpZGF0aW9uLWFscGhhX251bSJ9\')">Tinker with this code</a><p>The field under validation must be entirely alpha-numeric characters.</p>\n<p><a name="rule-array"></a></p>\n\n          <p><a name="array"></a></p>\n          <h4>\n            <a href="#array">\n              array\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gWzEsMiwzXVxuXTtcblxuJHZhbGlkYXRvciA9IFZhbGlkYXRvcjo6bWFrZSgkZGF0YSwgW1xuICAgICdmaWVsZCcgPT4gJ2FycmF5Jyxcbl0pO1xuXG4kdmFsaWRhdG9yLT5wYXNzZXMoKTtcbiIsImhhc2giOiJ2YWxpZGF0aW9uLWFycmF5In0=\')">Tinker with this code</a><p>The field under validation must be a PHP <code>array</code>.</p>\n<p><a name="rule-bail"></a></p>\n\n          <p><a name="bail"></a></p>\n          <h4>\n            <a href="#bail">\n              bail\n            </a>\n          </h4><p>Stop running validation rules after the first validation failure.</p>\n<p><a name="rule-before"></a></p>\n\n          <p><a name="before-em-date-em-"></a></p>\n          <h4>\n            <a href="#before-em-date-em-">\n              before:<em>date</em>\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gJzIwMTktMTItMDEnXG5dO1xuXG4kdmFsaWRhdG9yID0gVmFsaWRhdG9yOjptYWtlKCRkYXRhLCBbXG4gICAgJ2ZpZWxkJyA9PiAnYmVmb3JlOjIwMTktMTItMTMnLFxuXSk7XG5cbiR2YWxpZGF0b3ItPnBhc3NlcygpO1xuIiwiaGFzaCI6InZhbGlkYXRpb24tYmVmb3JlZGF0ZSJ9\')">Tinker with this code</a><p>The field under validation must be a value preceding the given date. The dates will be passed into the PHP <code>strtotime</code> function. In addition, like the <a href="#rule-after"><code>after</code></a> rule, the name of another field under validation may be supplied as the value of <code>date</code>.</p>\n<p><a name="rule-before-or-equal"></a></p>\n\n          <p><a name="before_or_equal-em-date-em-"></a></p>\n          <h4>\n            <a href="#before_or_equal-em-date-em-">\n              before_or_equal:<em>date</em>\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gJzIwMTktMTItMTMnXG5dO1xuXG4kdmFsaWRhdG9yID0gVmFsaWRhdG9yOjptYWtlKCRkYXRhLCBbXG4gICAgJ2ZpZWxkJyA9PiAnYmVmb3JlX29yX2VxdWFsOjIwMTktMTItMTMnLFxuXSk7XG5cbiR2YWxpZGF0b3ItPnBhc3NlcygpO1xuIiwiaGFzaCI6InZhbGlkYXRpb24tYmVmb3JlX29yX2VxdWFsZGF0ZSJ9\')">Tinker with this code</a><p>The field under validation must be a value preceding or equal to the given date. The dates will be passed into the PHP <code>strtotime</code> function. In addition, like the <a href="#rule-after"><code>after</code></a> rule, the name of another field under validation may be supplied as the value of <code>date</code>.</p>\n<p><a name="rule-between"></a></p>\n\n          <p><a name="between-em-min-em-em-max-em-"></a></p>\n          <h4>\n            <a href="#between-em-min-em-em-max-em-">\n              between:<em>min</em>,<em>max</em>\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gNVxuXTtcblxuJHZhbGlkYXRvciA9IFZhbGlkYXRvcjo6bWFrZSgkZGF0YSwgW1xuICAgICdmaWVsZCcgPT4gJ2JldHdlZW46MSwxMCcsXG5dKTtcblxuJHZhbGlkYXRvci0+cGFzc2VzKCk7XG4iLCJoYXNoIjoidmFsaWRhdGlvbi1iZXR3ZWVubWluLG1heCJ9\')">Tinker with this code</a><p>The field under validation must have a size between the given <em>min</em> and <em>max</em>. Strings, numerics, arrays, and files are evaluated in the same fashion as the <a href="#rule-size"><code>size</code></a> rule.</p>\n<p><a name="rule-boolean"></a></p>\n\n          <p><a name="boolean"></a></p>\n          <h4>\n            <a href="#boolean">\n              boolean\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gMVxuXTtcblxuJHZhbGlkYXRvciA9IFZhbGlkYXRvcjo6bWFrZSgkZGF0YSwgW1xuICAgICdmaWVsZCcgPT4gJ2Jvb2xlYW4nLFxuXSk7XG5cbiR2YWxpZGF0b3ItPnBhc3NlcygpO1xuIiwiaGFzaCI6InZhbGlkYXRpb24tYm9vbGVhbiJ9\')">Tinker with this code</a><p>The field under validation must be able to be cast as a boolean. Accepted input are <code>true</code>, <code>false</code>, <code>1</code>, <code>0</code>, <code>&quot;1&quot;</code>, and <code>&quot;0&quot;</code>.</p>\n<p><a name="rule-confirmed"></a></p>\n\n          <p><a name="confirmed"></a></p>\n          <h4>\n            <a href="#confirmed">\n              confirmed\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gJ3Rlc3QnLFxuICAgICdmaWVsZF9jb25maXJtYXRpb24nID0+ICd0ZXN0Jyxcbl07XG5cbiR2YWxpZGF0b3IgPSBWYWxpZGF0b3I6Om1ha2UoJGRhdGEsIFtcbiAgICAnZmllbGQnID0+ICdjb25maXJtZWQnLFxuXSk7XG5cbiR2YWxpZGF0b3ItPnBhc3NlcygpO1xuIiwiaGFzaCI6InZhbGlkYXRpb24tY29uZmlybWVkIn0=\')">Tinker with this code</a><p>The field under validation must have a matching field of <code>foo_confirmation</code>. For example, if the field under validation is <code>password</code>, a matching <code>password_confirmation</code> field must be present in the input.</p>\n<p><a name="rule-date"></a></p>\n\n          <p><a name="date"></a></p>\n          <h4>\n            <a href="#date">\n              date\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gJzIwMTktMDEtMDEnXG5dO1xuXG4kdmFsaWRhdG9yID0gVmFsaWRhdG9yOjptYWtlKCRkYXRhLCBbXG4gICAgJ2ZpZWxkJyA9PiAnZGF0ZScsXG5dKTtcblxuJHZhbGlkYXRvci0+cGFzc2VzKCk7XG4iLCJoYXNoIjoidmFsaWRhdGlvbi1kYXRlIn0=\')">Tinker with this code</a><p>The field under validation must be a valid, non-relative date according to the <code>strtotime</code> PHP function.</p>\n<p><a name="rule-date-equals"></a></p>\n\n          <p><a name="date_equals-em-date-em-"></a></p>\n          <h4>\n            <a href="#date_equals-em-date-em-">\n              date_equals:<em>date</em>\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gJzIwMTktMDEtMDEnXG5dO1xuXG4kdmFsaWRhdG9yID0gVmFsaWRhdG9yOjptYWtlKCRkYXRhLCBbXG4gICAgJ2ZpZWxkJyA9PiAnZGF0ZV9lcXVhbHM6MjAxOS0wMS0wMScsXG5dKTtcblxuJHZhbGlkYXRvci0+cGFzc2VzKCk7XG4iLCJoYXNoIjoidmFsaWRhdGlvbi1kYXRlX2VxdWFsc2RhdGUifQ==\')">Tinker with this code</a><p>The field under validation must be equal to the given date. The dates will be passed into the PHP <code>strtotime</code> function.</p>\n<p><a name="rule-date-format"></a></p>\n\n          <p><a name="date_format-em-format-em-"></a></p>\n          <h4>\n            <a href="#date_format-em-format-em-">\n              date_format:<em>format</em>\n            </a>\n          </h4><p>The field under validation must match the given <em>format</em>. You should use <strong>either</strong> <code>date</code> or <code>date_format</code> when validating a field, not both. This validation rule supports all formats supported by PHP&#39;s <router-link to="https://www.php.net/manual/en/class.datetime.php">DateTime</router-link> class.</p>\n<p><a name="rule-different"></a></p>\n\n          <p><a name="different-em-field-em-"></a></p>\n          <h4>\n            <a href="#different-em-field-em-">\n              different:<em>field</em>\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gJ2ZvbydcbiAgICAnb3RoZXJfZmllbGQnID0+ICdiYXInXG5dO1xuXG4kdmFsaWRhdG9yID0gVmFsaWRhdG9yOjptYWtlKCRkYXRhLCBbXG4gICAgJ2ZpZWxkJyA9PiAnZGlmZmVyZW50OmJhcicsXG5dKTtcblxuJHZhbGlkYXRvci0+cGFzc2VzKCk7XG4iLCJoYXNoIjoidmFsaWRhdGlvbi1kaWZmZXJlbnRmaWVsZCJ9\')">Tinker with this code</a><p>The field under validation must have a different value than <em>field</em>.</p>\n<p><a name="rule-digits"></a></p>\n\n          <p><a name="digits-em-value-em-"></a></p>\n          <h4>\n            <a href="#digits-em-value-em-">\n              digits:<em>value</em>\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gMTAwXG5dO1xuXG4kdmFsaWRhdG9yID0gVmFsaWRhdG9yOjptYWtlKCRkYXRhLCBbXG4gICAgJ2ZpZWxkJyA9PiAnZGlnaXRzOjMnLFxuXSk7XG5cbiR2YWxpZGF0b3ItPnBhc3NlcygpO1xuIiwiaGFzaCI6InZhbGlkYXRpb24tZGlnaXRzdmFsdWUifQ==\')">Tinker with this code</a><p>The field under validation must be <em>numeric</em> and must have an exact length of <em>value</em>.</p>\n<p><a name="rule-digits-between"></a></p>\n\n          <p><a name="digits_between-em-min-em-em-max-em-"></a></p>\n          <h4>\n            <a href="#digits_between-em-min-em-em-max-em-">\n              digits_between:<em>min</em>,<em>max</em>\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gMTAwMVxuXTtcblxuJHZhbGlkYXRvciA9IFZhbGlkYXRvcjo6bWFrZSgkZGF0YSwgW1xuICAgICdmaWVsZCcgPT4gJ2RpZ2l0c19iZXR3ZWVuOjMsNScsXG5dKTtcblxuJHZhbGlkYXRvci0+cGFzc2VzKCk7XG4iLCJoYXNoIjoidmFsaWRhdGlvbi1kaWdpdHNfYmV0d2Vlbm1pbixtYXgifQ==\')">Tinker with this code</a><p>The field under validation must be <em>numeric</em> and must have a length between the given <em>min</em> and <em>max</em>.</p>\n<p><a name="rule-dimensions"></a></p>\n\n          <p><a name="dimensions"></a></p>\n          <h4>\n            <a href="#dimensions">\n              dimensions\n            </a>\n          </h4><p>The file under validation must be an image meeting the dimension constraints as specified by the rule&#39;s parameters:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'avatar\'</span> =&gt; <span class="hljs-string">\'dimensions:min_width=100,min_height=200\'</span></code></pre>\n  <p>Available constraints are: <em>min_width</em>, <em>max_width</em>, <em>min_height</em>, <em>max_height</em>, <em>width</em>, <em>height</em>, <em>ratio</em>.</p>\n<p>A <em>ratio</em> constraint should be represented as width divided by height. This can be specified either by a statement like <code>3/2</code> or a float like <code>1.5</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'avatar\'</span> =&gt; <span class="hljs-string">\'dimensions:ratio=3/2\'</span></code></pre>\n  <p>Since this rule requires several arguments, you may use the <code>Rule::dimensions</code> method to fluently construct the rule:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">use Illuminate<span class="hljs-string">\\Validation\\Rule;</span>\n\nValidator::make($data, [\n    <span class="hljs-string">\'avatar\'</span> =&gt; [\n        <span class="hljs-string">\'required\'</span>,\n        Rule::dimensions<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>maxWidth<span class="hljs-function"><span class="hljs-params">(<span class="hljs-number">1000</span>)</span>-&gt;</span>maxHeight<span class="hljs-function"><span class="hljs-params">(<span class="hljs-number">500</span>)</span>-&gt;</span>ratio(<span class="hljs-number">3</span> / <span class="hljs-number">2</span>),\n    ],\n]);</code></pre>\n  <p><a name="rule-distinct"></a></p>\n\n          <p><a name="distinct"></a></p>\n          <h4>\n            <a href="#distinct">\n              distinct\n            </a>\n          </h4><p>When working with arrays, the field under validation must not have any duplicate values.</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gW1xuICAgICAgICBbJ2lkJyA9PiAxXSxcbiAgICAgICAgWydpZCcgPT4gMl0sXG4gICAgICAgIFsnaWQnID0+IDNdLFxuICAgIF1cbl07XG5cbiR2YWxpZGF0b3IgPSBWYWxpZGF0b3I6Om1ha2UoJGRhdGEsIFtcbiAgICAnZmllbGQuKi5pZCcgPT4gJ2Rpc3RpbmN0Jyxcbl0pO1xuXG4kdmFsaWRhdG9yLT5wYXNzZXMoKTtcbiIsImhhc2giOiJ2YWxpZGF0aW9uLWRpc3RpbmN0In0=\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'foo</span>.*.id\' =&gt; <span class="hljs-symbol">\'distinct\'</span></code></pre>\n  <p><a name="rule-email"></a></p>\n\n          <p><a name="email"></a></p>\n          <h4>\n            <a href="#email">\n              email\n            </a>\n          </h4><p>The field under validation must be formatted as an e-mail address. Under the hood, this validation rule makes use of the <router-link to="https://github.com/egulias/EmailValidator"><code>egulias/email-validator</code></router-link> package for validating the email address. By default the <code>RFCValidation</code> validator is applied, but you can apply other validation styles as well:</p>\n<a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gJ21hcmNlbEBiZXlvbmRjby5kZSdcbl07XG5cbiR2YWxpZGF0b3IgPSBWYWxpZGF0b3I6Om1ha2UoJGRhdGEsIFtcbiAgICAnZmllbGQnID0+ICdlbWFpbCcsXG5dKTtcblxuJHZhbGlkYXRvci0+cGFzc2VzKCk7XG4iLCJoYXNoIjoidmFsaWRhdGlvbi1lbWFpbCJ9\')">Tinker with this code</a>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'email\'</span> =&gt; <span class="hljs-symbol">\'email</span>:rfc,dns\'</code></pre>\n  <p>The example above will apply the <code>RFCValidation</code> and <code>DNSCheckValidation</code> validations. Here&#39;s a full list of validation styles you can apply:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-bullet">- </span><span class="hljs-code">`rfc`</span>: <span class="hljs-code">`RFCValidation`</span>\n<span class="hljs-bullet">- </span><span class="hljs-code">`strict`</span>: <span class="hljs-code">`NoRFCWarningsValidation`</span>\n<span class="hljs-bullet">- </span><span class="hljs-code">`dns`</span>: <span class="hljs-code">`DNSCheckValidation`</span>\n<span class="hljs-bullet">- </span><span class="hljs-code">`spoof`</span>: <span class="hljs-code">`SpoofCheckValidation`</span>\n<span class="hljs-bullet">- </span><span class="hljs-code">`filter`</span>: <span class="hljs-code">`FilterEmailValidation`</span></code></pre>\n  <p>The <code>filter</code> validator, which uses PHP&#39;s <code>filter_var</code> function under the hood, ships with Laravel and is Laravel&#39;s pre-5.8 behavior. The <code>dns</code> and <code>spoof</code> validators require the PHP <code>intl</code> extension.</p>\n<p><a name="rule-ends-with"></a></p>\n\n          <p><a name="ends_with-em-foo-em-em-bar-em-"></a></p>\n          <h4>\n            <a href="#ends_with-em-foo-em-em-bar-em-">\n              ends_with:<em>foo</em>,<em>bar</em>,...\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gJ21hcmNlbEBiZXlvbmRjby5kZSdcbl07XG5cbiR2YWxpZGF0b3IgPSBWYWxpZGF0b3I6Om1ha2UoJGRhdGEsIFtcbiAgICAnZmllbGQnID0+ICdlbmRzX3dpdGg6YmV5b25kY28uZGUnLFxuXSk7XG5cbiR2YWxpZGF0b3ItPnBhc3NlcygpO1xuIiwiaGFzaCI6InZhbGlkYXRpb24tZW5kc193aXRoZm9vLGJhciwifQ==\')">Tinker with this code</a><p>The field under validation must end with one of the given values.</p>\n<p><a name="rule-exists"></a></p>\n\n          <p><a name="exists-em-table-em-em-column-em-"></a></p>\n          <h4>\n            <a href="#exists-em-table-em-em-column-em-">\n              exists:<em>table</em>,<em>column</em>\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gJ21hcmNlbEBiZXlvbmRjby5kZSdcbl07XG5cblVzZXI6OmNyZWF0ZShbXG4gICAgJ25hbWUnID0+ICdNYXJjZWwnLFxuICAgICdlbWFpbCcgPT4gJ21hcmNlbEBiZXlvbmRjby5kZScsXG4gICAgJ3Bhc3N3b3JkJyA9PiAndGVzdCcsXG5dKTtcblxuJHZhbGlkYXRvciA9IFZhbGlkYXRvcjo6bWFrZSgkZGF0YSwgW1xuICAgICdmaWVsZCcgPT4gJ2V4aXN0czp1c2VycyxlbWFpbCcsXG5dKTtcblxuJHZhbGlkYXRvci0+cGFzc2VzKCk7XG4iLCJoYXNoIjoidmFsaWRhdGlvbi1leGlzdHN0YWJsZSxjb2x1bW4ifQ==\')">Tinker with this code</a><p>The field under validation must exist on a given database table.</p>\n\n          <p><a name="basic-usage-of-exists-rule"></a></p>\n          <h4>\n            <a href="#basic-usage-of-exists-rule">\n              Basic Usage Of Exists Rule\n            </a>\n          </h4>\n    <pre class="language-php" v-pre><code class="language-php">\'<span class="hljs-keyword">state</span>\' =&gt; \'exists:states\'</code></pre>\n  <p>If the <code>column</code> option is not specified, the field name will be used.</p>\n\n          <p><a name="specifying-a-custom-column-name"></a></p>\n          <h4>\n            <a href="#specifying-a-custom-column-name">\n              Specifying A Custom Column Name\n            </a>\n          </h4>\n    <pre class="language-php" v-pre><code class="language-php">\'<span class="hljs-keyword">state</span>\' =&gt; \'exists:states,abbreviation\'</code></pre>\n  <p>Occasionally, you may need to specify a specific database connection to be used for the <code>exists</code> query. You can accomplish this by prepending the connection name to the table name using &quot;dot&quot; syntax:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'email\'</span> =&gt; <span class="hljs-symbol">\'exists</span>:connection.staff,email\'</code></pre>\n  <p>Instead of specifying the table name directly, you may specify the Eloquent model which should be used to determine the table name:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'user_id\'</span> =&gt; <span class="hljs-symbol">\'exists</span>:<span class="hljs-type">App</span>\\<span class="hljs-type">User</span>,id\'</code></pre>\n  <p>If you would like to customize the query executed by the validation rule, you may use the <code>Rule</code> class to fluently define the rule. In this example, we&#39;ll also specify the validation rules as an array instead of using the <code>|</code> character to delimit them:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Validation</span>\\<span class="hljs-title">Rule</span>;\n\nValidator::make($data, [\n    <span class="hljs-string">\'email\'</span> =&gt; [\n        <span class="hljs-string">\'required\'</span>,\n        Rule::exists(<span class="hljs-string">\'staff\'</span>)-&gt;where(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($query)</span> </span>{\n            $query-&gt;where(<span class="hljs-string">\'account_id\'</span>, <span class="hljs-number">1</span>);\n        }),\n    ],\n]);</code></pre>\n  <p><a name="rule-file"></a></p>\n\n          <p><a name="file"></a></p>\n          <h4>\n            <a href="#file">\n              file\n            </a>\n          </h4><p>The field under validation must be a successfully uploaded file.</p>\n<p><a name="rule-filled"></a></p>\n\n          <p><a name="filled"></a></p>\n          <h4>\n            <a href="#filled">\n              filled\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gJ3Rlc3QnXG5dO1xuXG4kdmFsaWRhdG9yID0gVmFsaWRhdG9yOjptYWtlKCRkYXRhLCBbXG4gICAgJ2ZpZWxkJyA9PiAnZmlsbGVkJyxcbl0pO1xuXG4kdmFsaWRhdG9yLT5wYXNzZXMoKTtcbiIsImhhc2giOiJ2YWxpZGF0aW9uLWZpbGxlZCJ9\')">Tinker with this code</a><p>The field under validation must not be empty when it is present.</p>\n<p><a name="rule-gt"></a></p>\n\n          <p><a name="gt-em-field-em-"></a></p>\n          <h4>\n            <a href="#gt-em-field-em-">\n              gt:<em>field</em>\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gMTAsXG4gICAgJ290aGVyX2ZpZWxkJyA9PiAxLFxuXTtcblxuJHZhbGlkYXRvciA9IFZhbGlkYXRvcjo6bWFrZSgkZGF0YSwgW1xuICAgICdmaWVsZCcgPT4gJ2d0Om90aGVyX2ZpZWxkJyxcbl0pO1xuXG4kdmFsaWRhdG9yLT5wYXNzZXMoKTtcbiIsImhhc2giOiJ2YWxpZGF0aW9uLWd0ZmllbGQifQ==\')">Tinker with this code</a><p>The field under validation must be greater than the given <em>field</em>. The two fields must be of the same type. Strings, numerics, arrays, and files are evaluated using the same conventions as the <a href="#rule-size"><code>size</code></a> rule.</p>\n<p><a name="rule-gte"></a></p>\n\n          <p><a name="gte-em-field-em-"></a></p>\n          <h4>\n            <a href="#gte-em-field-em-">\n              gte:<em>field</em>\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gMTAsXG4gICAgJ290aGVyX2ZpZWxkJyA9PiAxLFxuXTtcblxuJHZhbGlkYXRvciA9IFZhbGlkYXRvcjo6bWFrZSgkZGF0YSwgW1xuICAgICdmaWVsZCcgPT4gJ2d0ZTpvdGhlcl9maWVsZCcsXG5dKTtcblxuJHZhbGlkYXRvci0+cGFzc2VzKCk7XG4iLCJoYXNoIjoidmFsaWRhdGlvbi1ndGVmaWVsZCJ9\')">Tinker with this code</a><p>The field under validation must be greater than or equal to the given <em>field</em>. The two fields must be of the same type. Strings, numerics, arrays, and files are evaluated using the same conventions as the <a href="#rule-size"><code>size</code></a> rule.</p>\n<p><a name="rule-image"></a></p>\n\n          <p><a name="image"></a></p>\n          <h4>\n            <a href="#image">\n              image\n            </a>\n          </h4><p>The file under validation must be an image (jpeg, png, bmp, gif, svg, or webp)</p>\n<p><a name="rule-in"></a></p>\n\n          <p><a name="in-em-foo-em-em-bar-em-"></a></p>\n          <h4>\n            <a href="#in-em-foo-em-em-bar-em-">\n              in:<em>foo</em>,<em>bar</em>,...\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gJ0NMSScsXG5dO1xuXG4kdmFsaWRhdG9yID0gVmFsaWRhdG9yOjptYWtlKCRkYXRhLCBbXG4gICAgJ2ZpZWxkJyA9PiBbXG4gICAgICAgIElsbHVtaW5hdGVWYWxpZGF0aW9uUnVsZTo6aW4oWydIVFRQJywgJ0NMSSddKVxuICAgIF1cbl0pO1xuXG4kdmFsaWRhdG9yLT5wYXNzZXMoKTtcbiIsImhhc2giOiJ2YWxpZGF0aW9uLWluZm9vLGJhciwifQ==\')">Tinker with this code</a><p>The field under validation must be included in the given list of values. Since this rule often requires you to <code>implode</code> an array, the <code>Rule::in</code> method may be used to fluently construct the rule:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Validation</span>\\<span class="hljs-title">Rule</span>;\n\nValidator::make($data, [\n    <span class="hljs-string">\'zones\'</span> =&gt; [\n        <span class="hljs-string">\'required\'</span>,\n        Rule::in([<span class="hljs-string">\'first-zone\'</span>, <span class="hljs-string">\'second-zone\'</span>]),\n    ],\n]);</code></pre>\n  <p><a name="rule-in-array"></a></p>\n\n          <p><a name="in_array-em-anotherfield-em-"></a></p>\n          <h4>\n            <a href="#in_array-em-anotherfield-em-">\n              in_array:<em>anotherfield</em>.*\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gJ0NMSScsXG4gICAgJ290aGVyX2ZpZWxkJyA9PiBbJ0hUVFAnLCAnQ0xJJ11cbl07XG5cbiR2YWxpZGF0b3IgPSBWYWxpZGF0b3I6Om1ha2UoJGRhdGEsIFtcbiAgICAnZmllbGQnID0+ICdpbl9hcnJheTpvdGhlcl9maWVsZCcsXG5dKTtcblxuJHZhbGlkYXRvci0+cGFzc2VzKCk7XG4iLCJoYXNoIjoidmFsaWRhdGlvbi1pbl9hcnJheWFub3RoZXJmaWVsZCJ9\')">Tinker with this code</a><p>The field under validation must exist in <em>anotherfield</em>&#39;s values.</p>\n<p><a name="rule-integer"></a></p>\n\n          <p><a name="integer"></a></p>\n          <h4>\n            <a href="#integer">\n              integer\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gMTIzLFxuXTtcblxuJHZhbGlkYXRvciA9IFZhbGlkYXRvcjo6bWFrZSgkZGF0YSwgW1xuICAgICdmaWVsZCcgPT4gJ2ludGVnZXInLFxuXSk7XG5cbiR2YWxpZGF0b3ItPnBhc3NlcygpO1xuIiwiaGFzaCI6InZhbGlkYXRpb24taW50ZWdlciJ9\')">Tinker with this code</a><p>The field under validation must be an integer.</p>\n<p><a name="rule-ip"></a></p>\n\n          <p><a name="ip"></a></p>\n          <h4>\n            <a href="#ip">\n              ip\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gJzEyNy4wLjAuMScsXG5dO1xuXG4kdmFsaWRhdG9yID0gVmFsaWRhdG9yOjptYWtlKCRkYXRhLCBbXG4gICAgJ2ZpZWxkJyA9PiAnaXAnLFxuXSk7XG5cbiR2YWxpZGF0b3ItPnBhc3NlcygpO1xuIiwiaGFzaCI6InZhbGlkYXRpb24taXAifQ==\')">Tinker with this code</a><p>The field under validation must be an IP address.</p>\n\n          <p><a name="ipv4"></a></p>\n          <h4>\n            <a href="#ipv4">\n              ipv4\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gJzEyNy4wLjAuMScsXG5dO1xuXG4kdmFsaWRhdG9yID0gVmFsaWRhdG9yOjptYWtlKCRkYXRhLCBbXG4gICAgJ2ZpZWxkJyA9PiAnaXB2NCcsXG5dKTtcblxuJHZhbGlkYXRvci0+cGFzc2VzKCk7XG4iLCJoYXNoIjoidmFsaWRhdGlvbi1pcHY0In0=\')">Tinker with this code</a><p>The field under validation must be an IPv4 address.</p>\n\n          <p><a name="ipv6"></a></p>\n          <h4>\n            <a href="#ipv6">\n              ipv6\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gJzIwMDE6ZGI4Ojo4YTJlOjM3MDo3MzM0Jyxcbl07XG5cbiR2YWxpZGF0b3IgPSBWYWxpZGF0b3I6Om1ha2UoJGRhdGEsIFtcbiAgICAnZmllbGQnID0+ICdpcHY2Jyxcbl0pO1xuXG4kdmFsaWRhdG9yLT5wYXNzZXMoKTtcbiIsImhhc2giOiJ2YWxpZGF0aW9uLWlwdjYifQ==\')">Tinker with this code</a><p>The field under validation must be an IPv6 address.</p>\n<p><a name="rule-json"></a></p>\n\n          <p><a name="json"></a></p>\n          <h4>\n            <a href="#json">\n              json\n            </a>\n          </h4><p>The field under validation must be a valid JSON string.</p>\n<p><a name="rule-lt"></a></p>\n\n          <p><a name="lt-em-field-em-"></a></p>\n          <h4>\n            <a href="#lt-em-field-em-">\n              lt:<em>field</em>\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gJzEwJyxcbiAgICAnb3RoZXJfZmllbGQnID0+ICcxMDAnLFxuXTtcblxuJHZhbGlkYXRvciA9IFZhbGlkYXRvcjo6bWFrZSgkZGF0YSwgW1xuICAgICdmaWVsZCcgPT4gJ2x0Om90aGVyX2ZpZWxkJyxcbl0pO1xuXG4kdmFsaWRhdG9yLT5wYXNzZXMoKTtcbiIsImhhc2giOiJ2YWxpZGF0aW9uLWx0ZmllbGQifQ==\')">Tinker with this code</a><p>The field under validation must be less than the given <em>field</em>. The two fields must be of the same type. Strings, numerics, arrays, and files are evaluated using the same conventions as the <a href="#rule-size"><code>size</code></a> rule.</p>\n<p><a name="rule-lte"></a></p>\n\n          <p><a name="lte-em-field-em-"></a></p>\n          <h4>\n            <a href="#lte-em-field-em-">\n              lte:<em>field</em>\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gJzEwJyxcbiAgICAnb3RoZXJfZmllbGQnID0+ICcxMDAnLFxuXTtcblxuJHZhbGlkYXRvciA9IFZhbGlkYXRvcjo6bWFrZSgkZGF0YSwgW1xuICAgICdmaWVsZCcgPT4gJ2x0ZTpvdGhlcl9maWVsZCcsXG5dKTtcblxuJHZhbGlkYXRvci0+cGFzc2VzKCk7XG4iLCJoYXNoIjoidmFsaWRhdGlvbi1sdGVmaWVsZCJ9\')">Tinker with this code</a><p>The field under validation must be less than or equal to the given <em>field</em>. The two fields must be of the same type. Strings, numerics, arrays, and files are evaluated using the same conventions as the <a href="#rule-size"><code>size</code></a> rule.</p>\n<p><a name="rule-max"></a></p>\n\n          <p><a name="max-em-value-em-"></a></p>\n          <h4>\n            <a href="#max-em-value-em-">\n              max:<em>value</em>\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gJzEwJyxcbl07XG5cbiR2YWxpZGF0b3IgPSBWYWxpZGF0b3I6Om1ha2UoJGRhdGEsIFtcbiAgICAnZmllbGQnID0+ICdtYXg6MTAnLFxuXSk7XG5cbiR2YWxpZGF0b3ItPnBhc3NlcygpO1xuIiwiaGFzaCI6InZhbGlkYXRpb24tbWF4dmFsdWUifQ==\')">Tinker with this code</a><p>The field under validation must be less than or equal to a maximum <em>value</em>. Strings, numerics, arrays, and files are evaluated in the same fashion as the <a href="#rule-size"><code>size</code></a> rule.</p>\n<p><a name="rule-mimetypes"></a></p>\n\n          <p><a name="mimetypes-em-text-plain-em-"></a></p>\n          <h4>\n            <a href="#mimetypes-em-text-plain-em-">\n              mimetypes:<em>text/plain</em>,...\n            </a>\n          </h4><p>The file under validation must match one of the given MIME types:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'video\'</span> =&gt; <span class="hljs-symbol">\'mimetypes</span>:video/avi,video/mpeg,video/quicktime\'</code></pre>\n  <p>To determine the MIME type of the uploaded file, the file&#39;s contents will be read and the framework will attempt to guess the MIME type, which may be different from the client provided MIME type.</p>\n<p><a name="rule-mimes"></a></p>\n\n          <p><a name="mimes-em-foo-em-em-bar-em-"></a></p>\n          <h4>\n            <a href="#mimes-em-foo-em-em-bar-em-">\n              mimes:<em>foo</em>,<em>bar</em>,...\n            </a>\n          </h4><p>The file under validation must have a MIME type corresponding to one of the listed extensions.</p>\n\n          <p><a name="basic-usage-of-mime-rule"></a></p>\n          <h4>\n            <a href="#basic-usage-of-mime-rule">\n              Basic Usage Of MIME Rule\n            </a>\n          </h4>\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'photo\'</span> =&gt; <span class="hljs-symbol">\'mimes</span>:jpeg,bmp,png\'</code></pre>\n  <p>Even though you only need to specify the extensions, this rule actually validates against the MIME type of the file by reading the file&#39;s contents and guessing its MIME type.</p>\n<p>A full listing of MIME types and their corresponding extensions may be found at the following location: <router-link to="https://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types">https://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types</router-link></p>\n<p><a name="rule-min"></a></p>\n\n          <p><a name="min-em-value-em-"></a></p>\n          <h4>\n            <a href="#min-em-value-em-">\n              min:<em>value</em>\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gJzEwJyxcbl07XG5cbiR2YWxpZGF0b3IgPSBWYWxpZGF0b3I6Om1ha2UoJGRhdGEsIFtcbiAgICAnZmllbGQnID0+ICdtaW46MTAnLFxuXSk7XG5cbiR2YWxpZGF0b3ItPnBhc3NlcygpO1xuIiwiaGFzaCI6InZhbGlkYXRpb24tbWludmFsdWUifQ==\')">Tinker with this code</a><p>The field under validation must have a minimum <em>value</em>. Strings, numerics, arrays, and files are evaluated in the same fashion as the <a href="#rule-size"><code>size</code></a> rule.</p>\n<p><a name="rule-not-in"></a></p>\n\n          <p><a name="not_in-em-foo-em-em-bar-em-"></a></p>\n          <h4>\n            <a href="#not_in-em-foo-em-em-bar-em-">\n              not_in:<em>foo</em>,<em>bar</em>,...\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gJ2Nob2NvbGF0ZScsXG5dO1xuXG4kdmFsaWRhdG9yID0gVmFsaWRhdG9yOjptYWtlKCRkYXRhLCBbXG4gICAgJ2ZpZWxkJyA9PiBbXG4gICAgICAgIElsbHVtaW5hdGVWYWxpZGF0aW9uUnVsZTo6bm90SW4oWydzcHJpbmtsZXMnLCAnY2hlcnJpZXMnXSksXG4gICAgXSxcbl0pO1xuXG4kdmFsaWRhdG9yLT5wYXNzZXMoKTtcbiIsImhhc2giOiJ2YWxpZGF0aW9uLW5vdF9pbmZvbyxiYXIsIn0=\')">Tinker with this code</a><p>The field under validation must not be included in the given list of values. The <code>Rule::notIn</code> method may be used to fluently construct the rule:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Validation</span>\\<span class="hljs-title">Rule</span>;\n\nValidator::make($data, [\n    <span class="hljs-string">\'toppings\'</span> =&gt; [\n        <span class="hljs-string">\'required\'</span>,\n        Rule::notIn([<span class="hljs-string">\'sprinkles\'</span>, <span class="hljs-string">\'cherries\'</span>]),\n    ],\n]);</code></pre>\n  <p><a name="rule-not-regex"></a></p>\n\n          <p><a name="not_regex-em-pattern-em-"></a></p>\n          <h4>\n            <a href="#not_regex-em-pattern-em-">\n              not_regex:<em>pattern</em>\n            </a>\n          </h4><p>The field under validation must not match the given regular expression.</p>\n<p>Internally, this rule uses the PHP <code>preg_match</code> function. The pattern specified should obey the same formatting required by <code>preg_match</code> and thus also include valid delimiters. For example: <code>&#39;email&#39; =&gt; &#39;not_regex:/^.+$/i&#39;</code>.</p>\n<p><strong>Note:</strong> When using the <code>regex</code> / <code>not_regex</code> patterns, it may be necessary to specify rules in an array instead of using pipe delimiters, especially if the regular expression contains a pipe character.</p>\n<p><a name="rule-nullable"></a></p>\n\n          <p><a name="nullable"></a></p>\n          <h4>\n            <a href="#nullable">\n              nullable\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gbnVsbCxcbl07XG5cbiR2YWxpZGF0b3IgPSBWYWxpZGF0b3I6Om1ha2UoJGRhdGEsIFtcbiAgICAnZmllbGQnID0+ICdudWxsYWJsZScsXG5dKTtcblxuJHZhbGlkYXRvci0+cGFzc2VzKCk7XG4iLCJoYXNoIjoidmFsaWRhdGlvbi1udWxsYWJsZSJ9\')">Tinker with this code</a><p>The field under validation may be <code>null</code>. This is particularly useful when validating primitive such as strings and integers that can contain <code>null</code> values.</p>\n<p><a name="rule-numeric"></a></p>\n\n          <p><a name="numeric"></a></p>\n          <h4>\n            <a href="#numeric">\n              numeric\n            </a>\n          </h4><a href="" \n    class="text-white inline-block px-4 py-2 bg-blue-300 rounded shadow"\n    @click.prevent="runCode(\'eyJtb2RlIjoiY2xpIiwiY2xpQ29kZSI6IiRkYXRhID0gW1xuICAgICdmaWVsZCcgPT4gJzEwJyxcbl07XG5cbiR2YWxpZGF0b3IgPSBWYWxpZGF0b3I6Om1ha2UoJGRhdGEsIFtcbiAgICAnZmllbGQnID0+ICdudW1lcmljJyxcbl0pO1xuXG4kdmFsaWRhdG9yLT5wYXNzZXMoKTtcbiIsImhhc2giOiJ2YWxpZGF0aW9uLW51bWVyaWMifQ==\')">Tinker with this code</a><p>The field under validation must be numeric.</p>\n<p><a name="rule-password"></a></p>\n\n          <p><a name="password"></a></p>\n          <h4>\n            <a href="#password">\n              password\n            </a>\n          </h4><p>The field under validation must match the authenticated user&#39;s password. You may specify an authentication guard using the rule&#39;s first parameter:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'password\'</span> =&gt; <span class="hljs-symbol">\'password</span>:api\'</code></pre>\n  <p><a name="rule-present"></a></p>\n\n          <p><a name="present"></a></p>\n          <h4>\n            <a href="#present">\n              present\n            </a>\n          </h4><p>The field under validation must be present in the input data but can be empty.</p>\n<p><a name="rule-regex"></a></p>\n\n          <p><a name="regex-em-pattern-em-"></a></p>\n          <h4>\n            <a href="#regex-em-pattern-em-">\n              regex:<em>pattern</em>\n            </a>\n          </h4><p>The field under validation must match the given regular expression.</p>\n<p>Internally, this rule uses the PHP <code>preg_match</code> function. The pattern specified should obey the same formatting required by <code>preg_match</code> and thus also include valid delimiters. For example: <code>&#39;email&#39; =&gt; &#39;regex:/^.+@.+$/i&#39;</code>.</p>\n<p><strong>Note:</strong> When using the <code>regex</code> / <code>not_regex</code> patterns, it may be necessary to specify rules in an array instead of using pipe delimiters, especially if the regular expression contains a pipe character.</p>\n<p><a name="rule-required"></a></p>\n\n          <p><a name="required"></a></p>\n          <h4>\n            <a href="#required">\n              required\n            </a>\n          </h4><p>The field under validation must be present in the input data and not empty. A field is considered &quot;empty&quot; if one of the following conditions are true:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">- The <span class="hljs-built_in">value</span> is `<span class="hljs-literal">null</span>`.\n- The <span class="hljs-built_in">value</span> is <span class="hljs-keyword">an</span> <span class="hljs-literal">empty</span> <span class="hljs-keyword">string</span>.\n- The <span class="hljs-built_in">value</span> is <span class="hljs-keyword">an</span> <span class="hljs-literal">empty</span> array <span class="hljs-keyword">or</span> <span class="hljs-literal">empty</span> `Countable` object.\n- The <span class="hljs-built_in">value</span> is <span class="hljs-keyword">an</span> uploaded <span class="hljs-built_in">file</span> <span class="hljs-keyword">with</span> no path.</code></pre>\n  <p><a name="rule-required-if"></a></p>\n\n          <p><a name="required_if-em-anotherfield-em-em-value-em-"></a></p>\n          <h4>\n            <a href="#required_if-em-anotherfield-em-em-value-em-">\n              required_if:<em>anotherfield</em>,<em>value</em>,...\n            </a>\n          </h4><p>The field under validation must be present and not empty if the <em>anotherfield</em> field is equal to any <em>value</em>.</p>\n<p>If you would like to construct a more complex condition for the <code>required_if</code> rule, you may use the <code>Rule::requiredIf</code> method. This methods accepts a boolean or a Closure. When passed a Closure, the Closure should return <code>true</code> or <code>false</code> to indicate if the field under validation is required:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Validation</span>\\<span class="hljs-title">Rule</span>;\n\nValidator::make($request-&gt;all(), [\n    <span class="hljs-string">\'role_id\'</span> =&gt; Rule::requiredIf($request-&gt;user()-&gt;is_admin),\n]);\n\nValidator::make($request-&gt;all(), [\n    <span class="hljs-string">\'role_id\'</span> =&gt; Rule::requiredIf(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> <span class="hljs-title">use</span> <span class="hljs-params">($request)</span> </span>{\n        <span class="hljs-keyword">return</span> $request-&gt;user()-&gt;is_admin;\n    }),\n]);</code></pre>\n  <p><a name="rule-required-unless"></a></p>\n\n          <p><a name="required_unless-em-anotherfield-em-em-value-em-"></a></p>\n          <h4>\n            <a href="#required_unless-em-anotherfield-em-em-value-em-">\n              required_unless:<em>anotherfield</em>,<em>value</em>,...\n            </a>\n          </h4><p>The field under validation must be present and not empty unless the <em>anotherfield</em> field is equal to any <em>value</em>.</p>\n<p><a name="rule-required-with"></a></p>\n\n          <p><a name="required_with-em-foo-em-em-bar-em-"></a></p>\n          <h4>\n            <a href="#required_with-em-foo-em-em-bar-em-">\n              required_with:<em>foo</em>,<em>bar</em>,...\n            </a>\n          </h4><p>The field under validation must be present and not empty <em>only if</em> any of the other specified fields are present.</p>\n<p><a name="rule-required-with-all"></a></p>\n\n          <p><a name="required_with_all-em-foo-em-em-bar-em-"></a></p>\n          <h4>\n            <a href="#required_with_all-em-foo-em-em-bar-em-">\n              required_with_all:<em>foo</em>,<em>bar</em>,...\n            </a>\n          </h4><p>The field under validation must be present and not empty <em>only if</em> all of the other specified fields are present.</p>\n<p><a name="rule-required-without"></a></p>\n\n          <p><a name="required_without-em-foo-em-em-bar-em-"></a></p>\n          <h4>\n            <a href="#required_without-em-foo-em-em-bar-em-">\n              required_without:<em>foo</em>,<em>bar</em>,...\n            </a>\n          </h4><p>The field under validation must be present and not empty <em>only when</em> any of the other specified fields are not present.</p>\n<p><a name="rule-required-without-all"></a></p>\n\n          <p><a name="required_without_all-em-foo-em-em-bar-em-"></a></p>\n          <h4>\n            <a href="#required_without_all-em-foo-em-em-bar-em-">\n              required_without_all:<em>foo</em>,<em>bar</em>,...\n            </a>\n          </h4><p>The field under validation must be present and not empty <em>only when</em> all of the other specified fields are not present.</p>\n<p><a name="rule-same"></a></p>\n\n          <p><a name="same-em-field-em-"></a></p>\n          <h4>\n            <a href="#same-em-field-em-">\n              same:<em>field</em>\n            </a>\n          </h4><p>The given <em>field</em> must match the field under validation.</p>\n<p><a name="rule-size"></a></p>\n\n          <p><a name="size-em-value-em-"></a></p>\n          <h4>\n            <a href="#size-em-value-em-">\n              size:<em>value</em>\n            </a>\n          </h4><p>The field under validation must have a size matching the given <em>value</em>. For string data, <em>value</em> corresponds to the number of characters. For numeric data, <em>value</em> corresponds to a given integer value. For an array, <em>size</em> corresponds to the <code>count</code> of the array. For files, <em>size</em> corresponds to the file size in kilobytes.</p>\n<p><a name="rule-starts-with"></a></p>\n\n          <p><a name="starts_with-em-foo-em-em-bar-em-"></a></p>\n          <h4>\n            <a href="#starts_with-em-foo-em-em-bar-em-">\n              starts_with:<em>foo</em>,<em>bar</em>,...\n            </a>\n          </h4><p>The field under validation must start with one of the given values.</p>\n<p><a name="rule-string"></a></p>\n\n          <p><a name="string"></a></p>\n          <h4>\n            <a href="#string">\n              string\n            </a>\n          </h4><p>The field under validation must be a string. If you would like to allow the field to also be <code>null</code>, you should assign the <code>nullable</code> rule to the field.</p>\n<p><a name="rule-timezone"></a></p>\n\n          <p><a name="timezone"></a></p>\n          <h4>\n            <a href="#timezone">\n              timezone\n            </a>\n          </h4><p>The field under validation must be a valid timezone identifier according to the <code>timezone_identifiers_list</code> PHP function.</p>\n<p><a name="rule-unique"></a></p>\n\n          <p><a name="unique-em-table-em-em-column-em-em-except-em-em-idcolumn-em-"></a></p>\n          <h4>\n            <a href="#unique-em-table-em-em-column-em-em-except-em-em-idcolumn-em-">\n              unique:<em>table</em>,<em>column</em>,<em>except</em>,<em>idColumn</em>\n            </a>\n          </h4><p>The field under validation must not exist within the given database table.</p>\n<p><strong>Specifying A Custom Table / Column Name:</strong></p>\n<p>Instead of specifying the table name directly, you may specify the Eloquent model which should be used to determine the table name:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'email\'</span> =&gt; <span class="hljs-symbol">\'unique</span>:<span class="hljs-type">App</span>\\<span class="hljs-type">User</span>,email_address\'</code></pre>\n  <p>The <code>column</code> option may be used to specify the field&#39;s corresponding database column. If the <code>column</code> option is not specified, the field name will be used.</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'email\'</span> =&gt; <span class="hljs-symbol">\'unique</span>:users,email_address\'</code></pre>\n  <p><strong>Custom Database Connection</strong></p>\n<p>Occasionally, you may need to set a custom connection for database queries made by the Validator. As seen above, setting <code>unique:users</code> as a validation rule will use the default database connection to query the database. To override this, specify the connection and the table name using &quot;dot&quot; syntax:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'email\'</span> =&gt; <span class="hljs-symbol">\'unique</span>:connection.users,email_address\'</code></pre>\n  <p><strong>Forcing A Unique Rule To Ignore A Given ID:</strong></p>\n<p>Sometimes, you may wish to ignore a given ID during the unique check. For example, consider an &quot;update profile&quot; screen that includes the user&#39;s name, e-mail address, and location. You will probably want to verify that the e-mail address is unique. However, if the user only changes the name field and not the e-mail field, you do not want a validation error to be thrown because the user is already the owner of the e-mail address.</p>\n<p>To instruct the validator to ignore the user&#39;s ID, we&#39;ll use the <code>Rule</code> class to fluently define the rule. In this example, we&#39;ll also specify the validation rules as an array instead of using the <code>|</code> character to delimit the rules:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Validation</span>\\<span class="hljs-title">Rule</span>;\n\nValidator::make($data, [\n    <span class="hljs-string">\'email\'</span> =&gt; [\n        <span class="hljs-string">\'required\'</span>,\n        Rule::unique(<span class="hljs-string">\'users\'</span>)-&gt;ignore($user-&gt;id),\n    ],\n]);</code></pre>\n  <blockquote>\n<p>{note} You should never pass any user controlled request input into the <code>ignore</code> method. Instead, you should only pass a system generated unique ID such as an auto-incrementing ID or UUID from an Eloquent model instance. Otherwise, your application will be vulnerable to an SQL injection attack.</p>\n</blockquote>\n<p>Instead of passing the model key&#39;s value to the <code>ignore</code> method, you may pass the entire model instance. Laravel will automatically extract the key from the model:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Rule::unique(<span class="hljs-string">\'users\'</span>)-&gt;ignore(<span class="hljs-variable">$user</span>)</code></pre>\n  <p>If your table uses a primary key column name other than <code>id</code>, you may specify the name of the column when calling the <code>ignore</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Rule::unique(<span class="hljs-string">\'users\'</span>)-&gt;ignore(<span class="hljs-variable">$user</span>-&gt;id, <span class="hljs-string">\'user_id\'</span>)</code></pre>\n  <p>By default, the <code>unique</code> rule will check the uniqueness of the column matching the name of the attribute being validated. However, you may pass a different column name as the second argument to the <code>unique</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Rule::unique(<span class="hljs-string">\'users\'</span>, <span class="hljs-string">\'email_address\'</span>)-&gt;ignore(<span class="hljs-variable">$user</span>-&gt;id),</code></pre>\n  <p><strong>Adding Additional Where Clauses:</strong></p>\n<p>You may also specify additional query constraints by customizing the query using the <code>where</code> method. For example, let&#39;s add a constraint that verifies the <code>account_id</code> is <code>1</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'email\'</span> =&gt; Rule::unique(<span class="hljs-string">\'users\'</span>)-&gt;where(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($query)</span> </span>{\n    <span class="hljs-keyword">return</span> $query-&gt;where(<span class="hljs-string">\'account_id\'</span>, <span class="hljs-number">1</span>);\n})</code></pre>\n  <p><a name="rule-url"></a></p>\n\n          <p><a name="url"></a></p>\n          <h4>\n            <a href="#url">\n              url\n            </a>\n          </h4><p>The field under validation must be a valid URL.</p>\n<p><a name="rule-uuid"></a></p>\n\n          <p><a name="uuid"></a></p>\n          <h4>\n            <a href="#uuid">\n              uuid\n            </a>\n          </h4><p>The field under validation must be a valid RFC 4122 (version 1, 3, 4, or 5) universally unique identifier (UUID).</p>\n<p><a name="conditionally-adding-rules"></a></p>\n\n          <p><a name="conditionally-adding-rules"></a></p>\n          <h2>\n            <a href="#conditionally-adding-rules">\n              Conditionally Adding Rules\n            </a>\n          </h2>\n          <p><a name="validating-when-present"></a></p>\n          <h4>\n            <a href="#validating-when-present">\n              Validating When Present\n            </a>\n          </h4><p>In some situations, you may wish to run validation checks against a field <strong>only</strong> if that field is present in the input array. To quickly accomplish this, add the <code>sometimes</code> rule to your rule list:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$v = Validator::make($data, [\n    <span class="hljs-string">\'email\'</span> =&gt; <span class="hljs-string">\'sometimes|required|email\'</span>,\n]);</code></pre>\n  <p>In the example above, the <code>email</code> field will only be validated if it is present in the <code>$data</code> array.</p>\n<blockquote>\n<p>{tip} If you are attempting to validate a field that should always be present but may be empty, check out <a href="#a-note-on-optional-fields">this note on optional fields</a></p>\n</blockquote>\n\n          <p><a name="complex-conditional-validation"></a></p>\n          <h4>\n            <a href="#complex-conditional-validation">\n              Complex Conditional Validation\n            </a>\n          </h4><p>Sometimes you may wish to add validation rules based on more complex conditional logic. For example, you may wish to require a given field only if another field has a greater value than 100. Or, you may need two fields to have a given value only when another field is present. Adding these validation rules doesn&#39;t have to be a pain. First, create a <code>Validator</code> instance with your <em>static rules</em> that never change:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$v = Validator::make($data, [\n    <span class="hljs-string">\'email\'</span> =&gt; <span class="hljs-string">\'required|email\'</span>,\n    <span class="hljs-string">\'games\'</span> =&gt; <span class="hljs-string">\'required|numeric\'</span>,\n]);</code></pre>\n  <p>Let&#39;s assume our web application is for game collectors. If a game collector registers with our application and they own more than 100 games, we want them to explain why they own so many games. For example, perhaps they run a game resale shop, or maybe they just enjoy collecting. To conditionally add this requirement, we can use the <code>sometimes</code> method on the <code>Validator</code> instance.</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$v-&gt;sometimes(<span class="hljs-string">\'reason\'</span>, <span class="hljs-string">\'required|max:500\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($input)</span> </span>{\n    <span class="hljs-keyword">return</span> $input-&gt;games &gt;= <span class="hljs-number">100</span>;\n});</code></pre>\n  <p>The first argument passed to the <code>sometimes</code> method is the name of the field we are conditionally validating. The second argument is the rules we want to add. If the <code>Closure</code> passed as the third argument returns <code>true</code>, the rules will be added. This method makes it a breeze to build complex conditional validations. You may even add conditional validations for several fields at once:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$v-&gt;sometimes([<span class="hljs-string">\'reason\'</span>, <span class="hljs-string">\'cost\'</span>], <span class="hljs-string">\'required\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($input)</span> </span>{\n    <span class="hljs-keyword">return</span> $input-&gt;games &gt;= <span class="hljs-number">100</span>;\n});</code></pre>\n  <blockquote>\n<p>{tip} The <code>$input</code> parameter passed to your <code>Closure</code> will be an instance of <code>Illuminate\\Support\\Fluent</code> and may be used to access your input and files.</p>\n</blockquote>\n<p><a name="validating-arrays"></a></p>\n\n          <p><a name="validating-arrays"></a></p>\n          <h2>\n            <a href="#validating-arrays">\n              Validating Arrays\n            </a>\n          </h2><p>Validating array based form input fields doesn&#39;t have to be a pain. You may use &quot;dot notation&quot; to validate attributes within an array. For example, if the incoming HTTP request contains a <code>photos[profile]</code> field, you may validate it like so:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$validator = Validator::make($request-&gt;all(), [\n    <span class="hljs-string">\'photos.profile\'</span> =&gt; <span class="hljs-string">\'required|image\'</span>,\n]);</code></pre>\n  <p>You may also validate each element of an array. For example, to validate that each e-mail in a given array input field is unique, you may do the following:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$validator = <span class="hljs-type">Validator</span>::make($request-&gt;all<span class="hljs-literal">()</span>, [\n    <span class="hljs-symbol">\'person</span>.*.email\' =&gt; <span class="hljs-symbol">\'email</span>|unique:users\',\n    <span class="hljs-symbol">\'person</span>.*.first_name\' =&gt; <span class="hljs-symbol">\'required_with</span>:person.*.last_name\',\n]);</code></pre>\n  <p>Likewise, you may use the <code>*</code> character when specifying your validation messages in your language files, making it a breeze to use a single validation message for array based fields:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'custom\'</span> =&gt; [\n    <span class="hljs-symbol">\'person</span>.*.email\' =&gt; [\n        <span class="hljs-symbol">\'unique\'</span> =&gt; <span class="hljs-symbol">\'Each</span> person must have a unique e-mail address\',\n    ]\n],</code></pre>\n  <p><a name="custom-validation-rules"></a></p>\n\n          <p><a name="custom-validation-rules"></a></p>\n          <h2>\n            <a href="#custom-validation-rules">\n              Custom Validation Rules\n            </a>\n          </h2><p><a name="using-rule-objects"></a></p>\n\n          <p><a name="using-rule-objects"></a></p>\n          <h3>\n            <a href="#using-rule-objects">\n              Using Rule Objects\n            </a>\n          </h3><p>Laravel provides a variety of helpful validation rules; however, you may wish to specify some of your own. One method of registering custom validation rules is using rule objects. To generate a new rule object, you may use the <code>make:rule</code> Artisan command. Let&#39;s use this command to generate a rule that verifies a string is uppercase. Laravel will place the new rule in the <code>app/Rules</code> directory:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan make:<span class="hljs-keyword">rule</span> Uppercase</code></pre>\n  <p>Once the rule has been created, we are ready to define its behavior. A rule object contains two methods: <code>passes</code> and <code>message</code>. The <code>passes</code> method receives the attribute value and name, and should return <code>true</code> or <code>false</code> depending on whether the attribute value is valid or not. The <code>message</code> method should return the validation error message that should be used when validation fails:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Rules</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">Validation</span>\\<span class="hljs-title">Rule</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Uppercase</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Rule</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Determine if the validation rule passes.\n     *\n     * <span class="hljs-doctag">@param</span>  string  $attribute\n     * <span class="hljs-doctag">@param</span>  mixed  $value\n     * <span class="hljs-doctag">@return</span> bool\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">passes</span><span class="hljs-params">($attribute, $value)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> strtoupper($value) === $value;\n    }\n\n    <span class="hljs-comment">/**\n     * Get the validation error message.\n     *\n     * <span class="hljs-doctag">@return</span> string\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">message</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-string">\'The :attribute must be uppercase.\'</span>;\n    }\n}</span></code></pre>\n  <p>You may call the <code>trans</code> helper from your <code>message</code> method if you would like to return an error message from your translation files:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Get the validation error message.\n *\n * <span class="hljs-doctag">@return</span> string\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">message</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">return</span> trans(<span class="hljs-string">\'validation.uppercase\'</span>);\n}</code></pre>\n  <p>Once the rule has been defined, you may attach it to a validator by passing an instance of the rule object with your other validation rules:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Rules</span>\\<span class="hljs-title">Uppercase</span>;\n\n$request-&gt;validate([\n    <span class="hljs-string">\'name\'</span> =&gt; [<span class="hljs-string">\'required\'</span>, <span class="hljs-string">\'string\'</span>, <span class="hljs-keyword">new</span> Uppercase],\n]);</code></pre>\n  <p><a name="using-closures"></a></p>\n\n          <p><a name="using-closures"></a></p>\n          <h3>\n            <a href="#using-closures">\n              Using Closures\n            </a>\n          </h3><p>If you only need the functionality of a custom rule once throughout your application, you may use a Closure instead of a rule object. The Closure receives the attribute&#39;s name, the attribute&#39;s value, and a <code>$fail</code> callback that should be called if validation fails:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$validator = Validator::make($request-&gt;all(), [\n    <span class="hljs-string">\'title\'</span> =&gt; [\n        <span class="hljs-string">\'required\'</span>,\n        <span class="hljs-string">\'max:255\'</span>,\n        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($attribute, $value, $fail)</span> </span>{\n            <span class="hljs-keyword">if</span> ($value === <span class="hljs-string">\'foo\'</span>) {\n                $fail($attribute.<span class="hljs-string">\' is invalid.\'</span>);\n            }\n        },\n    ],\n]);</code></pre>\n  <p><a name="using-extensions"></a></p>\n\n          <p><a name="using-extensions"></a></p>\n          <h3>\n            <a href="#using-extensions">\n              Using Extensions\n            </a>\n          </h3><p>Another method of registering custom validation rules is using the <code>extend</code> method on the <code>Validator</code> <router-link to="/docs/facades">facade</router-link>. Let&#39;s use this method within a <router-link to="/docs/providers">service provider</router-link> to register a custom validation rule:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Providers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">ServiceProvider</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Validator</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Register any application services.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-comment">//</span>\n    }\n\n    <span class="hljs-comment">/**\n     * Bootstrap any application services.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n    </span>{\n        Validator::extend(<span class="hljs-string">\'foo\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($attribute, $value, $parameters, $validator)</span> </span>{\n            <span class="hljs-keyword">return</span> $value == <span class="hljs-string">\'foo\'</span>;\n        });\n    }\n}</span></code></pre>\n  <p>The custom validator Closure receives four arguments: the name of the <code>$attribute</code> being validated, the <code>$value</code> of the attribute, an array of <code>$parameters</code> passed to the rule, and the <code>Validator</code> instance.</p>\n<p>You may also pass a class and method to the <code>extend</code> method instead of a Closure:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Validator::extend(<span class="hljs-string">\'foo\'</span>, <span class="hljs-string">\'FooValidator@validate\'</span>);</code></pre>\n  \n          <p><a name="defining-the-error-message"></a></p>\n          <h4>\n            <a href="#defining-the-error-message">\n              Defining The Error Message\n            </a>\n          </h4><p>You will also need to define an error message for your custom rule. You can do so either using an inline custom message array or by adding an entry in the validation language file. This message should be placed in the first level of the array, not within the <code>custom</code> array, which is only for attribute-specific error messages:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">"foo"</span> =&gt; <span class="hljs-string">"Your input was invalid!"</span>,\n\n<span class="hljs-string">"accepted"</span> =&gt; <span class="hljs-string">"The :attribute must be accepted."</span>,\n\n<span class="hljs-comment">// The rest of the validation error messages...</span></code></pre>\n  <p>When creating a custom validation rule, you may sometimes need to define custom placeholder replacements for error messages. You may do so by creating a custom Validator as described above then making a call to the <code>replacer</code> method on the <code>Validator</code> facade. You may do this within the <code>boot</code> method of a <router-link to="/docs/providers">service provider</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Bootstrap any application services.\n *\n * @return void\n */</span>\n<span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">function</span> <span class="hljs-selector-tag">boot</span>()\n{\n    <span class="hljs-attribute">Validator</span>::<span class="hljs-built_in">extend</span>(...);\n\n    <span class="hljs-attribute">Validator</span>::<span class="hljs-built_in">replacer</span>(<span class="hljs-string">\'foo\'</span>, function ($message, $attribute, $rule, $parameters) {\n        return <span class="hljs-built_in">str_replace</span>(...);\n    });\n}</code></pre>\n  <p><a name="implicit-extensions"></a></p>\n\n          <p><a name="implicit-extensions"></a></p>\n          <h3>\n            <a href="#implicit-extensions">\n              Implicit Extensions\n            </a>\n          </h3><p>By default, when an attribute being validated is not present or contains an empty string, normal validation rules, including custom extensions, are not run. For example, the <a href="#rule-unique"><code>unique</code></a> rule will not be run against an empty string:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$rules = [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'unique:users,name\'</span>];\n\n$input = [<span class="hljs-string">\'name\'</span> =&gt; <span class="hljs-string">\'\'</span>];\n\nValidator::make($input, $rules)-&gt;passes(); <span class="hljs-comment">// true</span></code></pre>\n  <p>For a rule to run even when an attribute is empty, the rule must imply that the attribute is required. To create such an &quot;implicit&quot; extension, use the <code>Validator::extendImplicit()</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Validator::extendImplicit(<span class="hljs-string">\'foo\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($attribute, $value, $parameters, $validator)</span> </span>{\n    <span class="hljs-keyword">return</span> $value == <span class="hljs-string">\'foo\'</span>;\n});</code></pre>\n  <blockquote>\n<p>{note} An &quot;implicit&quot; extension only <em>implies</em> that the attribute is required. Whether it actually invalidates a missing or empty attribute is up to you.</p>\n</blockquote>\n\n          <p><a name="implicit-rule-objects"></a></p>\n          <h4>\n            <a href="#implicit-rule-objects">\n              Implicit Rule Objects\n            </a>\n          </h4><p>If you would like a rule object to run when an attribute is empty, you should implement the <code>Illuminate\\Contracts\\Validation\\ImplicitRule</code> interface. This interface serves as a &quot;marker interface&quot; for the validator; therefore, it does not contain any methods you need to implement.</p>\n'},eb0a:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="deployment"></a></p>\n          <h1>\n            <a href="#deployment">\n              Deployment\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#server-configuration">Server Configuration</a><ul>\n<li><a href="#nginx">Nginx</a></li>\n</ul>\n</li>\n<li><a href="#optimization">Optimization</a><ul>\n<li><a href="#autoloader-optimization">Autoloader Optimization</a></li>\n<li><a href="#optimizing-configuration-loading">Optimizing Configuration Loading</a></li>\n<li><a href="#optimizing-route-loading">Optimizing Route Loading</a></li>\n</ul>\n</li>\n<li><a href="#deploying-with-forge">Deploying With Forge</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>When you&#39;re ready to deploy your Laravel application to production, there are some important things you can do to make sure your application is running as efficiently as possible. In this document, we&#39;ll cover some great starting points for making sure your Laravel application is deployed properly.</p>\n<p><a name="server-configuration"></a></p>\n\n          <p><a name="server-configuration"></a></p>\n          <h2>\n            <a href="#server-configuration">\n              Server Configuration\n            </a>\n          </h2><p><a name="nginx"></a></p>\n\n          <p><a name="nginx"></a></p>\n          <h3>\n            <a href="#nginx">\n              Nginx\n            </a>\n          </h3><p>If you are deploying your application to a server that is running Nginx, you may use the following configuration file as a starting point for configuring your web server. Most likely, this file will need to be customized depending on your server&#39;s configuration. If you would like assistance in managing your server, consider using a service such as <router-link to="https://forge.laravel.com">Laravel Forge</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-section">server</span> {\n    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;\n    <span class="hljs-attribute">server_name</span> example.com;\n    <span class="hljs-attribute">root</span> /example.com/public;\n\n    <span class="hljs-attribute">add_header</span> X-Frame-Options <span class="hljs-string">"SAMEORIGIN"</span>;\n    <span class="hljs-attribute">add_header</span> X-XSS-Protection <span class="hljs-string">"1; mode=block"</span>;\n    <span class="hljs-attribute">add_header</span> X-Content-Type-Options <span class="hljs-string">"nosniff"</span>;\n\n    <span class="hljs-attribute">index</span> index.html index.htm index.php;\n\n    <span class="hljs-attribute">charset</span> utf-<span class="hljs-number">8</span>;\n\n    <span class="hljs-attribute">location</span> / {\n        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.php?<span class="hljs-variable">$query_string</span>;\n    }\n\n    <span class="hljs-attribute">location</span> = /favicon.ico { <span class="hljs-attribute">access_log</span> <span class="hljs-literal">off</span>; <span class="hljs-attribute">log_not_found</span> <span class="hljs-literal">off</span>; }\n    <span class="hljs-attribute">location</span> = /robots.txt  { <span class="hljs-attribute">access_log</span> <span class="hljs-literal">off</span>; <span class="hljs-attribute">log_not_found</span> <span class="hljs-literal">off</span>; }\n\n    <span class="hljs-attribute">error_page</span> <span class="hljs-number">404</span> /index.php;\n\n    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ \\.php$</span> {\n        <span class="hljs-attribute">fastcgi_pass</span> unix:/var/run/php/php7.2-fpm.sock;\n        <span class="hljs-attribute">fastcgi_index</span> index.php;\n        <span class="hljs-attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="hljs-variable">$realpath_root</span><span class="hljs-variable">$fastcgi_script_name</span>;\n        <span class="hljs-attribute">include</span> fastcgi_params;\n    }\n\n    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ /\\.(?!well-known).*</span> {\n        <span class="hljs-attribute">deny</span> all;\n    }\n}</code></pre>\n  <p><a name="optimization"></a></p>\n\n          <p><a name="optimization"></a></p>\n          <h2>\n            <a href="#optimization">\n              Optimization\n            </a>\n          </h2><p><a name="autoloader-optimization"></a></p>\n\n          <p><a name="autoloader-optimization"></a></p>\n          <h3>\n            <a href="#autoloader-optimization">\n              Autoloader Optimization\n            </a>\n          </h3><p>When deploying to production, make sure that you are optimizing Composer&#39;s class autoloader map so Composer can quickly find the proper file to load for a given class:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">composer</span> <span class="hljs-comment">install</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">optimize</span><span class="hljs-literal">-</span><span class="hljs-comment">autoloader</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">no</span><span class="hljs-literal">-</span><span class="hljs-comment">dev</span></code></pre>\n  <blockquote>\n<p>{tip} In addition to optimizing the autoloader, you should always be sure to include a <code>composer.lock</code> file in your project&#39;s source control repository. Your project&#39;s dependencies can be installed much faster when a <code>composer.lock</code> file is present.</p>\n</blockquote>\n<p><a name="optimizing-configuration-loading"></a></p>\n\n          <p><a name="optimizing-configuration-loading"></a></p>\n          <h3>\n            <a href="#optimizing-configuration-loading">\n              Optimizing Configuration Loading\n            </a>\n          </h3><p>When deploying your application to production, you should make sure that you run the <code>config:cache</code> Artisan command during your deployment process:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan <span class="hljs-built_in">config</span>:cache</code></pre>\n  <p>This command will combine all of Laravel&#39;s configuration files into a single, cached file, which greatly reduces the number of trips the framework must make to the filesystem when loading your configuration values.</p>\n<blockquote>\n<p>{note} If you execute the <code>config:cache</code> command during your deployment process, you should be sure that you are only calling the <code>env</code> function from within your configuration files. Once the configuration has been cached, the <code>.env</code> file will not be loaded and all calls to the <code>env</code> function will return <code>null</code>.</p>\n</blockquote>\n<p><a name="optimizing-route-loading"></a></p>\n\n          <p><a name="optimizing-route-loading"></a></p>\n          <h3>\n            <a href="#optimizing-route-loading">\n              Optimizing Route Loading\n            </a>\n          </h3><p>If you are building a large application with many routes, you should make sure that you are running the <code>route:cache</code> Artisan command during your deployment process:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">route</span><span class="hljs-selector-pseudo">:cache</span></code></pre>\n  <p>This command reduces all of your route registrations into a single method call within a cached file, improving the performance of route registration when registering hundreds of routes.</p>\n<blockquote>\n<p>{note} Since this feature uses PHP serialization, you may only cache the routes for applications that exclusively use controller based routes. PHP is not able to serialize Closures.</p>\n</blockquote>\n<p><a name="deploying-with-forge"></a></p>\n\n          <p><a name="deploying-with-forge"></a></p>\n          <h2>\n            <a href="#deploying-with-forge">\n              Deploying With Forge\n            </a>\n          </h2><p>If you aren&#39;t quite ready to manage your own server configuration or aren&#39;t comfortable configuring all of the various services needed to run a robust Laravel application, <router-link to="https://forge.laravel.com">Laravel Forge</router-link> is a wonderful alternative.</p>\n<p>Laravel Forge can create servers on various infrastructure providers such as DigitalOcean, Linode, AWS, and more. In addition, Forge installs and manages all of the tools needed to build robust Laravel applications, such as Nginx, MySQL, Redis, Memcached, Beanstalk, and more.</p>\n'},ec54:function(s,e,a){},f0d6:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="hashing"></a></p>\n          <h1>\n            <a href="#hashing">\n              Hashing\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#configuration">Configuration</a></li>\n<li><a href="#basic-usage">Basic Usage</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>The Laravel <code>Hash</code> <router-link to="/docs/{{version}}/facades">facade</router-link> provides secure Bcrypt and Argon2 hashing for storing user passwords. If you are using the built-in <code>LoginController</code> and <code>RegisterController</code> classes that are included with your Laravel application, they will use Bcrypt for registration and authentication by default.</p>\n<blockquote>\n<p>{tip} Bcrypt is a great choice for hashing passwords because its &quot;work factor&quot; is adjustable, which means that the time it takes to generate a hash can be increased as hardware power increases.</p>\n</blockquote>\n<p><a name="configuration"></a></p>\n\n          <p><a name="configuration"></a></p>\n          <h2>\n            <a href="#configuration">\n              Configuration\n            </a>\n          </h2><p>The default hashing driver for your application is configured in the <code>config/hashing.php</code> configuration file. There are currently three supported drivers: <router-link to="https://en.wikipedia.org/wiki/Bcrypt">Bcrypt</router-link> and <router-link to="https://en.wikipedia.org/wiki/Argon2">Argon2</router-link> (Argon2i and Argon2id variants).</p>\n<blockquote>\n<p>{note} The Argon2i driver requires PHP 7.2.0 or greater and the Argon2id driver requires PHP 7.3.0 or greater.</p>\n</blockquote>\n<p><a name="basic-usage"></a></p>\n\n          <p><a name="basic-usage"></a></p>\n          <h2>\n            <a href="#basic-usage">\n              Basic Usage\n            </a>\n          </h2><p>You may hash a password by calling the <code>make</code> method on the <code>Hash</code> facade:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">Controller</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Request</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Hash</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UpdatePasswordController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Update the password for the user.\n     *\n     * <span class="hljs-doctag">@param</span>  Request  $request\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">(Request $request)</span>\n    </span>{\n        <span class="hljs-comment">// Validate the new password length...</span>\n\n        $request-&gt;user()-&gt;fill([\n            <span class="hljs-string">\'password\'</span> =&gt; Hash::make($request-&gt;newPassword)\n        ])-&gt;save();\n    }\n}</span></code></pre>\n  \n          <p><a name="adjusting-the-bcrypt-work-factor"></a></p>\n          <h4>\n            <a href="#adjusting-the-bcrypt-work-factor">\n              Adjusting The Bcrypt Work Factor\n            </a>\n          </h4><p>If you are using the Bcrypt algorithm, the <code>make</code> method allows you to manage the work factor of the algorithm using the <code>rounds</code> option; however, the default is acceptable for most applications:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$hashed = Hash::make(<span class="hljs-string">\'password\'</span>, [\n    <span class="hljs-string">\'rounds\'</span> =&gt; <span class="hljs-number">12</span>\n]);</code></pre>\n  \n          <p><a name="adjusting-the-argon2-work-factor"></a></p>\n          <h4>\n            <a href="#adjusting-the-argon2-work-factor">\n              Adjusting The Argon2 Work Factor\n            </a>\n          </h4><p>If you are using the Argon2 algorithm, the <code>make</code> method allows you to manage the work factor of the algorithm using the <code>memory</code>, <code>time</code>, and <code>threads</code> options; however, the defaults are acceptable for most applications:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$hashed = Hash::make(<span class="hljs-string">\'password\'</span>, [\n    <span class="hljs-string">\'memory\'</span> =&gt; <span class="hljs-number">1024</span>,\n    <span class="hljs-string">\'time\'</span> =&gt; <span class="hljs-number">2</span>,\n    <span class="hljs-string">\'threads\'</span> =&gt; <span class="hljs-number">2</span>,\n]);</code></pre>\n  <blockquote>\n<p>{tip} For more information on these options, check out the <router-link to="https://secure.php.net/manual/en/function.password-hash.php">official PHP documentation</router-link>.</p>\n</blockquote>\n\n          <p><a name="verifying-a-password-against-a-hash"></a></p>\n          <h4>\n            <a href="#verifying-a-password-against-a-hash">\n              Verifying A Password Against A Hash\n            </a>\n          </h4><p>The <code>check</code> method allows you to verify that a given plain-text string corresponds to a given hash. However, if you are using the <code>LoginController</code> <router-link to="/docs/{{version}}/authentication">included with Laravel</router-link>, you will probably not need to use this directly, as this controller automatically calls this method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> (Hash::check(<span class="hljs-string">\'plain-text\'</span>, $hashedPassword)) {\n    <span class="hljs-comment">// The passwords match...</span>\n}</code></pre>\n  \n          <p><a name="checking-if-a-password-needs-to-be-rehashed"></a></p>\n          <h4>\n            <a href="#checking-if-a-password-needs-to-be-rehashed">\n              Checking If A Password Needs To Be Rehashed\n            </a>\n          </h4><p>The <code>needsRehash</code> function allows you to determine if the work factor used by the hasher has changed since the password was hashed:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> (Hash::needsRehash($hashed)) {\n    $hashed = Hash::make(<span class="hljs-string">\'plain-text\'</span>);\n}</code></pre>\n  '},f227:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="controllers"></a></p>\n          <h1>\n            <a href="#controllers">\n              Controllers\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#basic-controllers">Basic Controllers</a><ul>\n<li><a href="#defining-controllers">Defining Controllers</a></li>\n<li><a href="#controllers-and-namespaces">Controllers &amp; Namespaces</a></li>\n<li><a href="#single-action-controllers">Single Action Controllers</a></li>\n</ul>\n</li>\n<li><a href="#controller-middleware">Controller Middleware</a></li>\n<li><a href="#resource-controllers">Resource Controllers</a><ul>\n<li><a href="#restful-partial-resource-routes">Partial Resource Routes</a></li>\n<li><a href="#restful-nested-resources">Nested Resources</a></li>\n<li><a href="#restful-naming-resource-routes">Naming Resource Routes</a></li>\n<li><a href="#restful-naming-resource-route-parameters">Naming Resource Route Parameters</a></li>\n<li><a href="#restful-localizing-resource-uris">Localizing Resource URIs</a></li>\n<li><a href="#restful-supplementing-resource-controllers">Supplementing Resource Controllers</a></li>\n</ul>\n</li>\n<li><a href="#dependency-injection-and-controllers">Dependency Injection &amp; Controllers</a></li>\n<li><a href="#route-caching">Route Caching</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Instead of defining all of your request handling logic as Closures in route files, you may wish to organize this behavior using Controller classes. Controllers can group related request handling logic into a single class. Controllers are stored in the <code>app/Http/Controllers</code> directory.</p>\n<p><a name="basic-controllers"></a></p>\n\n          <p><a name="basic-controllers"></a></p>\n          <h2>\n            <a href="#basic-controllers">\n              Basic Controllers\n            </a>\n          </h2><p><a name="defining-controllers"></a></p>\n\n          <p><a name="defining-controllers"></a></p>\n          <h3>\n            <a href="#defining-controllers">\n              Defining Controllers\n            </a>\n          </h3><p>Below is an example of a basic controller class. Note that the controller extends the base controller class included with Laravel. The base class provides a few convenience methods such as the <code>middleware</code> method, which may be used to attach middleware to controller actions:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">Controller</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Show the profile for the given user.\n     *\n     * <span class="hljs-doctag">@param</span>  int  $id\n     * <span class="hljs-doctag">@return</span> View\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span><span class="hljs-params">($id)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> view(<span class="hljs-string">\'user.profile\'</span>, [<span class="hljs-string">\'user\'</span> =&gt; User::findOrFail($id)]);\n    }\n}</span></code></pre>\n  <p>You can define a route to this controller action like so:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::<span class="hljs-keyword">get</span>(<span class="hljs-string">\'user/{id}\'</span>, <span class="hljs-string">\'UserController@show\'</span>);</code></pre>\n  <p>Now, when a request matches the specified route URI, the <code>show</code> method on the <code>UserController</code> class will be executed. The route parameters will also be passed to the method.</p>\n<p><a name="controllers-and-namespaces"></a></p>\n\n          <p><a name="controllers-amp-namespaces"></a></p>\n          <h3>\n            <a href="#controllers-amp-namespaces">\n              Controllers &amp; Namespaces\n            </a>\n          </h3><p>It is very important to note that we did not need to specify the full controller namespace when defining the controller route. Since the <code>RouteServiceProvider</code> loads your route files within a route group that contains the namespace, we only specified the portion of the class name that comes after the <code>App\\Http\\Controllers</code> portion of the namespace.</p>\n<p>If you choose to nest your controllers deeper into the <code>App\\Http\\Controllers</code> directory, use the specific class name relative to the <code>App\\Http\\Controllers</code> root namespace. So, if your full controller class is <code>App\\Http\\Controllers\\Photos\\AdminController</code>, you should register routes to the controller like so:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::<span class="hljs-keyword">get</span>(<span class="hljs-string">\'foo\'</span>, <span class="hljs-string">\'Photos\\AdminController@method\'</span>);</code></pre>\n  <p><a name="single-action-controllers"></a></p>\n\n          <p><a name="single-action-controllers"></a></p>\n          <h3>\n            <a href="#single-action-controllers">\n              Single Action Controllers\n            </a>\n          </h3><p>If you would like to define a controller that only handles a single action, you may place a single <code>__invoke</code> method on the controller:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">Controller</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShowProfile</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Show the profile for the given user.\n     *\n     * <span class="hljs-doctag">@param</span>  int  $id\n     * <span class="hljs-doctag">@return</span> View\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span><span class="hljs-params">($id)</span>\n    </span>{\n        <span class="hljs-keyword">return</span> view(<span class="hljs-string">\'user.profile\'</span>, [<span class="hljs-string">\'user\'</span> =&gt; User::findOrFail($id)]);\n    }\n}</span></code></pre>\n  <p>When registering routes for single action controllers, you do not need to specify a method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::<span class="hljs-keyword">get</span>(<span class="hljs-string">\'user/{id}\'</span>, <span class="hljs-string">\'ShowProfile\'</span>);</code></pre>\n  <p>You may generate an invokable controller by using the <code>--invokable</code> option of the <code>make:controller</code> Artisan command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan make:controller ShowProfile <span class="hljs-comment">--invokable</span></code></pre>\n  <p><a name="controller-middleware"></a></p>\n\n          <p><a name="controller-middleware"></a></p>\n          <h2>\n            <a href="#controller-middleware">\n              Controller Middleware\n            </a>\n          </h2><p><router-link to="/docs/middleware">Middleware</router-link> may be assigned to the controller&#39;s routes in your route files:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'profile\'</span>, <span class="hljs-string">\'UserController@show\'</span>)</span>-&gt;</span>middleware(<span class="hljs-string">\'auth\'</span>);</code></pre>\n  <p>However, it is more convenient to specify middleware within your controller&#39;s constructor. Using the <code>middleware</code> method from your controller&#39;s constructor, you may easily assign middleware to the controller&#39;s action. You may even restrict the middleware to only certain methods on the controller class:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Instantiate a new controller instance.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">$this</span>-&gt;middleware(<span class="hljs-string">\'auth\'</span>);\n\n        <span class="hljs-keyword">$this</span>-&gt;middleware(<span class="hljs-string">\'log\'</span>)-&gt;only(<span class="hljs-string">\'index\'</span>);\n\n        <span class="hljs-keyword">$this</span>-&gt;middleware(<span class="hljs-string">\'subscribed\'</span>)-&gt;except(<span class="hljs-string">\'store\'</span>);\n    }\n}</code></pre>\n  <p>Controllers also allow you to register middleware using a Closure. This provides a convenient way to define a middleware for a single controller without defining an entire middleware class:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">$this</span>-&gt;middleware(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($request, $next)</span> </span>{\n    <span class="hljs-comment">// ...</span>\n\n    <span class="hljs-keyword">return</span> $next($request);\n});</code></pre>\n  <p><a name="resource-controllers"></a></p>\n\n          <p><a name="resource-controllers"></a></p>\n          <h2>\n            <a href="#resource-controllers">\n              Resource Controllers\n            </a>\n          </h2><p>Laravel resource routing assigns the typical &quot;CRUD&quot; routes to a controller with a single line of code. For example, you may wish to create a controller that handles all HTTP requests for &quot;photos&quot; stored by your application. Using the <code>make:controller</code> Artisan command, we can quickly create such a controller:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan make:controller PhotoController <span class="hljs-comment">--resource</span></code></pre>\n  <p>This command will generate a controller at <code>app/Http/Controllers/PhotoController.php</code>. The controller will contain a method for each of the available resource operations.</p>\n<p>Next, you may register a resourceful route to the controller:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::resource(<span class="hljs-string">\'photos\'</span>, <span class="hljs-string">\'PhotoController\'</span>);</code></pre>\n  <p>This single route declaration creates multiple routes to handle a variety of actions on the resource. The generated controller will already have methods stubbed for each of these actions, including notes informing you of the HTTP verbs and URIs they handle.</p>\n<p>You may register many resource controllers at once by passing an array to the <code>resources</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::resources([\n    <span class="hljs-string">\'photos\'</span> =&gt; <span class="hljs-string">\'PhotoController\'</span>,\n    <span class="hljs-string">\'posts\'</span> =&gt; <span class="hljs-string">\'PostController\'</span>\n]);</code></pre>\n  \n          <p><a name="actions-handled-by-resource-controller"></a></p>\n          <h4>\n            <a href="#actions-handled-by-resource-controller">\n              Actions Handled By Resource Controller\n            </a>\n          </h4><table>\n<thead>\n<tr>\n<th>Verb</th>\n<th>URI</th>\n<th>Action</th>\n<th>Route Name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GET</td>\n<td><code>/photos</code></td>\n<td>index</td>\n<td>photos.index</td>\n</tr>\n<tr>\n<td>GET</td>\n<td><code>/photos/create</code></td>\n<td>create</td>\n<td>photos.create</td>\n</tr>\n<tr>\n<td>POST</td>\n<td><code>/photos</code></td>\n<td>store</td>\n<td>photos.store</td>\n</tr>\n<tr>\n<td>GET</td>\n<td><code>/photos/{photo}</code></td>\n<td>show</td>\n<td>photos.show</td>\n</tr>\n<tr>\n<td>GET</td>\n<td><code>/photos/{photo}/edit</code></td>\n<td>edit</td>\n<td>photos.edit</td>\n</tr>\n<tr>\n<td>PUT/PATCH</td>\n<td><code>/photos/{photo}</code></td>\n<td>update</td>\n<td>photos.update</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td><code>/photos/{photo}</code></td>\n<td>destroy</td>\n<td>photos.destroy</td>\n</tr>\n</tbody></table>\n\n          <p><a name="specifying-the-resource-model"></a></p>\n          <h4>\n            <a href="#specifying-the-resource-model">\n              Specifying The Resource Model\n            </a>\n          </h4><p>If you are using route model binding and would like the resource controller&#39;s methods to type-hint a model instance, you may use the <code>--model</code> option when generating the controller:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">php</span> <span class="hljs-comment">artisan</span> <span class="hljs-comment">make:controller</span> <span class="hljs-comment">PhotoController</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">resource</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">model=Photo</span></code></pre>\n  \n          <p><a name="spoofing-form-methods"></a></p>\n          <h4>\n            <a href="#spoofing-form-methods">\n              Spoofing Form Methods\n            </a>\n          </h4><p>Since HTML forms can&#39;t make <code>PUT</code>, <code>PATCH</code>, or <code>DELETE</code> requests, you will need to add a hidden <code>_method</code> field to spoof these HTTP verbs. The <code>@method</code> Blade directive can create this field for you:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">&lt;form action=<span class="hljs-string">"/foo/bar"</span> method=<span class="hljs-string">"<span class="hljs-keyword">POST</span>"</span>&gt;\n    @method(\'PUT\')\n&lt;/form&gt;</code></pre>\n  <p><a name="restful-partial-resource-routes"></a></p>\n\n          <p><a name="partial-resource-routes"></a></p>\n          <h3>\n            <a href="#partial-resource-routes">\n              Partial Resource Routes\n            </a>\n          </h3><p>When declaring a resource route, you may specify a subset of actions the controller should handle instead of the full set of default actions:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::resource<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'photos\'</span>, <span class="hljs-string">\'PhotoController\'</span>)</span>-&gt;</span>only([\n    <span class="hljs-string">\'index\'</span>, <span class="hljs-string">\'show\'</span>\n]);\n\nRoute::resource<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'photos\'</span>, <span class="hljs-string">\'PhotoController\'</span>)</span>-&gt;</span>except([\n    <span class="hljs-string">\'create\'</span>, <span class="hljs-string">\'store\'</span>, <span class="hljs-string">\'update\'</span>, <span class="hljs-string">\'destroy\'</span>\n]);</code></pre>\n  \n          <p><a name="api-resource-routes"></a></p>\n          <h4>\n            <a href="#api-resource-routes">\n              API Resource Routes\n            </a>\n          </h4><p>When declaring resource routes that will be consumed by APIs, you will commonly want to exclude routes that present HTML templates such as <code>create</code> and <code>edit</code>. For convenience, you may use the <code>apiResource</code> method to automatically exclude these two routes:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::apiResource(<span class="hljs-string">\'photos\'</span>, <span class="hljs-string">\'PhotoController\'</span>);</code></pre>\n  <p>You may register many API resource controllers at once by passing an array to the <code>apiResources</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::apiResources([\n    <span class="hljs-string">\'photos\'</span> =&gt; <span class="hljs-string">\'PhotoController\'</span>,\n    <span class="hljs-string">\'posts\'</span> =&gt; <span class="hljs-string">\'PostController\'</span>\n]);</code></pre>\n  <p>To quickly generate an API resource controller that does not include the <code>create</code> or <code>edit</code> methods, use the <code>--api</code> switch when executing the <code>make:controller</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan make:controller API/PhotoController <span class="hljs-comment">--api</span></code></pre>\n  <p><a name="restful-nested-resources"></a></p>\n\n          <p><a name="nested-resources"></a></p>\n          <h3>\n            <a href="#nested-resources">\n              Nested Resources\n            </a>\n          </h3><p>Sometimes you may need to define routes to a &quot;nested&quot; resource. For example, a photo resource may have multiple &quot;comments&quot; that may be attached to the photo. To &quot;nest&quot; resource controllers, use &quot;dot&quot; notation in your route declaration:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::resource(<span class="hljs-string">\'photos.comments\'</span>, <span class="hljs-string">\'PhotoCommentController\'</span>);</code></pre>\n  <p>This route will register a &quot;nested&quot; resource that may be accessed with URLs like the following: photos/{photos}/comments/{comments}.</p>\n<p><a name="restful-naming-resource-routes"></a></p>\n\n          <p><a name="naming-resource-routes"></a></p>\n          <h3>\n            <a href="#naming-resource-routes">\n              Naming Resource Routes\n            </a>\n          </h3><p>By default, all resource controller actions have a route name; however, you can override these names by passing a <code>names</code> array with your options:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::resource<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'photos\'</span>, <span class="hljs-string">\'PhotoController\'</span>)</span>-&gt;</span>names([\n    <span class="hljs-string">\'create\'</span> =&gt; <span class="hljs-string">\'photos.build\'</span>\n]);</code></pre>\n  <p><a name="restful-naming-resource-route-parameters"></a></p>\n\n          <p><a name="naming-resource-route-parameters"></a></p>\n          <h3>\n            <a href="#naming-resource-route-parameters">\n              Naming Resource Route Parameters\n            </a>\n          </h3><p>By default, <code>Route::resource</code> will create the route parameters for your resource routes based on the &quot;singularized&quot; version of the resource name. You can easily override this on a per resource basis by using the <code>parameters</code> method. The array passed into the <code>parameters</code> method should be an associative array of resource names and parameter names:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::resource<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">\'users\'</span>, <span class="hljs-string">\'AdminUserController\'</span>)</span>-&gt;</span>parameters([\n    <span class="hljs-string">\'users\'</span> =&gt; <span class="hljs-string">\'admin_user\'</span>\n]);</code></pre>\n  <p> The example above generates the following URIs for the resource&#39;s <code>show</code> route:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-regexp">/users/</span>{admin_user}</code></pre>\n  <p><a name="restful-localizing-resource-uris"></a></p>\n\n          <p><a name="localizing-resource-uris"></a></p>\n          <h3>\n            <a href="#localizing-resource-uris">\n              Localizing Resource URIs\n            </a>\n          </h3><p>By default, <code>Route::resource</code> will create resource URIs using English verbs. If you need to localize the <code>create</code> and <code>edit</code> action verbs, you may use the <code>Route::resourceVerbs</code> method. This may be done in the <code>boot</code> method of your <code>AppServiceProvider</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Route</span>;\n\n<span class="hljs-comment">/**\n * Bootstrap any application services.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n</span>{\n    Route::resourceVerbs([\n        <span class="hljs-string">\'create\'</span> =&gt; <span class="hljs-string">\'crear\'</span>,\n        <span class="hljs-string">\'edit\'</span> =&gt; <span class="hljs-string">\'editar\'</span>,\n    ]);\n}</code></pre>\n  <p>Once the verbs have been customized, a resource route registration such as <code>Route::resource(&#39;fotos&#39;, &#39;PhotoController&#39;)</code> will produce the following URIs:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">/fotos/crear</span>\n\n<span class="hljs-string">/fotos/</span>{foto}<span class="hljs-string">/editar</span></code></pre>\n  <p><a name="restful-supplementing-resource-controllers"></a></p>\n\n          <p><a name="supplementing-resource-controllers"></a></p>\n          <h3>\n            <a href="#supplementing-resource-controllers">\n              Supplementing Resource Controllers\n            </a>\n          </h3><p>If you need to add additional routes to a resource controller beyond the default set of resource routes, you should define those routes before your call to <code>Route::resource</code>; otherwise, the routes defined by the <code>resource</code> method may unintentionally take precedence over your supplemental routes:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'photos/popular\'</span>, <span class="hljs-string">\'PhotoController@method\'</span>);\n\nRoute::resource(<span class="hljs-string">\'photos\'</span>, <span class="hljs-string">\'PhotoController\'</span>);</code></pre>\n  <p><a name="dependency-injection-and-controllers"></a></p>\n\n          <p><a name="dependency-injection-amp-controllers"></a></p>\n          <h2>\n            <a href="#dependency-injection-amp-controllers">\n              Dependency Injection &amp; Controllers\n            </a>\n          </h2>\n          <p><a name="constructor-injection"></a></p>\n          <h4>\n            <a href="#constructor-injection">\n              Constructor Injection\n            </a>\n          </h4><p>The Laravel <router-link to="/docs/container">service container</router-link> is used to resolve all Laravel controllers. As a result, you are able to type-hint any dependencies your controller may need in its constructor. The declared dependencies will automatically be resolved and injected into the controller instance:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Repositories</span>\\<span class="hljs-title">UserRepository</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The user repository instance.\n     */</span>\n    <span class="hljs-keyword">protected</span> $users;\n\n    <span class="hljs-comment">/**\n     * Create a new controller instance.\n     *\n     * <span class="hljs-doctag">@param</span>  UserRepository  $users\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(UserRepository $users)</span>\n    </span>{\n        <span class="hljs-keyword">$this</span>-&gt;users = $users;\n    }\n}</span></code></pre>\n  <p>You may also type-hint any <router-link to="/docs/contracts">Laravel contract</router-link>. If the container can resolve it, you can type-hint it. Depending on your application, injecting your dependencies into your controller may provide better testability.</p>\n\n          <p><a name="method-injection"></a></p>\n          <h4>\n            <a href="#method-injection">\n              Method Injection\n            </a>\n          </h4><p>In addition to constructor injection, you may also type-hint dependencies on your controller&#39;s methods. A common use-case for method injection is injecting the <code>Illuminate\\Http\\Request</code> instance into your controller methods:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Request</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Store a new user.\n     *\n     * <span class="hljs-doctag">@param</span>  Request  $request\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span><span class="hljs-params">(Request $request)</span>\n    </span>{\n        $name = $request-&gt;name;\n\n        <span class="hljs-comment">//</span>\n    }\n}</span></code></pre>\n  <p>If your controller method is also expecting input from a route parameter, list your route arguments after your other dependencies. For example, if your route is defined like so:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::<span class="hljs-built_in">put</span>(<span class="hljs-string">\'user/{id}\'</span>, <span class="hljs-string">\'UserController@update\'</span>);</code></pre>\n  <p>You may still type-hint the <code>Illuminate\\Http\\Request</code> and access your <code>id</code> parameter by defining your controller method as follows:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Request</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Update the given user.\n     *\n     * <span class="hljs-doctag">@param</span>  Request  $request\n     * <span class="hljs-doctag">@param</span>  string  $id\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">(Request $request, $id)</span>\n    </span>{\n        <span class="hljs-comment">//</span>\n    }\n}</span></code></pre>\n  <p><a name="route-caching"></a></p>\n\n          <p><a name="route-caching"></a></p>\n          <h2>\n            <a href="#route-caching">\n              Route Caching\n            </a>\n          </h2><blockquote>\n<p>{note} Closure based routes cannot be cached. To use route caching, you must convert any Closure routes to controller classes.</p>\n</blockquote>\n<p>If your application is exclusively using controller based routes, you should take advantage of Laravel&#39;s route cache. Using the route cache will drastically decrease the amount of time it takes to register all of your application&#39;s routes. In some cases, your route registration may even be up to 100x faster. To generate a route cache, just execute the <code>route:cache</code> Artisan command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">route</span><span class="hljs-selector-pseudo">:cache</span></code></pre>\n  <p>After running this command, your cached routes file will be loaded on every request. Remember, if you add any new routes you will need to generate a fresh route cache. Because of this, you should only run the <code>route:cache</code> command during your project&#39;s deployment.</p>\n<p>You may use the <code>route:clear</code> command to clear the route cache:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan route:<span class="hljs-built_in">clear</span></code></pre>\n  '},f349:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="artisan-console"></a></p>\n          <h1>\n            <a href="#artisan-console">\n              Artisan Console\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a><ul>\n<li><a href="#tinker">Tinker (REPL)</a></li>\n</ul>\n</li>\n<li><a href="#writing-commands">Writing Commands</a><ul>\n<li><a href="#generating-commands">Generating Commands</a></li>\n<li><a href="#command-structure">Command Structure</a></li>\n<li><a href="#closure-commands">Closure Commands</a></li>\n</ul>\n</li>\n<li><a href="#defining-input-expectations">Defining Input Expectations</a><ul>\n<li><a href="#arguments">Arguments</a></li>\n<li><a href="#options">Options</a></li>\n<li><a href="#input-arrays">Input Arrays</a></li>\n<li><a href="#input-descriptions">Input Descriptions</a></li>\n</ul>\n</li>\n<li><a href="#command-io">Command I/O</a><ul>\n<li><a href="#retrieving-input">Retrieving Input</a></li>\n<li><a href="#prompting-for-input">Prompting For Input</a></li>\n<li><a href="#writing-output">Writing Output</a></li>\n</ul>\n</li>\n<li><a href="#registering-commands">Registering Commands</a></li>\n<li><a href="#programmatically-executing-commands">Programmatically Executing Commands</a><ul>\n<li><a href="#calling-commands-from-other-commands">Calling Commands From Other Commands</a></li>\n</ul>\n</li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Artisan is the command-line interface included with Laravel. It provides a number of helpful commands that can assist you while you build your application. To view a list of all available Artisan commands, you may use the <code>list</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan <span class="hljs-built_in">list</span></code></pre>\n  <p>Every command also includes a &quot;help&quot; screen which displays and describes the command&#39;s available arguments and options. To view a help screen, precede the name of the command with <code>help</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan <span class="hljs-built_in">help</span> migrate</code></pre>\n  <p><a name="tinker"></a></p>\n\n          <p><a name="tinker-repl-"></a></p>\n          <h3>\n            <a href="#tinker-repl-">\n              Tinker (REPL)\n            </a>\n          </h3><p>Laravel Tinker is a powerful REPL for the Laravel framework, powered by the <router-link to="https://github.com/bobthecow/psysh">PsySH</router-link> package.</p>\n\n          <p><a name="installation"></a></p>\n          <h4>\n            <a href="#installation">\n              Installation\n            </a>\n          </h4><p>All Laravel applications include Tinker by default. However, you may install it manually if needed using Composer:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">composer</span> <span class="hljs-meta">require</span> laravel/tinker</code></pre>\n  \n          <p><a name="usage"></a></p>\n          <h4>\n            <a href="#usage">\n              Usage\n            </a>\n          </h4><p>Tinker allows you to interact with your entire Laravel application on the command line, including the Eloquent ORM, jobs, events, and more. To enter the Tinker environment, run the <code>tinker</code> Artisan command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attribute">php artisan tinker</span></code></pre>\n  <p>You can publish Tinker&#39;s configuration file using the <code>vendor:publish</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan <span class="hljs-string">vendor:</span>publish --provider=<span class="hljs-string">"Laravel\\Tinker\\TinkerServiceProvider"</span></code></pre>\n  <blockquote>\n<p>{note} The <code>dispatch</code> helper function and <code>dispatch</code> method on the <code>Dispatchable</code> class depends on garbage collection to place the job on the queue. Therefore, when using tinker, you should use <code>Bus::dispatch</code> or <code>Queue::push</code> to dispatch jobs.</p>\n</blockquote>\n\n          <p><a name="command-whitelist"></a></p>\n          <h4>\n            <a href="#command-whitelist">\n              Command Whitelist\n            </a>\n          </h4><p>Tinker utilizes a white-list to determine which Artisan commands are allowed to be run within its shell. By default, you may run the <code>clear-compiled</code>, <code>down</code>, <code>env</code>, <code>inspire</code>, <code>migrate</code>, <code>optimize</code>, and <code>up</code> commands. If you would like to white-list more commands you may add them to the <code>commands</code> array in your <code>tinker.php</code> configuration file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'commands\'</span> =&gt; [\n    <span class="hljs-regexp">//</span> App\\Console\\Commands\\ExampleCommand::<span class="hljs-class"><span class="hljs-keyword">class</span>,</span>\n],</code></pre>\n  \n          <p><a name="alias-blacklist"></a></p>\n          <h4>\n            <a href="#alias-blacklist">\n              Alias Blacklist\n            </a>\n          </h4><p>Typically, Tinker automatically aliases classes as you require them in Tinker. However, you may wish to never alias some classes. You may accomplish this by listing the classes in the <code>dont_alias</code> array of your <code>tinker.php</code> configuration file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'dont_alias\'</span> =&gt; [\n    App\\User::<span class="hljs-class"><span class="hljs-keyword">class</span>,\n<span class="hljs-type">]</span>,<span class="hljs-type"></span></span></code></pre>\n  <p><a name="writing-commands"></a></p>\n\n          <p><a name="writing-commands"></a></p>\n          <h2>\n            <a href="#writing-commands">\n              Writing Commands\n            </a>\n          </h2><p>In addition to the commands provided with Artisan, you may also build your own custom commands. Commands are typically stored in the <code>app/Console/Commands</code> directory; however, you are free to choose your own storage location as long as your commands can be loaded by Composer.</p>\n<p><a name="generating-commands"></a></p>\n\n          <p><a name="generating-commands"></a></p>\n          <h3>\n            <a href="#generating-commands">\n              Generating Commands\n            </a>\n          </h3><p>To create a new command, use the <code>make:command</code> Artisan command. This command will create a new command class in the <code>app/Console/Commands</code> directory. Don&#39;t worry if this directory does not exist in your application, since it will be created the first time you run the <code>make:command</code> Artisan command. The generated command will include the default set of properties and methods that are present on all commands:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan make:<span class="hljs-keyword">command</span> <span class="hljs-title">SendEmails</span></code></pre>\n  <p><a name="command-structure"></a></p>\n\n          <p><a name="command-structure"></a></p>\n          <h3>\n            <a href="#command-structure">\n              Command Structure\n            </a>\n          </h3><p>After generating your command, you should fill in the <code>signature</code> and <code>description</code> properties of the class, which will be used when displaying your command on the <code>list</code> screen. The <code>handle</code> method will be called when your command is executed. You may place your command logic in this method.</p>\n<blockquote>\n<p>{tip} For greater code reuse, it is good practice to keep your console commands light and let them defer to application services to accomplish their tasks. In the example below, note that we inject a service class to do the &quot;heavy lifting&quot; of sending the e-mails.</p>\n</blockquote>\n<p>Let&#39;s take a look at an example command. Note that we are able to inject any dependencies we need into the command&#39;s <code>handle</code> method. The Laravel <router-link to="/docs/{{version}}/container">service container</router-link> will automatically inject all dependencies that are type-hinted in this method&#39;s signature:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Console</span>\\<span class="hljs-title">Commands</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">DripEmailer</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Console</span>\\<span class="hljs-title">Command</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SendEmails</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Command</span>\n</span>{\n    <span class="hljs-comment">/**\n     * The name and signature of the console command.\n     *\n     * <span class="hljs-doctag">@var</span> string\n     */</span>\n    <span class="hljs-keyword">protected</span> $signature = <span class="hljs-string">\'email:send {user}\'</span>;\n\n    <span class="hljs-comment">/**\n     * The console command description.\n     *\n     * <span class="hljs-doctag">@var</span> string\n     */</span>\n    <span class="hljs-keyword">protected</span> $description = <span class="hljs-string">\'Send drip e-mails to a user\'</span>;\n\n    <span class="hljs-comment">/**\n     * Create a new command instance.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">parent</span>::__construct();\n    }\n\n    <span class="hljs-comment">/**\n     * Execute the console command.\n     *\n     * <span class="hljs-doctag">@param</span>  \\App\\DripEmailer  $drip\n     * <span class="hljs-doctag">@return</span> mixed\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">(DripEmailer $drip)</span>\n    </span>{\n        $drip-&gt;send(User::find(<span class="hljs-keyword">$this</span>-&gt;argument(<span class="hljs-string">\'user\'</span>)));\n    }\n}</span></code></pre>\n  <p><a name="closure-commands"></a></p>\n\n          <p><a name="closure-commands"></a></p>\n          <h3>\n            <a href="#closure-commands">\n              Closure Commands\n            </a>\n          </h3><p>Closure based commands provide an alternative to defining console commands as classes. In the same way that route Closures are an alternative to controllers, think of command Closures as an alternative to command classes. Within the <code>commands</code> method of your <code>app/Console/Kernel.php</code> file, Laravel loads the <code>routes/console.php</code> file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Register the Closure based commands for the application.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">commands</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">require</span> base_path(<span class="hljs-string">\'routes/console.php\'</span>);\n}</code></pre>\n  <p>Even though this file does not define HTTP routes, it defines console based entry points (routes) into your application. Within this file, you may define all of your Closure based routes using the <code>Artisan::command</code> method. The <code>command</code> method accepts two arguments: the <a href="#defining-input-expectations">command signature</a> and a Closure which receives the commands arguments and options:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Artisan::command(<span class="hljs-string">\'build {project}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($project)</span> </span>{\n    <span class="hljs-keyword">$this</span>-&gt;info(<span class="hljs-string">"Building {$project}!"</span>);\n});</code></pre>\n  <p>The Closure is bound to the underlying command instance, so you have full access to all of the helper methods you would typically be able to access on a full command class.</p>\n\n          <p><a name="type-hinting-dependencies"></a></p>\n          <h4>\n            <a href="#type-hinting-dependencies">\n              Type-Hinting Dependencies\n            </a>\n          </h4><p>In addition to receiving your command&#39;s arguments and options, command Closures may also type-hint additional dependencies that you would like resolved out of the <router-link to="/docs/{{version}}/container">service container</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">DripEmailer</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">User</span>;\n\nArtisan::command(<span class="hljs-string">\'email:send {user}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(DripEmailer $drip, $user)</span> </span>{\n    $drip-&gt;send(User::find($user));\n});</code></pre>\n  \n          <p><a name="closure-command-descriptions"></a></p>\n          <h4>\n            <a href="#closure-command-descriptions">\n              Closure Command Descriptions\n            </a>\n          </h4><p>When defining a Closure based command, you may use the <code>describe</code> method to add a description to the command. This description will be displayed when you run the <code>php artisan list</code> or <code>php artisan help</code> commands:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Artisan::command(<span class="hljs-string">\'build {project}\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($project)</span> </span>{\n    <span class="hljs-keyword">$this</span>-&gt;info(<span class="hljs-string">"Building {$project}!"</span>);\n})-&gt;describe(<span class="hljs-string">\'Build the project\'</span>);</code></pre>\n  <p><a name="defining-input-expectations"></a></p>\n\n          <p><a name="defining-input-expectations"></a></p>\n          <h2>\n            <a href="#defining-input-expectations">\n              Defining Input Expectations\n            </a>\n          </h2><p>When writing console commands, it is common to gather input from the user through arguments or options. Laravel makes it very convenient to define the input you expect from the user using the <code>signature</code> property on your commands. The <code>signature</code> property allows you to define the name, arguments, and options for the command in a single, expressive, route-like syntax.</p>\n<p><a name="arguments"></a></p>\n\n          <p><a name="arguments"></a></p>\n          <h3>\n            <a href="#arguments">\n              Arguments\n            </a>\n          </h3><p>All user supplied arguments and options are wrapped in curly braces. In the following example, the command defines one <strong>required</strong> argument: <code>user</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * The name and signature of the console command.\n *\n * <span class="hljs-doctag">@var</span> string\n */</span>\n<span class="hljs-keyword">protected</span> $signature = <span class="hljs-string">\'email:send {user}\'</span>;</code></pre>\n  <p>You may also make arguments optional and define default values for arguments:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Optional argument...</span>\n<span class="hljs-symbol">email:</span><span class="hljs-class">send </span>{user?}\n\n<span class="hljs-comment">// Optional argument with default value...</span>\n<span class="hljs-symbol">email:</span><span class="hljs-class">send </span>{user=foo}</code></pre>\n  <p><a name="options"></a></p>\n\n          <p><a name="options"></a></p>\n          <h3>\n            <a href="#options">\n              Options\n            </a>\n          </h3><p>Options, like arguments, are another form of user input. Options are prefixed by two hyphens (<code>--</code>) when they are specified on the command line. There are two types of options: those that receive a value and those that don&#39;t. Options that don&#39;t receive a value serve as a boolean &quot;switch&quot;. Let&#39;s take a look at an example of this type of option:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * The name and signature of the console command.\n *\n * <span class="hljs-doctag">@var</span> string\n */</span>\n<span class="hljs-keyword">protected</span> $signature = <span class="hljs-string">\'email:send {user} {--queue}\'</span>;</code></pre>\n  <p>In this example, the <code>--queue</code> switch may be specified when calling the Artisan command. If the <code>--queue</code> switch is passed, the value of the option will be <code>true</code>. Otherwise, the value will be <code>false</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan email:<span class="hljs-built_in">send</span> <span class="hljs-number">1</span> <span class="hljs-comment">--queue</span></code></pre>\n  <p><a name="options-with-values"></a></p>\n\n          <p><a name="options-with-values"></a></p>\n          <h4>\n            <a href="#options-with-values">\n              Options With Values\n            </a>\n          </h4><p>Next, let&#39;s take a look at an option that expects a value. If the user must specify a value for an option, suffix the option name with a <code>=</code> sign:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * The name and signature of the console command.\n *\n * <span class="hljs-doctag">@var</span> string\n */</span>\n<span class="hljs-keyword">protected</span> $signature = <span class="hljs-string">\'email:send {user} {--queue=}\'</span>;</code></pre>\n  <p>In this example, the user may pass a value for the option like so:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan email:send <span class="hljs-number">1</span> --<span class="hljs-built_in">queue</span>=<span class="hljs-keyword">default</span></code></pre>\n  <p>You may assign default values to options by specifying the default value after the option name. If no option value is passed by the user, the default value will be used:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="xml">email:send </span><span class="hljs-template-variable">{user}</span><span class="xml"> </span><span class="hljs-template-variable">{--queue=<span class="hljs-keyword">default</span>}</span><span class="xml"></span></code></pre>\n  <p><a name="option-shortcuts"></a></p>\n\n          <p><a name="option-shortcuts"></a></p>\n          <h4>\n            <a href="#option-shortcuts">\n              Option Shortcuts\n            </a>\n          </h4><p>To assign a shortcut when defining an option, you may specify it before the option name and use a | delimiter to separate the shortcut from the full option name:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">email:</span><span class="hljs-class">send </span>{user} {--Q|queue}</code></pre>\n  <p><a name="input-arrays"></a></p>\n\n          <p><a name="input-arrays"></a></p>\n          <h3>\n            <a href="#input-arrays">\n              Input Arrays\n            </a>\n          </h3><p>If you would like to define arguments or options to expect array inputs, you may use the <code>*</code> character. First, let&#39;s take a look at an example that specifies an array argument:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">email:</span><span class="hljs-class">send </span>{user*}</code></pre>\n  <p>When calling this method, the <code>user</code> arguments may be passed in order to the command line. For example, the following command will set the value of <code>user</code> to <code>[&#39;foo&#39;, &#39;bar&#39;]</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan email:<span class="hljs-built_in">send</span> foo bar</code></pre>\n  <p>When defining an option that expects an array input, each option value passed to the command should be prefixed with the option name:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">email:send {user} {<span class="hljs-attribute">--id</span>=*}\n\nphp artisan email:send <span class="hljs-attribute">--id</span>=1 <span class="hljs-attribute">--id</span>=2</code></pre>\n  <p><a name="input-descriptions"></a></p>\n\n          <p><a name="input-descriptions"></a></p>\n          <h3>\n            <a href="#input-descriptions">\n              Input Descriptions\n            </a>\n          </h3><p>You may assign descriptions to input arguments and options by separating the parameter from the description using a colon. If you need a little extra room to define your command, feel free to spread the definition across multiple lines:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">/**\n * The name <span class="hljs-keyword">and</span> signature <span class="hljs-keyword">of</span> the console command.\n *\n * @var string\n */\n<span class="hljs-keyword">protected</span> $signature = <span class="hljs-symbol">\'email</span>:send\n                        {user : <span class="hljs-type">The</span> ID <span class="hljs-keyword">of</span> the user}\n                        {<span class="hljs-comment">--queue= : Whether the job should be queued}\';</span></code></pre>\n  <p><a name="command-io"></a></p>\n\n          <p><a name="command-i-o"></a></p>\n          <h2>\n            <a href="#command-i-o">\n              Command I/O\n            </a>\n          </h2><p><a name="retrieving-input"></a></p>\n\n          <p><a name="retrieving-input"></a></p>\n          <h3>\n            <a href="#retrieving-input">\n              Retrieving Input\n            </a>\n          </h3><p>While your command is executing, you will obviously need to access the values for the arguments and options accepted by your command. To do so, you may use the <code>argument</code> and <code>option</code> methods:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Execute the console command.\n *\n * <span class="hljs-doctag">@return</span> mixed\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span>\n</span>{\n    $userId = <span class="hljs-keyword">$this</span>-&gt;argument(<span class="hljs-string">\'user\'</span>);\n\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p>If you need to retrieve all of the arguments as an <code>array</code>, call the <code>arguments</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$arguments</span> = <span class="hljs-variable">$this</span>-&gt;arguments();</code></pre>\n  <p>Options may be retrieved just as easily as arguments using the <code>option</code> method. To retrieve all of the options as an array, call the <code>options</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Retrieve a specific option...</span>\n$queueName = <span class="hljs-keyword">$this</span>-&gt;option(<span class="hljs-string">\'queue\'</span>);\n\n<span class="hljs-comment">// Retrieve all options...</span>\n$options = <span class="hljs-keyword">$this</span>-&gt;options();</code></pre>\n  <p>If the argument or option does not exist, <code>null</code> will be returned.</p>\n<p><a name="prompting-for-input"></a></p>\n\n          <p><a name="prompting-for-input"></a></p>\n          <h3>\n            <a href="#prompting-for-input">\n              Prompting For Input\n            </a>\n          </h3><p>In addition to displaying output, you may also ask the user to provide input during the execution of your command. The <code>ask</code> method will prompt the user with the given question, accept their input, and then return the user&#39;s input back to your command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Execute the console command.\n *\n * <span class="hljs-doctag">@return</span> mixed\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span>\n</span>{\n    $name = <span class="hljs-keyword">$this</span>-&gt;ask(<span class="hljs-string">\'What is your name?\'</span>);\n}</code></pre>\n  <p>The <code>secret</code> method is similar to <code>ask</code>, but the user&#39;s input will not be visible to them as they type in the console. This method is useful when asking for sensitive information such as a password:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$password</span> = <span class="hljs-variable">$this</span>-&gt;secret(<span class="hljs-string">\'What is the password?\'</span>);</code></pre>\n  \n          <p><a name="asking-for-confirmation"></a></p>\n          <h4>\n            <a href="#asking-for-confirmation">\n              Asking For Confirmation\n            </a>\n          </h4><p>If you need to ask the user for a simple confirmation, you may use the <code>confirm</code> method. By default, this method will return <code>false</code>. However, if the user enters <code>y</code> or <code>yes</code> in response to the prompt, the method will return <code>true</code>.</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$this</span>-&gt;<span class="hljs-keyword">confirm</span>(\'<span class="hljs-keyword">Do</span> you wish to <span class="hljs-keyword">continue</span>?\')) {\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  \n          <p><a name="auto-completion"></a></p>\n          <h4>\n            <a href="#auto-completion">\n              Auto-Completion\n            </a>\n          </h4><p>The <code>anticipate</code> method can be used to provide auto-completion for possible choices. The user can still choose any answer, regardless of the auto-completion hints:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$name</span> = <span class="hljs-variable">$this</span>-&gt;anticipate(<span class="hljs-string">\'What is your name?\'</span>, [<span class="hljs-string">\'Taylor\'</span>, <span class="hljs-string">\'Dayle\'</span>]);</code></pre>\n  <p>Alternatively, you may pass a Closure as the second argument to the <code>anticipate</code> method. The Closure will be called each time the user types an input character. The Closure should accept a string parameter containing the user&#39;s input so far, and return an array of options for auto-completion:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$name = <span class="hljs-keyword">$this</span>-&gt;anticipate(<span class="hljs-string">\'What is your name?\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($input)</span> </span>{\n    <span class="hljs-comment">// Return auto-completion options...</span>\n});</code></pre>\n  \n          <p><a name="multiple-choice-questions"></a></p>\n          <h4>\n            <a href="#multiple-choice-questions">\n              Multiple Choice Questions\n            </a>\n          </h4><p>If you need to give the user a predefined set of choices, you may use the <code>choice</code> method. You may set the array index of the default value to be returned if no option is chosen:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$name</span> = <span class="hljs-variable">$this</span>-&gt;choice(<span class="hljs-string">\'What is your name?\'</span>, [<span class="hljs-string">\'Taylor\'</span>, <span class="hljs-string">\'Dayle\'</span>], <span class="hljs-variable">$defaultIndex</span>);</code></pre>\n  <p><a name="writing-output"></a></p>\n\n          <p><a name="writing-output"></a></p>\n          <h3>\n            <a href="#writing-output">\n              Writing Output\n            </a>\n          </h3><p>To send output to the console, use the <code>line</code>, <code>info</code>, <code>comment</code>, <code>question</code> and <code>error</code> methods. Each of these methods will use appropriate ANSI colors for their purpose. For example, let&#39;s display some general information to the user. Typically, the <code>info</code> method will display in the console as green text:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Execute the console command.\n *\n * <span class="hljs-doctag">@return</span> mixed\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;info(<span class="hljs-string">\'Display this on the screen\'</span>);\n}</code></pre>\n  <p>To display an error message, use the <code>error</code> method. Error message text is typically displayed in red:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-keyword">this</span>-&gt;<span class="hljs-keyword">error</span>(<span class="hljs-string">\'Something went wrong!\'</span>);</code></pre>\n  <p>If you would like to display plain, uncolored console output, use the <code>line</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$this</span>-&gt;<span class="hljs-keyword">line</span>(\'<span class="hljs-keyword">Display</span> this <span class="hljs-keyword">on</span> the screen\');</code></pre>\n  \n          <p><a name="table-layouts"></a></p>\n          <h4>\n            <a href="#table-layouts">\n              Table Layouts\n            </a>\n          </h4><p>The <code>table</code> method makes it easy to correctly format multiple rows / columns of data. Just pass in the headers and rows to the method. The width and height will be dynamically calculated based on the given data:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$headers</span> = [<span class="hljs-string">\'Name\'</span>, <span class="hljs-string">\'Email\'</span>];\n\n<span class="hljs-variable">$users</span> = App\\User::all([<span class="hljs-string">\'name\'</span>, <span class="hljs-string">\'email\'</span>])-&gt;toArray();\n\n<span class="hljs-variable">$this</span>-&gt;table(<span class="hljs-variable">$headers</span>, <span class="hljs-variable">$users</span>);</code></pre>\n  \n          <p><a name="progress-bars"></a></p>\n          <h4>\n            <a href="#progress-bars">\n              Progress Bars\n            </a>\n          </h4><p>For long running tasks, it could be helpful to show a progress indicator. Using the output object, we can start, advance and stop the Progress Bar. First, define the total number of steps the process will iterate through. Then, advance the Progress Bar after processing each item:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$users = App\\User::all();\n\n$bar = <span class="hljs-keyword">$this</span>-&gt;output-&gt;createProgressBar(count($users));\n\n$bar-&gt;start();\n\n<span class="hljs-keyword">foreach</span> ($users <span class="hljs-keyword">as</span> $user) {\n    <span class="hljs-keyword">$this</span>-&gt;performTask($user);\n\n    $bar-&gt;advance();\n}\n\n$bar-&gt;finish();</code></pre>\n  <p>For more advanced options, check out the <router-link to="https://symfony.com/doc/current/components/console/helpers/progressbar.html">Symfony Progress Bar component documentation</router-link>.</p>\n<p><a name="registering-commands"></a></p>\n\n          <p><a name="registering-commands"></a></p>\n          <h2>\n            <a href="#registering-commands">\n              Registering Commands\n            </a>\n          </h2><p>Because of the <code>load</code> method call in your console kernel&#39;s <code>commands</code> method, all commands within the <code>app/Console/Commands</code> directory will automatically be registered with Artisan. In fact, you are free to make additional calls to the <code>load</code> method to scan other directories for Artisan commands:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Register the commands for the application.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">commands</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;load(<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">\'/Commands\'</span>);\n    <span class="hljs-keyword">$this</span>-&gt;load(<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">\'/MoreCommands\'</span>);\n\n    <span class="hljs-comment">// ...</span>\n}</code></pre>\n  <p>You may also manually register commands by adding its class name to the <code>$commands</code> property of your <code>app/Console/Kernel.php</code> file. When Artisan boots, all the commands listed in this property will be resolved by the <router-link to="/docs/{{version}}/container">service container</router-link> and registered with Artisan:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">protected $commands = [\n    Commands\\SendEmails::<span class="hljs-class"><span class="hljs-keyword">class</span></span>\n];</code></pre>\n  <p><a name="programmatically-executing-commands"></a></p>\n\n          <p><a name="programmatically-executing-commands"></a></p>\n          <h2>\n            <a href="#programmatically-executing-commands">\n              Programmatically Executing Commands\n            </a>\n          </h2><p>Sometimes you may wish to execute an Artisan command outside of the CLI. For example, you may wish to fire an Artisan command from a route or controller. You may use the <code>call</code> method on the <code>Artisan</code> facade to accomplish this. The <code>call</code> method accepts either the command&#39;s name or class as the first argument, and an array of command parameters as the second argument. The exit code will be returned:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'/foo\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    $exitCode = Artisan::call(<span class="hljs-string">\'email:send\'</span>, [\n        <span class="hljs-string">\'user\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">\'--queue\'</span> =&gt; <span class="hljs-string">\'default\'</span>\n    ]);\n\n    <span class="hljs-comment">//</span>\n});</code></pre>\n  <p>Alternatively, you may pass the entire Artisan command to the <code>call</code> method as a string:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Artisan::<span class="hljs-keyword">call</span>(<span class="hljs-string">\'email:send 1 --queue=default\'</span>);</code></pre>\n  <p>Using the <code>queue</code> method on the <code>Artisan</code> facade, you may even queue Artisan commands so they are processed in the background by your <router-link to="/docs/{{version}}/queues">queue workers</router-link>. Before using this method, make sure you have configured your queue and are running a queue listener:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'/foo\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    Artisan::queue(<span class="hljs-string">\'email:send\'</span>, [\n        <span class="hljs-string">\'user\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">\'--queue\'</span> =&gt; <span class="hljs-string">\'default\'</span>\n    ]);\n\n    <span class="hljs-comment">//</span>\n});</code></pre>\n  <p>You may also specify the connection or queue the Artisan command should be dispatched to:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Artisan::queue(<span class="hljs-string">\'email:send\'</span>, [\n    <span class="hljs-string">\'user\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">\'--queue\'</span> =&gt; <span class="hljs-string">\'default\'</span>\n])-&gt;onConnection(<span class="hljs-string">\'redis\'</span>)-&gt;onQueue(<span class="hljs-string">\'commands\'</span>);</code></pre>\n  \n          <p><a name="passing-array-values"></a></p>\n          <h4>\n            <a href="#passing-array-values">\n              Passing Array Values\n            </a>\n          </h4><p>If your command defines an option that accepts an array, you may pass an array of values to that option:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'/foo\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    $exitCode = Artisan::call(<span class="hljs-string">\'email:send\'</span>, [\n        <span class="hljs-string">\'user\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">\'--id\'</span> =&gt; [<span class="hljs-number">5</span>, <span class="hljs-number">13</span>]\n    ]);\n});</code></pre>\n  \n          <p><a name="passing-boolean-values"></a></p>\n          <h4>\n            <a href="#passing-boolean-values">\n              Passing Boolean Values\n            </a>\n          </h4><p>If you need to specify the value of an option that does not accept string values, such as the <code>--force</code> flag on the <code>migrate:refresh</code> command, you should pass <code>true</code> or <code>false</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$exitCode = Artisan::call(<span class="hljs-string">\'migrate:refresh\'</span>, [\n    <span class="hljs-string">\'--force\'</span> =&gt; <span class="hljs-keyword">true</span>,\n]);</code></pre>\n  <p><a name="calling-commands-from-other-commands"></a></p>\n\n          <p><a name="calling-commands-from-other-commands"></a></p>\n          <h3>\n            <a href="#calling-commands-from-other-commands">\n              Calling Commands From Other Commands\n            </a>\n          </h3><p>Sometimes you may wish to call other commands from an existing Artisan command. You may do so using the <code>call</code> method. This <code>call</code> method accepts the command name and an array of command parameters:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Execute the console command.\n *\n * <span class="hljs-doctag">@return</span> mixed\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;call(<span class="hljs-string">\'email:send\'</span>, [\n        <span class="hljs-string">\'user\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">\'--queue\'</span> =&gt; <span class="hljs-string">\'default\'</span>\n    ]);\n\n    <span class="hljs-comment">//</span>\n}</code></pre>\n  <p>If you would like to call another console command and suppress all of its output, you may use the <code>callSilent</code> method. The <code>callSilent</code> method has the same signature as the <code>call</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">$this</span>-&gt;callSilent(<span class="hljs-string">\'email:send\'</span>, [\n    <span class="hljs-string">\'user\'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">\'--queue\'</span> =&gt; <span class="hljs-string">\'default\'</span>\n]);</code></pre>\n  '},f9af:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="service-providers"></a></p>\n          <h1>\n            <a href="#service-providers">\n              Service Providers\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#writing-service-providers">Writing Service Providers</a><ul>\n<li><a href="#the-register-method">The Register Method</a></li>\n<li><a href="#the-boot-method">The Boot Method</a></li>\n</ul>\n</li>\n<li><a href="#registering-providers">Registering Providers</a></li>\n<li><a href="#deferred-providers">Deferred Providers</a></li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Service providers are the central place of all Laravel application bootstrapping. Your own application, as well as all of Laravel&#39;s core services are bootstrapped via service providers.</p>\n<p>But, what do we mean by &quot;bootstrapped&quot;? In general, we mean <strong>registering</strong> things, including registering service container bindings, event listeners, middleware, and even routes. Service providers are the central place to configure your application.</p>\n<p>If you open the <code>config/app.php</code> file included with Laravel, you will see a <code>providers</code> array. These are all of the service provider classes that will be loaded for your application. Note that many of these are &quot;deferred&quot; providers, meaning they will not be loaded on every request, but only when the services they provide are actually needed.</p>\n<p>In this overview you will learn how to write your own service providers and register them with your Laravel application.</p>\n<p><a name="writing-service-providers"></a></p>\n\n          <p><a name="writing-service-providers"></a></p>\n          <h2>\n            <a href="#writing-service-providers">\n              Writing Service Providers\n            </a>\n          </h2><p>All service providers extend the <code>Illuminate\\Support\\ServiceProvider</code> class. Most service providers contain a <code>register</code> and a <code>boot</code> method. Within the <code>register</code> method, you should <strong>only bind things into the <router-link to="/docs/{{version}}/container">service container</router-link></strong>. You should never attempt to register any event listeners, routes, or any other piece of functionality within the <code>register</code> method.</p>\n<p>The Artisan CLI can generate a new provider via the <code>make:provider</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">make</span><span class="hljs-selector-pseudo">:provider</span> <span class="hljs-selector-tag">RiakServiceProvider</span></code></pre>\n  <p><a name="the-register-method"></a></p>\n\n          <p><a name="the-register-method"></a></p>\n          <h3>\n            <a href="#the-register-method">\n              The Register Method\n            </a>\n          </h3><p>As mentioned previously, within the <code>register</code> method, you should only bind things into the <router-link to="/docs/{{version}}/container">service container</router-link>. You should never attempt to register any event listeners, routes, or any other piece of functionality within the <code>register</code> method. Otherwise, you may accidentally use a service that is provided by a service provider which has not loaded yet.</p>\n<p>Let&#39;s take a look at a basic service provider. Within any of your service provider methods, you always have access to the <code>$app</code> property which provides access to the service container:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Providers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">ServiceProvider</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Riak</span>\\<span class="hljs-title">Connection</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RiakServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Register any application services.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">$this</span>-&gt;app-&gt;singleton(Connection::class, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($app)</span> </span>{\n            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Connection(config(<span class="hljs-string">\'riak\'</span>));\n        });\n    }\n}</span></code></pre>\n  <p>This service provider only defines a <code>register</code> method, and uses that method to define an implementation of <code>Riak\\Connection</code> in the service container. If you don&#39;t understand how the service container works, check out <router-link to="/docs/{{version}}/container">its documentation</router-link>.</p>\n\n          <p><a name="the-code-bindings-code-and-code-singletons-code-properties"></a></p>\n          <h4>\n            <a href="#the-code-bindings-code-and-code-singletons-code-properties">\n              The <code>bindings</code> And <code>singletons</code> Properties\n            </a>\n          </h4><p>If your service provider registers many simple bindings, you may wish to use the <code>bindings</code> and <code>singletons</code> properties instead of manually registering each container binding. When the service provider is loaded by the framework, it will automatically check for these properties and register their bindings:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Providers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">DowntimeNotifier</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">ServerProvider</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Services</span>\\<span class="hljs-title">DigitalOceanServerProvider</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Services</span>\\<span class="hljs-title">PingdomDowntimeNotifier</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Services</span>\\<span class="hljs-title">ServerToolsProvider</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">ServiceProvider</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>\n</span>{\n    <span class="hljs-comment">/**\n     * All of the container bindings that should be registered.\n     *\n     * <span class="hljs-doctag">@var</span> array\n     */</span>\n    <span class="hljs-keyword">public</span> $bindings = [\n        ServerProvider::class =&gt; DigitalOceanServerProvider::class,\n    ];\n\n    <span class="hljs-comment">/**\n     * All of the container singletons that should be registered.\n     *\n     * <span class="hljs-doctag">@var</span> array\n     */</span>\n    <span class="hljs-keyword">public</span> $singletons = [\n        DowntimeNotifier::class =&gt; PingdomDowntimeNotifier::class,\n        ServerToolsProvider::class =&gt; ServerToolsProvider::class,\n    ];\n}</span></code></pre>\n  <p><a name="the-boot-method"></a></p>\n\n          <p><a name="the-boot-method"></a></p>\n          <h3>\n            <a href="#the-boot-method">\n              The Boot Method\n            </a>\n          </h3><p>So, what if we need to register a <router-link to="/docs/{{version}}/views#view-composers">view composer</router-link> within our service provider? This should be done within the <code>boot</code> method. <strong>This method is called after all other service providers have been registered</strong>, meaning you have access to all other services that have been registered by the framework:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Providers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">ServiceProvider</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ComposerServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Bootstrap any application services.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n    </span>{\n        view()-&gt;composer(<span class="hljs-string">\'view\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n            <span class="hljs-comment">//</span>\n        });\n    }\n}</span></code></pre>\n  \n          <p><a name="boot-method-dependency-injection"></a></p>\n          <h4>\n            <a href="#boot-method-dependency-injection">\n              Boot Method Dependency Injection\n            </a>\n          </h4><p>You may type-hint dependencies for your service provider&#39;s <code>boot</code> method. The <router-link to="/docs/{{version}}/container">service container</router-link> will automatically inject any dependencies you need:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">Routing</span>\\<span class="hljs-title">ResponseFactory</span>;\n\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">(ResponseFactory $response)</span>\n</span>{\n    $response-&gt;macro(<span class="hljs-string">\'caps\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($value)</span> </span>{\n        <span class="hljs-comment">//</span>\n    });\n}</code></pre>\n  <p><a name="registering-providers"></a></p>\n\n          <p><a name="registering-providers"></a></p>\n          <h2>\n            <a href="#registering-providers">\n              Registering Providers\n            </a>\n          </h2><p>All service providers are registered in the <code>config/app.php</code> configuration file. This file contains a <code>providers</code> array where you can list the class names of your service providers. By default, a set of Laravel core service providers are listed in this array. These providers bootstrap the core Laravel components, such as the mailer, queue, cache, and others.</p>\n<p>To register your provider, add it to the array:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'providers\'</span> =&gt; [\n    <span class="hljs-comment">// Other Service Providers</span>\n\n    App\\Providers\\ComposerServiceProvider::<span class="hljs-class"><span class="hljs-keyword">class</span>,\n<span class="hljs-type">]</span>,<span class="hljs-type"></span></span></code></pre>\n  <p><a name="deferred-providers"></a></p>\n\n          <p><a name="deferred-providers"></a></p>\n          <h2>\n            <a href="#deferred-providers">\n              Deferred Providers\n            </a>\n          </h2><p>If your provider is <strong>only</strong> registering bindings in the <router-link to="/docs/{{version}}/container">service container</router-link>, you may choose to defer its registration until one of the registered bindings is actually needed. Deferring the loading of such a provider will improve the performance of your application, since it is not loaded from the filesystem on every request.</p>\n<p>Laravel compiles and stores a list of all of the services supplied by deferred service providers, along with the name of its service provider class. Then, only when you attempt to resolve one of these services does Laravel load the service provider.</p>\n<p>To defer the loading of a provider, implement the <code>\\Illuminate\\Contracts\\Support\\DeferrableProvider</code> interface and define a <code>provides</code> method. The <code>provides</code> method should return the service container bindings registered by the provider:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Providers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Contracts</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">DeferrableProvider</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">ServiceProvider</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Riak</span>\\<span class="hljs-title">Connection</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RiakServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">DeferrableProvider</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Register any application services.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">$this</span>-&gt;app-&gt;singleton(Connection::class, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($app)</span> </span>{\n            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Connection($app[<span class="hljs-string">\'config\'</span>][<span class="hljs-string">\'riak\'</span>]);\n        });\n    }\n\n    <span class="hljs-comment">/**\n     * Get the services provided by the provider.\n     *\n     * <span class="hljs-doctag">@return</span> array\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">provides</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> [Connection::class];\n    }\n}</span></code></pre>\n  '},fac8:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="laravel-telescope"></a></p>\n          <h1>\n            <a href="#laravel-telescope">\n              Laravel Telescope\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#installation">Installation</a><ul>\n<li><a href="#configuration">Configuration</a></li>\n<li><a href="#data-pruning">Data Pruning</a></li>\n<li><a href="#migration-customization">Migration Customization</a></li>\n</ul>\n</li>\n<li><a href="#dashboard-authorization">Dashboard Authorization</a></li>\n<li><a href="#filtering">Filtering</a><ul>\n<li><a href="#filtering-entries">Entries</a></li>\n<li><a href="#filtering-batches">Batches</a></li>\n</ul>\n</li>\n<li><a href="#tagging">Tagging</a></li>\n<li><a href="#available-watchers">Available Watchers</a><ul>\n<li><a href="#cache-watcher">Cache Watcher</a></li>\n<li><a href="#command-watcher">Command Watcher</a></li>\n<li><a href="#dump-watcher">Dump Watcher</a></li>\n<li><a href="#event-watcher">Event Watcher</a></li>\n<li><a href="#exception-watcher">Exception Watcher</a></li>\n<li><a href="#gate-watcher">Gate Watcher</a></li>\n<li><a href="#job-watcher">Job Watcher</a></li>\n<li><a href="#log-watcher">Log Watcher</a></li>\n<li><a href="#mail-watcher">Mail Watcher</a></li>\n<li><a href="#model-watcher">Model Watcher</a></li>\n<li><a href="#notification-watcher">Notification Watcher</a></li>\n<li><a href="#query-watcher">Query Watcher</a></li>\n<li><a href="#redis-watcher">Redis Watcher</a></li>\n<li><a href="#request-watcher">Request Watcher</a></li>\n<li><a href="#schedule-watcher">Schedule Watcher</a></li>\n</ul>\n</li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Laravel Telescope is an elegant debug assistant for the Laravel framework. Telescope provides insight into the requests coming into your application, exceptions, log entries, database queries, queued jobs, mail, notifications, cache operations, scheduled tasks, variable dumps and more. Telescope makes a wonderful companion to your local Laravel development environment.</p>\n<p align="center">\n<img src="https://res.cloudinary.com/dtfbvvkyp/image/upload/v1539110860/Screen_Shot_2018-10-09_at_1.47.23_PM.png" width="600">\n</p>\n\n<p><a name="installation"></a></p>\n\n          <p><a name="installation"></a></p>\n          <h2>\n            <a href="#installation">\n              Installation\n            </a>\n          </h2><p>You may use Composer to install Telescope into your Laravel project:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">composer</span> <span class="hljs-meta">require</span> laravel/telescope</code></pre>\n  <p>After installing Telescope, publish its assets using the <code>telescope:install</code> Artisan command. After installing Telescope, you should also run the <code>migrate</code> command:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-attr">php</span> <span class="hljs-string">artisan telescope:install</span>\n\n<span class="hljs-attr">php</span> <span class="hljs-string">artisan migrate</span></code></pre>\n  \n          <p><a name="updating-telescope"></a></p>\n          <h4>\n            <a href="#updating-telescope">\n              Updating Telescope\n            </a>\n          </h4><p>When updating Telescope, you should re-publish Telescope&#39;s assets:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-selector-tag">php</span> <span class="hljs-selector-tag">artisan</span> <span class="hljs-selector-tag">telescope</span><span class="hljs-selector-pseudo">:publish</span></code></pre>\n  \n          <p><a name="installing-only-in-specific-environments"></a></p>\n          <h3>\n            <a href="#installing-only-in-specific-environments">\n              Installing Only In Specific Environments\n            </a>\n          </h3><p>If you plan to only use Telescope to assist your local development, you may install Telescope using the <code>--dev</code> flag:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">composer <span class="hljs-built_in">require</span> laravel/telescope <span class="hljs-comment">--dev</span></code></pre>\n  <p>After running <code>telescope:install</code>, you should remove the <code>TelescopeServiceProvider</code> service provider registration from your <code>app</code> configuration file. Instead, manually register the service provider in the <code>register</code> method of your <code>AppServiceProvider</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Register any application services.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;app-&gt;isLocal()) {\n        <span class="hljs-keyword">$this</span>-&gt;app-&gt;register(TelescopeServiceProvider::class);\n    }\n}</code></pre>\n  <p><a name="migration-customization"></a></p>\n\n          <p><a name="migration-customization"></a></p>\n          <h3>\n            <a href="#migration-customization">\n              Migration Customization\n            </a>\n          </h3><p>If you are not going to use Telescope&#39;s default migrations, you should call the <code>Telescope::ignoreMigrations</code> method in the <code>register</code> method of your <code>AppServiceProvider</code>. You may export the default migrations using the <code>php artisan vendor:publish --tag=telescope-migrations</code> command.</p>\n<p><a name="configuration"></a></p>\n\n          <p><a name="configuration"></a></p>\n          <h3>\n            <a href="#configuration">\n              Configuration\n            </a>\n          </h3><p>After publishing Telescope&#39;s assets, its primary configuration file will be located at <code>config/telescope.php</code>. This configuration file allows you to configure your watcher options and each configuration option includes a description of its purpose, so be sure to thoroughly explore this file.</p>\n<p>If desired, you may disable Telescope&#39;s data collection entirely using the <code>enabled</code> configuration option:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'enabled\'</span> =&gt; env(<span class="hljs-string">\'TELESCOPE_ENABLED\'</span>, <span class="hljs-keyword">true</span>),</code></pre>\n  <p><a name="data-pruning"></a></p>\n\n          <p><a name="data-pruning"></a></p>\n          <h3>\n            <a href="#data-pruning">\n              Data Pruning\n            </a>\n          </h3><p>Without pruning, the <code>telescope_entries</code> table can accumulate records very quickly. To mitigate this, you should schedule the <code>telescope:prune</code> Artisan command to run daily:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$schedule</span>-&gt;command(<span class="hljs-string">\'telescope:prune\'</span>)-&gt;daily();</code></pre>\n  <p>By default, all entries older than 24 hours will be pruned. You may use the <code>hours</code> option when calling the command to determine how long to retain Telescope data. For example, the following command will delete all records created over 48 hours ago:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$schedule</span>-&gt;command(<span class="hljs-string">\'telescope:prune --hours=48\'</span>)-&gt;daily();</code></pre>\n  <p><a name="dashboard-authorization"></a></p>\n\n          <p><a name="dashboard-authorization"></a></p>\n          <h2>\n            <a href="#dashboard-authorization">\n              Dashboard Authorization\n            </a>\n          </h2><p>Telescope exposes a dashboard at <code>/telescope</code>. By default, you will only be able to access this dashboard in the <code>local</code> environment. Within your <code>app/Providers/TelescopeServiceProvider.php</code> file, there is a <code>gate</code> method. This authorization gate controls access to Telescope in <strong>non-local</strong> environments. You are free to modify this gate as needed to restrict access to your Telescope installation:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Register the Telescope gate.\n *\n * This gate determines who can access Telescope in non-local environments.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">gate</span><span class="hljs-params">()</span>\n</span>{\n    Gate::define(<span class="hljs-string">\'viewTelescope\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($user)</span> </span>{\n        <span class="hljs-keyword">return</span> in_array($user-&gt;email, [\n            <span class="hljs-string">\'taylor@laravel.com\'</span>,\n        ]);\n    });\n}</code></pre>\n  <p><a name="filtering"></a></p>\n\n          <p><a name="filtering"></a></p>\n          <h2>\n            <a href="#filtering">\n              Filtering\n            </a>\n          </h2><p><a name="filtering-entries"></a></p>\n\n          <p><a name="entries"></a></p>\n          <h3>\n            <a href="#entries">\n              Entries\n            </a>\n          </h3><p>You may filter the data that is recorded by Telescope via the <code>filter</code> callback that is registered in your <code>TelescopeServiceProvider</code>. By default, this callback records all data in the <code>local</code> environment and exceptions, failed jobs, scheduled tasks, and data with monitored tags in all other environments:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">/**\n * Register any application services.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;hideSensitiveRequestDetails();\n\n    Telescope::filter(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(IncomingEntry $entry)</span> </span>{\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;app-&gt;isLocal()) {\n            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;\n        }\n\n        <span class="hljs-keyword">return</span> $entry-&gt;isReportableException() ||\n            $entry-&gt;isFailedJob() ||\n            $entry-&gt;isScheduledTask() ||\n            $entry-&gt;hasMonitoredTag();\n    });\n}</code></pre>\n  <p><a name="filtering-batches"></a></p>\n\n          <p><a name="batches"></a></p>\n          <h3>\n            <a href="#batches">\n              Batches\n            </a>\n          </h3><p>While the <code>filter</code> callback filters data for individual entries, you may use the <code>filterBatch</code> method to register a callback that filters all data for a given request or console command. If the callback returns <code>true</code>, all of the entries are recorded by Telescope:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Collection</span>;\n\n<span class="hljs-comment">/**\n * Register any application services.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;hideSensitiveRequestDetails();\n\n    Telescope::filterBatch(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Collection $entries)</span> </span>{\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;app-&gt;isLocal()) {\n            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;\n        }\n\n        <span class="hljs-keyword">return</span> $entries-&gt;contains(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($entry)</span> </span>{\n            <span class="hljs-keyword">return</span> $entry-&gt;isReportableException() ||\n                $entry-&gt;isFailedJob() ||\n                $entry-&gt;isScheduledTask() ||\n                $entry-&gt;hasMonitoredTag();\n            });\n    });\n}</code></pre>\n  <p><a name="tagging"></a></p>\n\n          <p><a name="tagging"></a></p>\n          <h2>\n            <a href="#tagging">\n              Tagging\n            </a>\n          </h2><p>Telescope allows you to search entries by &quot;tag&quot;. Often, tags are Eloquent model class names or authenticated user IDs which Telescope automatically adds to entries. Occasionally, you may want to attach your own custom tags to entries. To accomplish this, you may use the <code>Telescope::tag</code> method. The <code>tag</code> method accepts a callback which should return an array of tags. The tags returned by the callback will be merged with any tags Telescope would automatically attach to the entry. You should call the <code>tag</code> method within your <code>TelescopeServiceProvider</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Laravel</span>\\<span class="hljs-title">Telescope</span>\\<span class="hljs-title">Telescope</span>;\n\n<span class="hljs-comment">/**\n * Register any application services.\n *\n * <span class="hljs-doctag">@return</span> void\n */</span>\n<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span>\n</span>{\n    <span class="hljs-keyword">$this</span>-&gt;hideSensitiveRequestDetails();\n\n    Telescope::tag(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(IncomingEntry $entry)</span> </span>{\n        <span class="hljs-keyword">if</span> ($entry-&gt;type === <span class="hljs-string">\'request\'</span>) {\n            <span class="hljs-keyword">return</span> [<span class="hljs-string">\'status:\'</span>.$entry-&gt;content[<span class="hljs-string">\'response_status\'</span>]];\n        }\n\n        <span class="hljs-keyword">return</span> [];\n    });\n }</code></pre>\n  <p><a name="available-watchers"></a></p>\n\n          <p><a name="available-watchers"></a></p>\n          <h2>\n            <a href="#available-watchers">\n              Available Watchers\n            </a>\n          </h2><p>Telescope watchers gather application data when a request or console command is executed. You may customize the list of watchers that you would like to enable within your <code>config/telescope.php</code> configuration file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'watchers\'</span> =&gt; [\n    <span class="hljs-type">Watchers</span>\\<span class="hljs-type">CacheWatcher</span>::<span class="hljs-keyword">class</span> =&gt; <span class="hljs-literal">true</span>,\n    <span class="hljs-type">Watchers</span>\\<span class="hljs-type">CommandWatcher</span>::<span class="hljs-keyword">class</span> =&gt; <span class="hljs-literal">true</span>,\n    ...\n],</code></pre>\n  <p>Some watchers also allow you to provide additional customization options:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'watchers\'</span> =&gt; [\n    <span class="hljs-type">Watchers</span>\\<span class="hljs-type">QueryWatcher</span>::<span class="hljs-keyword">class</span> =&gt; [\n        <span class="hljs-symbol">\'enabled\'</span> =&gt; env(<span class="hljs-symbol">\'TELESCOPE_QUERY_WATCHER\'</span>, <span class="hljs-literal">true</span>),\n        <span class="hljs-symbol">\'slow\'</span> =&gt; <span class="hljs-number">100</span>,\n    ],\n    ...\n],</code></pre>\n  <p><a name="cache-watcher"></a></p>\n\n          <p><a name="cache-watcher"></a></p>\n          <h3>\n            <a href="#cache-watcher">\n              Cache Watcher\n            </a>\n          </h3><p>The cache watcher records data when a cache key is hit, missed, updated and forgotten.</p>\n<p><a name="command-watcher"></a></p>\n\n          <p><a name="command-watcher"></a></p>\n          <h3>\n            <a href="#command-watcher">\n              Command Watcher\n            </a>\n          </h3><p>The command watcher records the arguments, options, exit code, and output whenever an Artisan command is executed. If you would like to exclude certain commands from being recorded by the watcher, you may specify the command in the <code>ignore</code> option in your <code>config/telescope.php</code> file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'watchers\'</span> =&gt; [\n    <span class="hljs-type">Watchers</span>\\<span class="hljs-type">CommandWatcher</span>::<span class="hljs-keyword">class</span> =&gt; [\n        <span class="hljs-symbol">\'enabled\'</span> =&gt; env(<span class="hljs-symbol">\'TELESCOPE_COMMAND_WATCHER\'</span>, <span class="hljs-literal">true</span>),\n        <span class="hljs-symbol">\'ignore\'</span> =&gt; [<span class="hljs-symbol">\'key</span>:generate\'],\n    ],\n    ...\n],</code></pre>\n  <p><a name="dump-watcher"></a></p>\n\n          <p><a name="dump-watcher"></a></p>\n          <h3>\n            <a href="#dump-watcher">\n              Dump Watcher\n            </a>\n          </h3><p>The dump watcher records and displays your variable dumps in Telescope. When using Laravel, variables may be dumped using the global <code>dump</code> function. The dump watcher tab must be open in a browser for the recording to occur, otherwise the dumps will be ignored by the watcher.</p>\n<p><a name="event-watcher"></a></p>\n\n          <p><a name="event-watcher"></a></p>\n          <h3>\n            <a href="#event-watcher">\n              Event Watcher\n            </a>\n          </h3><p>The event watcher records the payload, listeners, and broadcast data for any events dispatched by your application. The Laravel framework&#39;s internal events are ignored by the Event watcher.</p>\n<p><a name="exception-watcher"></a></p>\n\n          <p><a name="exception-watcher"></a></p>\n          <h3>\n            <a href="#exception-watcher">\n              Exception Watcher\n            </a>\n          </h3><p>The exception watcher records the data and stack trace for any reportable Exceptions that are thrown by your application.</p>\n<p><a name="gate-watcher"></a></p>\n\n          <p><a name="gate-watcher"></a></p>\n          <h3>\n            <a href="#gate-watcher">\n              Gate Watcher\n            </a>\n          </h3><p>The gate watcher records the data and result of gate and policy checks by your application. If you would like to exclude certain abilities from being recorded by the watcher, you may specify those in the <code>ignore_abilities</code> option in your <code>config/telescope.php</code> file:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'watchers\'</span> =&gt; [\n    <span class="hljs-type">Watchers</span>\\<span class="hljs-type">GateWatcher</span>::<span class="hljs-keyword">class</span> =&gt; [\n        <span class="hljs-symbol">\'enabled\'</span> =&gt; env(<span class="hljs-symbol">\'TELESCOPE_GATE_WATCHER\'</span>, <span class="hljs-literal">true</span>),\n        <span class="hljs-symbol">\'ignore_abilities\'</span> =&gt; [<span class="hljs-symbol">\'viewNova\'</span>],\n    ],\n    ...\n],</code></pre>\n  <p><a name="job-watcher"></a></p>\n\n          <p><a name="job-watcher"></a></p>\n          <h3>\n            <a href="#job-watcher">\n              Job Watcher\n            </a>\n          </h3><p>The job watcher records the data and status of any jobs dispatched by your application.</p>\n<p><a name="log-watcher"></a></p>\n\n          <p><a name="log-watcher"></a></p>\n          <h3>\n            <a href="#log-watcher">\n              Log Watcher\n            </a>\n          </h3><p>The log watcher records the log data for any logs written by your application.</p>\n<p><a name="mail-watcher"></a></p>\n\n          <p><a name="mail-watcher"></a></p>\n          <h3>\n            <a href="#mail-watcher">\n              Mail Watcher\n            </a>\n          </h3><p>The mail watcher allows you to view an in-browser preview of the emails along with their associated data. You may also download the email as an <code>.eml</code> file.</p>\n<p><a name="model-watcher"></a></p>\n\n          <p><a name="model-watcher"></a></p>\n          <h3>\n            <a href="#model-watcher">\n              Model Watcher\n            </a>\n          </h3><p>The model watcher records model changes whenever an Eloquent <code>created</code>, <code>updated</code>, <code>restored</code>, or <code>deleted</code> event is dispatched. You may specify which model events should be recorded via the watcher&#39;s <code>events</code> option:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-string">\'watchers\'</span> =&gt; [\n    Watchers\\ModelWatcher::class =&gt; [\n        <span class="hljs-string">\'enabled\'</span> =&gt; env(<span class="hljs-string">\'TELESCOPE_MODEL_WATCHER\'</span>, <span class="hljs-keyword">true</span>),\n        <span class="hljs-string">\'events\'</span> =&gt; [<span class="hljs-string">\'eloquent.created*\'</span>, <span class="hljs-string">\'eloquent.updated*\'</span>],\n    ],\n    ...\n],</code></pre>\n  <p><a name="notification-watcher"></a></p>\n\n          <p><a name="notification-watcher"></a></p>\n          <h3>\n            <a href="#notification-watcher">\n              Notification Watcher\n            </a>\n          </h3><p>The notification watcher records all notifications sent by your application. If the notification triggers an email and you have the mail watcher enabled, the email will also be available for preview on the mail watcher screen.</p>\n<p><a name="query-watcher"></a></p>\n\n          <p><a name="query-watcher"></a></p>\n          <h3>\n            <a href="#query-watcher">\n              Query Watcher\n            </a>\n          </h3><p>The query watcher records the raw SQL, bindings, and execution time for all queries that are executed by your application. The watcher also tags any queries slower than 100ms as <code>slow</code>. You may customize the slow query threshold using the watcher&#39;s <code>slow</code> option:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'watchers\'</span> =&gt; [\n    <span class="hljs-type">Watchers</span>\\<span class="hljs-type">QueryWatcher</span>::<span class="hljs-keyword">class</span> =&gt; [\n        <span class="hljs-symbol">\'enabled\'</span> =&gt; env(<span class="hljs-symbol">\'TELESCOPE_QUERY_WATCHER\'</span>, <span class="hljs-literal">true</span>),\n        <span class="hljs-symbol">\'slow\'</span> =&gt; <span class="hljs-number">50</span>,\n    ],\n    ...\n],</code></pre>\n  <p><a name="redis-watcher"></a></p>\n\n          <p><a name="redis-watcher"></a></p>\n          <h3>\n            <a href="#redis-watcher">\n              Redis Watcher\n            </a>\n          </h3><blockquote>\n<p>{note} Redis events must be enabled for the Redis watcher to function. You may enable Redis events by calling <code>Redis::enableEvents()</code> in the <code>boot</code> method of your <code>app/Providers/AppServiceProvider.php</code> file.</p>\n</blockquote>\n<p>The Redis watcher records all Redis commands executed by your application. If you are using Redis for caching, cache commands will also be recorded by the Redis Watcher.</p>\n<p><a name="request-watcher"></a></p>\n\n          <p><a name="request-watcher"></a></p>\n          <h3>\n            <a href="#request-watcher">\n              Request Watcher\n            </a>\n          </h3><p>The request watcher records the request, headers, session, and response data associated with any requests handled by the application. You may limit your response data via the <code>size_limit</code> (in KB) option:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-symbol">\'watchers\'</span> =&gt; [\n    <span class="hljs-type">Watchers</span>\\<span class="hljs-type">RequestWatcher</span>::<span class="hljs-keyword">class</span> =&gt; [\n        <span class="hljs-symbol">\'enabled\'</span> =&gt; env(<span class="hljs-symbol">\'TELESCOPE_REQUEST_WATCHER\'</span>, <span class="hljs-literal">true</span>),\n        <span class="hljs-symbol">\'size_limit\'</span> =&gt; env(<span class="hljs-symbol">\'TELESCOPE_RESPONSE_SIZE_LIMIT\'</span>, <span class="hljs-number">64</span>),\n    ],\n    ...\n],</code></pre>\n  <p><a name="schedule-watcher"></a></p>\n\n          <p><a name="schedule-watcher"></a></p>\n          <h3>\n            <a href="#schedule-watcher">\n              Schedule Watcher\n            </a>\n          </h3><p>The schedule watcher records the command and output of any scheduled tasks run by your application.</p>\n'},fc70:function(s,e,a){"use strict";a.r(e),e["default"]='\n          <p><a name="http-session"></a></p>\n          <h1>\n            <a href="#http-session">\n              HTTP Session\n            </a>\n          </h1><ul>\n<li><a href="#introduction">Introduction</a><ul>\n<li><a href="#configuration">Configuration</a></li>\n<li><a href="#driver-prerequisites">Driver Prerequisites</a></li>\n</ul>\n</li>\n<li><a href="#using-the-session">Using The Session</a><ul>\n<li><a href="#retrieving-data">Retrieving Data</a></li>\n<li><a href="#storing-data">Storing Data</a></li>\n<li><a href="#flash-data">Flash Data</a></li>\n<li><a href="#deleting-data">Deleting Data</a></li>\n<li><a href="#regenerating-the-session-id">Regenerating The Session ID</a></li>\n</ul>\n</li>\n<li><a href="#adding-custom-session-drivers">Adding Custom Session Drivers</a><ul>\n<li><a href="#implementing-the-driver">Implementing The Driver</a></li>\n<li><a href="#registering-the-driver">Registering The Driver</a></li>\n</ul>\n</li>\n</ul>\n<p><a name="introduction"></a></p>\n\n          <p><a name="introduction"></a></p>\n          <h2>\n            <a href="#introduction">\n              Introduction\n            </a>\n          </h2><p>Since HTTP driven applications are stateless, sessions provide a way to store information about the user across multiple requests. Laravel ships with a variety of session backends that are accessed through an expressive, unified API. Support for popular backends such as <router-link to="https://memcached.org">Memcached</router-link>, <router-link to="https://redis.io">Redis</router-link>, and databases is included out of the box.</p>\n<p><a name="configuration"></a></p>\n\n          <p><a name="configuration"></a></p>\n          <h3>\n            <a href="#configuration">\n              Configuration\n            </a>\n          </h3><p>The session configuration file is stored at <code>config/session.php</code>. Be sure to review the options available to you in this file. By default, Laravel is configured to use the <code>file</code> session driver, which will work well for many applications. In production applications, you may consider using the <code>memcached</code> or <code>redis</code> drivers for even faster session performance.</p>\n<p>The session <code>driver</code> configuration option defines where session data will be stored for each request. Laravel ships with several great drivers out of the box:</p>\n<div class="content-list" markdown="1">\n- `file` - sessions are stored in `storage/framework/sessions`.\n- `cookie` - sessions are stored in secure, encrypted cookies.\n- `database` - sessions are stored in a relational database.\n- `memcached` / `redis` - sessions are stored in one of these fast, cache based stores.\n- `array` - sessions are stored in a PHP array and will not be persisted.\n</div>\n\n<blockquote>\n<p>{tip} The array driver is used during <router-link to="/docs/{{version}}/testing">testing</router-link> and prevents the data stored in the session from being persisted.</p>\n</blockquote>\n<p><a name="driver-prerequisites"></a></p>\n\n          <p><a name="driver-prerequisites"></a></p>\n          <h3>\n            <a href="#driver-prerequisites">\n              Driver Prerequisites\n            </a>\n          </h3>\n          <p><a name="database"></a></p>\n          <h4>\n            <a href="#database">\n              Database\n            </a>\n          </h4><p>When using the <code>database</code> session driver, you will need to create a table to contain the session items. Below is an example <code>Schema</code> declaration for the table:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Schema::create(<span class="hljs-string">\'sessions\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($table)</span> </span>{\n    $table-&gt;string(<span class="hljs-string">\'id\'</span>)-&gt;unique();\n    $table-&gt;unsignedInteger(<span class="hljs-string">\'user_id\'</span>)-&gt;nullable();\n    $table-&gt;string(<span class="hljs-string">\'ip_address\'</span>, <span class="hljs-number">45</span>)-&gt;nullable();\n    $table-&gt;text(<span class="hljs-string">\'user_agent\'</span>)-&gt;nullable();\n    $table-&gt;text(<span class="hljs-string">\'payload\'</span>);\n    $table-&gt;integer(<span class="hljs-string">\'last_activity\'</span>);\n});</code></pre>\n  <p>You may use the <code>session:table</code> Artisan command to generate this migration:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">php artisan session:<span class="hljs-keyword">table</span>\n\nphp artisan migrate</code></pre>\n  \n          <p><a name="redis"></a></p>\n          <h4>\n            <a href="#redis">\n              Redis\n            </a>\n          </h4><p>Before using Redis sessions with Laravel, you will need to either install the PhpRedis PHP extension via PECL or install the <code>predis/predis</code> package (~1.0) via Composer. For more information on configuring Redis, consult its <router-link to="/docs/{{version}}/redis#configuration">Laravel documentation page</router-link>.</p>\n<blockquote>\n<p>{tip} In the <code>session</code> configuration file, the <code>connection</code> option may be used to specify which Redis connection is used by the session.</p>\n</blockquote>\n<p><a name="using-the-session"></a></p>\n\n          <p><a name="using-the-session"></a></p>\n          <h2>\n            <a href="#using-the-session">\n              Using The Session\n            </a>\n          </h2><p><a name="retrieving-data"></a></p>\n\n          <p><a name="retrieving-data"></a></p>\n          <h3>\n            <a href="#retrieving-data">\n              Retrieving Data\n            </a>\n          </h3><p>There are two primary ways of working with session data in Laravel: the global <code>session</code> helper and via a <code>Request</code> instance. First, let&#39;s look at accessing the session via a <code>Request</code> instance, which can be type-hinted on a controller method. Remember, controller method dependencies are automatically injected via the Laravel <router-link to="/docs/{{version}}/container">service container</router-link>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Controllers</span>\\<span class="hljs-title">Controller</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Http</span>\\<span class="hljs-title">Request</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Show the profile for the given user.\n     *\n     * <span class="hljs-doctag">@param</span>  Request  $request\n     * <span class="hljs-doctag">@param</span>  int  $id\n     * <span class="hljs-doctag">@return</span> Response\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span><span class="hljs-params">(Request $request, $id)</span>\n    </span>{\n        $value = $request-&gt;session()-&gt;get(<span class="hljs-string">\'key\'</span>);\n\n        <span class="hljs-comment">//</span>\n    }\n}</span></code></pre>\n  <p>When you retrieve an item from the session, you may also pass a default value as the second argument to the <code>get</code> method. This default value will be returned if the specified key does not exist in the session. If you pass a <code>Closure</code> as the default value to the <code>get</code> method and the requested key does not exist, the <code>Closure</code> will be executed and its result returned:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$value = $request-&gt;session()-&gt;get(<span class="hljs-string">\'key\'</span>, <span class="hljs-string">\'default\'</span>);\n\n$value = $request-&gt;session()-&gt;get(<span class="hljs-string">\'key\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-string">\'default\'</span>;\n});</code></pre>\n  \n          <p><a name="the-global-session-helper"></a></p>\n          <h4>\n            <a href="#the-global-session-helper">\n              The Global Session Helper\n            </a>\n          </h4><p>You may also use the global <code>session</code> PHP function to retrieve and store data in the session. When the <code>session</code> helper is called with a single, string argument, it will return the value of that session key. When the helper is called with an array of key / value pairs, those values will be stored in the session:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">Route::get(<span class="hljs-string">\'home\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    <span class="hljs-comment">// Retrieve a piece of data from the session...</span>\n    $value = session(<span class="hljs-string">\'key\'</span>);\n\n    <span class="hljs-comment">// Specifying a default value...</span>\n    $value = session(<span class="hljs-string">\'key\'</span>, <span class="hljs-string">\'default\'</span>);\n\n    <span class="hljs-comment">// Store a piece of data in the session...</span>\n    session([<span class="hljs-string">\'key\'</span> =&gt; <span class="hljs-string">\'value\'</span>]);\n});</code></pre>\n  <blockquote>\n<p>{tip} There is little practical difference between using the session via an HTTP request instance versus using the global <code>session</code> helper. Both methods are <router-link to="/docs/{{version}}/testing">testable</router-link> via the <code>assertSessionHas</code> method which is available in all of your test cases.</p>\n</blockquote>\n\n          <p><a name="retrieving-all-session-data"></a></p>\n          <h4>\n            <a href="#retrieving-all-session-data">\n              Retrieving All Session Data\n            </a>\n          </h4><p>If you would like to retrieve all the data in the session, you may use the <code>all</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$data</span> = <span class="hljs-variable">$request</span>-&gt;session()-&gt;all();</code></pre>\n  \n          <p><a name="determining-if-an-item-exists-in-the-session"></a></p>\n          <h4>\n            <a href="#determining-if-an-item-exists-in-the-session">\n              Determining If An Item Exists In The Session\n            </a>\n          </h4><p>To determine if an item is present in the session, you may use the <code>has</code> method. The <code>has</code> method returns <code>true</code> if the item is present and is not <code>null</code>:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> <span class="hljs-function"><span class="hljs-params">($request-&gt;session()-&gt;has(<span class="hljs-string">\'users\'</span>))</span> {\n    //\n}</span></code></pre>\n  <p>To determine if an item is present in the session, even if its value is <code>null</code>, you may use the <code>exists</code> method. The <code>exists</code> method returns <code>true</code> if the item is present:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-keyword">if</span> <span class="hljs-function"><span class="hljs-params">($request-&gt;session()-&gt;exists(<span class="hljs-string">\'users\'</span>))</span> {\n    //\n}</span></code></pre>\n  <p><a name="storing-data"></a></p>\n\n          <p><a name="storing-data"></a></p>\n          <h3>\n            <a href="#storing-data">\n              Storing Data\n            </a>\n          </h3><p>To store data in the session, you will typically use the <code>put</code> method or the <code>session</code> helper:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Via a request instance...</span>\n$request-&gt;session()-&gt;put(<span class="hljs-string">\'key\'</span>, <span class="hljs-string">\'value\'</span>);\n\n<span class="hljs-comment">// Via the global helper...</span>\nsession([<span class="hljs-string">\'key\'</span> =&gt; <span class="hljs-string">\'value\'</span>]);</code></pre>\n  \n          <p><a name="pushing-to-array-session-values"></a></p>\n          <h4>\n            <a href="#pushing-to-array-session-values">\n              Pushing To Array Session Values\n            </a>\n          </h4><p>The <code>push</code> method may be used to push a new value onto a session value that is an array. For example, if the <code>user.teams</code> key contains an array of team names, you may push a new value onto the array like so:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-function"><span class="hljs-title">request</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">session</span>()-&gt;</span>push(<span class="hljs-string">\'user.teams\'</span>, <span class="hljs-string">\'developers\'</span>);</code></pre>\n  \n          <p><a name="retrieving-amp-deleting-an-item"></a></p>\n          <h4>\n            <a href="#retrieving-amp-deleting-an-item">\n              Retrieving &amp; Deleting An Item\n            </a>\n          </h4><p>The <code>pull</code> method will retrieve and delete an item from the session in a single statement:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-variable">$value</span> = <span class="hljs-variable">$request</span>-&gt;session()-&gt;pull(<span class="hljs-string">\'key\'</span>, <span class="hljs-string">\'default\'</span>);</code></pre>\n  <p><a name="flash-data"></a></p>\n\n          <p><a name="flash-data"></a></p>\n          <h3>\n            <a href="#flash-data">\n              Flash Data\n            </a>\n          </h3><p>Sometimes you may wish to store items in the session only for the next request. You may do so using the <code>flash</code> method. Data stored in the session using this method will be available immediately and during the subsequent HTTP request. After the subsequent HTTP request, the flashed data will be deleted. Flash data is primarily useful for short-lived status messages:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-function"><span class="hljs-title">request</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">session</span>()-&gt;</span>flash(<span class="hljs-string">\'status\'</span>, <span class="hljs-string">\'Task was successful!\'</span>);</code></pre>\n  <p>If you need to keep your flash data around for several requests, you may use the <code>reflash</code> method, which will keep all of the flash data for an additional request. If you only need to keep specific flash data, you may use the <code>keep</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-function"><span class="hljs-title">request</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">session</span>()-&gt;</span>reflash();\n\n$<span class="hljs-function"><span class="hljs-title">request</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">session</span>()-&gt;</span>keep([<span class="hljs-string">\'username\'</span>, <span class="hljs-string">\'email\'</span>]);</code></pre>\n  <p><a name="deleting-data"></a></p>\n\n          <p><a name="deleting-data"></a></p>\n          <h3>\n            <a href="#deleting-data">\n              Deleting Data\n            </a>\n          </h3><p>The <code>forget</code> method will remove a piece of data from the session. If you would like to remove all data from the session, you may use the <code>flush</code> method:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="hljs-comment">// Forget a single key...</span>\n$<span class="hljs-function"><span class="hljs-title">request</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">session</span>()-&gt;</span>forget(<span class="hljs-string">\'key\'</span>);\n\n<span class="hljs-comment">// Forget multiple keys...</span>\n$<span class="hljs-function"><span class="hljs-title">request</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">session</span>()-&gt;</span>forget([<span class="hljs-string">\'key1\'</span>, <span class="hljs-string">\'key2\'</span>]);\n\n$<span class="hljs-function"><span class="hljs-title">request</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">session</span>()-&gt;</span>flush();</code></pre>\n  <p><a name="regenerating-the-session-id"></a></p>\n\n          <p><a name="regenerating-the-session-id"></a></p>\n          <h3>\n            <a href="#regenerating-the-session-id">\n              Regenerating The Session ID\n            </a>\n          </h3><p>Regenerating the session ID is often done in order to prevent malicious users from exploiting a <router-link to="https://en.wikipedia.org/wiki/Session_fixation">session fixation</router-link> attack on your application.</p>\n<p>Laravel automatically regenerates the session ID during authentication if you are using the built-in <code>LoginController</code>; however, if you need to manually regenerate the session ID, you may use the <code>regenerate</code> method.</p>\n\n    <pre class="language-php" v-pre><code class="language-php">$<span class="hljs-function"><span class="hljs-title">request</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">session</span>()-&gt;</span>regenerate();</code></pre>\n  <p><a name="adding-custom-session-drivers"></a></p>\n\n          <p><a name="adding-custom-session-drivers"></a></p>\n          <h2>\n            <a href="#adding-custom-session-drivers">\n              Adding Custom Session Drivers\n            </a>\n          </h2><p><a name="implementing-the-driver"></a></p>\n\n          <p><a name="implementing-the-driver"></a></p>\n          <h4>\n            <a href="#implementing-the-driver">\n              Implementing The Driver\n            </a>\n          </h4><p>Your custom session driver should implement the <code>SessionHandlerInterface</code>. This interface contains just a few simple methods we need to implement. A stubbed MongoDB implementation looks something like this:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Extensions</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MongoSessionHandler</span> <span class="hljs-keyword">implements</span> \\<span class="hljs-title">SessionHandlerInterface</span>\n</span>{\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">open</span><span class="hljs-params">($savePath, $sessionName)</span> </span>{}\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>{}\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span><span class="hljs-params">($sessionId)</span> </span>{}\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span><span class="hljs-params">($sessionId, $data)</span> </span>{}\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">destroy</span><span class="hljs-params">($sessionId)</span> </span>{}\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">gc</span><span class="hljs-params">($lifetime)</span> </span>{}\n}</span></code></pre>\n  <blockquote>\n<p>{tip} Laravel does not ship with a directory to contain your extensions. You are free to place them anywhere you like. In this example, we have created an <code>Extensions</code> directory to house the <code>MongoSessionHandler</code>.</p>\n</blockquote>\n<p>Since the purpose of these methods is not readily understandable, let&#39;s quickly cover what each of the methods do:</p>\n<div class="content-list" markdown="1">\n- The `open` method would typically be used in file based session store systems. Since Laravel ships with a `file` session driver, you will almost never need to put anything in this method. You can leave it as an empty stub. It is a fact of poor interface design (which we\'ll discuss later) that PHP requires us to implement this method.\n- The `close` method, like the `open` method, can also usually be disregarded. For most drivers, it is not needed.\n- The `read` method should return the string version of the session data associated with the given `$sessionId`. There is no need to do any serialization or other encoding when retrieving or storing session data in your driver, as Laravel will perform the serialization for you.\n- The `write` method should write the given `$data` string associated with the `$sessionId` to some persistent storage system, such as MongoDB, Dynamo, etc.  Again, you should not perform any serialization - Laravel will have already handled that for you.\n- The `destroy` method should remove the data associated with the `$sessionId` from persistent storage.\n- The `gc` method should destroy all session data that is older than the given `$lifetime`, which is a UNIX timestamp. For self-expiring systems like Memcached and Redis, this method may be left empty.\n</div>\n\n<p><a name="registering-the-driver"></a></p>\n\n          <p><a name="registering-the-driver"></a></p>\n          <h4>\n            <a href="#registering-the-driver">\n              Registering The Driver\n            </a>\n          </h4><p>Once your driver has been implemented, you are ready to register it with the framework. To add additional drivers to Laravel&#39;s session backend, you may use the <code>extend</code> method on the <code>Session</code> <router-link to="/docs/{{version}}/facades">facade</router-link>. You should call the <code>extend</code> method from the <code>boot</code> method of a <router-link to="/docs/{{version}}/providers">service provider</router-link>. You may do this from the existing <code>AppServiceProvider</code> or create an entirely new provider:</p>\n\n    <pre class="language-php" v-pre><code class="language-php"><span class="php"><span class="hljs-meta">&lt;?php</span>\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Providers</span>;\n\n<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\\<span class="hljs-title">Extensions</span>\\<span class="hljs-title">MongoSessionHandler</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">Facades</span>\\<span class="hljs-title">Session</span>;\n<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\\<span class="hljs-title">Support</span>\\<span class="hljs-title">ServiceProvider</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SessionServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>\n</span>{\n    <span class="hljs-comment">/**\n     * Register any application services.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-comment">//</span>\n    }\n\n    <span class="hljs-comment">/**\n     * Bootstrap any application services.\n     *\n     * <span class="hljs-doctag">@return</span> void\n     */</span>\n    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>\n    </span>{\n        Session::extend(<span class="hljs-string">\'mongo\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($app)</span> </span>{\n            <span class="hljs-comment">// Return implementation of SessionHandlerInterface...</span>\n            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MongoSessionHandler;\n        });\n    }\n}</span></code></pre>\n  <p>Once the session driver has been registered, you may use the <code>mongo</code> driver in your <code>config/session.php</code> configuration file.</p>\n'},fee4:function(s,e,a){"use strict";var n=a("38ec"),t=a.n(n);t.a}});
//# sourceMappingURL=app.3e621133.js.map